class MPSuperTokenAuthenticator{AMOUNT_ELEMENT_ID="mp-amount";PLATFORM_ID=wc_mercadopago_supertoken_authenticator_params.platform_id;ableToUseSuperToken=null;amountUsed=null;authenticator=null;userClosedModal=!1;mpSdkInstance=null;mpSuperTokenPaymentMethods=null;mpSuperTokenMetrics=null;constructor(t,e,r){this.mpSdkInstance=t,this.mpSuperTokenPaymentMethods=e,this.mpSuperTokenMetrics=r}reset(){this.ableToUseSuperToken=null}isAbleToUseSuperToken(){return!0===this.ableToUseSuperToken}emailAlreadyVerified(){return null!==this.ableToUseSuperToken}getAmountUsed(){return this.amountUsed}isUserClosedModalError(t){return"NO_USER_CONFIRMATION"===t?.errorCode}storeUserClosedModal(){this.userClosedModal=!0}isUserClosedModal(){return this.userClosedModal}storeAuthenticator(t){this.authenticator=t}getStoredAuthenticator(){return this.authenticator}async buildAuthenticator(t,e){this.amountUsed=t;return await this.mpSdkInstance.authenticator(t,e,{platformId:this.PLATFORM_ID})}async canUseSuperTokenFlow(t,e){try{const r=await this.buildAuthenticator(t,e);return this.ableToUseSuperToken=!0,this.mpSuperTokenMetrics.canUseSuperToken(!0),!!r}catch(t){return this.ableToUseSuperToken=!1,!1}}async renderAccountPaymentMethods(t){try{const e=await this.mpSuperTokenPaymentMethods.getAccountPaymentMethods(t);if(!e?.data.length)throw new Error("EMPTY_ACCOUNT_PAYMENT_METHODS");this.mpSuperTokenPaymentMethods.renderAccountPaymentMethods(e.data,this.amountUsed)}catch(t){this.mpSuperTokenMetrics.errorToRenderAccountPaymentMethods(t)}}async showAuthenticator(t,e=null){try{const r=await t.show(e);await this.renderAccountPaymentMethods(r)}catch(t){this.isUserClosedModalError(t)&&this.storeUserClosedModal(),this.mpSuperTokenMetrics.errorToShowAuthenticator(t)}}async authenticate(t,e,r=null){if(!1===this.ableToUseSuperToken)return;const o=await this.buildAuthenticator(t,e);this.mpSuperTokenMetrics.canUseSuperToken(!0),await this.showAuthenticator(o,r)}async getPreloadedPaymentMethods(t,e){try{const r=await this.buildAuthenticator(t,e),o=await r.getPreloadedPaymentMethods();if(!o?.length)throw new Error("EMPTY_PRELOADED_PAYMENT_METHODS");return this.storeAuthenticator(r),o}catch(t){this.mpSuperTokenMetrics.errorToGetPreloadedPaymentMethods(t)}}async showAuthenticatorWithPreloadedPaymentMethods(){try{const t=await this.getStoredAuthenticator().show({confirmationLocation:"app",skipAllUserConfirmation:!0});await this.renderAccountPaymentMethods(t)}catch(t){this.mpSuperTokenMetrics.errorToShowAuthenticator(t)}}}