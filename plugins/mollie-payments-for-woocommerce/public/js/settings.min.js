/******/ (() => { // webpackBootstrap
var __webpack_exports__ = {};
/*!**********************************!*\
  !*** ./resources/js/settings.js ***!
  \**********************************/
(function (_ref) {
  var _ = _ref._,
    mollieSettingsData = _ref.mollieSettingsData,
    jQuery = _ref.jQuery;
  var _mollieSettingsData$c = mollieSettingsData.current_section,
    current_section = _mollieSettingsData$c === void 0 ? false : _mollieSettingsData$c;
  jQuery(function ($) {
    if (_.isEmpty(mollieSettingsData)) {
      return;
    }
    var gatewayName = current_section;
    if (!gatewayName) {
      return;
    }
    var fixedField = $('#' + gatewayName + '_fixed_fee').closest('tr');
    var percentField = $('#' + gatewayName + '_percentage').closest('tr');
    var limitField = $('#' + gatewayName + '_surcharge_limit').closest('tr');
    var maxField = $('#' + gatewayName + '_maximum_limit').closest('tr');
    $('#' + gatewayName + '_payment_surcharge').change(function () {
      switch ($(this).val()) {
        case 'no_fee':
          fixedField.hide();
          percentField.hide();
          limitField.hide();
          maxField.hide();
          break;
        case 'fixed_fee':
          fixedField.show();
          maxField.show();
          percentField.hide();
          limitField.hide();
          break;
        case 'percentage':
          fixedField.hide();
          maxField.show();
          percentField.show();
          limitField.show();
          break;
        case 'fixed_fee_percentage':
        default:
          fixedField.show();
          percentField.show();
          limitField.show();
          maxField.show();
      }
    }).change();
  });
})(window);
/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2V0dGluZ3MubWluLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsQ0FDSSxVQUFBQSxJQUFBLEVBQ0E7RUFBQSxJQURXQyxDQUFDLEdBQUFELElBQUEsQ0FBREMsQ0FBQztJQUFFQyxrQkFBa0IsR0FBQUYsSUFBQSxDQUFsQkUsa0JBQWtCO0lBQUVDLE1BQU0sR0FBQUgsSUFBQSxDQUFORyxNQUFNO0VBRXBDLElBQUFDLHFCQUFBLEdBQWtDRixrQkFBa0IsQ0FBN0NHLGVBQWU7SUFBZkEsZUFBZSxHQUFBRCxxQkFBQSxjQUFHLEtBQUssR0FBQUEscUJBQUE7RUFDOUJELE1BQU0sQ0FBQyxVQUFTRyxDQUFDLEVBQUU7SUFFZixJQUFHTCxDQUFDLENBQUNNLE9BQU8sQ0FBQ0wsa0JBQWtCLENBQUMsRUFBQztNQUM3QjtJQUNKO0lBQ0EsSUFBTU0sV0FBVyxHQUFHSCxlQUFlO0lBQ25DLElBQUcsQ0FBQ0csV0FBVyxFQUFDO01BQ1o7SUFDSjtJQUNBLElBQUlDLFVBQVUsR0FBR0gsQ0FBQyxDQUFDLEdBQUcsR0FBQ0UsV0FBVyxHQUFDLFlBQVksQ0FBQyxDQUFDRSxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQzlELElBQUlDLFlBQVksR0FBR0wsQ0FBQyxDQUFDLEdBQUcsR0FBQ0UsV0FBVyxHQUFDLGFBQWEsQ0FBQyxDQUFDRSxPQUFPLENBQUMsSUFBSSxDQUFDO0lBQ2pFLElBQUlFLFVBQVUsR0FBR04sQ0FBQyxDQUFDLEdBQUcsR0FBQ0UsV0FBVyxHQUFDLGtCQUFrQixDQUFDLENBQUNFLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFDcEUsSUFBSUcsUUFBUSxHQUFHUCxDQUFDLENBQUMsR0FBRyxHQUFDRSxXQUFXLEdBQUMsZ0JBQWdCLENBQUMsQ0FBQ0UsT0FBTyxDQUFDLElBQUksQ0FBQztJQUVoRUosQ0FBQyxDQUFDLEdBQUcsR0FBQ0UsV0FBVyxHQUFDLG9CQUFvQixDQUFDLENBQUNNLE1BQU0sQ0FBQyxZQUFXO01BQ3RELFFBQVFSLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQ1MsR0FBRyxDQUFDLENBQUM7UUFDakIsS0FBSyxRQUFRO1VBQ1ROLFVBQVUsQ0FBQ08sSUFBSSxDQUFDLENBQUM7VUFDakJMLFlBQVksQ0FBQ0ssSUFBSSxDQUFDLENBQUM7VUFDbkJKLFVBQVUsQ0FBQ0ksSUFBSSxDQUFDLENBQUM7VUFDakJILFFBQVEsQ0FBQ0csSUFBSSxDQUFDLENBQUM7VUFDZjtRQUNKLEtBQUssV0FBVztVQUNaUCxVQUFVLENBQUNRLElBQUksQ0FBQyxDQUFDO1VBQ2pCSixRQUFRLENBQUNJLElBQUksQ0FBQyxDQUFDO1VBQ2ZOLFlBQVksQ0FBQ0ssSUFBSSxDQUFDLENBQUM7VUFDbkJKLFVBQVUsQ0FBQ0ksSUFBSSxDQUFDLENBQUM7VUFDakI7UUFDSixLQUFLLFlBQVk7VUFDYlAsVUFBVSxDQUFDTyxJQUFJLENBQUMsQ0FBQztVQUNqQkgsUUFBUSxDQUFDSSxJQUFJLENBQUMsQ0FBQztVQUNmTixZQUFZLENBQUNNLElBQUksQ0FBQyxDQUFDO1VBQ25CTCxVQUFVLENBQUNLLElBQUksQ0FBQyxDQUFDO1VBQ2pCO1FBQ0osS0FBSyxzQkFBc0I7UUFDM0I7VUFDSVIsVUFBVSxDQUFDUSxJQUFJLENBQUMsQ0FBQztVQUNqQk4sWUFBWSxDQUFDTSxJQUFJLENBQUMsQ0FBQztVQUNuQkwsVUFBVSxDQUFDSyxJQUFJLENBQUMsQ0FBQztVQUNqQkosUUFBUSxDQUFDSSxJQUFJLENBQUMsQ0FBQztNQUN2QjtJQUNKLENBQUMsQ0FBQyxDQUFDSCxNQUFNLENBQUMsQ0FBQztFQUNmLENBQUMsQ0FBQztBQUNOLENBQUMsRUFHREksTUFDSixDQUFDLEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tb2xsaWUtcGF5bWVudHMtZm9yLXdvb2NvbW1lcmNlLy4vcmVzb3VyY2VzL2pzL3NldHRpbmdzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIihcbiAgICBmdW5jdGlvbiAoe18sIG1vbGxpZVNldHRpbmdzRGF0YSwgalF1ZXJ5IH0pXG4gICAge1xuICAgICAgICBjb25zdCB7Y3VycmVudF9zZWN0aW9uID0gZmFsc2V9ID0gbW9sbGllU2V0dGluZ3NEYXRhXG4gICAgICAgIGpRdWVyeShmdW5jdGlvbigkKSB7XG5cbiAgICAgICAgICAgIGlmKF8uaXNFbXB0eShtb2xsaWVTZXR0aW5nc0RhdGEpKXtcbiAgICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGdhdGV3YXlOYW1lID0gY3VycmVudF9zZWN0aW9uXG4gICAgICAgICAgICBpZighZ2F0ZXdheU5hbWUpe1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGV0IGZpeGVkRmllbGQgPSAkKCcjJytnYXRld2F5TmFtZSsnX2ZpeGVkX2ZlZScpLmNsb3Nlc3QoJ3RyJylcbiAgICAgICAgICAgIGxldCBwZXJjZW50RmllbGQgPSAkKCcjJytnYXRld2F5TmFtZSsnX3BlcmNlbnRhZ2UnKS5jbG9zZXN0KCd0cicpXG4gICAgICAgICAgICBsZXQgbGltaXRGaWVsZCA9ICQoJyMnK2dhdGV3YXlOYW1lKydfc3VyY2hhcmdlX2xpbWl0JykuY2xvc2VzdCgndHInKVxuICAgICAgICAgICAgbGV0IG1heEZpZWxkID0gJCgnIycrZ2F0ZXdheU5hbWUrJ19tYXhpbXVtX2xpbWl0JykuY2xvc2VzdCgndHInKVxuXG4gICAgICAgICAgICAkKCcjJytnYXRld2F5TmFtZSsnX3BheW1lbnRfc3VyY2hhcmdlJykuY2hhbmdlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoJCh0aGlzKS52YWwoKSl7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgJ25vX2ZlZSc6XG4gICAgICAgICAgICAgICAgICAgICAgICBmaXhlZEZpZWxkLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgcGVyY2VudEZpZWxkLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgbGltaXRGaWVsZC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heEZpZWxkLmhpZGUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAnZml4ZWRfZmVlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpeGVkRmllbGQuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhGaWVsZC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlcmNlbnRGaWVsZC5oaWRlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0RmllbGQuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdwZXJjZW50YWdlJzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpeGVkRmllbGQuaGlkZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXhGaWVsZC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgICAgIHBlcmNlbnRGaWVsZC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0RmllbGQuc2hvdygpXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICBjYXNlICdmaXhlZF9mZWVfcGVyY2VudGFnZSc6XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBmaXhlZEZpZWxkLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAgICAgcGVyY2VudEZpZWxkLnNob3coKVxuICAgICAgICAgICAgICAgICAgICAgICAgbGltaXRGaWVsZC5zaG93KClcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heEZpZWxkLnNob3coKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pLmNoYW5nZSgpO1xuICAgICAgICB9KTtcbiAgICB9XG4pXG4oXG4gICAgd2luZG93XG4pXG4iXSwibmFtZXMiOlsiX3JlZiIsIl8iLCJtb2xsaWVTZXR0aW5nc0RhdGEiLCJqUXVlcnkiLCJfbW9sbGllU2V0dGluZ3NEYXRhJGMiLCJjdXJyZW50X3NlY3Rpb24iLCIkIiwiaXNFbXB0eSIsImdhdGV3YXlOYW1lIiwiZml4ZWRGaWVsZCIsImNsb3Nlc3QiLCJwZXJjZW50RmllbGQiLCJsaW1pdEZpZWxkIiwibWF4RmllbGQiLCJjaGFuZ2UiLCJ2YWwiLCJoaWRlIiwic2hvdyIsIndpbmRvdyJdLCJzb3VyY2VSb290IjoiIn0=