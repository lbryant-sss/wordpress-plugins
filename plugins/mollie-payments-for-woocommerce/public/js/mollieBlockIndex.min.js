/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/applePayError.js":
/*!***************************************!*\
  !*** ./resources/js/applePayError.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAppleErrors: () => (/* binding */ createAppleErrors)
/* harmony export */ });
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function createAppleErrors(errors) {
  var errorList = [];
  var _iterator = _createForOfIteratorHelper(errors),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var error = _step.value;
      var _error$contactField = error.contactField,
        contactField = _error$contactField === void 0 ? null : _error$contactField,
        _error$code = error.code,
        code = _error$code === void 0 ? null : _error$code,
        _error$message = error.message,
        message = _error$message === void 0 ? null : _error$message;
      var appleError = contactField ? new ApplePayError(code, contactField, message) : new ApplePayError(code);
      errorList.push(appleError);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return errorList;
}

/***/ }),

/***/ "./resources/js/applePayRequest.js":
/*!*****************************************!*\
  !*** ./resources/js/applePayRequest.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   request: () => (/* binding */ request)
/* harmony export */ });
var request = function request(countryCode, currencyCode, totalLabel, subtotal) {
  return {
    countryCode: countryCode,
    currencyCode: currencyCode,
    supportedNetworks: ['amex', 'maestro', 'masterCard', 'visa', 'vPay'],
    merchantCapabilities: ['supports3DS'],
    shippingType: 'shipping',
    requiredBillingContactFields: ['postalAddress', 'email'],
    requiredShippingContactFields: ['postalAddress', 'email'],
    total: {
      label: totalLabel,
      amount: subtotal,
      type: 'final'
    }
  };
};

/***/ }),

/***/ "./resources/js/blocks/ApplePayButtonComponent.js":
/*!********************************************************!*\
  !*** ./resources/js/blocks/ApplePayButtonComponent.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ApplePayButtonComponent: () => (/* binding */ ApplePayButtonComponent),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _applePayRequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../applePayRequest */ "./resources/js/applePayRequest.js");
/* harmony import */ var _applePayError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../applePayError */ "./resources/js/applePayError.js");


var ApplePayButtonComponent = function ApplePayButtonComponent(_ref) {
  var _ref$buttonAttributes = _ref.buttonAttributes,
    buttonAttributes = _ref$buttonAttributes === void 0 ? {} : _ref$buttonAttributes;
  var mollieApplePayBlockDataCart = window.mollieApplePayBlockDataCart || window.mollieBlockData.mollieApplePayBlockDataCart;
  var nonce = document.getElementById("woocommerce-process-checkout-nonce").value;
  var updatedContactInfo = [];
  var redirectionUrl = '';
  var _mollieApplePayBlockD = mollieApplePayBlockDataCart.product,
    _mollieApplePayBlockD2 = _mollieApplePayBlockD.needShipping,
    needShipping = _mollieApplePayBlockD2 === void 0 ? true : _mollieApplePayBlockD2,
    subtotal = _mollieApplePayBlockD.subtotal,
    _mollieApplePayBlockD3 = mollieApplePayBlockDataCart.shop,
    countryCode = _mollieApplePayBlockD3.countryCode,
    _mollieApplePayBlockD4 = _mollieApplePayBlockD3.currencyCode,
    currencyCode = _mollieApplePayBlockD4 === void 0 ? 'EUR' : _mollieApplePayBlockD4,
    _mollieApplePayBlockD5 = _mollieApplePayBlockD3.totalLabel,
    totalLabel = _mollieApplePayBlockD5 === void 0 ? '' : _mollieApplePayBlockD5,
    ajaxUrl = mollieApplePayBlockDataCart.ajaxUrl;
  var style = {
    height: "".concat(buttonAttributes.height || 48, "px"),
    borderRadius: "".concat(buttonAttributes.borderRadius || 4, "px")
  };
  var findSelectedShippingMethod = function findSelectedShippingMethod(shippingRates) {
    var shippingRate = shippingRates.find(function (shippingMethod) {
      return shippingMethod.selected === true;
    });
    var appleFormattedRate = {
      amount: '',
      detail: '',
      label: shippingRate.name,
      identifier: shippingRate.rate_id,
      selected: shippingRate.selected
    };
    return shippingRate ? appleFormattedRate : '';
  };
  var applePaySession = function applePaySession() {
    var _store$getShippingRat;
    var session = new ApplePaySession(3, (0,_applePayRequest__WEBPACK_IMPORTED_MODULE_0__.request)(countryCode, currencyCode, totalLabel, subtotal));
    var store = wp.data.select('wc/store/cart');
    var shippingRates = (_store$getShippingRat = store.getShippingRates()) === null || _store$getShippingRat === void 0 || (_store$getShippingRat = _store$getShippingRat[0]) === null || _store$getShippingRat === void 0 ? void 0 : _store$getShippingRat.shipping_rates;
    var selectedShippingMethod = '';
    if (shippingRates && shippingRates.length > 0) {
      selectedShippingMethod = findSelectedShippingMethod(shippingRates, selectedShippingMethod);
    }
    session.onshippingmethodselected = function (event) {
      var _this = this;
      jQuery.ajax({
        url: ajaxUrl,
        method: 'POST',
        data: {
          action: 'mollie_apple_pay_update_shipping_method',
          shippingMethod: event.shippingMethod,
          callerPage: 'cart',
          simplifiedContact: updatedContactInfo,
          'woocommerce-process-checkout-nonce': nonce
        },
        success: function success(applePayShippingMethodUpdate, textStatus, jqXHR) {
          var response = applePayShippingMethodUpdate.data;
          selectedShippingMethod = event.shippingMethod;
          if (applePayShippingMethodUpdate.success === false) {
            response.errors = (0,_applePayError__WEBPACK_IMPORTED_MODULE_1__.createAppleErrors)(response.errors);
          }
          _this.completeShippingMethodSelection(response);
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.warn(textStatus, errorThrown);
          session.abort();
        }
      });
    };
    session.onshippingcontactselected = function (event) {
      var _this2 = this;
      jQuery.ajax({
        url: ajaxUrl,
        method: 'POST',
        data: {
          action: 'mollie_apple_pay_update_shipping_contact',
          simplifiedContact: event.shippingContact,
          callerPage: 'cart',
          needShipping: needShipping,
          'woocommerce-process-checkout-nonce': nonce,
          shippingMethod: selectedShippingMethod
        },
        success: function success(applePayShippingContactUpdate, textStatus, jqXHR) {
          var response = applePayShippingContactUpdate.data;
          updatedContactInfo = event.shippingContact;
          if (applePayShippingContactUpdate.success === false) {
            response.errors = (0,_applePayError__WEBPACK_IMPORTED_MODULE_1__.createAppleErrors)(response.errors);
          }
          if (response.newShippingMethods) {
            selectedShippingMethod = response.newShippingMethods[0];
          }
          _this2.completeShippingContactSelection(response);
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.warn(textStatus, errorThrown);
          session.abort();
        }
      });
    };
    session.onvalidatemerchant = function (applePayValidateMerchantEvent) {
      jQuery.ajax({
        url: ajaxUrl,
        method: 'POST',
        data: {
          action: 'mollie_apple_pay_validation',
          validationUrl: applePayValidateMerchantEvent.validationURL,
          'woocommerce-process-checkout-nonce': nonce
        },
        success: function success(merchantSession, textStatus, jqXHR) {
          if (merchantSession.success === true) {
            session.completeMerchantValidation(JSON.parse(merchantSession.data));
          } else {
            console.warn(merchantSession.data);
            session.abort();
          }
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.warn(textStatus, errorThrown);
          session.abort();
        }
      });
    };
    session.onpaymentauthorized = function (ApplePayPayment) {
      var _ApplePayPayment$paym = ApplePayPayment.payment,
        billingContact = _ApplePayPayment$paym.billingContact,
        shippingContact = _ApplePayPayment$paym.shippingContact;
      jQuery.ajax({
        url: ajaxUrl,
        method: 'POST',
        data: {
          action: 'mollie_apple_pay_create_order_cart',
          shippingContact: ApplePayPayment.payment.shippingContact,
          billingContact: ApplePayPayment.payment.billingContact,
          token: ApplePayPayment.payment.token,
          shippingMethod: selectedShippingMethod,
          'mollie-payments-for-woocommerce_issuer_applepay': 'applepay',
          'woocommerce-process-checkout-nonce': nonce,
          'billing_first_name': billingContact.givenName || '',
          'billing_last_name': billingContact.familyName || '',
          'billing_company': '',
          'billing_country': billingContact.countryCode || '',
          'billing_address_1': billingContact.addressLines[0] || '',
          'billing_address_2': billingContact.addressLines[1] || '',
          'billing_postcode': billingContact.postalCode || '',
          'billing_city': billingContact.locality || '',
          'billing_state': billingContact.administrativeArea || '',
          'billing_phone': billingContact.phoneNumber || '000000000000',
          'billing_email': shippingContact.emailAddress || '',
          'shipping_first_name': shippingContact.givenName || '',
          'shipping_last_name': shippingContact.familyName || '',
          'shipping_company': '',
          'shipping_country': shippingContact.countryCode || '',
          'shipping_address_1': shippingContact.addressLines[0] || '',
          'shipping_address_2': shippingContact.addressLines[1] || '',
          'shipping_postcode': shippingContact.postalCode || '',
          'shipping_city': shippingContact.locality || '',
          'shipping_state': shippingContact.administrativeArea || '',
          'shipping_phone': shippingContact.phoneNumber || '000000000000',
          'shipping_email': shippingContact.emailAddress || '',
          'order_comments': '',
          'payment_method': 'mollie_wc_gateway_applepay',
          '_wp_http_referer': '/?wc-ajax=update_order_review'
        },
        success: function success(authorizationResult, textStatus, jqXHR) {
          var result = authorizationResult.data;
          if (authorizationResult.success === true) {
            redirectionUrl = result['returnUrl'];
            session.completePayment(result['responseToApple']);
            window.location.href = redirectionUrl;
          } else {
            result.errors = (0,_applePayError__WEBPACK_IMPORTED_MODULE_1__.createAppleErrors)(result.errors);
            session.completePayment(result);
          }
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.warn(textStatus, errorThrown);
          session.abort();
        }
      });
    };
    session.begin();
  };
  return /*#__PURE__*/React.createElement("button", {
    id: "mollie_applepay_button",
    className: "apple-pay-button apple-pay-button-black",
    onClick: function onClick(event) {
      event.preventDefault();
      applePaySession();
    },
    style: style
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ApplePayButtonComponent);

/***/ }),

/***/ "./resources/js/blocks/ApplePayButtonEditorComponent.js":
/*!**************************************************************!*\
  !*** ./resources/js/blocks/ApplePayButtonEditorComponent.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ApplePayButtonEditorComponent: () => (/* binding */ ApplePayButtonEditorComponent),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var ApplePayButtonEditorComponent = function ApplePayButtonEditorComponent(_ref) {
  var _ref$buttonAttributes = _ref.buttonAttributes,
    buttonAttributes = _ref$buttonAttributes === void 0 ? {} : _ref$buttonAttributes;
  var style = {
    height: "".concat(buttonAttributes.height || 48, "px"),
    borderRadius: "".concat(buttonAttributes.borderRadius || 4, "px")
  };
  return /*#__PURE__*/React.createElement("button", {
    id: "mollie_applepay_button",
    className: "apple-pay-button apple-pay-button-black",
    style: style
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ApplePayButtonEditorComponent);

/***/ }),

/***/ "./resources/js/blocks/molliePaymentMethod.js":
/*!****************************************************!*\
  !*** ./resources/js/blocks/molliePaymentMethod.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var cachedAvailableGateways = {};
function formatPriceLikeWc(price) {
  // todo add thousandSeparator
  return wcSettings.currency.priceFormat.replace('%1$s', wcSettings.currency.symbol).replace('%2$s', price.toFixed(wcSettings.currency.precision).replace('.', wcSettings.currency.decimalSeparator));
}
function setAvailableGateways(country, currencyCode, data) {
  cachedAvailableGateways = _objectSpread(_objectSpread({}, cachedAvailableGateways), data);
}
function useMollieAvailableGateways(billing, currencyCode, cartTotal, filters, ajaxUrl) {
  var country = billing.country;
  var code = currencyCode;
  var value = cartTotal;
  if (!country) {
    var _wcSettings;
    country = (_wcSettings = wcSettings) === null || _wcSettings === void 0 ? void 0 : _wcSettings.baseLocation.country;
  }
  wp.element.useEffect(function () {
    if (!country) return;
    var currencyCode = code;
    var cartTotal = value;
    var currentFilterKey = currencyCode + "-" + country;
    if (cachedAvailableGateways.hasOwnProperty(currentFilterKey)) {
      return;
    }
    fetch(ajaxUrl, {
      method: 'POST',
      headers: {
        "Content-Type": "application/x-www-form-urlencoded"
      },
      body: new URLSearchParams({
        action: 'mollie_checkout_blocks_canmakepayment',
        currency: currencyCode,
        billingCountry: country,
        cartTotal: cartTotal,
        paymentLocale: filters.paymentLocale
      })
    }).then(function (response) {
      return response.json();
    }).then(function (data) {
      setAvailableGateways(country, currencyCode, data.data);
      var cartTotals = wp.data.select('wc/store/cart').getCartTotals();
      // Dispatch them again to trigger a re-render:
      wp.data.dispatch('wc/store/cart').setCartData(_objectSpread({}, cartTotals));
    });
  }, [billing, currencyCode, filters.paymentLocale]);
  return cachedAvailableGateways;
}

// Component that runs the hook but does not render anything.
function MollieGatewayUpdater(_ref) {
  var billing = _ref.billing,
    currencyCode = _ref.currencyCode,
    cartTotal = _ref.cartTotal,
    filters = _ref.filters,
    ajaxUrl = _ref.ajaxUrl;
  useMollieAvailableGateways(billing, currencyCode, cartTotal, filters, ajaxUrl);
  return null;
}
var onSubmitLocal;
var activePaymentMethodLocal;
var creditCardSelected = new Event("mollie_creditcard_component_selected", {
  bubbles: true
});
var MollieComponent = function MollieComponent(props) {
  var onSubmit = props.onSubmit,
    activePaymentMethod = props.activePaymentMethod,
    billing = props.billing,
    item = props.item,
    useEffect = props.useEffect,
    ajaxUrl = props.ajaxUrl,
    jQuery = props.jQuery,
    emitResponse = props.emitResponse,
    eventRegistration = props.eventRegistration,
    requiredFields = props.requiredFields,
    shippingData = props.shippingData,
    isPhoneFieldVisible = props.isPhoneFieldVisible;
  var responseTypes = emitResponse.responseTypes;
  var onPaymentSetup = eventRegistration.onPaymentSetup,
    onCheckoutValidation = eventRegistration.onCheckoutValidation;
  if (!item || !item.name) {
    return /*#__PURE__*/React.createElement("div", null, "Loading payment methods...");
  }
  var _wp$element$useState = wp.element.useState(''),
    _wp$element$useState2 = _slicedToArray(_wp$element$useState, 2),
    selectedIssuer = _wp$element$useState2[0],
    selectIssuer = _wp$element$useState2[1];
  var _wp$element$useState3 = wp.element.useState(''),
    _wp$element$useState4 = _slicedToArray(_wp$element$useState3, 2),
    inputPhone = _wp$element$useState4[0],
    selectPhone = _wp$element$useState4[1];
  var _wp$element$useState5 = wp.element.useState(''),
    _wp$element$useState6 = _slicedToArray(_wp$element$useState5, 2),
    inputBirthdate = _wp$element$useState6[0],
    selectBirthdate = _wp$element$useState6[1];
  var _wp$element$useState7 = wp.element.useState(''),
    _wp$element$useState8 = _slicedToArray(_wp$element$useState7, 2),
    inputCompany = _wp$element$useState8[0],
    selectCompany = _wp$element$useState8[1];
  var issuerKey = 'mollie-payments-for-woocommerce_issuer_' + activePaymentMethod;
  var companyNameString = requiredFields.companyNameString,
    phoneString = requiredFields.phoneString;
  function getPhoneField() {
    var shippingPhone = document.getElementById('shipping-phone');
    var billingPhone = document.getElementById('billing-phone');
    return billingPhone || shippingPhone;
  }
  function updateTotalLabel(newTotal) {
    var totalSpan = "<span class='wc-block-formatted-money-amount wc-block-components-formatted-money-amount wc-block-components-totals-item__value'>" + formatPriceLikeWc(newTotal) + "</span>";
    var total = jQuery('.wc-block-components-totals-footer-item .wc-block-formatted-money-amount:first');
    total.replaceWith(totalSpan);
  }
  function updateTaxesLabel(newTotal) {
    var totalSpan = "<span class='wc-block-formatted-money-amount wc-block-components-formatted-money-amount wc-block-components-totals-item__value'>" + formatPriceLikeWc(newTotal) + "</span>";
    var total = jQuery('div.wp-block-woocommerce-checkout-order-summary-taxes-block.wc-block-components-totals-wrapper > div > span.wc-block-formatted-money-amount.wc-block-components-formatted-money-amount.wc-block-components-totals-item__value:first');
    total.replaceWith(totalSpan);
  }
  function hideFee(fee, response) {
    fee === null || fee === void 0 || fee.hide();
    updateTotalLabel(response.data.newTotal);
    updateTaxesLabel(response.data.totalTax);
  }
  function feeMarkup(response) {
    return "<div class='wc-block-components-totals-item wc-block-components-totals-fees'>" + "<span class='wc-block-components-totals-item__label'>" + response.data.name + "</span>" + "<span class='wc-block-formatted-money-amount wc-block-components-formatted-money-amount wc-block-components-totals-item__value'>" + formatPriceLikeWc(response.data.amount) + "</span>" + "<div class='wc-block-components-totals-item__description'>" + "</div>" + "</div>";
  }
  function replaceFee(fee, newFee, response) {
    fee.replaceWith(newFee);
    updateTotalLabel(response.data.newTotal);
    updateTaxesLabel(response.data.totalTax);
  }
  function insertNewFee(newFee, response) {
    var subtotal = jQuery('.wc-block-components-totals-item:first');
    subtotal.after(newFee);
    updateTotalLabel(response.data.newTotal);
    updateTaxesLabel(response.data.totalTax);
  }
  function handleFees(response) {
    var fee = jQuery('.wc-block-components-totals-fees');
    if (!response.data.amount) {
      hideFee(fee, response);
      return;
    }
    var newFee = feeMarkup(response);
    if (fee.length) {
      replaceFee(fee, newFee, response);
      return;
    }
    insertNewFee(newFee, response);
  }
  useEffect(function () {
    if (activePaymentMethodLocal !== activePaymentMethod && activePaymentMethod === 'mollie_wc_gateway_creditcard') {
      document.documentElement.dispatchEvent(creditCardSelected);
    }
    activePaymentMethodLocal = activePaymentMethod;
    jQuery.ajax({
      url: ajaxUrl,
      method: 'POST',
      data: {
        action: 'mollie_checkout_blocks_surchage',
        method: activePaymentMethod
      },
      complete: function complete(jqXHR, textStatus) {},
      success: function success(response, textStatus, jqXHR) {
        handleFees(response);
      },
      error: function error(jqXHR, textStatus, errorThrown) {
        console.warn(textStatus, errorThrown);
      }
    });
  }, [activePaymentMethod, billing.cartTotal]);
  useEffect(function () {
    var onProcessingPayment = function onProcessingPayment() {
      var data = _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty({
        payment_method: activePaymentMethod,
        payment_method_title: item.title
      }, issuerKey, selectedIssuer), "billing_phone", inputPhone), "billing_company_billie", inputCompany), "billing_birthdate", inputBirthdate), "cardToken", '');
      var tokenVal = jQuery('.mollie-components > input').val();
      if (tokenVal) {
        data.cardToken = tokenVal;
      }
      return {
        type: responseTypes.SUCCESS,
        meta: {
          paymentMethodData: data
        }
      };
    };
    var unsubscribePaymentProcessing = onPaymentSetup(onProcessingPayment);
    return function () {
      unsubscribePaymentProcessing();
    };
  }, [selectedIssuer, onPaymentSetup, inputPhone, inputCompany, inputBirthdate]);
  useEffect(function () {
    var companyLabel = jQuery('div.wc-block-components-text-input.wc-block-components-address-form__company > label');
    if (companyLabel.length === 0 || item.hideCompanyField === true) {
      return;
    }
    if (activePaymentMethod === 'mollie_wc_gateway_billie') {
      var message = item.companyPlaceholder;
      companyLabel.replaceWith('<label htmlFor="shipping-company">' + message + '</label>');
    } else {
      if (companyNameString !== false) {
        companyLabel.replaceWith('<label htmlFor="shipping-company">' + companyNameString + '</label>');
      }
    }
    var isCompanyEmpty = billing.billingData.company === '' && shippingData.shippingAddress.company === '' && inputCompany === '';
    var unsubscribeProcessing = onCheckoutValidation(function () {
      if (activePaymentMethod === 'mollie_wc_gateway_billie' && isCompanyEmpty) {
        return {
          errorMessage: item.errorMessage
        };
      }
    });
    return function () {
      unsubscribeProcessing();
    };
  }, [activePaymentMethod, onCheckoutValidation, billing.billingData, item, companyNameString, inputCompany]);
  useEffect(function () {
    var _getPhoneField$labels, _getPhoneField;
    var phoneLabel = (_getPhoneField$labels = (_getPhoneField = getPhoneField()) === null || _getPhoneField === void 0 || (_getPhoneField = _getPhoneField.labels) === null || _getPhoneField === void 0 ? void 0 : _getPhoneField[0]) !== null && _getPhoneField$labels !== void 0 ? _getPhoneField$labels : null;
    if (!phoneLabel || phoneLabel.length === 0) {
      return;
    }
    if (activePaymentMethod === 'mollie_wc_gateway_in3') {
      phoneLabel.innerText = item.phonePlaceholder;
    } else {
      if (phoneString !== false) {
        phoneLabel.innerText = phoneString;
      }
    }
    var isPhoneEmpty = billing.billingData.phone === '' && shippingData.shippingAddress.phone === '' && inputPhone === '';
    var isBirthdateValid = inputBirthdate === '';
    var today = new Date();
    var birthdate = new Date(inputBirthdate);
    if (birthdate > today) {
      isBirthdateValid = false;
    }
    var unsubscribeProcessing = onCheckoutValidation(function () {
      if (activePaymentMethod === 'mollie_wc_gateway_in3' && (isPhoneEmpty || isBirthdateValid)) {
        return {
          errorMessage: item.errorMessage
        };
      }
    });
    return function () {
      unsubscribeProcessing();
    };
  }, [activePaymentMethod, onCheckoutValidation, billing.billingData, shippingData.shippingAddress, item, phoneString, inputBirthdate, inputPhone]);
  onSubmitLocal = onSubmit;
  var updateIssuer = function updateIssuer(e) {
    return selectIssuer(e.target.value);
  };
  var updateCompany = function updateCompany(e) {
    return selectCompany(e.target.value);
  };
  var updatePhone = function updatePhone(e) {
    return selectPhone(e.target.value);
  };
  var updateBirthdate = function updateBirthdate(e) {
    return selectBirthdate(e.target.value);
  };
  function fieldMarkup(id, fieldType, label, action, value) {
    var placeholder = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
    var className = "wc-block-components-text-input wc-block-components-address-form__" + id;
    return /*#__PURE__*/React.createElement("div", {
      class: "custom-input"
    }, /*#__PURE__*/React.createElement("label", {
      htmlFor: id,
      dangerouslySetInnerHTML: {
        __html: label
      }
    }), /*#__PURE__*/React.createElement("input", {
      type: fieldType,
      name: id,
      id: id,
      value: value,
      onChange: action,
      placeholder: placeholder
    }));
  }
  if (item.issuers && item.name !== "mollie_wc_gateway_creditcard") {
    return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", null, item.content), /*#__PURE__*/React.createElement("select", {
      name: issuerKey,
      dangerouslySetInnerHTML: {
        __html: item.issuers
      },
      value: selectedIssuer,
      onChange: updateIssuer
    }));
  }
  if (item.name === "mollie_wc_gateway_creditcard") {
    return /*#__PURE__*/React.createElement("div", {
      dangerouslySetInnerHTML: {
        __html: item.content
      }
    });
  }
  if (item.name === "mollie_wc_gateway_billie") {
    var billingCompanyField = document.querySelector('#billing-company');
    var shippingCompanyField = document.querySelector('#shipping-company');
    var isBillingCompanyRequired = billingCompanyField === null || billingCompanyField === void 0 ? void 0 : billingCompanyField.hasAttribute('required');
    var isShippingCompanyRequired = shippingCompanyField === null || shippingCompanyField === void 0 ? void 0 : shippingCompanyField.hasAttribute('required');
    if (billingCompanyField && isBillingCompanyRequired || shippingCompanyField && isShippingCompanyRequired || item.hideCompanyField === true) {
      return;
    }
    var companyField = item.companyPlaceholder ? item.companyPlaceholder : "Company name";
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", null, item.content)), fieldMarkup("billing_company_billie", "text", companyField, updateCompany, inputCompany));
  }
  useEffect(function () {
    var countryCodes = {
      BE: '+32xxxxxxxxx',
      NL: '+316xxxxxxxx',
      DE: '+49xxxxxxxxx',
      AT: '+43xxxxxxxxx'
    };
    var country = billing.billingData.country;
    item.phonePlaceholder = countryCodes[country] || countryCodes['NL'];
  }, [billing.billingData.country]);
  if (item.name === "mollie_wc_gateway_in3") {
    var birthdateField = item.birthdatePlaceholder || "Birthdate";
    var phoneField = item.phonePlaceholder || "+316xxxxxxxx";
    var phoneLabel = item.phoneLabel || "Phone";
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", null, item.content)), fieldMarkup("billing-birthdate", "date", birthdateField, updateBirthdate, inputBirthdate), !isPhoneFieldVisible && fieldMarkup("billing-phone-in3", "tel", phoneLabel, updatePhone, inputPhone, phoneField));
  }
  if (item.name === "mollie_wc_gateway_riverty") {
    var _birthdateField = item.birthdatePlaceholder || "Birthdate";
    var _phoneField = item.phonePlaceholder || "+316xxxxxxxx";
    var _phoneLabel = item.phoneLabel || "Phone";
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", null, item.content)), fieldMarkup("billing-birthdate", "date", _birthdateField, updateBirthdate, inputBirthdate), !isPhoneFieldVisible && fieldMarkup("billing-phone-riverty", "tel", _phoneLabel, updatePhone, inputPhone, _phoneField));
  }
  return /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement("p", null, item.content));
};
var Label = function Label(_ref2) {
  var item = _ref2.item,
    filters = _ref2.filters,
    ajaxUrl = _ref2.ajaxUrl;
  var cartData = wp.data.useSelect(function (select) {
    return select('wc/store/cart').getCartData();
  }, []);
  var cartTotals = wp.data.useSelect(function (select) {
    return select('wc/store/cart').getCartTotals();
  }, []);
  var cartTotal = (cartTotals === null || cartTotals === void 0 ? void 0 : cartTotals.total_price) || 0;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    dangerouslySetInnerHTML: {
      __html: item.label
    }
  }), /*#__PURE__*/React.createElement(MollieGatewayUpdater, {
    billing: cartData.billingAddress,
    currencyCode: wcSettings.currency.code,
    filters: filters,
    ajaxUrl: ajaxUrl,
    cartTotal: cartTotal
  }));
};
var molliePaymentMethod = function molliePaymentMethod(useEffect, ajaxUrl, filters, gatewayData, availableGateways, item, jQuery, requiredFields, isCompanyFieldVisible, isPhoneFieldVisible) {
  if (item.name === "mollie_wc_gateway_creditcard") {
    document.addEventListener('mollie_components_ready_to_submit', function () {
      onSubmitLocal();
    });
  }
  function creditcardSelectedEvent() {
    if (item.name === "mollie_wc_gateway_creditcard") {
      document.documentElement.dispatchEvent(creditCardSelected);
    }
  }
  return {
    name: item.name,
    label: /*#__PURE__*/React.createElement(Label, {
      item: item,
      ajaxUrl: ajaxUrl,
      filters: filters
    }),
    content: /*#__PURE__*/React.createElement(MollieComponent, {
      item: item,
      useEffect: useEffect,
      ajaxUrl: ajaxUrl,
      jQuery: jQuery,
      requiredFields: requiredFields,
      isPhoneFieldVisible: isPhoneFieldVisible
    }),
    edit: /*#__PURE__*/React.createElement("div", null, item.edit),
    paymentMethodId: item.paymentMethodId,
    canMakePayment: function canMakePayment(_ref3) {
      var cartTotals = _ref3.cartTotals,
        billingData = _ref3.billingData;
      if (!_.isEmpty(item.allowedCountries) && !item.allowedCountries.includes(billingData.country)) {
        return false;
      }
      if (cartTotals <= 0) {
        return true;
      }
      var currencyCode = cartTotals === null || cartTotals === void 0 ? void 0 : cartTotals.currency_code;
      var country = billingData === null || billingData === void 0 ? void 0 : billingData.country;
      if (!country) {
        var _wcSettings2;
        country = (_wcSettings2 = wcSettings) === null || _wcSettings2 === void 0 ? void 0 : _wcSettings2.baseLocation.country;
      }
      var currentFilterKey = currencyCode + "-" + country;
      creditcardSelectedEvent();
      if (!cachedAvailableGateways.hasOwnProperty(currentFilterKey)) {
        cachedAvailableGateways = _objectSpread(_objectSpread({}, cachedAvailableGateways), availableGateways);
      }
      if (availableGateways.hasOwnProperty(currentFilterKey) && availableGateways[currentFilterKey].hasOwnProperty(item.name)) {
        return true;
      }
      if (cachedAvailableGateways.hasOwnProperty(currentFilterKey) && cachedAvailableGateways[currentFilterKey].hasOwnProperty(item.name)) {
        return true;
      }
      return false;
    },
    ariaLabel: item.ariaLabel,
    supports: {
      features: item.supports
    }
  };
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (molliePaymentMethod);

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.
(() => {
/*!******************************************!*\
  !*** ./resources/js/mollieBlockIndex.js ***!
  \******************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _blocks_molliePaymentMethod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./blocks/molliePaymentMethod */ "./resources/js/blocks/molliePaymentMethod.js");
/* harmony import */ var _blocks_ApplePayButtonComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./blocks/ApplePayButtonComponent */ "./resources/js/blocks/ApplePayButtonComponent.js");
/* harmony import */ var _blocks_ApplePayButtonEditorComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./blocks/ApplePayButtonEditorComponent */ "./resources/js/blocks/ApplePayButtonEditorComponent.js");



(function (_ref) {
  var mollieBlockData = _ref.mollieBlockData,
    wc = _ref.wc,
    _ = _ref._,
    jQuery = _ref.jQuery;
  if (_.isEmpty(mollieBlockData)) {
    return;
  }
  var registerPaymentMethod = wc.wcBlocksRegistry.registerPaymentMethod;
  var defaultFields = wc.wcSettings.allSettings.defaultFields;
  var _mollieBlockData$gate = mollieBlockData.gatewayData,
    ajaxUrl = _mollieBlockData$gate.ajaxUrl,
    filters = _mollieBlockData$gate.filters,
    gatewayData = _mollieBlockData$gate.gatewayData,
    availableGateways = _mollieBlockData$gate.availableGateways;
  var useEffect = wp.element.useEffect;
  var isAppleSession = typeof window.ApplePaySession === "function";
  function getPhoneField() {
    var phoneFieldDataset = document.querySelector('[data-show-phone-field]');
    if (!phoneFieldDataset) {
      return true;
    }
    return phoneFieldDataset.dataset.showPhoneField !== "false";
  }
  var companyNameString = defaultFields.company.label;
  var isPhoneFieldVisible = getPhoneField();
  var phoneString = defaultFields.phone.label;
  var requiredFields = {
    'companyNameString': companyNameString,
    'phoneString': phoneString
  };
  gatewayData.forEach(function (item) {
    var register = function register() {
      return registerPaymentMethod((0,_blocks_molliePaymentMethod__WEBPACK_IMPORTED_MODULE_0__["default"])(useEffect, ajaxUrl, filters, gatewayData, availableGateways, item, jQuery, requiredFields, isPhoneFieldVisible));
    };
    if (item.name === 'mollie_wc_gateway_applepay') {
      var isExpressEnabled = item.isExpressEnabled;
      if (isAppleSession && window.ApplePaySession.canMakePayments()) {
        register();
        if (isExpressEnabled !== true) {
          return;
        }
        var registerExpressPaymentMethod = wc.wcBlocksRegistry.registerExpressPaymentMethod;
        registerExpressPaymentMethod({
          name: 'mollie_wc_gateway_applepay_express',
          title: 'Apple Pay Express button',
          description: 'Apple Pay Express button',
          content: /*#__PURE__*/React.createElement(_blocks_ApplePayButtonComponent__WEBPACK_IMPORTED_MODULE_1__["default"], null),
          edit: /*#__PURE__*/React.createElement(_blocks_ApplePayButtonEditorComponent__WEBPACK_IMPORTED_MODULE_2__["default"], null),
          ariaLabel: 'Apple Pay',
          canMakePayment: function canMakePayment() {
            return true;
          },
          paymentMethodId: 'mollie_wc_gateway_applepay',
          gatewayId: 'mollie_wc_gateway_applepay',
          supports: {
            features: ['products'],
            style: ['height', 'borderRadius']
          }
        });
      }
      return;
    }
    register();
  });
})(window, wc);
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,