/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./resources/js/applePayError.js":
/*!***************************************!*\
  !*** ./resources/js/applePayError.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   createAppleErrors: () => (/* binding */ createAppleErrors)
/* harmony export */ });
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function createAppleErrors(errors) {
  var errorList = [];
  var _iterator = _createForOfIteratorHelper(errors),
    _step;
  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var error = _step.value;
      var _error$contactField = error.contactField,
        contactField = _error$contactField === void 0 ? null : _error$contactField,
        _error$code = error.code,
        code = _error$code === void 0 ? null : _error$code,
        _error$message = error.message,
        message = _error$message === void 0 ? null : _error$message;
      var appleError = contactField ? new ApplePayError(code, contactField, message) : new ApplePayError(code);
      errorList.push(appleError);
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }
  return errorList;
}

/***/ }),

/***/ "./resources/js/applePayRequest.js":
/*!*****************************************!*\
  !*** ./resources/js/applePayRequest.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   request: () => (/* binding */ request)
/* harmony export */ });
var request = function request(countryCode, currencyCode, totalLabel, subtotal) {
  return {
    countryCode: countryCode,
    currencyCode: currencyCode,
    supportedNetworks: ['amex', 'maestro', 'masterCard', 'visa', 'vPay'],
    merchantCapabilities: ['supports3DS'],
    shippingType: 'shipping',
    requiredBillingContactFields: ['postalAddress', 'email'],
    requiredShippingContactFields: ['postalAddress', 'email'],
    total: {
      label: totalLabel,
      amount: subtotal,
      type: 'final'
    }
  };
};

/***/ }),

/***/ "./resources/js/blocks/ApplePayButtonComponent.js":
/*!********************************************************!*\
  !*** ./resources/js/blocks/ApplePayButtonComponent.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ApplePayButtonComponent: () => (/* binding */ ApplePayButtonComponent),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
/* harmony import */ var _applePayRequest__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../applePayRequest */ "./resources/js/applePayRequest.js");
/* harmony import */ var _applePayError__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../applePayError */ "./resources/js/applePayError.js");


var ApplePayButtonComponent = function ApplePayButtonComponent(_ref) {
  var _ref$buttonAttributes = _ref.buttonAttributes,
    buttonAttributes = _ref$buttonAttributes === void 0 ? {} : _ref$buttonAttributes;
  var mollieApplePayBlockDataCart = window.mollieApplePayBlockDataCart || window.mollieBlockData.mollieApplePayBlockDataCart;
  var nonce = document.getElementById("woocommerce-process-checkout-nonce").value;
  var updatedContactInfo = [];
  var redirectionUrl = '';
  var _mollieApplePayBlockD = mollieApplePayBlockDataCart.product,
    _mollieApplePayBlockD2 = _mollieApplePayBlockD.needShipping,
    needShipping = _mollieApplePayBlockD2 === void 0 ? true : _mollieApplePayBlockD2,
    subtotal = _mollieApplePayBlockD.subtotal,
    _mollieApplePayBlockD3 = mollieApplePayBlockDataCart.shop,
    countryCode = _mollieApplePayBlockD3.countryCode,
    _mollieApplePayBlockD4 = _mollieApplePayBlockD3.currencyCode,
    currencyCode = _mollieApplePayBlockD4 === void 0 ? 'EUR' : _mollieApplePayBlockD4,
    _mollieApplePayBlockD5 = _mollieApplePayBlockD3.totalLabel,
    totalLabel = _mollieApplePayBlockD5 === void 0 ? '' : _mollieApplePayBlockD5,
    ajaxUrl = mollieApplePayBlockDataCart.ajaxUrl;
  var style = {
    height: "".concat(buttonAttributes.height || 48, "px"),
    borderRadius: "".concat(buttonAttributes.borderRadius || 4, "px")
  };
  var findSelectedShippingMethod = function findSelectedShippingMethod(shippingRates) {
    var shippingRate = shippingRates.find(function (shippingMethod) {
      return shippingMethod.selected === true;
    });
    var appleFormattedRate = {
      amount: '',
      detail: '',
      label: shippingRate.name,
      identifier: shippingRate.rate_id,
      selected: shippingRate.selected
    };
    return shippingRate ? appleFormattedRate : '';
  };
  var applePaySession = function applePaySession() {
    var _store$getShippingRat;
    var session = new ApplePaySession(3, (0,_applePayRequest__WEBPACK_IMPORTED_MODULE_0__.request)(countryCode, currencyCode, totalLabel, subtotal));
    var store = wp.data.select('wc/store/cart');
    var shippingRates = (_store$getShippingRat = store.getShippingRates()) === null || _store$getShippingRat === void 0 || (_store$getShippingRat = _store$getShippingRat[0]) === null || _store$getShippingRat === void 0 ? void 0 : _store$getShippingRat.shipping_rates;
    var selectedShippingMethod = '';
    if (shippingRates && shippingRates.length > 0) {
      selectedShippingMethod = findSelectedShippingMethod(shippingRates, selectedShippingMethod);
    }
    session.onshippingmethodselected = function (event) {
      var _this = this;
      jQuery.ajax({
        url: ajaxUrl,
        method: 'POST',
        data: {
          action: 'mollie_apple_pay_update_shipping_method',
          shippingMethod: event.shippingMethod,
          callerPage: 'cart',
          simplifiedContact: updatedContactInfo,
          'woocommerce-process-checkout-nonce': nonce
        },
        success: function success(applePayShippingMethodUpdate, textStatus, jqXHR) {
          var response = applePayShippingMethodUpdate.data;
          selectedShippingMethod = event.shippingMethod;
          if (applePayShippingMethodUpdate.success === false) {
            response.errors = (0,_applePayError__WEBPACK_IMPORTED_MODULE_1__.createAppleErrors)(response.errors);
          }
          _this.completeShippingMethodSelection(response);
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.warn(textStatus, errorThrown);
          session.abort();
        }
      });
    };
    session.onshippingcontactselected = function (event) {
      var _this2 = this;
      jQuery.ajax({
        url: ajaxUrl,
        method: 'POST',
        data: {
          action: 'mollie_apple_pay_update_shipping_contact',
          simplifiedContact: event.shippingContact,
          callerPage: 'cart',
          needShipping: needShipping,
          'woocommerce-process-checkout-nonce': nonce,
          shippingMethod: selectedShippingMethod
        },
        success: function success(applePayShippingContactUpdate, textStatus, jqXHR) {
          var response = applePayShippingContactUpdate.data;
          updatedContactInfo = event.shippingContact;
          if (applePayShippingContactUpdate.success === false) {
            response.errors = (0,_applePayError__WEBPACK_IMPORTED_MODULE_1__.createAppleErrors)(response.errors);
          }
          if (response.newShippingMethods) {
            selectedShippingMethod = response.newShippingMethods[0];
          }
          _this2.completeShippingContactSelection(response);
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.warn(textStatus, errorThrown);
          session.abort();
        }
      });
    };
    session.onvalidatemerchant = function (applePayValidateMerchantEvent) {
      jQuery.ajax({
        url: ajaxUrl,
        method: 'POST',
        data: {
          action: 'mollie_apple_pay_validation',
          validationUrl: applePayValidateMerchantEvent.validationURL,
          'woocommerce-process-checkout-nonce': nonce
        },
        success: function success(merchantSession, textStatus, jqXHR) {
          if (merchantSession.success === true) {
            session.completeMerchantValidation(JSON.parse(merchantSession.data));
          } else {
            console.warn(merchantSession.data);
            session.abort();
          }
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.warn(textStatus, errorThrown);
          session.abort();
        }
      });
    };
    session.onpaymentauthorized = function (ApplePayPayment) {
      var _ApplePayPayment$paym = ApplePayPayment.payment,
        billingContact = _ApplePayPayment$paym.billingContact,
        shippingContact = _ApplePayPayment$paym.shippingContact;
      jQuery.ajax({
        url: ajaxUrl,
        method: 'POST',
        data: {
          action: 'mollie_apple_pay_create_order_cart',
          shippingContact: ApplePayPayment.payment.shippingContact,
          billingContact: ApplePayPayment.payment.billingContact,
          token: ApplePayPayment.payment.token,
          shippingMethod: selectedShippingMethod,
          'mollie-payments-for-woocommerce_issuer_applepay': 'applepay',
          'woocommerce-process-checkout-nonce': nonce,
          'billing_first_name': billingContact.givenName || '',
          'billing_last_name': billingContact.familyName || '',
          'billing_company': '',
          'billing_country': billingContact.countryCode || '',
          'billing_address_1': billingContact.addressLines[0] || '',
          'billing_address_2': billingContact.addressLines[1] || '',
          'billing_postcode': billingContact.postalCode || '',
          'billing_city': billingContact.locality || '',
          'billing_state': billingContact.administrativeArea || '',
          'billing_phone': billingContact.phoneNumber || '000000000000',
          'billing_email': shippingContact.emailAddress || '',
          'shipping_first_name': shippingContact.givenName || '',
          'shipping_last_name': shippingContact.familyName || '',
          'shipping_company': '',
          'shipping_country': shippingContact.countryCode || '',
          'shipping_address_1': shippingContact.addressLines[0] || '',
          'shipping_address_2': shippingContact.addressLines[1] || '',
          'shipping_postcode': shippingContact.postalCode || '',
          'shipping_city': shippingContact.locality || '',
          'shipping_state': shippingContact.administrativeArea || '',
          'shipping_phone': shippingContact.phoneNumber || '000000000000',
          'shipping_email': shippingContact.emailAddress || '',
          'order_comments': '',
          'payment_method': 'mollie_wc_gateway_applepay',
          '_wp_http_referer': '/?wc-ajax=update_order_review'
        },
        success: function success(authorizationResult, textStatus, jqXHR) {
          var result = authorizationResult.data;
          if (authorizationResult.success === true) {
            redirectionUrl = result['returnUrl'];
            session.completePayment(result['responseToApple']);
            window.location.href = redirectionUrl;
          } else {
            result.errors = (0,_applePayError__WEBPACK_IMPORTED_MODULE_1__.createAppleErrors)(result.errors);
            session.completePayment(result);
          }
        },
        error: function error(jqXHR, textStatus, errorThrown) {
          console.warn(textStatus, errorThrown);
          session.abort();
        }
      });
    };
    session.begin();
  };
  return /*#__PURE__*/React.createElement("button", {
    id: "mollie_applepay_button",
    className: "apple-pay-button apple-pay-button-black",
    onClick: function onClick(event) {
      event.preventDefault();
      applePaySession();
    },
    style: style
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ApplePayButtonComponent);

/***/ }),

/***/ "./resources/js/blocks/ApplePayButtonEditorComponent.js":
/*!**************************************************************!*\
  !*** ./resources/js/blocks/ApplePayButtonEditorComponent.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ApplePayButtonEditorComponent: () => (/* binding */ ApplePayButtonEditorComponent),
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
var ApplePayButtonEditorComponent = function ApplePayButtonEditorComponent(_ref) {
  var _ref$buttonAttributes = _ref.buttonAttributes,
    buttonAttributes = _ref$buttonAttributes === void 0 ? {} : _ref$buttonAttributes;
  var style = {
    height: "".concat(buttonAttributes.height || 48, "px"),
    borderRadius: "".concat(buttonAttributes.borderRadius || 4, "px")
  };
  return /*#__PURE__*/React.createElement("button", {
    id: "mollie_applepay_button",
    className: "apple-pay-button apple-pay-button-black",
    style: style
  });
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (ApplePayButtonEditorComponent);

/***/ }),

/***/ "./resources/js/blocks/molliePaymentMethod.js":
/*!****************************************************!*\
  !*** ./resources/js/blocks/molliePaymentMethod.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)
/* harmony export */ });
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var cachedAvailableGateways = {};
function setAvailableGateways(country, currencyCode, data) {
  cachedAvailableGateways = _objectSpread(_objectSpread({}, cachedAvailableGateways), data);
}
function useMollieAvailableGateways(billing, currencyCode, cartTotal, filters, ajaxUrl) {
  var country = billing.country;
  var code = currencyCode;
  var value = cartTotal;
  if (!country) {
    var _wcSettings;
    country = (_wcSettings = wcSettings) === null || _wcSettings === void 0 || (_wcSettings = _wcSettings.baseLocation) === null || _wcSettings === void 0 ? void 0 : _wcSettings.country;
  }
  wp.element.useEffect(function () {
    if (!country) return;
    var currencyCode = code;
    var cartTotal = value;
    var currentFilterKey = currencyCode + "-" + country;
    if (cachedAvailableGateways.hasOwnProperty(currentFilterKey)) {
      return;
    }
    fetch(ajaxUrl, {
      method: 'POST',
      headers: {
        "Content-Type": "application/x-www-form-urlencoded"
      },
      body: new URLSearchParams({
        action: 'mollie_checkout_blocks_canmakepayment',
        currency: currencyCode,
        billingCountry: country,
        cartTotal: cartTotal,
        paymentLocale: filters.paymentLocale
      })
    }).then(function (response) {
      return response.json();
    }).then(function (data) {
      setAvailableGateways(country, currencyCode, data.data);
      var cartTotals = wp.data.select('wc/store/cart').getCartTotals();
      // Dispatch them again to trigger a re-render:
      wp.data.dispatch('wc/store/cart').setCartData(_objectSpread({}, cartTotals));
    });
  }, [billing, currencyCode, filters.paymentLocale]);
  return cachedAvailableGateways;
}

// Component that runs the hook but does not render anything.
function MollieGatewayUpdater(_ref) {
  var billing = _ref.billing,
    currencyCode = _ref.currencyCode,
    cartTotal = _ref.cartTotal,
    filters = _ref.filters,
    ajaxUrl = _ref.ajaxUrl;
  useMollieAvailableGateways(billing, currencyCode, cartTotal, filters, ajaxUrl);
  return null;
}
var onSubmitLocal;
var activePaymentMethodLocal;
var creditCardSelected = new Event("mollie_creditcard_component_selected", {
  bubbles: true
});
var MollieComponent = function MollieComponent(props) {
  var onSubmit = props.onSubmit,
    activePaymentMethod = props.activePaymentMethod,
    billing = props.billing,
    item = props.item,
    useEffect = props.useEffect,
    ajaxUrl = props.ajaxUrl,
    jQuery = props.jQuery,
    emitResponse = props.emitResponse,
    eventRegistration = props.eventRegistration,
    requiredFields = props.requiredFields,
    shippingData = props.shippingData;
  var responseTypes = emitResponse.responseTypes;
  var onPaymentSetup = eventRegistration.onPaymentSetup,
    onCheckoutValidation = eventRegistration.onCheckoutValidation;
  if (!item || !item.name) {
    return /*#__PURE__*/React.createElement("div", null, "Loading payment methods...");
  }
  var _wp$element$useState = wp.element.useState(''),
    _wp$element$useState2 = _slicedToArray(_wp$element$useState, 2),
    selectedIssuer = _wp$element$useState2[0],
    selectIssuer = _wp$element$useState2[1];
  var _wp$element$useState3 = wp.element.useState(''),
    _wp$element$useState4 = _slicedToArray(_wp$element$useState3, 2),
    inputPhone = _wp$element$useState4[0],
    selectPhone = _wp$element$useState4[1];
  var _wp$element$useState5 = wp.element.useState(''),
    _wp$element$useState6 = _slicedToArray(_wp$element$useState5, 2),
    inputBirthdate = _wp$element$useState6[0],
    selectBirthdate = _wp$element$useState6[1];
  var _wp$element$useState7 = wp.element.useState(''),
    _wp$element$useState8 = _slicedToArray(_wp$element$useState7, 2),
    inputCompany = _wp$element$useState8[0],
    selectCompany = _wp$element$useState8[1];
  var issuerKey = 'mollie-payments-for-woocommerce_issuer_' + activePaymentMethod;
  var companyNameString = requiredFields.companyNameString,
    phoneString = requiredFields.phoneString;
  function getPhoneField() {
    var shippingPhone = document.getElementById('shipping-phone');
    var billingPhone = document.getElementById('billing-phone');
    return billingPhone || shippingPhone;
  }
  useEffect(function () {
    var onProcessingPayment = function onProcessingPayment() {
      var cleanMethod = activePaymentMethod.replace('mollie_wc_gateway_', '');
      var phoneFieldName = "billing_phone_".concat(cleanMethod);
      var birthdateFieldName = "billing_birthdate_".concat(cleanMethod);
      var data = _defineProperty(_defineProperty(_defineProperty({
        payment_method: activePaymentMethod,
        payment_method_title: item.title
      }, issuerKey, selectedIssuer), "billing_company_billie", inputCompany), "cardToken", '');
      if (inputPhone) {
        data[phoneFieldName] = inputPhone;
      }
      if (inputBirthdate) {
        data[birthdateFieldName] = inputBirthdate;
      }
      var tokenVal = jQuery('.mollie-components > input').val();
      if (tokenVal) {
        data.cardToken = tokenVal;
      }
      return {
        type: responseTypes.SUCCESS,
        meta: {
          paymentMethodData: data
        }
      };
    };
    var unsubscribePaymentProcessing = onPaymentSetup(onProcessingPayment);
    return function () {
      unsubscribePaymentProcessing();
    };
  }, [selectedIssuer, onPaymentSetup, inputPhone, inputCompany, inputBirthdate]);
  useEffect(function () {
    var companyLabel = jQuery('div.wc-block-components-text-input.wc-block-components-address-form__company > label');
    if (companyLabel.length === 0 || item.hideCompanyField === true) {
      return;
    }
    if (activePaymentMethod === 'mollie_wc_gateway_billie') {
      var message = item.companyPlaceholder;
      companyLabel.replaceWith('<label htmlFor="shipping-company">' + message + '</label>');
    } else {
      if (companyNameString !== false) {
        companyLabel.replaceWith('<label htmlFor="shipping-company">' + companyNameString + '</label>');
      }
    }
    var isCompanyEmpty = billing.billingData.company === '' && shippingData.shippingAddress.company === '' && inputCompany === '';
    var unsubscribeProcessing = onCheckoutValidation(function () {
      if (activePaymentMethod === 'mollie_wc_gateway_billie' && isCompanyEmpty) {
        return {
          errorMessage: item.errorMessage
        };
      }
    });
    return function () {
      unsubscribeProcessing();
    };
  }, [activePaymentMethod, onCheckoutValidation, billing.billingData, item, companyNameString, inputCompany]);
  useEffect(function () {
    var _getPhoneField$labels, _getPhoneField;
    var phoneLabel = (_getPhoneField$labels = (_getPhoneField = getPhoneField()) === null || _getPhoneField === void 0 || (_getPhoneField = _getPhoneField.labels) === null || _getPhoneField === void 0 ? void 0 : _getPhoneField[0]) !== null && _getPhoneField$labels !== void 0 ? _getPhoneField$labels : null;
    if (!phoneLabel || phoneLabel.length === 0) {
      return;
    }
    if (activePaymentMethod === 'mollie_wc_gateway_in3') {
      phoneLabel.innerText = item.phonePlaceholder;
    } else {
      if (phoneString !== false) {
        phoneLabel.innerText = phoneString;
      }
    }
    var isPhoneEmpty = billing.billingData.phone === '' && shippingData.shippingAddress.phone === '' && inputPhone === '';
    var isBirthdateValid = inputBirthdate === '';
    var today = new Date();
    var birthdate = new Date(inputBirthdate);
    if (birthdate > today) {
      isBirthdateValid = false;
    }
    var unsubscribeProcessing = onCheckoutValidation(function () {
      if (activePaymentMethod === 'mollie_wc_gateway_in3' && (isPhoneEmpty || isBirthdateValid)) {
        return {
          errorMessage: item.errorMessage
        };
      }
    });
    return function () {
      unsubscribeProcessing();
    };
  }, [activePaymentMethod, onCheckoutValidation, billing.billingData, shippingData.shippingAddress, item, phoneString, inputBirthdate, inputPhone]);
  onSubmitLocal = onSubmit;
  var updateIssuer = function updateIssuer(e) {
    return selectIssuer(e.target.value);
  };
  var updateCompany = function updateCompany(e) {
    return selectCompany(e.target.value);
  };
  var updatePhone = function updatePhone(e) {
    return selectPhone(e.target.value);
  };
  var updateBirthdate = function updateBirthdate(e) {
    return selectBirthdate(e.target.value);
  };
  var itemContentP = item.content;
  if (item.content !== '') {
    itemContentP = /*#__PURE__*/React.createElement("p", null, item.content);
  }
  function shouldShowPhoneField() {
    //only if is required we will not show
    var phone = getPhoneField();
    var isPhoneRequired = phone ? phone.hasAttribute('required') || phone.getAttribute('aria-required') === 'true' : false;
    //else is true
    return !isPhoneRequired;
  }
  function fieldMarkup(id, fieldType, label, action, value) {
    var placeholder = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
    var className = "wc-block-components-text-input wc-block-components-address-form__" + id;
    return /*#__PURE__*/React.createElement("div", {
      className: "custom-input ".concat(className, " is-active")
    }, /*#__PURE__*/React.createElement("label", {
      htmlFor: id,
      dangerouslySetInnerHTML: {
        __html: label
      }
    }), /*#__PURE__*/React.createElement("input", {
      type: fieldType,
      name: id,
      id: id,
      value: value,
      onChange: action,
      placeholder: placeholder
    }));
  }
  if (item.issuers && item.name !== "mollie_wc_gateway_creditcard") {
    return /*#__PURE__*/React.createElement("div", null, itemContentP, /*#__PURE__*/React.createElement("select", {
      name: issuerKey,
      dangerouslySetInnerHTML: {
        __html: item.issuers
      },
      value: selectedIssuer,
      onChange: updateIssuer
    }));
  }
  if (item.name === "mollie_wc_gateway_creditcard") {
    return /*#__PURE__*/React.createElement("div", {
      dangerouslySetInnerHTML: {
        __html: item.content
      }
    });
  }
  if (item.name === "mollie_wc_gateway_billie") {
    var billingCompanyField = document.querySelector('#billing-company');
    var shippingCompanyField = document.querySelector('#shipping-company');
    var isBillingCompanyRequired = billingCompanyField === null || billingCompanyField === void 0 ? void 0 : billingCompanyField.hasAttribute('required');
    var isShippingCompanyRequired = shippingCompanyField === null || shippingCompanyField === void 0 ? void 0 : shippingCompanyField.hasAttribute('required');
    if (billingCompanyField && isBillingCompanyRequired || shippingCompanyField && isShippingCompanyRequired || item.hideCompanyField === true) {
      return;
    }
    var companyField = item.companyPlaceholder ? item.companyPlaceholder : "Company name";
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", null, itemContentP), fieldMarkup("billing_company_billie", "text", companyField, updateCompany, inputCompany));
  }
  useEffect(function () {
    var countryCodes = {
      BE: '+32xxxxxxxxx',
      NL: '+316xxxxxxxx',
      DE: '+49xxxxxxxxx',
      AT: '+43xxxxxxxxx'
    };
    var country = billing.billingData.country;
    item.phonePlaceholder = countryCodes[country] || countryCodes['NL'];
  }, [billing.billingData.country]);
  if (item.name === "mollie_wc_gateway_in3") {
    var birthdateField = item.birthdatePlaceholder || "Birthdate";
    var phoneField = item.phonePlaceholder || "+316xxxxxxxx";
    var phoneLabel = item.phoneLabel || "Phone";
    var showPhoneField = shouldShowPhoneField();
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", null, itemContentP), fieldMarkup("billing-birthdate", "date", birthdateField, updateBirthdate, inputBirthdate), showPhoneField && fieldMarkup("billing-phone-in3", "tel", phoneLabel, updatePhone, inputPhone, phoneField));
  }
  if (item.name === "mollie_wc_gateway_bizum") {
    var _phoneField = item.phonePlaceholder || "+34xxxxxxxxx";
    var _phoneLabel = item.phoneLabel || "Phone";
    var _showPhoneField = shouldShowPhoneField();
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", null, itemContentP), _showPhoneField && fieldMarkup("billing-phone-bizum", "tel", _phoneLabel, updatePhone, inputPhone, _phoneField));
  }
  if (item.name === "mollie_wc_gateway_riverty") {
    var _birthdateField = item.birthdatePlaceholder || "Birthdate";
    var _phoneField2 = item.phonePlaceholder || "+316xxxxxxxx";
    var _phoneLabel2 = item.phoneLabel || "Phone";
    var _showPhoneField2 = shouldShowPhoneField();
    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", null, itemContentP), fieldMarkup("billing-birthdate", "date", _birthdateField, updateBirthdate, inputBirthdate), _showPhoneField2 && fieldMarkup("billing-phone-riverty", "tel", _phoneLabel2, updatePhone, inputPhone, _phoneField2));
  }
  return /*#__PURE__*/React.createElement("div", null, itemContentP);
};
var Label = function Label(_ref2) {
  var item = _ref2.item,
    filters = _ref2.filters,
    ajaxUrl = _ref2.ajaxUrl;
  var cartData = wp.data.useSelect(function (select) {
    return select('wc/store/cart').getCartData();
  }, []);
  var cartTotals = wp.data.useSelect(function (select) {
    return select('wc/store/cart').getCartTotals();
  }, []);
  var cartTotal = (cartTotals === null || cartTotals === void 0 ? void 0 : cartTotals.total_price) || 0;
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("div", {
    dangerouslySetInnerHTML: {
      __html: item.label
    }
  }), /*#__PURE__*/React.createElement(MollieGatewayUpdater, {
    billing: cartData.billingAddress,
    currencyCode: wcSettings.currency.code,
    filters: filters,
    ajaxUrl: ajaxUrl,
    cartTotal: cartTotal
  }));
};
var molliePaymentMethod = function molliePaymentMethod(useEffect, ajaxUrl, filters, gatewayData, availableGateways, item, jQuery, requiredFields) {
  if (item.name === "mollie_wc_gateway_creditcard") {
    document.addEventListener('mollie_components_ready_to_submit', function () {
      onSubmitLocal();
    });
  }
  function creditcardSelectedEvent() {
    if (item.name === "mollie_wc_gateway_creditcard") {
      document.documentElement.dispatchEvent(creditCardSelected);
    }
  }
  return {
    name: item.name,
    label: /*#__PURE__*/React.createElement(Label, {
      item: item,
      ajaxUrl: ajaxUrl,
      filters: filters
    }),
    content: /*#__PURE__*/React.createElement(MollieComponent, {
      item: item,
      useEffect: useEffect,
      ajaxUrl: ajaxUrl,
      jQuery: jQuery,
      requiredFields: requiredFields
    }),
    edit: /*#__PURE__*/React.createElement("div", null, item.edit),
    paymentMethodId: item.paymentMethodId,
    canMakePayment: function canMakePayment(_ref3) {
      var cartTotals = _ref3.cartTotals,
        billingData = _ref3.billingData;
      if (!_.isEmpty(item.allowedCountries) && !item.allowedCountries.includes(billingData.country)) {
        return false;
      }
      if (cartTotals <= 0) {
        return true;
      }
      var currencyCode = cartTotals === null || cartTotals === void 0 ? void 0 : cartTotals.currency_code;
      var country = billingData === null || billingData === void 0 ? void 0 : billingData.country;
      if (!country) {
        var _wcSettings2;
        country = (_wcSettings2 = wcSettings) === null || _wcSettings2 === void 0 ? void 0 : _wcSettings2.baseLocation.country;
      }
      var currentFilterKey = currencyCode + "-" + country;
      creditcardSelectedEvent();
      if (!cachedAvailableGateways.hasOwnProperty(currentFilterKey)) {
        cachedAvailableGateways = _objectSpread(_objectSpread({}, cachedAvailableGateways), availableGateways);
      }
      if (availableGateways.hasOwnProperty(currentFilterKey) && availableGateways[currentFilterKey].hasOwnProperty(item.name)) {
        return true;
      }
      if (cachedAvailableGateways.hasOwnProperty(currentFilterKey) && cachedAvailableGateways[currentFilterKey].hasOwnProperty(item.name)) {
        return true;
      }
      return false;
    },
    ariaLabel: item.ariaLabel,
    supports: {
      features: item.supports
    }
  };
};
/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (molliePaymentMethod);

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry needs to be wrapped in an IIFE because it needs to be isolated against other modules in the chunk.
(() => {
/*!******************************************!*\
  !*** ./resources/js/mollieBlockIndex.js ***!
  \******************************************/
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _blocks_molliePaymentMethod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./blocks/molliePaymentMethod */ "./resources/js/blocks/molliePaymentMethod.js");
/* harmony import */ var _blocks_ApplePayButtonComponent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./blocks/ApplePayButtonComponent */ "./resources/js/blocks/ApplePayButtonComponent.js");
/* harmony import */ var _blocks_ApplePayButtonEditorComponent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./blocks/ApplePayButtonEditorComponent */ "./resources/js/blocks/ApplePayButtonEditorComponent.js");



(function (_ref) {
  var _wc$wcBlocksData;
  var mollieBlockData = _ref.mollieBlockData,
    wc = _ref.wc,
    _ = _ref._,
    jQuery = _ref.jQuery;
  if (_.isEmpty(mollieBlockData)) {
    return;
  }
  var registerPaymentMethod = wc.wcBlocksRegistry.registerPaymentMethod;
  var defaultFields = wc.wcSettings.allSettings.defaultFields;
  var _mollieBlockData$gate = mollieBlockData.gatewayData,
    ajaxUrl = _mollieBlockData$gate.ajaxUrl,
    filters = _mollieBlockData$gate.filters,
    gatewayData = _mollieBlockData$gate.gatewayData,
    availableGateways = _mollieBlockData$gate.availableGateways;
  var useEffect = wp.element.useEffect;
  var isAppleSession = typeof window.ApplePaySession === "function";
  var isEditorContext = wc === null || wc === void 0 || (_wc$wcBlocksData = wc.wcBlocksData) === null || _wc$wcBlocksData === void 0 ? void 0 : _wc$wcBlocksData.isEditor();
  var companyNameString = defaultFields.company.label;
  var phoneString = defaultFields.phone.label;
  var requiredFields = {
    'companyNameString': companyNameString,
    'phoneString': phoneString
  };
  gatewayData.forEach(function (item) {
    var register = function register() {
      return registerPaymentMethod((0,_blocks_molliePaymentMethod__WEBPACK_IMPORTED_MODULE_0__["default"])(useEffect, ajaxUrl, filters, gatewayData, availableGateways, item, jQuery, requiredFields));
    };
    if (item.name === 'mollie_wc_gateway_applepay') {
      var isExpressEnabled = item.isExpressEnabled;
      if (isEditorContext || isAppleSession && window.ApplePaySession.canMakePayments()) {
        register();
      }
      if (isExpressEnabled !== true) {
        return;
      }
      var registerExpressPaymentMethod = wc.wcBlocksRegistry.registerExpressPaymentMethod;
      registerExpressPaymentMethod({
        name: 'mollie_wc_gateway_applepay_express',
        title: 'Apple Pay Express button',
        description: 'Apple Pay Express button',
        content: /*#__PURE__*/React.createElement(_blocks_ApplePayButtonComponent__WEBPACK_IMPORTED_MODULE_1__["default"], null),
        edit: /*#__PURE__*/React.createElement(_blocks_ApplePayButtonEditorComponent__WEBPACK_IMPORTED_MODULE_2__["default"], null),
        ariaLabel: 'Apple Pay',
        canMakePayment: function canMakePayment() {
          if (isEditorContext) {
            return true;
          }
          return isAppleSession && window.ApplePaySession.canMakePayments();
        },
        paymentMethodId: 'mollie_wc_gateway_applepay',
        gatewayId: 'mollie_wc_gateway_applepay',
        supports: {
          features: ['products'],
          style: ['height', 'borderRadius']
        }
      });
      return;
    }
    register();
  });
})(window, wc);
})();

/******/ })()
;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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RUYsUUFBUSxDQUFDLENBQUM7TUFDZDtNQUNBLElBQUlDLGdCQUFnQixLQUFLLElBQUksRUFBRTtRQUMzQjtNQUNKO01BQ0EsSUFBT0UsNEJBQTRCLEdBQUlkLEVBQUUsQ0FBQ0UsZ0JBQWdCLENBQW5EWSw0QkFBNEI7TUFDbkNBLDRCQUE0QixDQUFDO1FBQ3pCdlEsSUFBSSxFQUFFLG9DQUFvQztRQUMxQzBKLEtBQUssRUFBRSwwQkFBMEI7UUFDakM4RyxXQUFXLEVBQUUsMEJBQTBCO1FBQ3ZDMUUsT0FBTyxlQUFFekgsS0FBQSxDQUFBQyxhQUFBLENBQUN2Ryx1RUFBdUIsTUFBQyxDQUFDO1FBQ25DNFEsSUFBSSxlQUFFdEssS0FBQSxDQUFBQyxhQUFBLENBQUNLLDZFQUE2QixNQUFDLENBQUM7UUFDdEMwSyxTQUFTLEVBQUUsV0FBVztRQUN0QlIsY0FBYyxFQUFFLFNBQUFBLGVBQUEsRUFBTTtVQUNsQixJQUFJbUIsZUFBZSxFQUFFO1lBQ2pCLE9BQU8sSUFBSTtVQUNmO1VBQ0EsT0FBT0QsY0FBYyxJQUFJM1IsTUFBTSxDQUFDa0MsZUFBZSxDQUFDZ1EsZUFBZSxDQUFDLENBQUM7UUFDckUsQ0FBQztRQUNEMUIsZUFBZSxFQUFFLDRCQUE0QjtRQUM3QzZCLFNBQVMsRUFBRSw0QkFBNEI7UUFDdkNuQixRQUFRLEVBQUU7VUFDTkMsUUFBUSxFQUFFLENBQUMsVUFBVSxDQUFDO1VBQ3RCblEsS0FBSyxFQUFFLENBQUMsUUFBUSxFQUFFLGNBQWM7UUFDcEM7TUFDSixDQUFDLENBQUM7TUFDRjtJQUNKO0lBQ0FnUixRQUFRLENBQUMsQ0FBQztFQUNkLENBQUMsQ0FBQztBQUNOLENBQUMsRUFDSGhTLE1BQU0sRUFBRXFSLEVBQUUsQ0FBQyxDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbW9sbGllLXBheW1lbnRzLWZvci13b29jb21tZXJjZS8uL3Jlc291cmNlcy9qcy9hcHBsZVBheUVycm9yLmpzIiwid2VicGFjazovL21vbGxpZS1wYXltZW50cy1mb3Itd29vY29tbWVyY2UvLi9yZXNvdXJjZXMvanMvYXBwbGVQYXlSZXF1ZXN0LmpzIiwid2VicGFjazovL21vbGxpZS1wYXltZW50cy1mb3Itd29vY29tbWVyY2UvLi9yZXNvdXJjZXMvanMvYmxvY2tzL0FwcGxlUGF5QnV0dG9uQ29tcG9uZW50LmpzIiwid2VicGFjazovL21vbGxpZS1wYXltZW50cy1mb3Itd29vY29tbWVyY2UvLi9yZXNvdXJjZXMvanMvYmxvY2tzL0FwcGxlUGF5QnV0dG9uRWRpdG9yQ29tcG9uZW50LmpzIiwid2VicGFjazovL21vbGxpZS1wYXltZW50cy1mb3Itd29vY29tbWVyY2UvLi9yZXNvdXJjZXMvanMvYmxvY2tzL21vbGxpZVBheW1lbnRNZXRob2QuanMiLCJ3ZWJwYWNrOi8vbW9sbGllLXBheW1lbnRzLWZvci13b29jb21tZXJjZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9tb2xsaWUtcGF5bWVudHMtZm9yLXdvb2NvbW1lcmNlL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9tb2xsaWUtcGF5bWVudHMtZm9yLXdvb2NvbW1lcmNlL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vbW9sbGllLXBheW1lbnRzLWZvci13b29jb21tZXJjZS93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL21vbGxpZS1wYXltZW50cy1mb3Itd29vY29tbWVyY2UvLi9yZXNvdXJjZXMvanMvbW9sbGllQmxvY2tJbmRleC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gY3JlYXRlQXBwbGVFcnJvcnMoZXJyb3JzKSB7XG4gICAgY29uc3QgZXJyb3JMaXN0ID0gW11cbiAgICBmb3IgKGNvbnN0IGVycm9yIG9mIGVycm9ycykge1xuICAgICAgICBjb25zdCB7Y29udGFjdEZpZWxkID0gbnVsbCwgY29kZSA9IG51bGwsIG1lc3NhZ2UgPSBudWxsfSA9IGVycm9yXG4gICAgICAgIGNvbnN0IGFwcGxlRXJyb3IgPSBjb250YWN0RmllbGQgPyBuZXcgQXBwbGVQYXlFcnJvcihjb2RlLCBjb250YWN0RmllbGQsIG1lc3NhZ2UpIDogbmV3IEFwcGxlUGF5RXJyb3IoY29kZSlcbiAgICAgICAgZXJyb3JMaXN0LnB1c2goYXBwbGVFcnJvcilcbiAgICB9XG5cbiAgICByZXR1cm4gZXJyb3JMaXN0XG59XG4iLCJleHBvcnQgY29uc3QgcmVxdWVzdCA9IChjb3VudHJ5Q29kZSwgY3VycmVuY3lDb2RlLCB0b3RhbExhYmVsLCBzdWJ0b3RhbCkgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGNvdW50cnlDb2RlOiBjb3VudHJ5Q29kZSxcbiAgICAgICAgY3VycmVuY3lDb2RlOiBjdXJyZW5jeUNvZGUsXG4gICAgICAgIHN1cHBvcnRlZE5ldHdvcmtzOiBbJ2FtZXgnLCAnbWFlc3RybycsICdtYXN0ZXJDYXJkJywgJ3Zpc2EnLCAndlBheSddLFxuICAgICAgICBtZXJjaGFudENhcGFiaWxpdGllczogWydzdXBwb3J0czNEUyddLFxuICAgICAgICBzaGlwcGluZ1R5cGU6ICdzaGlwcGluZycsXG4gICAgICAgIHJlcXVpcmVkQmlsbGluZ0NvbnRhY3RGaWVsZHM6IFtcbiAgICAgICAgICAgICdwb3N0YWxBZGRyZXNzJyxcbiAgICAgICAgICAgICdlbWFpbCdcbiAgICAgICAgXSxcbiAgICAgICAgcmVxdWlyZWRTaGlwcGluZ0NvbnRhY3RGaWVsZHM6IFtcbiAgICAgICAgICAgICdwb3N0YWxBZGRyZXNzJyxcbiAgICAgICAgICAgICdlbWFpbCdcbiAgICAgICAgXSxcbiAgICAgICAgdG90YWw6IHtcbiAgICAgICAgICAgIGxhYmVsOiB0b3RhbExhYmVsLFxuICAgICAgICAgICAgYW1vdW50OiBzdWJ0b3RhbCxcbiAgICAgICAgICAgIHR5cGU6ICdmaW5hbCdcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsImltcG9ydCB7cmVxdWVzdH0gZnJvbSBcIi4uL2FwcGxlUGF5UmVxdWVzdFwiO1xuaW1wb3J0IHtjcmVhdGVBcHBsZUVycm9yc30gZnJvbSBcIi4uL2FwcGxlUGF5RXJyb3JcIjtcblxuZXhwb3J0IGNvbnN0IEFwcGxlUGF5QnV0dG9uQ29tcG9uZW50ID0gKHsgYnV0dG9uQXR0cmlidXRlcyA9IHt9IH0pID0+IHtcbiAgICBjb25zdCBtb2xsaWVBcHBsZVBheUJsb2NrRGF0YUNhcnQgPSB3aW5kb3cubW9sbGllQXBwbGVQYXlCbG9ja0RhdGFDYXJ0IHx8IHdpbmRvdy5tb2xsaWVCbG9ja0RhdGEubW9sbGllQXBwbGVQYXlCbG9ja0RhdGFDYXJ0XG4gICAgY29uc3Qgbm9uY2UgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcIndvb2NvbW1lcmNlLXByb2Nlc3MtY2hlY2tvdXQtbm9uY2VcIikudmFsdWVcbiAgICBsZXQgdXBkYXRlZENvbnRhY3RJbmZvID0gW11cbiAgICBsZXQgcmVkaXJlY3Rpb25VcmwgPSAnJ1xuICAgIGNvbnN0IHtcbiAgICAgICAgcHJvZHVjdDoge25lZWRTaGlwcGluZyA9IHRydWUsIHN1YnRvdGFsfSxcbiAgICAgICAgc2hvcDoge2NvdW50cnlDb2RlLCBjdXJyZW5jeUNvZGUgPSAnRVVSJywgdG90YWxMYWJlbCA9ICcnfSxcbiAgICAgICAgYWpheFVybCxcbiAgICB9ID0gbW9sbGllQXBwbGVQYXlCbG9ja0RhdGFDYXJ0XG4gICAgY29uc3Qgc3R5bGUgPSB7XG4gICAgICAgIGhlaWdodDogYCR7YnV0dG9uQXR0cmlidXRlcy5oZWlnaHQgfHwgNDh9cHhgLFxuICAgICAgICBib3JkZXJSYWRpdXM6IGAke2J1dHRvbkF0dHJpYnV0ZXMuYm9yZGVyUmFkaXVzIHx8IDR9cHhgXG4gICAgfVxuXG4gICAgY29uc3QgZmluZFNlbGVjdGVkU2hpcHBpbmdNZXRob2QgPSAoc2hpcHBpbmdSYXRlcykgPT4ge1xuICAgICAgICBsZXQgc2hpcHBpbmdSYXRlID0gc2hpcHBpbmdSYXRlcy5maW5kKChzaGlwcGluZ01ldGhvZCkgPT4gc2hpcHBpbmdNZXRob2Quc2VsZWN0ZWQgPT09IHRydWUpXG4gICAgICAgIGNvbnN0IGFwcGxlRm9ybWF0dGVkUmF0ZSA9IHtcbiAgICAgICAgICAgIGFtb3VudDogJycsXG4gICAgICAgICAgICBkZXRhaWw6ICcnLFxuICAgICAgICAgICAgbGFiZWw6IHNoaXBwaW5nUmF0ZS5uYW1lLFxuICAgICAgICAgICAgaWRlbnRpZmllcjogc2hpcHBpbmdSYXRlLnJhdGVfaWQsXG4gICAgICAgICAgICBzZWxlY3RlZDogc2hpcHBpbmdSYXRlLnNlbGVjdGVkLFxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzaGlwcGluZ1JhdGUgPyBhcHBsZUZvcm1hdHRlZFJhdGUgOiAnJ1xuICAgIH1cblxuICAgIGxldCBhcHBsZVBheVNlc3Npb24gPSAoKSA9PiB7XG4gICAgICAgIGNvbnN0IHNlc3Npb24gPSBuZXcgQXBwbGVQYXlTZXNzaW9uKDMsIHJlcXVlc3QoY291bnRyeUNvZGUsIGN1cnJlbmN5Q29kZSwgdG90YWxMYWJlbCwgc3VidG90YWwpKVxuICAgICAgICBjb25zdCBzdG9yZSA9IHdwLmRhdGEuc2VsZWN0KCd3Yy9zdG9yZS9jYXJ0JylcbiAgICAgICAgY29uc3Qgc2hpcHBpbmdSYXRlcyA9IHN0b3JlLmdldFNoaXBwaW5nUmF0ZXMoKT8uWzBdPy5zaGlwcGluZ19yYXRlcztcbiAgICAgICAgbGV0IHNlbGVjdGVkU2hpcHBpbmdNZXRob2QgPSAnJztcbiAgICAgICAgaWYgKHNoaXBwaW5nUmF0ZXMgJiYgc2hpcHBpbmdSYXRlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBzZWxlY3RlZFNoaXBwaW5nTWV0aG9kID0gZmluZFNlbGVjdGVkU2hpcHBpbmdNZXRob2Qoc2hpcHBpbmdSYXRlcywgc2VsZWN0ZWRTaGlwcGluZ01ldGhvZCk7XG4gICAgICAgIH1cbiAgICAgICAgICAgIHNlc3Npb24ub25zaGlwcGluZ21ldGhvZHNlbGVjdGVkID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBqUXVlcnkuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiBhamF4VXJsLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnbW9sbGllX2FwcGxlX3BheV91cGRhdGVfc2hpcHBpbmdfbWV0aG9kJyxcbiAgICAgICAgICAgICAgICAgICAgc2hpcHBpbmdNZXRob2Q6IGV2ZW50LnNoaXBwaW5nTWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICBjYWxsZXJQYWdlOiAnY2FydCcsXG4gICAgICAgICAgICAgICAgICAgIHNpbXBsaWZpZWRDb250YWN0OiB1cGRhdGVkQ29udGFjdEluZm8sXG4gICAgICAgICAgICAgICAgICAgICd3b29jb21tZXJjZS1wcm9jZXNzLWNoZWNrb3V0LW5vbmNlJzogbm9uY2UsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiAoYXBwbGVQYXlTaGlwcGluZ01ldGhvZFVwZGF0ZSwgdGV4dFN0YXR1cywganFYSFIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlc3BvbnNlID0gYXBwbGVQYXlTaGlwcGluZ01ldGhvZFVwZGF0ZS5kYXRhXG4gICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkU2hpcHBpbmdNZXRob2QgPSBldmVudC5zaGlwcGluZ01ldGhvZFxuICAgICAgICAgICAgICAgICAgICBpZiAoYXBwbGVQYXlTaGlwcGluZ01ldGhvZFVwZGF0ZS5zdWNjZXNzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UuZXJyb3JzID0gY3JlYXRlQXBwbGVFcnJvcnMocmVzcG9uc2UuZXJyb3JzKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGVTaGlwcGluZ01ldGhvZFNlbGVjdGlvbihyZXNwb25zZSlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiAoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybih0ZXh0U3RhdHVzLCBlcnJvclRocm93bilcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5hYm9ydCgpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgc2Vzc2lvbi5vbnNoaXBwaW5nY29udGFjdHNlbGVjdGVkID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBqUXVlcnkuYWpheCh7XG4gICAgICAgICAgICAgICAgdXJsOiBhamF4VXJsLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnbW9sbGllX2FwcGxlX3BheV91cGRhdGVfc2hpcHBpbmdfY29udGFjdCcsXG4gICAgICAgICAgICAgICAgICAgIHNpbXBsaWZpZWRDb250YWN0OiBldmVudC5zaGlwcGluZ0NvbnRhY3QsXG4gICAgICAgICAgICAgICAgICAgIGNhbGxlclBhZ2U6ICdjYXJ0JyxcbiAgICAgICAgICAgICAgICAgICAgbmVlZFNoaXBwaW5nOiBuZWVkU2hpcHBpbmcsXG4gICAgICAgICAgICAgICAgICAgICd3b29jb21tZXJjZS1wcm9jZXNzLWNoZWNrb3V0LW5vbmNlJzogbm9uY2UsXG4gICAgICAgICAgICAgICAgICAgIHNoaXBwaW5nTWV0aG9kOiBzZWxlY3RlZFNoaXBwaW5nTWV0aG9kLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3VjY2VzczogKGFwcGxlUGF5U2hpcHBpbmdDb250YWN0VXBkYXRlLCB0ZXh0U3RhdHVzLCBqcVhIUikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzcG9uc2UgPSBhcHBsZVBheVNoaXBwaW5nQ29udGFjdFVwZGF0ZS5kYXRhXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRDb250YWN0SW5mbyA9IGV2ZW50LnNoaXBwaW5nQ29udGFjdFxuICAgICAgICAgICAgICAgICAgICBpZiAoYXBwbGVQYXlTaGlwcGluZ0NvbnRhY3RVcGRhdGUuc3VjY2VzcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmVycm9ycyA9IGNyZWF0ZUFwcGxlRXJyb3JzKHJlc3BvbnNlLmVycm9ycylcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UubmV3U2hpcHBpbmdNZXRob2RzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZFNoaXBwaW5nTWV0aG9kID0gcmVzcG9uc2UubmV3U2hpcHBpbmdNZXRob2RzWzBdXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZVNoaXBwaW5nQ29udGFjdFNlbGVjdGlvbihyZXNwb25zZSlcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiAoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybih0ZXh0U3RhdHVzLCBlcnJvclRocm93bilcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5hYm9ydCgpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgc2Vzc2lvbi5vbnZhbGlkYXRlbWVyY2hhbnQgPSAoYXBwbGVQYXlWYWxpZGF0ZU1lcmNoYW50RXZlbnQpID0+IHtcbiAgICAgICAgICAgIGpRdWVyeS5hamF4KHtcbiAgICAgICAgICAgICAgICB1cmw6IGFqYXhVcmwsXG4gICAgICAgICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBhY3Rpb246ICdtb2xsaWVfYXBwbGVfcGF5X3ZhbGlkYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0aW9uVXJsOiBhcHBsZVBheVZhbGlkYXRlTWVyY2hhbnRFdmVudC52YWxpZGF0aW9uVVJMLFxuICAgICAgICAgICAgICAgICAgICAnd29vY29tbWVyY2UtcHJvY2Vzcy1jaGVja291dC1ub25jZSc6IG5vbmNlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgc3VjY2VzczogKG1lcmNoYW50U2Vzc2lvbiwgdGV4dFN0YXR1cywganFYSFIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lcmNoYW50U2Vzc2lvbi5zdWNjZXNzID09PSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLmNvbXBsZXRlTWVyY2hhbnRWYWxpZGF0aW9uKEpTT04ucGFyc2UobWVyY2hhbnRTZXNzaW9uLmRhdGEpKVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKG1lcmNoYW50U2Vzc2lvbi5kYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5hYm9ydCgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGVycm9yOiAoanFYSFIsIHRleHRTdGF0dXMsIGVycm9yVGhyb3duKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2Fybih0ZXh0U3RhdHVzLCBlcnJvclRocm93bilcbiAgICAgICAgICAgICAgICAgICAgc2Vzc2lvbi5hYm9ydCgpXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICAgICAgc2Vzc2lvbi5vbnBheW1lbnRhdXRob3JpemVkID0gKEFwcGxlUGF5UGF5bWVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3Qge2JpbGxpbmdDb250YWN0LCBzaGlwcGluZ0NvbnRhY3R9ID0gQXBwbGVQYXlQYXltZW50LnBheW1lbnRcblxuICAgICAgICAgICAgalF1ZXJ5LmFqYXgoe1xuICAgICAgICAgICAgICAgIHVybDogYWpheFVybCxcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogJ21vbGxpZV9hcHBsZV9wYXlfY3JlYXRlX29yZGVyX2NhcnQnLFxuICAgICAgICAgICAgICAgICAgICBzaGlwcGluZ0NvbnRhY3Q6IEFwcGxlUGF5UGF5bWVudC5wYXltZW50LnNoaXBwaW5nQ29udGFjdCxcbiAgICAgICAgICAgICAgICAgICAgYmlsbGluZ0NvbnRhY3Q6IEFwcGxlUGF5UGF5bWVudC5wYXltZW50LmJpbGxpbmdDb250YWN0LFxuICAgICAgICAgICAgICAgICAgICB0b2tlbjogQXBwbGVQYXlQYXltZW50LnBheW1lbnQudG9rZW4sXG4gICAgICAgICAgICAgICAgICAgIHNoaXBwaW5nTWV0aG9kOiBzZWxlY3RlZFNoaXBwaW5nTWV0aG9kLFxuICAgICAgICAgICAgICAgICAgICAnbW9sbGllLXBheW1lbnRzLWZvci13b29jb21tZXJjZV9pc3N1ZXJfYXBwbGVwYXknOiAnYXBwbGVwYXknLFxuICAgICAgICAgICAgICAgICAgICAnd29vY29tbWVyY2UtcHJvY2Vzcy1jaGVja291dC1ub25jZSc6IG5vbmNlLFxuICAgICAgICAgICAgICAgICAgICAnYmlsbGluZ19maXJzdF9uYW1lJzogYmlsbGluZ0NvbnRhY3QuZ2l2ZW5OYW1lIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAnYmlsbGluZ19sYXN0X25hbWUnOiBiaWxsaW5nQ29udGFjdC5mYW1pbHlOYW1lIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAnYmlsbGluZ19jb21wYW55JzogJycsXG4gICAgICAgICAgICAgICAgICAgICdiaWxsaW5nX2NvdW50cnknOiBiaWxsaW5nQ29udGFjdC5jb3VudHJ5Q29kZSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgJ2JpbGxpbmdfYWRkcmVzc18xJzogYmlsbGluZ0NvbnRhY3QuYWRkcmVzc0xpbmVzWzBdIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAnYmlsbGluZ19hZGRyZXNzXzInOiBiaWxsaW5nQ29udGFjdC5hZGRyZXNzTGluZXNbMV0gfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICdiaWxsaW5nX3Bvc3Rjb2RlJzogYmlsbGluZ0NvbnRhY3QucG9zdGFsQ29kZSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgJ2JpbGxpbmdfY2l0eSc6IGJpbGxpbmdDb250YWN0LmxvY2FsaXR5IHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAnYmlsbGluZ19zdGF0ZSc6IGJpbGxpbmdDb250YWN0LmFkbWluaXN0cmF0aXZlQXJlYSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgJ2JpbGxpbmdfcGhvbmUnOiBiaWxsaW5nQ29udGFjdC5waG9uZU51bWJlciB8fCAnMDAwMDAwMDAwMDAwJyxcbiAgICAgICAgICAgICAgICAgICAgJ2JpbGxpbmdfZW1haWwnOiBzaGlwcGluZ0NvbnRhY3QuZW1haWxBZGRyZXNzIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAnc2hpcHBpbmdfZmlyc3RfbmFtZSc6IHNoaXBwaW5nQ29udGFjdC5naXZlbk5hbWUgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICdzaGlwcGluZ19sYXN0X25hbWUnOiBzaGlwcGluZ0NvbnRhY3QuZmFtaWx5TmFtZSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgJ3NoaXBwaW5nX2NvbXBhbnknOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgJ3NoaXBwaW5nX2NvdW50cnknOiBzaGlwcGluZ0NvbnRhY3QuY291bnRyeUNvZGUgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICdzaGlwcGluZ19hZGRyZXNzXzEnOiBzaGlwcGluZ0NvbnRhY3QuYWRkcmVzc0xpbmVzWzBdIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAnc2hpcHBpbmdfYWRkcmVzc18yJzogc2hpcHBpbmdDb250YWN0LmFkZHJlc3NMaW5lc1sxXSB8fCAnJyxcbiAgICAgICAgICAgICAgICAgICAgJ3NoaXBwaW5nX3Bvc3Rjb2RlJzogc2hpcHBpbmdDb250YWN0LnBvc3RhbENvZGUgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICdzaGlwcGluZ19jaXR5Jzogc2hpcHBpbmdDb250YWN0LmxvY2FsaXR5IHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAnc2hpcHBpbmdfc3RhdGUnOiBzaGlwcGluZ0NvbnRhY3QuYWRtaW5pc3RyYXRpdmVBcmVhIHx8ICcnLFxuICAgICAgICAgICAgICAgICAgICAnc2hpcHBpbmdfcGhvbmUnOiBzaGlwcGluZ0NvbnRhY3QucGhvbmVOdW1iZXIgfHwgJzAwMDAwMDAwMDAwMCcsXG4gICAgICAgICAgICAgICAgICAgICdzaGlwcGluZ19lbWFpbCc6IHNoaXBwaW5nQ29udGFjdC5lbWFpbEFkZHJlc3MgfHwgJycsXG4gICAgICAgICAgICAgICAgICAgICdvcmRlcl9jb21tZW50cyc6ICcnLFxuICAgICAgICAgICAgICAgICAgICAncGF5bWVudF9tZXRob2QnOiAnbW9sbGllX3djX2dhdGV3YXlfYXBwbGVwYXknLFxuICAgICAgICAgICAgICAgICAgICAnX3dwX2h0dHBfcmVmZXJlcic6ICcvP3djLWFqYXg9dXBkYXRlX29yZGVyX3JldmlldydcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IChhdXRob3JpemF0aW9uUmVzdWx0LCB0ZXh0U3RhdHVzLCBqcVhIUikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gYXV0aG9yaXphdGlvblJlc3VsdC5kYXRhXG4gICAgICAgICAgICAgICAgICAgIGlmIChhdXRob3JpemF0aW9uUmVzdWx0LnN1Y2Nlc3MgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZGlyZWN0aW9uVXJsID0gcmVzdWx0WydyZXR1cm5VcmwnXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb24uY29tcGxldGVQYXltZW50KHJlc3VsdFsncmVzcG9uc2VUb0FwcGxlJ10pXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IHJlZGlyZWN0aW9uVXJsXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQuZXJyb3JzID0gY3JlYXRlQXBwbGVFcnJvcnMocmVzdWx0LmVycm9ycylcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlc3Npb24uY29tcGxldGVQYXltZW50KHJlc3VsdClcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZXJyb3I6IChqcVhIUiwgdGV4dFN0YXR1cywgZXJyb3JUaHJvd24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKHRleHRTdGF0dXMsIGVycm9yVGhyb3duKVxuICAgICAgICAgICAgICAgICAgICBzZXNzaW9uLmFib3J0KClcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBzZXNzaW9uLmJlZ2luKClcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBpZD1cIm1vbGxpZV9hcHBsZXBheV9idXR0b25cIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYXBwbGUtcGF5LWJ1dHRvbiBhcHBsZS1wYXktYnV0dG9uLWJsYWNrXCJcbiAgICAgICAgICAgIG9uQ2xpY2s9eyhldmVudCkgPT4ge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgYXBwbGVQYXlTZXNzaW9uKCk7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgICA+XG4gICAgICAgIDwvYnV0dG9uPlxuICAgICk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IEFwcGxlUGF5QnV0dG9uQ29tcG9uZW50O1xuIiwiZXhwb3J0IGNvbnN0IEFwcGxlUGF5QnV0dG9uRWRpdG9yQ29tcG9uZW50ID0gKHsgYnV0dG9uQXR0cmlidXRlcyA9IHt9IH0pID0+IHtcbiAgICBjb25zdCBzdHlsZSA9IHtcbiAgICAgICAgaGVpZ2h0OiBgJHtidXR0b25BdHRyaWJ1dGVzLmhlaWdodCB8fCA0OH1weGAsXG4gICAgICAgIGJvcmRlclJhZGl1czogYCR7YnV0dG9uQXR0cmlidXRlcy5ib3JkZXJSYWRpdXMgfHwgNH1weGBcbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBpZD1cIm1vbGxpZV9hcHBsZXBheV9idXR0b25cIlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYXBwbGUtcGF5LWJ1dHRvbiBhcHBsZS1wYXktYnV0dG9uLWJsYWNrXCJcbiAgICAgICAgICAgIHN0eWxlPXtzdHlsZX1cbiAgICAgICAgPlxuICAgICAgICA8L2J1dHRvbj5cbiAgICApO1xufTtcbmV4cG9ydCBkZWZhdWx0IEFwcGxlUGF5QnV0dG9uRWRpdG9yQ29tcG9uZW50O1xuIiwibGV0IGNhY2hlZEF2YWlsYWJsZUdhdGV3YXlzID0ge307XG5cbmZ1bmN0aW9uIHNldEF2YWlsYWJsZUdhdGV3YXlzKGNvdW50cnksIGN1cnJlbmN5Q29kZSwgZGF0YSkge1xuICAgIGNhY2hlZEF2YWlsYWJsZUdhdGV3YXlzID0ge1xuICAgICAgICAuLi5jYWNoZWRBdmFpbGFibGVHYXRld2F5cyxcbiAgICAgICAgLi4uZGF0YVxuICAgIH07XG59XG5mdW5jdGlvbiB1c2VNb2xsaWVBdmFpbGFibGVHYXRld2F5cyhiaWxsaW5nLCBjdXJyZW5jeUNvZGUsIGNhcnRUb3RhbCwgZmlsdGVycywgYWpheFVybCkge1xuICAgIGxldCBjb3VudHJ5ID0gYmlsbGluZy5jb3VudHJ5O1xuICAgIGNvbnN0IGNvZGUgPSBjdXJyZW5jeUNvZGU7XG4gICAgY29uc3QgdmFsdWUgPSBjYXJ0VG90YWw7XG4gICAgaWYgKCFjb3VudHJ5KSB7XG4gICAgICAgIGNvdW50cnkgPSB3Y1NldHRpbmdzPy5iYXNlTG9jYXRpb24/LmNvdW50cnk7XG4gICAgfVxuXG4gICAgd3AuZWxlbWVudC51c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBpZiAoIWNvdW50cnkpIHJldHVybjtcbiAgICAgICAgY29uc3QgY3VycmVuY3lDb2RlID0gY29kZTtcbiAgICAgICAgY29uc3QgY2FydFRvdGFsID0gdmFsdWU7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRGaWx0ZXJLZXkgPSBjdXJyZW5jeUNvZGUgKyBcIi1cIiArIGNvdW50cnk7XG4gICAgICAgIGlmIChjYWNoZWRBdmFpbGFibGVHYXRld2F5cy5oYXNPd25Qcm9wZXJ0eShjdXJyZW50RmlsdGVyS2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGZldGNoKFxuICAgICAgICAgICAgYWpheFVybCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgICAgICAgICAgIFwiQ29udGVudC1UeXBlXCI6IFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIsXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBib2R5OiBuZXcgVVJMU2VhcmNoUGFyYW1zKHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnbW9sbGllX2NoZWNrb3V0X2Jsb2Nrc19jYW5tYWtlcGF5bWVudCcsXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbmN5OiBjdXJyZW5jeUNvZGUsXG4gICAgICAgICAgICAgICAgICAgIGJpbGxpbmdDb3VudHJ5OiBjb3VudHJ5LFxuICAgICAgICAgICAgICAgICAgICBjYXJ0VG90YWwsXG4gICAgICAgICAgICAgICAgICAgIHBheW1lbnRMb2NhbGU6IGZpbHRlcnMucGF5bWVudExvY2FsZVxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgfVxuICAgICAgICApLnRoZW4ocmVzcG9uc2UgPT4gcmVzcG9uc2UuanNvbigpKS50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgc2V0QXZhaWxhYmxlR2F0ZXdheXMoY291bnRyeSwgY3VycmVuY3lDb2RlLCBkYXRhLmRhdGEpO1xuICAgICAgICAgICAgY29uc3QgY2FydFRvdGFscyA9IHdwLmRhdGEuc2VsZWN0KCd3Yy9zdG9yZS9jYXJ0JykuZ2V0Q2FydFRvdGFscygpO1xuICAgICAgICAgICAgLy8gRGlzcGF0Y2ggdGhlbSBhZ2FpbiB0byB0cmlnZ2VyIGEgcmUtcmVuZGVyOlxuICAgICAgICAgICAgd3AuZGF0YS5kaXNwYXRjaCgnd2Mvc3RvcmUvY2FydCcpLnNldENhcnREYXRhKHsuLi5jYXJ0VG90YWxzfSk7XG4gICAgICAgIH0pO1xuICAgIH0sIFtiaWxsaW5nLCBjdXJyZW5jeUNvZGUsIGZpbHRlcnMucGF5bWVudExvY2FsZV0pO1xuXG4gICAgcmV0dXJuIGNhY2hlZEF2YWlsYWJsZUdhdGV3YXlzO1xufVxuXG4vLyBDb21wb25lbnQgdGhhdCBydW5zIHRoZSBob29rIGJ1dCBkb2VzIG5vdCByZW5kZXIgYW55dGhpbmcuXG5mdW5jdGlvbiBNb2xsaWVHYXRld2F5VXBkYXRlcih7IGJpbGxpbmcsIGN1cnJlbmN5Q29kZSwgY2FydFRvdGFsLCBmaWx0ZXJzLCBhamF4VXJsfSkge1xuXG4gICAgdXNlTW9sbGllQXZhaWxhYmxlR2F0ZXdheXMoYmlsbGluZywgY3VycmVuY3lDb2RlLCBjYXJ0VG90YWwsIGZpbHRlcnMsIGFqYXhVcmwpO1xuICAgIHJldHVybiBudWxsO1xufVxuXG5sZXQgb25TdWJtaXRMb2NhbFxubGV0IGFjdGl2ZVBheW1lbnRNZXRob2RMb2NhbFxubGV0IGNyZWRpdENhcmRTZWxlY3RlZCA9IG5ldyBFdmVudChcIm1vbGxpZV9jcmVkaXRjYXJkX2NvbXBvbmVudF9zZWxlY3RlZFwiLCB7YnViYmxlczogdHJ1ZX0pO1xuY29uc3QgTW9sbGllQ29tcG9uZW50ID0gKHByb3BzKSA9PiB7XG4gICAgbGV0IHtvblN1Ym1pdCwgYWN0aXZlUGF5bWVudE1ldGhvZCwgYmlsbGluZywgaXRlbSwgdXNlRWZmZWN0LCBhamF4VXJsLCBqUXVlcnksIGVtaXRSZXNwb25zZSwgZXZlbnRSZWdpc3RyYXRpb24sIHJlcXVpcmVkRmllbGRzLCBzaGlwcGluZ0RhdGF9ID0gcHJvcHNcbiAgICBjb25zdCB7ICByZXNwb25zZVR5cGVzIH0gPSBlbWl0UmVzcG9uc2U7XG4gICAgY29uc3Qge29uUGF5bWVudFNldHVwLCBvbkNoZWNrb3V0VmFsaWRhdGlvbn0gPSBldmVudFJlZ2lzdHJhdGlvbjtcbiAgICBpZiAoIWl0ZW0gfHwgIWl0ZW0ubmFtZSkge1xuICAgICAgICByZXR1cm4gPGRpdj5Mb2FkaW5nIHBheW1lbnQgbWV0aG9kcy4uLjwvZGl2PjtcbiAgICB9XG4gICAgY29uc3QgWyBzZWxlY3RlZElzc3Vlciwgc2VsZWN0SXNzdWVyIF0gPSB3cC5lbGVtZW50LnVzZVN0YXRlKCcnKTtcbiAgICBjb25zdCBbIGlucHV0UGhvbmUsIHNlbGVjdFBob25lIF0gPSB3cC5lbGVtZW50LnVzZVN0YXRlKCcnKTtcbiAgICBjb25zdCBbIGlucHV0QmlydGhkYXRlLCBzZWxlY3RCaXJ0aGRhdGUgXSA9IHdwLmVsZW1lbnQudXNlU3RhdGUoJycpO1xuICAgIGNvbnN0IFsgaW5wdXRDb21wYW55LCBzZWxlY3RDb21wYW55IF0gPSB3cC5lbGVtZW50LnVzZVN0YXRlKCcnKTtcbiAgICBjb25zdCBpc3N1ZXJLZXkgPSAnbW9sbGllLXBheW1lbnRzLWZvci13b29jb21tZXJjZV9pc3N1ZXJfJyArIGFjdGl2ZVBheW1lbnRNZXRob2RcbiAgICBjb25zdCB7Y29tcGFueU5hbWVTdHJpbmcsIHBob25lU3RyaW5nfSA9IHJlcXVpcmVkRmllbGRzXG4gICAgZnVuY3Rpb24gZ2V0UGhvbmVGaWVsZCgpXG4gICAge1xuICAgICAgICBjb25zdCBzaGlwcGluZ1Bob25lID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3NoaXBwaW5nLXBob25lJyk7XG4gICAgICAgIGNvbnN0IGJpbGxpbmdQaG9uZSA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdiaWxsaW5nLXBob25lJyk7XG4gICAgICAgIHJldHVybiBiaWxsaW5nUGhvbmUgfHwgc2hpcHBpbmdQaG9uZTtcbiAgICB9XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBvblByb2Nlc3NpbmdQYXltZW50ID0gKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgY2xlYW5NZXRob2QgPSBhY3RpdmVQYXltZW50TWV0aG9kLnJlcGxhY2UoJ21vbGxpZV93Y19nYXRld2F5XycsICcnKTtcblxuICAgICAgICAgICAgY29uc3QgcGhvbmVGaWVsZE5hbWUgPSBgYmlsbGluZ19waG9uZV8ke2NsZWFuTWV0aG9kfWA7XG4gICAgICAgICAgICBjb25zdCBiaXJ0aGRhdGVGaWVsZE5hbWUgPSBgYmlsbGluZ19iaXJ0aGRhdGVfJHtjbGVhbk1ldGhvZH1gO1xuXG4gICAgICAgICAgICBsZXQgZGF0YSA9IHtcbiAgICAgICAgICAgICAgICBwYXltZW50X21ldGhvZDogYWN0aXZlUGF5bWVudE1ldGhvZCxcbiAgICAgICAgICAgICAgICBwYXltZW50X21ldGhvZF90aXRsZTogaXRlbS50aXRsZSxcbiAgICAgICAgICAgICAgICBbaXNzdWVyS2V5XTogc2VsZWN0ZWRJc3N1ZXIsXG4gICAgICAgICAgICAgICAgYmlsbGluZ19jb21wYW55X2JpbGxpZTogaW5wdXRDb21wYW55LFxuICAgICAgICAgICAgICAgIGNhcmRUb2tlbjogJycsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGlucHV0UGhvbmUpIHtcbiAgICAgICAgICAgICAgICBkYXRhW3Bob25lRmllbGROYW1lXSA9IGlucHV0UGhvbmU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChpbnB1dEJpcnRoZGF0ZSkge1xuICAgICAgICAgICAgICAgIGRhdGFbYmlydGhkYXRlRmllbGROYW1lXSA9IGlucHV0QmlydGhkYXRlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdG9rZW5WYWwgPSBqUXVlcnkoJy5tb2xsaWUtY29tcG9uZW50cyA+IGlucHV0JykudmFsKClcbiAgICAgICAgICAgIGlmICh0b2tlblZhbCkge1xuICAgICAgICAgICAgICAgIGRhdGEuY2FyZFRva2VuID0gdG9rZW5WYWw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHR5cGU6IHJlc3BvbnNlVHlwZXMuU1VDQ0VTUyxcbiAgICAgICAgICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIHBheW1lbnRNZXRob2REYXRhOiBkYXRhXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB1bnN1YnNjcmliZVBheW1lbnRQcm9jZXNzaW5nID0gb25QYXltZW50U2V0dXAoXG4gICAgICAgICAgICBvblByb2Nlc3NpbmdQYXltZW50XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZVBheW1lbnRQcm9jZXNzaW5nKClcbiAgICAgICAgfTtcblxuICAgIH0sIFtzZWxlY3RlZElzc3Vlciwgb25QYXltZW50U2V0dXAsIGlucHV0UGhvbmUsIGlucHV0Q29tcGFueSwgaW5wdXRCaXJ0aGRhdGVdKVxuXG4gICAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAgICAgbGV0IGNvbXBhbnlMYWJlbCA9IGpRdWVyeSgnZGl2LndjLWJsb2NrLWNvbXBvbmVudHMtdGV4dC1pbnB1dC53Yy1ibG9jay1jb21wb25lbnRzLWFkZHJlc3MtZm9ybV9fY29tcGFueSA+IGxhYmVsJylcbiAgICAgICAgaWYgKGNvbXBhbnlMYWJlbC5sZW5ndGggPT09IDAgfHwgaXRlbS5oaWRlQ29tcGFueUZpZWxkID09PSB0cnVlKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhY3RpdmVQYXltZW50TWV0aG9kID09PSAnbW9sbGllX3djX2dhdGV3YXlfYmlsbGllJykge1xuICAgICAgICAgICAgbGV0IG1lc3NhZ2UgPSBpdGVtLmNvbXBhbnlQbGFjZWhvbGRlclxuICAgICAgICAgICAgY29tcGFueUxhYmVsLnJlcGxhY2VXaXRoKCc8bGFiZWwgaHRtbEZvcj1cInNoaXBwaW5nLWNvbXBhbnlcIj4nICsgbWVzc2FnZSArICc8L2xhYmVsPicpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoY29tcGFueU5hbWVTdHJpbmcgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgY29tcGFueUxhYmVsLnJlcGxhY2VXaXRoKCc8bGFiZWwgaHRtbEZvcj1cInNoaXBwaW5nLWNvbXBhbnlcIj4nICsgY29tcGFueU5hbWVTdHJpbmcgKyAnPC9sYWJlbD4nKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBpc0NvbXBhbnlFbXB0eSA9IChiaWxsaW5nLmJpbGxpbmdEYXRhLmNvbXBhbnkgPT09ICcnICYmIHNoaXBwaW5nRGF0YS5zaGlwcGluZ0FkZHJlc3MuY29tcGFueSA9PT0gJycpICYmIGlucHV0Q29tcGFueSA9PT0gJyc7XG4gICAgICAgIGNvbnN0IHVuc3Vic2NyaWJlUHJvY2Vzc2luZyA9IG9uQ2hlY2tvdXRWYWxpZGF0aW9uKFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmIChhY3RpdmVQYXltZW50TWV0aG9kID09PSAnbW9sbGllX3djX2dhdGV3YXlfYmlsbGllJyAmJiBpc0NvbXBhbnlFbXB0eSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlOiBpdGVtLmVycm9yTWVzc2FnZSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZVByb2Nlc3NpbmcoKVxuICAgICAgICB9O1xuXG4gICAgfSwgW2FjdGl2ZVBheW1lbnRNZXRob2QsIG9uQ2hlY2tvdXRWYWxpZGF0aW9uLCBiaWxsaW5nLmJpbGxpbmdEYXRhLCBpdGVtLCBjb21wYW55TmFtZVN0cmluZywgaW5wdXRDb21wYW55XSk7XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBsZXQgcGhvbmVMYWJlbCA9IGdldFBob25lRmllbGQoKT8ubGFiZWxzPy5bMF0gPz8gbnVsbDtcbiAgICAgICAgaWYgKCFwaG9uZUxhYmVsIHx8IHBob25lTGFiZWwubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBpZiAoYWN0aXZlUGF5bWVudE1ldGhvZCA9PT0gJ21vbGxpZV93Y19nYXRld2F5X2luMycpIHtcbiAgICAgICAgICAgIHBob25lTGFiZWwuaW5uZXJUZXh0ID0gaXRlbS5waG9uZVBsYWNlaG9sZGVyXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocGhvbmVTdHJpbmcgIT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgcGhvbmVMYWJlbC5pbm5lclRleHQgPSBwaG9uZVN0cmluZ1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGxldCBpc1Bob25lRW1wdHkgPSAoYmlsbGluZy5iaWxsaW5nRGF0YS5waG9uZSA9PT0gJycgJiYgc2hpcHBpbmdEYXRhLnNoaXBwaW5nQWRkcmVzcy5waG9uZSA9PT0gJycpICYmIGlucHV0UGhvbmUgPT09ICcnO1xuICAgICAgICBsZXQgaXNCaXJ0aGRhdGVWYWxpZCA9IGlucHV0QmlydGhkYXRlID09PSAnJ1xuICAgICAgICBsZXQgdG9kYXkgPSBuZXcgRGF0ZSgpO1xuICAgICAgICBsZXQgYmlydGhkYXRlID0gbmV3IERhdGUoaW5wdXRCaXJ0aGRhdGUpO1xuICAgICAgICBpZiAoYmlydGhkYXRlID4gdG9kYXkpIHtcbiAgICAgICAgICAgIGlzQmlydGhkYXRlVmFsaWQgPSBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHVuc3Vic2NyaWJlUHJvY2Vzc2luZyA9IG9uQ2hlY2tvdXRWYWxpZGF0aW9uKFxuXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZVBheW1lbnRNZXRob2QgPT09ICdtb2xsaWVfd2NfZ2F0ZXdheV9pbjMnICYmIChpc1Bob25lRW1wdHkgfHwgaXNCaXJ0aGRhdGVWYWxpZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTWVzc2FnZTogaXRlbS5lcnJvck1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgdW5zdWJzY3JpYmVQcm9jZXNzaW5nKClcbiAgICAgICAgfTtcblxuICAgIH0sIFthY3RpdmVQYXltZW50TWV0aG9kLCBvbkNoZWNrb3V0VmFsaWRhdGlvbiwgYmlsbGluZy5iaWxsaW5nRGF0YSwgc2hpcHBpbmdEYXRhLnNoaXBwaW5nQWRkcmVzcywgaXRlbSwgcGhvbmVTdHJpbmcsIGlucHV0QmlydGhkYXRlLCBpbnB1dFBob25lXSk7XG5cbiAgICBvblN1Ym1pdExvY2FsID0gb25TdWJtaXRcbiAgICBjb25zdCB1cGRhdGVJc3N1ZXIgPSAoZSkgPT4gc2VsZWN0SXNzdWVyKGUudGFyZ2V0LnZhbHVlKTtcbiAgICBjb25zdCB1cGRhdGVDb21wYW55ID0gKGUpID0+IHNlbGVjdENvbXBhbnkoZS50YXJnZXQudmFsdWUpO1xuICAgIGNvbnN0IHVwZGF0ZVBob25lID0gKGUpID0+IHNlbGVjdFBob25lKGUudGFyZ2V0LnZhbHVlKTtcbiAgICBjb25zdCB1cGRhdGVCaXJ0aGRhdGUgPSAoZSkgPT4gc2VsZWN0QmlydGhkYXRlKCBlLnRhcmdldC52YWx1ZSApO1xuXG4gICAgbGV0IGl0ZW1Db250ZW50UCA9IGl0ZW0uY29udGVudDtcbiAgICBpZiAoaXRlbS5jb250ZW50ICE9PSAnJykge1xuICAgICAgICBpdGVtQ29udGVudFAgPSA8cD57aXRlbS5jb250ZW50fTwvcD47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2hvdWxkU2hvd1Bob25lRmllbGQoKSB7XG4gICAgICAgIC8vb25seSBpZiBpcyByZXF1aXJlZCB3ZSB3aWxsIG5vdCBzaG93XG4gICAgICAgIGNvbnN0IHBob25lID0gZ2V0UGhvbmVGaWVsZCgpO1xuICAgICAgICBjb25zdCBpc1Bob25lUmVxdWlyZWQgPSBwaG9uZT8gKHBob25lLmhhc0F0dHJpYnV0ZSgncmVxdWlyZWQnKSB8fCBwaG9uZS5nZXRBdHRyaWJ1dGUoJ2FyaWEtcmVxdWlyZWQnKSA9PT0gJ3RydWUnKSA6IGZhbHNlO1xuICAgICAgICAvL2Vsc2UgaXMgdHJ1ZVxuICAgICAgICByZXR1cm4gIWlzUGhvbmVSZXF1aXJlZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaWVsZE1hcmt1cChpZCwgZmllbGRUeXBlLCBsYWJlbCwgYWN0aW9uLCB2YWx1ZSwgcGxhY2Vob2xkZXIgPSBudWxsKSB7XG4gICAgICAgIGNvbnN0IGNsYXNzTmFtZSA9IFwid2MtYmxvY2stY29tcG9uZW50cy10ZXh0LWlucHV0IHdjLWJsb2NrLWNvbXBvbmVudHMtYWRkcmVzcy1mb3JtX19cIiArIGlkO1xuICAgICAgICByZXR1cm4gPGRpdiBjbGFzc05hbWU9e2BjdXN0b20taW5wdXQgJHtjbGFzc05hbWV9IGlzLWFjdGl2ZWB9PlxuICAgICAgICA8bGFiZWwgaHRtbEZvcj17aWR9IGRhbmdlcm91c2x5U2V0SW5uZXJIVE1MPXt7X19odG1sOiBsYWJlbH19PjwvbGFiZWw+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT17ZmllbGRUeXBlfSBuYW1lPXtpZH0gaWQ9e2lkfSB2YWx1ZT17dmFsdWV9IG9uQ2hhbmdlPXthY3Rpb259IHBsYWNlaG9sZGVyPXtwbGFjZWhvbGRlcn0+PC9pbnB1dD5cbiAgICAgICAgPC9kaXY+XG4gICAgfVxuXG4gICAgaWYgKGl0ZW0uaXNzdWVycyAmJiBpdGVtLm5hbWUgIT09IFwibW9sbGllX3djX2dhdGV3YXlfY3JlZGl0Y2FyZFwiKXtcbiAgICAgICAgcmV0dXJuIDxkaXY+e2l0ZW1Db250ZW50UH08c2VsZWN0IG5hbWU9e2lzc3VlcktleX0gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9eyB7X19odG1sOiBpdGVtLmlzc3VlcnN9IH0gdmFsdWU9e3NlbGVjdGVkSXNzdWVyfSBvbkNoYW5nZT17dXBkYXRlSXNzdWVyfT48L3NlbGVjdD48L2Rpdj5cbiAgICB9XG5cbiAgICBpZihpdGVtLm5hbWUgPT09IFwibW9sbGllX3djX2dhdGV3YXlfY3JlZGl0Y2FyZFwiKXtcbiAgICAgICAgcmV0dXJuIDxkaXYgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9eyB7X19odG1sOiBpdGVtLmNvbnRlbnR9IH0+PC9kaXY+O1xuICAgIH1cblxuICAgIGlmIChpdGVtLm5hbWUgPT09IFwibW9sbGllX3djX2dhdGV3YXlfYmlsbGllXCIpIHtcbiAgICAgICAgY29uc3QgYmlsbGluZ0NvbXBhbnlGaWVsZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNiaWxsaW5nLWNvbXBhbnknKTtcbiAgICAgICAgY29uc3Qgc2hpcHBpbmdDb21wYW55RmllbGQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjc2hpcHBpbmctY29tcGFueScpO1xuICAgICAgICBjb25zdCBpc0JpbGxpbmdDb21wYW55UmVxdWlyZWQgPSBiaWxsaW5nQ29tcGFueUZpZWxkPy5oYXNBdHRyaWJ1dGUoJ3JlcXVpcmVkJyk7XG4gICAgICAgIGNvbnN0IGlzU2hpcHBpbmdDb21wYW55UmVxdWlyZWQgPSBzaGlwcGluZ0NvbXBhbnlGaWVsZD8uaGFzQXR0cmlidXRlKCdyZXF1aXJlZCcpO1xuXG4gICAgICAgIGlmICgoYmlsbGluZ0NvbXBhbnlGaWVsZCAmJiBpc0JpbGxpbmdDb21wYW55UmVxdWlyZWQpIHx8IChzaGlwcGluZ0NvbXBhbnlGaWVsZCAmJiBpc1NoaXBwaW5nQ29tcGFueVJlcXVpcmVkKSB8fCBpdGVtLmhpZGVDb21wYW55RmllbGQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbXBhbnlGaWVsZCA9IGl0ZW0uY29tcGFueVBsYWNlaG9sZGVyID8gaXRlbS5jb21wYW55UGxhY2Vob2xkZXIgOiBcIkNvbXBhbnkgbmFtZVwiO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICA8ZGl2PntpdGVtQ29udGVudFB9PC9kaXY+XG4gICAgICAgICAgICAgICAge2ZpZWxkTWFya3VwKFwiYmlsbGluZ19jb21wYW55X2JpbGxpZVwiLFwidGV4dFwiLCBjb21wYW55RmllbGQsIHVwZGF0ZUNvbXBhbnksIGlucHV0Q29tcGFueSl9XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBjb25zdCBjb3VudHJ5Q29kZXMgPSB7XG4gICAgICAgICAgICBCRTogJyszMnh4eHh4eHh4eCcsXG4gICAgICAgICAgICBOTDogJyszMTZ4eHh4eHh4eCcsXG4gICAgICAgICAgICBERTogJys0OXh4eHh4eHh4eCcsXG4gICAgICAgICAgICBBVDogJys0M3h4eHh4eHh4eCcsXG4gICAgICAgIH07XG4gICAgICAgIGNvbnN0IGNvdW50cnkgPSBiaWxsaW5nLmJpbGxpbmdEYXRhLmNvdW50cnk7XG4gICAgICAgIGl0ZW0ucGhvbmVQbGFjZWhvbGRlciA9IGNvdW50cnlDb2Rlc1tjb3VudHJ5XSB8fCBjb3VudHJ5Q29kZXNbJ05MJ107XG4gICAgfSwgW2JpbGxpbmcuYmlsbGluZ0RhdGEuY291bnRyeV0pO1xuXG4gICAgaWYgKGl0ZW0ubmFtZSA9PT0gXCJtb2xsaWVfd2NfZ2F0ZXdheV9pbjNcIikge1xuICAgICAgICBjb25zdCBiaXJ0aGRhdGVGaWVsZCA9IGl0ZW0uYmlydGhkYXRlUGxhY2Vob2xkZXIgfHwgXCJCaXJ0aGRhdGVcIjtcbiAgICAgICAgY29uc3QgcGhvbmVGaWVsZCA9IGl0ZW0ucGhvbmVQbGFjZWhvbGRlciB8fCBcIiszMTZ4eHh4eHh4eFwiO1xuICAgICAgICBjb25zdCBwaG9uZUxhYmVsID0gaXRlbS5waG9uZUxhYmVsIHx8IFwiUGhvbmVcIjtcbiAgICAgICAgY29uc3Qgc2hvd1Bob25lRmllbGQgPSBzaG91bGRTaG93UGhvbmVGaWVsZCgpO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICA8ZGl2PntpdGVtQ29udGVudFB9PC9kaXY+XG4gICAgICAgICAgICAgICAge2ZpZWxkTWFya3VwKFwiYmlsbGluZy1iaXJ0aGRhdGVcIiwgXCJkYXRlXCIsIGJpcnRoZGF0ZUZpZWxkLCB1cGRhdGVCaXJ0aGRhdGUsIGlucHV0QmlydGhkYXRlKX1cbiAgICAgICAgICAgICAgICB7c2hvd1Bob25lRmllbGQgJiYgZmllbGRNYXJrdXAoXCJiaWxsaW5nLXBob25lLWluM1wiLCBcInRlbFwiLCBwaG9uZUxhYmVsLCB1cGRhdGVQaG9uZSwgaW5wdXRQaG9uZSwgcGhvbmVGaWVsZCl9XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoaXRlbS5uYW1lID09PSBcIm1vbGxpZV93Y19nYXRld2F5X2JpenVtXCIpIHtcbiAgICAgICAgY29uc3QgcGhvbmVGaWVsZCA9IGl0ZW0ucGhvbmVQbGFjZWhvbGRlciB8fCBcIiszNHh4eHh4eHh4eFwiO1xuICAgICAgICBjb25zdCBwaG9uZUxhYmVsID0gaXRlbS5waG9uZUxhYmVsIHx8IFwiUGhvbmVcIjtcbiAgICAgICAgY29uc3Qgc2hvd1Bob25lRmllbGQgPSBzaG91bGRTaG93UGhvbmVGaWVsZCgpO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICA8ZGl2PntpdGVtQ29udGVudFB9PC9kaXY+XG4gICAgICAgICAgICAgICAge3Nob3dQaG9uZUZpZWxkICYmIGZpZWxkTWFya3VwKFwiYmlsbGluZy1waG9uZS1iaXp1bVwiLCBcInRlbFwiLCBwaG9uZUxhYmVsLCB1cGRhdGVQaG9uZSwgaW5wdXRQaG9uZSwgcGhvbmVGaWVsZCl9XG4gICAgICAgICAgICA8Lz5cbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoaXRlbS5uYW1lID09PSBcIm1vbGxpZV93Y19nYXRld2F5X3JpdmVydHlcIikge1xuICAgICAgICBjb25zdCBiaXJ0aGRhdGVGaWVsZCA9IGl0ZW0uYmlydGhkYXRlUGxhY2Vob2xkZXIgfHwgXCJCaXJ0aGRhdGVcIjtcbiAgICAgICAgY29uc3QgcGhvbmVGaWVsZCA9IGl0ZW0ucGhvbmVQbGFjZWhvbGRlciB8fCBcIiszMTZ4eHh4eHh4eFwiO1xuICAgICAgICBjb25zdCBwaG9uZUxhYmVsID0gaXRlbS5waG9uZUxhYmVsIHx8IFwiUGhvbmVcIjtcbiAgICAgICAgY29uc3Qgc2hvd1Bob25lRmllbGQgPSBzaG91bGRTaG93UGhvbmVGaWVsZCgpO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPD5cbiAgICAgICAgICAgICAgICA8ZGl2PntpdGVtQ29udGVudFB9PC9kaXY+XG4gICAgICAgICAgICAgICAge2ZpZWxkTWFya3VwKFwiYmlsbGluZy1iaXJ0aGRhdGVcIiwgXCJkYXRlXCIsIGJpcnRoZGF0ZUZpZWxkLCB1cGRhdGVCaXJ0aGRhdGUsIGlucHV0QmlydGhkYXRlKX1cbiAgICAgICAgICAgICAgICB7c2hvd1Bob25lRmllbGQgJiYgZmllbGRNYXJrdXAoXCJiaWxsaW5nLXBob25lLXJpdmVydHlcIiwgXCJ0ZWxcIiwgcGhvbmVMYWJlbCwgdXBkYXRlUGhvbmUsIGlucHV0UGhvbmUsIHBob25lRmllbGQpfVxuICAgICAgICAgICAgPC8+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIDxkaXY+e2l0ZW1Db250ZW50UH08L2Rpdj5cbn1cblxuY29uc3QgTGFiZWwgPSAoeyBpdGVtLCBmaWx0ZXJzLCBhamF4VXJsIH0pID0+IHtcbiAgICBjb25zdCBjYXJ0RGF0YSA9IHdwLmRhdGEudXNlU2VsZWN0KChzZWxlY3QpID0+XG4gICAgICAgICAgICBzZWxlY3QoJ3djL3N0b3JlL2NhcnQnKS5nZXRDYXJ0RGF0YSgpLFxuICAgICAgICBbXVxuICAgICk7XG4gICAgY29uc3QgY2FydFRvdGFscyA9IHdwLmRhdGEudXNlU2VsZWN0KCAoc2VsZWN0KSA9PiBzZWxlY3QoJ3djL3N0b3JlL2NhcnQnKS5nZXRDYXJ0VG90YWxzKCksIFsgXSApO1xuICAgIGNvbnN0IGNhcnRUb3RhbCA9IGNhcnRUb3RhbHM/LnRvdGFsX3ByaWNlIHx8IDA7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIDxkaXYgZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUw9e3sgX19odG1sOiBpdGVtLmxhYmVsIH19Lz5cbiAgICAgICAgICAgIDxNb2xsaWVHYXRld2F5VXBkYXRlclxuICAgICAgICAgICAgICAgIGJpbGxpbmc9e2NhcnREYXRhLmJpbGxpbmdBZGRyZXNzfVxuICAgICAgICAgICAgICAgIGN1cnJlbmN5Q29kZT17d2NTZXR0aW5ncy5jdXJyZW5jeS5jb2RlfVxuICAgICAgICAgICAgICAgIGZpbHRlcnM9e2ZpbHRlcnN9XG4gICAgICAgICAgICAgICAgYWpheFVybD17YWpheFVybH1cbiAgICAgICAgICAgICAgICBjYXJ0VG90YWw9e2NhcnRUb3RhbH1cbiAgICAgICAgICAgIC8+XG4gICAgICAgIDwvPlxuICAgICk7XG59O1xuXG5jb25zdCBtb2xsaWVQYXltZW50TWV0aG9kID0gKHVzZUVmZmVjdCwgYWpheFVybCwgZmlsdGVycywgZ2F0ZXdheURhdGEsIGF2YWlsYWJsZUdhdGV3YXlzLCBpdGVtLCBqUXVlcnksIHJlcXVpcmVkRmllbGRzKSA9PntcbiAgICBpZiAoaXRlbS5uYW1lID09PSBcIm1vbGxpZV93Y19nYXRld2F5X2NyZWRpdGNhcmRcIikge1xuICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb2xsaWVfY29tcG9uZW50c19yZWFkeV90b19zdWJtaXQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBvblN1Ym1pdExvY2FsKClcbiAgICAgICAgfSlcbiAgICB9XG4gICAgZnVuY3Rpb24gY3JlZGl0Y2FyZFNlbGVjdGVkRXZlbnQoKSB7XG4gICAgICAgIGlmIChpdGVtLm5hbWUgPT09IFwibW9sbGllX3djX2dhdGV3YXlfY3JlZGl0Y2FyZFwiKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuZGlzcGF0Y2hFdmVudChjcmVkaXRDYXJkU2VsZWN0ZWQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogaXRlbS5uYW1lLFxuICAgICAgICBsYWJlbDo8TGFiZWxcbiAgICAgICAgICAgIGl0ZW09e2l0ZW19XG4gICAgICAgICAgICBhamF4VXJsPXthamF4VXJsfVxuICAgICAgICAgICAgZmlsdGVycz17ZmlsdGVyc31cbiAgICAgICAgLz4sXG4gICAgICAgIGNvbnRlbnQ6IDxNb2xsaWVDb21wb25lbnRcbiAgICAgICAgICAgIGl0ZW09e2l0ZW19XG4gICAgICAgICAgICB1c2VFZmZlY3Q9e3VzZUVmZmVjdH1cbiAgICAgICAgICAgIGFqYXhVcmw9e2FqYXhVcmx9XG4gICAgICAgICAgICBqUXVlcnk9e2pRdWVyeX1cbiAgICAgICAgICAgIHJlcXVpcmVkRmllbGRzPXtyZXF1aXJlZEZpZWxkc30vPixcbiAgICAgICAgZWRpdDogPGRpdj57aXRlbS5lZGl0fTwvZGl2PixcbiAgICAgICAgcGF5bWVudE1ldGhvZElkOiBpdGVtLnBheW1lbnRNZXRob2RJZCxcbiAgICAgICAgY2FuTWFrZVBheW1lbnQ6ICh7Y2FydFRvdGFscywgYmlsbGluZ0RhdGF9KSA9PiB7XG4gICAgICAgICAgICBpZiAoIV8uaXNFbXB0eShpdGVtLmFsbG93ZWRDb3VudHJpZXMpICYmICEoaXRlbS5hbGxvd2VkQ291bnRyaWVzLmluY2x1ZGVzKGJpbGxpbmdEYXRhLmNvdW50cnkpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGNhcnRUb3RhbHMgPD0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjdXJyZW5jeUNvZGUgPSBjYXJ0VG90YWxzPy5jdXJyZW5jeV9jb2RlO1xuICAgICAgICAgICAgbGV0IGNvdW50cnkgPSBiaWxsaW5nRGF0YT8uY291bnRyeTtcbiAgICAgICAgICAgIGlmICghY291bnRyeSkge1xuICAgICAgICAgICAgICAgIGNvdW50cnkgPSB3Y1NldHRpbmdzPy5iYXNlTG9jYXRpb24uY291bnRyeTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRGaWx0ZXJLZXkgPSBjdXJyZW5jeUNvZGUgKyBcIi1cIiArIGNvdW50cnk7XG5cbiAgICAgICAgICAgIGNyZWRpdGNhcmRTZWxlY3RlZEV2ZW50KCk7XG5cbiAgICAgICAgICAgIGlmICghY2FjaGVkQXZhaWxhYmxlR2F0ZXdheXMuaGFzT3duUHJvcGVydHkoY3VycmVudEZpbHRlcktleSkpIHtcbiAgICAgICAgICAgICAgICBjYWNoZWRBdmFpbGFibGVHYXRld2F5cyA9IHtcbiAgICAgICAgICAgICAgICAgICAgLi4uY2FjaGVkQXZhaWxhYmxlR2F0ZXdheXMsXG4gICAgICAgICAgICAgICAgICAgIC4uLmF2YWlsYWJsZUdhdGV3YXlzXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGF2YWlsYWJsZUdhdGV3YXlzLmhhc093blByb3BlcnR5KGN1cnJlbnRGaWx0ZXJLZXkpICYmIGF2YWlsYWJsZUdhdGV3YXlzW2N1cnJlbnRGaWx0ZXJLZXldLmhhc093blByb3BlcnR5KGl0ZW0ubmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGNhY2hlZEF2YWlsYWJsZUdhdGV3YXlzLmhhc093blByb3BlcnR5KGN1cnJlbnRGaWx0ZXJLZXkpICYmIGNhY2hlZEF2YWlsYWJsZUdhdGV3YXlzW2N1cnJlbnRGaWx0ZXJLZXldLmhhc093blByb3BlcnR5KGl0ZW0ubmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBhcmlhTGFiZWw6IGl0ZW0uYXJpYUxhYmVsLFxuICAgICAgICBzdXBwb3J0czoge1xuICAgICAgICAgICAgZmVhdHVyZXM6IGl0ZW0uc3VwcG9ydHMsXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IG1vbGxpZVBheW1lbnRNZXRob2RcblxuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHQvLyBubyBtb2R1bGUuaWQgbmVlZGVkXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbiIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJpbXBvcnQgbW9sbGllUGF5bWVudE1ldGhvZCBmcm9tICcuL2Jsb2Nrcy9tb2xsaWVQYXltZW50TWV0aG9kJ1xuaW1wb3J0IEFwcGxlUGF5QnV0dG9uQ29tcG9uZW50IGZyb20gJy4vYmxvY2tzL0FwcGxlUGF5QnV0dG9uQ29tcG9uZW50J1xuaW1wb3J0IEFwcGxlUGF5QnV0dG9uRWRpdG9yQ29tcG9uZW50IGZyb20gJy4vYmxvY2tzL0FwcGxlUGF5QnV0dG9uRWRpdG9yQ29tcG9uZW50J1xuXG4oXG4gICAgZnVuY3Rpb24gKHttb2xsaWVCbG9ja0RhdGEsIHdjLCBfLCBqUXVlcnl9KSB7XG4gICAgICAgIGlmIChfLmlzRW1wdHkobW9sbGllQmxvY2tEYXRhKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qge3JlZ2lzdGVyUGF5bWVudE1ldGhvZH0gPSB3Yy53Y0Jsb2Nrc1JlZ2lzdHJ5O1xuICAgICAgICBjb25zdCB7ZGVmYXVsdEZpZWxkc30gPSB3Yy53Y1NldHRpbmdzLmFsbFNldHRpbmdzO1xuICAgICAgICBjb25zdCB7YWpheFVybCwgZmlsdGVycywgZ2F0ZXdheURhdGEsIGF2YWlsYWJsZUdhdGV3YXlzfSA9IG1vbGxpZUJsb2NrRGF0YS5nYXRld2F5RGF0YTtcbiAgICAgICAgY29uc3Qge3VzZUVmZmVjdH0gPSB3cC5lbGVtZW50O1xuICAgICAgICBjb25zdCBpc0FwcGxlU2Vzc2lvbiA9IHR5cGVvZiB3aW5kb3cuQXBwbGVQYXlTZXNzaW9uID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgY29uc3QgaXNFZGl0b3JDb250ZXh0ID0gd2M/LndjQmxvY2tzRGF0YT8uaXNFZGl0b3IoKTtcbiAgICAgICAgY29uc3QgY29tcGFueU5hbWVTdHJpbmcgPSBkZWZhdWx0RmllbGRzLmNvbXBhbnkubGFiZWxcbiAgICAgICAgY29uc3QgcGhvbmVTdHJpbmcgPSBkZWZhdWx0RmllbGRzLnBob25lLmxhYmVsXG4gICAgICAgIGxldCByZXF1aXJlZEZpZWxkcyA9IHtcbiAgICAgICAgICAgICdjb21wYW55TmFtZVN0cmluZyc6IGNvbXBhbnlOYW1lU3RyaW5nLFxuICAgICAgICAgICAgJ3Bob25lU3RyaW5nJzogcGhvbmVTdHJpbmcsXG4gICAgICAgIH1cbiAgICAgICAgZ2F0ZXdheURhdGEuZm9yRWFjaChpdGVtID0+IHtcbiAgICAgICAgICAgIGxldCByZWdpc3RlciA9ICgpID0+IHJlZ2lzdGVyUGF5bWVudE1ldGhvZChtb2xsaWVQYXltZW50TWV0aG9kKHVzZUVmZmVjdCwgYWpheFVybCwgZmlsdGVycywgZ2F0ZXdheURhdGEsIGF2YWlsYWJsZUdhdGV3YXlzLCBpdGVtLCBqUXVlcnksIHJlcXVpcmVkRmllbGRzKSk7XG4gICAgICAgICAgICBpZiAoaXRlbS5uYW1lID09PSAnbW9sbGllX3djX2dhdGV3YXlfYXBwbGVwYXknKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qge2lzRXhwcmVzc0VuYWJsZWR9ID0gaXRlbTtcbiAgICAgICAgICAgICAgICBpZiAoaXNFZGl0b3JDb250ZXh0IHx8IGlzQXBwbGVTZXNzaW9uICYmIHdpbmRvdy5BcHBsZVBheVNlc3Npb24uY2FuTWFrZVBheW1lbnRzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVnaXN0ZXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGlzRXhwcmVzc0VuYWJsZWQgIT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCB7cmVnaXN0ZXJFeHByZXNzUGF5bWVudE1ldGhvZH0gPSB3Yy53Y0Jsb2Nrc1JlZ2lzdHJ5O1xuICAgICAgICAgICAgICAgIHJlZ2lzdGVyRXhwcmVzc1BheW1lbnRNZXRob2Qoe1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbW9sbGllX3djX2dhdGV3YXlfYXBwbGVwYXlfZXhwcmVzcycsXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnQXBwbGUgUGF5IEV4cHJlc3MgYnV0dG9uJyxcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICdBcHBsZSBQYXkgRXhwcmVzcyBidXR0b24nLFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50OiA8QXBwbGVQYXlCdXR0b25Db21wb25lbnQvPixcbiAgICAgICAgICAgICAgICAgICAgZWRpdDogPEFwcGxlUGF5QnV0dG9uRWRpdG9yQ29tcG9uZW50Lz4sXG4gICAgICAgICAgICAgICAgICAgIGFyaWFMYWJlbDogJ0FwcGxlIFBheScsXG4gICAgICAgICAgICAgICAgICAgIGNhbk1ha2VQYXltZW50OiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNFZGl0b3JDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNBcHBsZVNlc3Npb24gJiYgd2luZG93LkFwcGxlUGF5U2Vzc2lvbi5jYW5NYWtlUGF5bWVudHMoKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgcGF5bWVudE1ldGhvZElkOiAnbW9sbGllX3djX2dhdGV3YXlfYXBwbGVwYXknLFxuICAgICAgICAgICAgICAgICAgICBnYXRld2F5SWQ6ICdtb2xsaWVfd2NfZ2F0ZXdheV9hcHBsZXBheScsXG4gICAgICAgICAgICAgICAgICAgIHN1cHBvcnRzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZWF0dXJlczogWydwcm9kdWN0cyddLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IFsnaGVpZ2h0JywgJ2JvcmRlclJhZGl1cyddXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWdpc3RlcigpO1xuICAgICAgICB9KTtcbiAgICB9XG4pKHdpbmRvdywgd2MpXG4iXSwibmFtZXMiOlsiY3JlYXRlQXBwbGVFcnJvcnMiLCJlcnJvcnMiLCJlcnJvckxpc3QiLCJfaXRlcmF0b3IiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlciIsIl9zdGVwIiwicyIsIm4iLCJkb25lIiwiZXJyb3IiLCJ2YWx1ZSIsIl9lcnJvciRjb250YWN0RmllbGQiLCJjb250YWN0RmllbGQiLCJfZXJyb3IkY29kZSIsImNvZGUiLCJfZXJyb3IkbWVzc2FnZSIsIm1lc3NhZ2UiLCJhcHBsZUVycm9yIiwiQXBwbGVQYXlFcnJvciIsInB1c2giLCJlcnIiLCJlIiwiZiIsInJlcXVlc3QiLCJjb3VudHJ5Q29kZSIsImN1cnJlbmN5Q29kZSIsInRvdGFsTGFiZWwiLCJzdWJ0b3RhbCIsInN1cHBvcnRlZE5ldHdvcmtzIiwibWVyY2hhbnRDYXBhYmlsaXRpZXMiLCJzaGlwcGluZ1R5cGUiLCJyZXF1aXJlZEJpbGxpbmdDb250YWN0RmllbGRzIiwicmVxdWlyZWRTaGlwcGluZ0NvbnRhY3RGaWVsZHMiLCJ0b3RhbCIsImxhYmVsIiwiYW1vdW50IiwidHlwZSIsIkFwcGxlUGF5QnV0dG9uQ29tcG9uZW50IiwiX3JlZiIsIl9yZWYkYnV0dG9uQXR0cmlidXRlcyIsImJ1dHRvbkF0dHJpYnV0ZXMiLCJtb2xsaWVBcHBsZVBheUJsb2NrRGF0YUNhcnQiLCJ3aW5kb3ciLCJtb2xsaWVCbG9ja0RhdGEiLCJub25jZSIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJ1cGRhdGVkQ29udGFjdEluZm8iLCJyZWRpcmVjdGlvblVybCIsIl9tb2xsaWVBcHBsZVBheUJsb2NrRCIsInByb2R1Y3QiLCJfbW9sbGllQXBwbGVQYXlCbG9ja0QyIiwibmVlZFNoaXBwaW5nIiwiX21vbGxpZUFwcGxlUGF5QmxvY2tEMyIsInNob3AiLCJfbW9sbGllQXBwbGVQYXlCbG9ja0Q0IiwiX21vbGxpZUFwcGxlUGF5QmxvY2tENSIsImFqYXhVcmwiLCJzdHlsZSIsImhlaWdodCIsImNvbmNhdCIsImJvcmRlclJhZGl1cyIsImZpbmRTZWxlY3RlZFNoaXBwaW5nTWV0aG9kIiwic2hpcHBpbmdSYXRlcyIsInNoaXBwaW5nUmF0ZSIsImZpbmQiLCJzaGlwcGluZ01ldGhvZCIsInNlbGVjdGVkIiwiYXBwbGVGb3JtYXR0ZWRSYXRlIiwiZGV0YWlsIiwibmFtZSIsImlkZW50aWZpZXIiLCJyYXRlX2lkIiwiYXBwbGVQYXlTZXNzaW9uIiwiX3N0b3JlJGdldFNoaXBwaW5nUmF0Iiwic2Vzc2lvbiIsIkFwcGxlUGF5U2Vzc2lvbiIsInN0b3JlIiwid3AiLCJkYXRhIiwic2VsZWN0IiwiZ2V0U2hpcHBpbmdSYXRlcyIsInNoaXBwaW5nX3JhdGVzIiwic2VsZWN0ZWRTaGlwcGluZ01ldGhvZCIsImxlbmd0aCIsIm9uc2hpcHBpbmdtZXRob2RzZWxlY3RlZCIsImV2ZW50IiwiX3RoaXMiLCJqUXVlcnkiLCJhamF4IiwidXJsIiwibWV0aG9kIiwiYWN0aW9uIiwiY2FsbGVyUGFnZSIsInNpbXBsaWZpZWRDb250YWN0Iiwic3VjY2VzcyIsImFwcGxlUGF5U2hpcHBpbmdNZXRob2RVcGRhdGUiLCJ0ZXh0U3RhdHVzIiwianFYSFIiLCJyZXNwb25zZSIsImNvbXBsZXRlU2hpcHBpbmdNZXRob2RTZWxlY3Rpb24iLCJlcnJvclRocm93biIsImNvbnNvbGUiLCJ3YXJuIiwiYWJvcnQiLCJvbnNoaXBwaW5nY29udGFjdHNlbGVjdGVkIiwiX3RoaXMyIiwic2hpcHBpbmdDb250YWN0IiwiYXBwbGVQYXlTaGlwcGluZ0NvbnRhY3RVcGRhdGUiLCJuZXdTaGlwcGluZ01ldGhvZHMiLCJjb21wbGV0ZVNoaXBwaW5nQ29udGFjdFNlbGVjdGlvbiIsIm9udmFsaWRhdGVtZXJjaGFudCIsImFwcGxlUGF5VmFsaWRhdGVNZXJjaGFudEV2ZW50IiwidmFsaWRhdGlvblVybCIsInZhbGlkYXRpb25VUkwiLCJtZXJjaGFudFNlc3Npb24iLCJjb21wbGV0ZU1lcmNoYW50VmFsaWRhdGlvbiIsIkpTT04iLCJwYXJzZSIsIm9ucGF5bWVudGF1dGhvcml6ZWQiLCJBcHBsZVBheVBheW1lbnQiLCJfQXBwbGVQYXlQYXltZW50JHBheW0iLCJwYXltZW50IiwiYmlsbGluZ0NvbnRhY3QiLCJ0b2tlbiIsImdpdmVuTmFtZSIsImZhbWlseU5hbWUiLCJhZGRyZXNzTGluZXMiLCJwb3N0YWxDb2RlIiwibG9jYWxpdHkiLCJhZG1pbmlzdHJhdGl2ZUFyZWEiLCJwaG9uZU51bWJlciIsImVtYWlsQWRkcmVzcyIsImF1dGhvcml6YXRpb25SZXN1bHQiLCJyZXN1bHQiLCJjb21wbGV0ZVBheW1lbnQiLCJsb2NhdGlvbiIsImhyZWYiLCJiZWdpbiIsIlJlYWN0IiwiY3JlYXRlRWxlbWVudCIsImlkIiwiY2xhc3NOYW1lIiwib25DbGljayIsInByZXZlbnREZWZhdWx0IiwiQXBwbGVQYXlCdXR0b25FZGl0b3JDb21wb25lbnQiLCJjYWNoZWRBdmFpbGFibGVHYXRld2F5cyIsInNldEF2YWlsYWJsZUdhdGV3YXlzIiwiY291bnRyeSIsIl9vYmplY3RTcHJlYWQiLCJ1c2VNb2xsaWVBdmFpbGFibGVHYXRld2F5cyIsImJpbGxpbmciLCJjYXJ0VG90YWwiLCJmaWx0ZXJzIiwiX3djU2V0dGluZ3MiLCJ3Y1NldHRpbmdzIiwiYmFzZUxvY2F0aW9uIiwiZWxlbWVudCIsInVzZUVmZmVjdCIsImN1cnJlbnRGaWx0ZXJLZXkiLCJoYXNPd25Qcm9wZXJ0eSIsImZldGNoIiwiaGVhZGVycyIsImJvZHkiLCJVUkxTZWFyY2hQYXJhbXMiLCJjdXJyZW5jeSIsImJpbGxpbmdDb3VudHJ5IiwicGF5bWVudExvY2FsZSIsInRoZW4iLCJqc29uIiwiY2FydFRvdGFscyIsImdldENhcnRUb3RhbHMiLCJkaXNwYXRjaCIsInNldENhcnREYXRhIiwiTW9sbGllR2F0ZXdheVVwZGF0ZXIiLCJvblN1Ym1pdExvY2FsIiwiYWN0aXZlUGF5bWVudE1ldGhvZExvY2FsIiwiY3JlZGl0Q2FyZFNlbGVjdGVkIiwiRXZlbnQiLCJidWJibGVzIiwiTW9sbGllQ29tcG9uZW50IiwicHJvcHMiLCJvblN1Ym1pdCIsImFjdGl2ZVBheW1lbnRNZXRob2QiLCJpdGVtIiwiZW1pdFJlc3BvbnNlIiwiZXZlbnRSZWdpc3RyYXRpb24iLCJyZXF1aXJlZEZpZWxkcyIsInNoaXBwaW5nRGF0YSIsInJlc3BvbnNlVHlwZXMiLCJvblBheW1lbnRTZXR1cCIsIm9uQ2hlY2tvdXRWYWxpZGF0aW9uIiwiX3dwJGVsZW1lbnQkdXNlU3RhdGUiLCJ1c2VTdGF0ZSIsIl93cCRlbGVtZW50JHVzZVN0YXRlMiIsIl9zbGljZWRUb0FycmF5Iiwic2VsZWN0ZWRJc3N1ZXIiLCJzZWxlY3RJc3N1ZXIiLCJfd3AkZWxlbWVudCR1c2VTdGF0ZTMiLCJfd3AkZWxlbWVudCR1c2VTdGF0ZTQiLCJpbnB1dFBob25lIiwic2VsZWN0UGhvbmUiLCJfd3AkZWxlbWVudCR1c2VTdGF0ZTUiLCJfd3AkZWxlbWVudCR1c2VTdGF0ZTYiLCJpbnB1dEJpcnRoZGF0ZSIsInNlbGVjdEJpcnRoZGF0ZSIsIl93cCRlbGVtZW50JHVzZVN0YXRlNyIsIl93cCRlbGVtZW50JHVzZVN0YXRlOCIsImlucHV0Q29tcGFueSIsInNlbGVjdENvbXBhbnkiLCJpc3N1ZXJLZXkiLCJjb21wYW55TmFtZVN0cmluZyIsInBob25lU3RyaW5nIiwiZ2V0UGhvbmVGaWVsZCIsInNoaXBwaW5nUGhvbmUiLCJiaWxsaW5nUGhvbmUiLCJvblByb2Nlc3NpbmdQYXltZW50IiwiY2xlYW5NZXRob2QiLCJyZXBsYWNlIiwicGhvbmVGaWVsZE5hbWUiLCJiaXJ0aGRhdGVGaWVsZE5hbWUiLCJfZGVmaW5lUHJvcGVydHkiLCJwYXltZW50X21ldGhvZCIsInBheW1lbnRfbWV0aG9kX3RpdGxlIiwidGl0bGUiLCJ0b2tlblZhbCIsInZhbCIsImNhcmRUb2tlbiIsIlNVQ0NFU1MiLCJtZXRhIiwicGF5bWVudE1ldGhvZERhdGEiLCJ1bnN1YnNjcmliZVBheW1lbnRQcm9jZXNzaW5nIiwiY29tcGFueUxhYmVsIiwiaGlkZUNvbXBhbnlGaWVsZCIsImNvbXBhbnlQbGFjZWhvbGRlciIsInJlcGxhY2VXaXRoIiwiaXNDb21wYW55RW1wdHkiLCJiaWxsaW5nRGF0YSIsImNvbXBhbnkiLCJzaGlwcGluZ0FkZHJlc3MiLCJ1bnN1YnNjcmliZVByb2Nlc3NpbmciLCJlcnJvck1lc3NhZ2UiLCJfZ2V0UGhvbmVGaWVsZCRsYWJlbHMiLCJfZ2V0UGhvbmVGaWVsZCIsInBob25lTGFiZWwiLCJsYWJlbHMiLCJpbm5lclRleHQiLCJwaG9uZVBsYWNlaG9sZGVyIiwiaXNQaG9uZUVtcHR5IiwicGhvbmUiLCJpc0JpcnRoZGF0ZVZhbGlkIiwidG9kYXkiLCJEYXRlIiwiYmlydGhkYXRlIiwidXBkYXRlSXNzdWVyIiwidGFyZ2V0IiwidXBkYXRlQ29tcGFueSIsInVwZGF0ZVBob25lIiwidXBkYXRlQmlydGhkYXRlIiwiaXRlbUNvbnRlbnRQIiwiY29udGVudCIsInNob3VsZFNob3dQaG9uZUZpZWxkIiwiaXNQaG9uZVJlcXVpcmVkIiwiaGFzQXR0cmlidXRlIiwiZ2V0QXR0cmlidXRlIiwiZmllbGRNYXJrdXAiLCJmaWVsZFR5cGUiLCJwbGFjZWhvbGRlciIsImFyZ3VtZW50cyIsInVuZGVmaW5lZCIsImh0bWxGb3IiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIl9faHRtbCIsIm9uQ2hhbmdlIiwiaXNzdWVycyIsImJpbGxpbmdDb21wYW55RmllbGQiLCJxdWVyeVNlbGVjdG9yIiwic2hpcHBpbmdDb21wYW55RmllbGQiLCJpc0JpbGxpbmdDb21wYW55UmVxdWlyZWQiLCJpc1NoaXBwaW5nQ29tcGFueVJlcXVpcmVkIiwiY29tcGFueUZpZWxkIiwiRnJhZ21lbnQiLCJjb3VudHJ5Q29kZXMiLCJCRSIsIk5MIiwiREUiLCJBVCIsImJpcnRoZGF0ZUZpZWxkIiwiYmlydGhkYXRlUGxhY2Vob2xkZXIiLCJwaG9uZUZpZWxkIiwic2hvd1Bob25lRmllbGQiLCJMYWJlbCIsIl9yZWYyIiwiY2FydERhdGEiLCJ1c2VTZWxlY3QiLCJnZXRDYXJ0RGF0YSIsInRvdGFsX3ByaWNlIiwiYmlsbGluZ0FkZHJlc3MiLCJtb2xsaWVQYXltZW50TWV0aG9kIiwiZ2F0ZXdheURhdGEiLCJhdmFpbGFibGVHYXRld2F5cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJjcmVkaXRjYXJkU2VsZWN0ZWRFdmVudCIsImRvY3VtZW50RWxlbWVudCIsImRpc3BhdGNoRXZlbnQiLCJlZGl0IiwicGF5bWVudE1ldGhvZElkIiwiY2FuTWFrZVBheW1lbnQiLCJfcmVmMyIsIl8iLCJpc0VtcHR5IiwiYWxsb3dlZENvdW50cmllcyIsImluY2x1ZGVzIiwiY3VycmVuY3lfY29kZSIsIl93Y1NldHRpbmdzMiIsImFyaWFMYWJlbCIsInN1cHBvcnRzIiwiZmVhdHVyZXMiLCJfd2Mkd2NCbG9ja3NEYXRhIiwid2MiLCJyZWdpc3RlclBheW1lbnRNZXRob2QiLCJ3Y0Jsb2Nrc1JlZ2lzdHJ5IiwiZGVmYXVsdEZpZWxkcyIsImFsbFNldHRpbmdzIiwiX21vbGxpZUJsb2NrRGF0YSRnYXRlIiwiaXNBcHBsZVNlc3Npb24iLCJpc0VkaXRvckNvbnRleHQiLCJ3Y0Jsb2Nrc0RhdGEiLCJpc0VkaXRvciIsImZvckVhY2giLCJyZWdpc3RlciIsImlzRXhwcmVzc0VuYWJsZWQiLCJjYW5NYWtlUGF5bWVudHMiLCJyZWdpc3RlckV4cHJlc3NQYXltZW50TWV0aG9kIiwiZGVzY3JpcHRpb24iLCJnYXRld2F5SWQiXSwic291cmNlUm9vdCI6IiJ9