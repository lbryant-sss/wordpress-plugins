{
  "version": 3,
  "sources": ["../../../packages/block-library/src/navigation/view.js"],
  "sourcesContent": ["/**\n * WordPress dependencies\n */\nimport {\n\tstore,\n\tgetContext,\n\tgetElement,\n\twithSyncEvent,\n} from '@wordpress/interactivity';\n\nconst focusableSelectors = [\n\t'a[href]',\n\t'input:not([disabled]):not([type=\"hidden\"]):not([aria-hidden])',\n\t'select:not([disabled]):not([aria-hidden])',\n\t'textarea:not([disabled]):not([aria-hidden])',\n\t'button:not([disabled]):not([aria-hidden])',\n\t'[contenteditable]',\n\t'[tabindex]:not([tabindex^=\"-\"])',\n];\n\n// This is a fix for Safari in iOS/iPadOS. Without it, Safari doesn't focus out\n// when the user taps in the body. It can be removed once we add an overlay to\n// capture the clicks, instead of relying on the focusout event.\ndocument.addEventListener( 'click', () => {} );\n\nconst { state, actions } = store(\n\t'core/navigation',\n\t{\n\t\tstate: {\n\t\t\tget roleAttribute() {\n\t\t\t\tconst ctx = getContext();\n\t\t\t\treturn ctx.type === 'overlay' && state.isMenuOpen\n\t\t\t\t\t? 'dialog'\n\t\t\t\t\t: null;\n\t\t\t},\n\t\t\tget ariaModal() {\n\t\t\t\tconst ctx = getContext();\n\t\t\t\treturn ctx.type === 'overlay' && state.isMenuOpen\n\t\t\t\t\t? 'true'\n\t\t\t\t\t: null;\n\t\t\t},\n\t\t\tget ariaLabel() {\n\t\t\t\tconst ctx = getContext();\n\t\t\t\treturn ctx.type === 'overlay' && state.isMenuOpen\n\t\t\t\t\t? ctx.ariaLabel\n\t\t\t\t\t: null;\n\t\t\t},\n\t\t\tget isMenuOpen() {\n\t\t\t\t// The menu is opened if either `click`, `hover` or `focus` is true.\n\t\t\t\treturn (\n\t\t\t\t\tObject.values( state.menuOpenedBy ).filter( Boolean )\n\t\t\t\t\t\t.length > 0\n\t\t\t\t);\n\t\t\t},\n\t\t\tget menuOpenedBy() {\n\t\t\t\tconst ctx = getContext();\n\t\t\t\treturn ctx.type === 'overlay'\n\t\t\t\t\t? ctx.overlayOpenedBy\n\t\t\t\t\t: ctx.submenuOpenedBy;\n\t\t\t},\n\t\t},\n\t\tactions: {\n\t\t\topenMenuOnHover() {\n\t\t\t\tconst { type, overlayOpenedBy } = getContext();\n\t\t\t\tif (\n\t\t\t\t\ttype === 'submenu' &&\n\t\t\t\t\t// Only open on hover if the overlay is closed.\n\t\t\t\t\tObject.values( overlayOpenedBy || {} ).filter( Boolean )\n\t\t\t\t\t\t.length === 0\n\t\t\t\t) {\n\t\t\t\t\tactions.openMenu( 'hover' );\n\t\t\t\t}\n\t\t\t},\n\t\t\tcloseMenuOnHover() {\n\t\t\t\tconst { type, overlayOpenedBy } = getContext();\n\t\t\t\tif (\n\t\t\t\t\ttype === 'submenu' &&\n\t\t\t\t\t// Only close on hover if the overlay is closed.\n\t\t\t\t\tObject.values( overlayOpenedBy || {} ).filter( Boolean )\n\t\t\t\t\t\t.length === 0\n\t\t\t\t) {\n\t\t\t\t\tactions.closeMenu( 'hover' );\n\t\t\t\t}\n\t\t\t},\n\t\t\topenMenuOnClick() {\n\t\t\t\tconst ctx = getContext();\n\t\t\t\tconst { ref } = getElement();\n\t\t\t\tctx.previousFocus = ref;\n\t\t\t\tactions.openMenu( 'click' );\n\t\t\t},\n\t\t\tcloseMenuOnClick() {\n\t\t\t\tactions.closeMenu( 'click' );\n\t\t\t\tactions.closeMenu( 'focus' );\n\t\t\t},\n\t\t\topenMenuOnFocus() {\n\t\t\t\tactions.openMenu( 'focus' );\n\t\t\t},\n\t\t\ttoggleMenuOnClick() {\n\t\t\t\tconst ctx = getContext();\n\t\t\t\tconst { ref } = getElement();\n\t\t\t\t// Safari won't send focus to the clicked element, so we need to manually place it: https://bugs.webkit.org/show_bug.cgi?id=22261\n\t\t\t\tif ( window.document.activeElement !== ref ) {\n\t\t\t\t\tref.focus();\n\t\t\t\t}\n\t\t\t\tconst { menuOpenedBy } = state;\n\t\t\t\tif ( menuOpenedBy.click || menuOpenedBy.focus ) {\n\t\t\t\t\tactions.closeMenu( 'click' );\n\t\t\t\t\tactions.closeMenu( 'focus' );\n\t\t\t\t} else {\n\t\t\t\t\tctx.previousFocus = ref;\n\t\t\t\t\tactions.openMenu( 'click' );\n\t\t\t\t}\n\t\t\t},\n\t\t\thandleMenuKeydown: withSyncEvent( ( event ) => {\n\t\t\t\tconst { type, firstFocusableElement, lastFocusableElement } =\n\t\t\t\t\tgetContext();\n\t\t\t\tif ( state.menuOpenedBy.click ) {\n\t\t\t\t\t// If Escape close the menu.\n\t\t\t\t\tif ( event.key === 'Escape' ) {\n\t\t\t\t\t\tevent.stopPropagation(); // Keeps ancestor menus open.\n\t\t\t\t\t\tactions.closeMenu( 'click' );\n\t\t\t\t\t\tactions.closeMenu( 'focus' );\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Trap focus if it is an overlay (main menu).\n\t\t\t\t\tif ( type === 'overlay' && event.key === 'Tab' ) {\n\t\t\t\t\t\t// If shift + tab it change the direction.\n\t\t\t\t\t\tif (\n\t\t\t\t\t\t\tevent.shiftKey &&\n\t\t\t\t\t\t\twindow.document.activeElement ===\n\t\t\t\t\t\t\t\tfirstFocusableElement\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tlastFocusableElement.focus();\n\t\t\t\t\t\t} else if (\n\t\t\t\t\t\t\t! event.shiftKey &&\n\t\t\t\t\t\t\twindow.document.activeElement ===\n\t\t\t\t\t\t\t\tlastFocusableElement\n\t\t\t\t\t\t) {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tfirstFocusableElement.focus();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} ),\n\t\t\thandleMenuFocusout( event ) {\n\t\t\t\tconst { modal, type } = getContext();\n\t\t\t\t// If focus is outside modal, and in the document, close menu\n\t\t\t\t// event.target === The element losing focus\n\t\t\t\t// event.relatedTarget === The element receiving focus (if any)\n\t\t\t\t// When focusout is outside the document,\n\t\t\t\t// `window.document.activeElement` doesn't change.\n\n\t\t\t\t// The event.relatedTarget is null when something outside the navigation menu is clicked. This is only necessary for Safari.\n\t\t\t\tif (\n\t\t\t\t\tevent.relatedTarget === null ||\n\t\t\t\t\t( ! modal?.contains( event.relatedTarget ) &&\n\t\t\t\t\t\tevent.target !== window.document.activeElement &&\n\t\t\t\t\t\ttype === 'submenu' )\n\t\t\t\t) {\n\t\t\t\t\tactions.closeMenu( 'click' );\n\t\t\t\t\tactions.closeMenu( 'focus' );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\topenMenu( menuOpenedOn = 'click' ) {\n\t\t\t\tconst { type } = getContext();\n\t\t\t\tstate.menuOpenedBy[ menuOpenedOn ] = true;\n\t\t\t\tif ( type === 'overlay' ) {\n\t\t\t\t\t// Add a `has-modal-open` class to the <html> root.\n\t\t\t\t\tdocument.documentElement.classList.add( 'has-modal-open' );\n\t\t\t\t}\n\t\t\t},\n\n\t\t\tcloseMenu( menuClosedOn = 'click' ) {\n\t\t\t\tconst ctx = getContext();\n\t\t\t\tstate.menuOpenedBy[ menuClosedOn ] = false;\n\t\t\t\t// Check if the menu is still open or not.\n\t\t\t\tif ( ! state.isMenuOpen ) {\n\t\t\t\t\tif (\n\t\t\t\t\t\tctx.modal?.contains( window.document.activeElement )\n\t\t\t\t\t) {\n\t\t\t\t\t\tctx.previousFocus?.focus();\n\t\t\t\t\t}\n\t\t\t\t\tctx.modal = null;\n\t\t\t\t\tctx.previousFocus = null;\n\t\t\t\t\tif ( ctx.type === 'overlay' ) {\n\t\t\t\t\t\tdocument.documentElement.classList.remove(\n\t\t\t\t\t\t\t'has-modal-open'\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t\tcallbacks: {\n\t\t\tinitMenu() {\n\t\t\t\tconst ctx = getContext();\n\t\t\t\tconst { ref } = getElement();\n\t\t\t\tif ( state.isMenuOpen ) {\n\t\t\t\t\tconst focusableElements =\n\t\t\t\t\t\tref.querySelectorAll( focusableSelectors );\n\t\t\t\t\tctx.modal = ref;\n\t\t\t\t\tctx.firstFocusableElement = focusableElements[ 0 ];\n\t\t\t\t\tctx.lastFocusableElement =\n\t\t\t\t\t\tfocusableElements[ focusableElements.length - 1 ];\n\t\t\t\t}\n\t\t\t},\n\t\t\tfocusFirstElement() {\n\t\t\t\tconst { ref } = getElement();\n\t\t\t\tif ( state.isMenuOpen ) {\n\t\t\t\t\tconst focusableElements =\n\t\t\t\t\t\tref.querySelectorAll( focusableSelectors );\n\t\t\t\t\tfocusableElements?.[ 0 ]?.focus();\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t},\n\t{ lock: true }\n);\n"],
  "mappings": "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",
  "names": ["store", "getContext", "getElement", "withSyncEvent", "focusableSelectors", "state", "actions", "ctx", "type", "overlayOpenedBy", "ref", "menuOpenedBy", "event", "firstFocusableElement", "lastFocusableElement", "modal", "menuOpenedOn", "menuClosedOn", "focusableElements"]
}
