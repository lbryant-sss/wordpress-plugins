{
  "version": 3,
  "sources": ["../../packages/a11y/src/shared/clear.js", "../../packages/a11y/src/shared/filter-message.js", "../../packages/a11y/src/shared/index.js", "../../packages/a11y/src/module/index.ts"],
  "sourcesContent": ["/**\n * Clears the a11y-speak-region elements and hides the explanatory text.\n */\nexport default function clear() {\n\tconst regions = document.getElementsByClassName( 'a11y-speak-region' );\n\tconst introText = document.getElementById( 'a11y-speak-intro-text' );\n\n\tfor ( let i = 0; i < regions.length; i++ ) {\n\t\tregions[ i ].textContent = '';\n\t}\n\n\t// Make sure the explanatory text is hidden from assistive technologies.\n\tif ( introText ) {\n\t\tintroText.setAttribute( 'hidden', 'hidden' );\n\t}\n}\n", "let previousMessage = '';\n\n/**\n * Filter the message to be announced to the screenreader.\n *\n * @param {string} message The message to be announced.\n *\n * @return {string} The filtered message.\n */\nexport default function filterMessage( message ) {\n\t/*\n\t * Strip HTML tags (if any) from the message string. Ideally, messages should\n\t * be simple strings, carefully crafted for specific use with A11ySpeak.\n\t * When re-using already existing strings this will ensure simple HTML to be\n\t * stripped out and replaced with a space. Browsers will collapse multiple\n\t * spaces natively.\n\t */\n\tmessage = message.replace( /<[^<>]+>/g, ' ' );\n\n\t/*\n\t * Safari + VoiceOver don't announce repeated, identical strings. We use\n\t * a `no-break space` to force them to think identical strings are different.\n\t */\n\tif ( previousMessage === message ) {\n\t\tmessage += '\\u00A0';\n\t}\n\n\tpreviousMessage = message;\n\n\treturn message;\n}\n", "/**\n * Internal dependencies\n */\nimport clear from './clear';\nimport filterMessage from './filter-message';\n\n/**\n * Allows you to easily announce dynamic interface updates to screen readers using ARIA live regions.\n * This module is inspired by the `speak` function in `wp-a11y.js`.\n *\n * @param {string}               message    The message to be announced by assistive technologies.\n * @param {'polite'|'assertive'} [ariaLive] The politeness level for aria-live; default: 'polite'.\n *\n * @example\n * ```js\n * import { speak } from '@wordpress/a11y';\n *\n * // For polite messages that shouldn't interrupt what screen readers are currently announcing.\n * speak( 'The message you want to send to the ARIA live region' );\n *\n * // For assertive messages that should interrupt what screen readers are currently announcing.\n * speak( 'The message you want to send to the ARIA live region', 'assertive' );\n * ```\n */\nexport function speak( message, ariaLive ) {\n\t/*\n\t * Clear previous messages to allow repeated strings being read out and hide\n\t * the explanatory text from assistive technologies.\n\t */\n\tclear();\n\n\tmessage = filterMessage( message );\n\n\tconst introText = document.getElementById( 'a11y-speak-intro-text' );\n\tconst containerAssertive = document.getElementById(\n\t\t'a11y-speak-assertive'\n\t);\n\tconst containerPolite = document.getElementById( 'a11y-speak-polite' );\n\n\tif ( containerAssertive && ariaLive === 'assertive' ) {\n\t\tcontainerAssertive.textContent = message;\n\t} else if ( containerPolite ) {\n\t\tcontainerPolite.textContent = message;\n\t}\n\n\t/*\n\t * Make the explanatory text available to assistive technologies by removing\n\t * the 'hidden' HTML attribute.\n\t */\n\tif ( introText ) {\n\t\tintroText.removeAttribute( 'hidden' );\n\t}\n}\n", "/**\n * Internal dependencies\n */\nexport { speak } from '../shared/index';\n\n/**\n * This no-op function is exported to provide compatibility with the `wp-a11y` Script.\n *\n * Filters should inject the relevant HTML on page load instead of requiring setup.\n */\nexport const setup = () => {};\n"],
  "mappings": "AAGe,SAARA,GAAyB,CAC/B,IAAMC,EAAU,SAAS,uBAAwB,mBAAoB,EAC/DC,EAAY,SAAS,eAAgB,uBAAwB,EAEnE,QAAUC,EAAI,EAAGA,EAAIF,EAAQ,OAAQE,IACpCF,EAASE,CAAE,EAAE,YAAc,GAIvBD,GACJA,EAAU,aAAc,SAAU,QAAS,CAE7C,CCfA,IAAIE,EAAkB,GASP,SAARC,EAAgCC,EAAU,CAQhD,OAAAA,EAAUA,EAAQ,QAAS,YAAa,GAAI,EAMvCF,IAAoBE,IACxBA,GAAW,QAGZF,EAAkBE,EAEXA,CACR,CCNO,SAASC,EAAOC,EAASC,EAAW,CAK1CC,EAAM,EAENF,EAAUG,EAAeH,CAAQ,EAEjC,IAAMI,EAAY,SAAS,eAAgB,uBAAwB,EAC7DC,EAAqB,SAAS,eACnC,sBACD,EACMC,EAAkB,SAAS,eAAgB,mBAAoB,EAEhED,GAAsBJ,IAAa,YACvCI,EAAmB,YAAcL,EACtBM,IACXA,EAAgB,YAAcN,GAO1BI,GACJA,EAAU,gBAAiB,QAAS,CAEtC,CC1CO,IAAMG,EAAQ,IAAM,CAAC",
  "names": ["clear", "regions", "introText", "i", "previousMessage", "filterMessage", "message", "speak", "message", "ariaLive", "clear", "filterMessage", "introText", "containerAssertive", "containerPolite", "setup"]
}
