{
  "version": 3,
  "sources": ["../../../packages/block-editor/src/utils/fit-text-utils.js", "../../../packages/block-editor/src/utils/fit-text-frontend.js"],
  "sourcesContent": ["/**\n * Shared utility functions for fit text functionality.\n * Uses callback-based approach for maximum code reuse between editor and frontend.\n */\n\n/**\n * Generate CSS rule for single text element.\n *\n * @param {string} elementSelector CSS selector for the text element\n * @param {number} fontSize        Font size in pixels\n * @return {string} CSS rule string\n */\nfunction generateCSSRule( elementSelector, fontSize ) {\n\treturn `${ elementSelector } { font-size: ${ fontSize }px !important; }`;\n}\n\n/**\n * Find optimal font size using simple binary search between 5-600px.\n *\n * @param {HTMLElement} textElement     The text element\n * @param {string}      elementSelector CSS selector for the text element\n * @param {Function}    applyStylesFn   Function to apply test styles\n * @param {number}      maxSize         Maximum font size in pixels (default: 600)\n * @return {number} Optimal font size\n */\nfunction findOptimalFontSize(\n\ttextElement,\n\telementSelector,\n\tapplyStylesFn,\n\tmaxSize = 600\n) {\n\tconst alreadyHasScrollableHeight =\n\t\ttextElement.scrollHeight > textElement.clientHeight;\n\tlet minSize = 5;\n\tlet bestSize = minSize;\n\n\twhile ( minSize <= maxSize ) {\n\t\tconst midSize = Math.floor( ( minSize + maxSize ) / 2 );\n\t\tapplyStylesFn( generateCSSRule( elementSelector, midSize ) );\n\n\t\tconst fitsWidth = textElement.scrollWidth <= textElement.clientWidth;\n\t\tconst fitsHeight =\n\t\t\talreadyHasScrollableHeight ||\n\t\t\ttextElement.scrollHeight <= textElement.clientHeight;\n\n\t\tif ( fitsWidth && fitsHeight ) {\n\t\t\tbestSize = midSize;\n\t\t\tminSize = midSize + 1;\n\t\t} else {\n\t\t\tmaxSize = midSize - 1;\n\t\t}\n\t}\n\n\treturn bestSize;\n}\n\n/**\n * Complete fit text optimization for a single text element.\n * Handles the full flow using callbacks for style management.\n *\n * @param {HTMLElement} textElement     The text element (paragraph, heading, etc.)\n * @param {string}      elementSelector CSS selector for the text element\n * @param {Function}    applyStylesFn   Function to apply CSS styles (pass empty string to clear)\n * @param {number}      maxSize         Maximum font size in pixels.\n */\nexport function optimizeFitText(\n\ttextElement,\n\telementSelector,\n\tapplyStylesFn,\n\tmaxSize\n) {\n\tif ( ! textElement ) {\n\t\treturn;\n\t}\n\n\tapplyStylesFn( '' );\n\n\tconst optimalSize = findOptimalFontSize(\n\t\ttextElement,\n\t\telementSelector,\n\t\tapplyStylesFn,\n\t\tmaxSize\n\t);\n\n\tconst cssRule = generateCSSRule( elementSelector, optimalSize );\n\tapplyStylesFn( cssRule );\n}\n", "/**\n * Frontend fit text functionality.\n * Automatically detects and initializes fit text on blocks with the has-fit-text class.\n */\n\n/**\n * Internal dependencies\n */\nimport { optimizeFitText } from './fit-text-utils';\n\n/**\n * Counter for generating unique element IDs.\n */\nlet idCounter = 0;\n\n/**\n * Get or create a unique style element for a fit text element.\n *\n * @param {string} elementId Unique identifier for the element.\n * @return {HTMLElement} Style element.\n */\nfunction getOrCreateStyleElement( elementId ) {\n\tconst styleId = `fit-text-${ elementId }`;\n\tlet styleElement = document.getElementById( styleId );\n\tif ( ! styleElement ) {\n\t\tstyleElement = document.createElement( 'style' );\n\t\tstyleElement.id = styleId;\n\t\tdocument.head.appendChild( styleElement );\n\t}\n\treturn styleElement;\n}\n\n/**\n * Generate a unique identifier for a fit text element.\n *\n * @param {HTMLElement} element The element to identify.\n * @return {string} Unique identifier.\n */\nfunction getElementIdentifier( element ) {\n\tif ( ! element.dataset.fitTextId ) {\n\t\telement.dataset.fitTextId = `fit-text-${ ++idCounter }`;\n\t}\n\treturn element.dataset.fitTextId;\n}\n\n/**\n * Initialize fit text functionality for a single element.\n *\n * @param {HTMLElement} element Element with fit text enabled.\n */\nfunction initializeFitText( element ) {\n\tconst elementId = getElementIdentifier( element );\n\n\tconst applyFitText = () => {\n\t\tconst styleElement = getOrCreateStyleElement( elementId );\n\t\tconst elementSelector = `[data-fit-text-id=\\\"${ elementId }\\\"]`;\n\n\t\t// Style management callback\n\t\tconst applyStylesFn = ( css ) => {\n\t\t\tstyleElement.textContent = css;\n\t\t};\n\n\t\toptimizeFitText( element, elementSelector, applyStylesFn );\n\t};\n\n\t// Initial sizing\n\tapplyFitText();\n\n\t// Watch for parent container resize\n\tif ( window.ResizeObserver && element.parentElement ) {\n\t\tconst resizeObserver = new window.ResizeObserver( applyFitText );\n\t\tresizeObserver.observe( element.parentElement );\n\t}\n}\n\n/**\n * Initialize fit text on all elements with the has-fit-text class.\n */\nfunction initializeAllFitText() {\n\tconst elements = document.querySelectorAll( '.has-fit-text' );\n\telements.forEach( initializeFitText );\n}\n\nwindow.addEventListener( 'load', initializeAllFitText );\n"],
  "mappings": "AAYA,SAASA,EAAiBC,EAAiBC,EAAW,CACrD,MAAO,GAAID,CAAgB,iBAAkBC,CAAS,kBACvD,CAWA,SAASC,EACRC,EACAH,EACAI,EACAC,EAAU,IACT,CACD,IAAMC,EACLH,EAAY,aAAeA,EAAY,aACpCI,EAAU,EACVC,EAAWD,EAEf,KAAQA,GAAWF,GAAU,CAC5B,IAAMI,EAAU,KAAK,OAASF,EAAUF,GAAY,CAAE,EACtDD,EAAeL,EAAiBC,EAAiBS,CAAQ,CAAE,EAE3D,IAAMC,EAAYP,EAAY,aAAeA,EAAY,YACnDQ,EACLL,GACAH,EAAY,cAAgBA,EAAY,aAEpCO,GAAaC,GACjBH,EAAWC,EACXF,EAAUE,EAAU,GAEpBJ,EAAUI,EAAU,CAEtB,CAEA,OAAOD,CACR,CAWO,SAASI,EACfT,EACAH,EACAI,EACAC,EACC,CACD,GAAK,CAAEF,EACN,OAGDC,EAAe,EAAG,EAElB,IAAMS,EAAcX,EACnBC,EACAH,EACAI,EACAC,CACD,EAEMS,EAAUf,EAAiBC,EAAiBa,CAAY,EAC9DT,EAAeU,CAAQ,CACxB,CCzEA,IAAIC,EAAY,EAQhB,SAASC,EAAyBC,EAAY,CAC7C,IAAMC,EAAU,YAAaD,CAAU,GACnCE,EAAe,SAAS,eAAgBD,CAAQ,EACpD,OAAOC,IACNA,EAAe,SAAS,cAAe,OAAQ,EAC/CA,EAAa,GAAKD,EAClB,SAAS,KAAK,YAAaC,CAAa,GAElCA,CACR,CAQA,SAASC,EAAsBC,EAAU,CACxC,OAAOA,EAAQ,QAAQ,YACtBA,EAAQ,QAAQ,UAAY,YAAa,EAAEN,CAAU,IAE/CM,EAAQ,QAAQ,SACxB,CAOA,SAASC,EAAmBD,EAAU,CACrC,IAAMJ,EAAYG,EAAsBC,CAAQ,EAE1CE,EAAe,IAAM,CAC1B,IAAMJ,EAAeH,EAAyBC,CAAU,EAClDO,EAAkB,sBAAwBP,CAAU,KAO1DQ,EAAiBJ,EAASG,EAJFE,GAAS,CAChCP,EAAa,YAAcO,CAC5B,CAEyD,CAC1D,EAGAH,EAAa,EAGR,OAAO,gBAAkBF,EAAQ,eACd,IAAI,OAAO,eAAgBE,CAAa,EAChD,QAASF,EAAQ,aAAc,CAEhD,CAKA,SAASM,GAAuB,CACd,SAAS,iBAAkB,eAAgB,EACnD,QAASL,CAAkB,CACrC,CAEA,OAAO,iBAAkB,OAAQK,CAAqB",
  "names": ["generateCSSRule", "elementSelector", "fontSize", "findOptimalFontSize", "textElement", "applyStylesFn", "maxSize", "alreadyHasScrollableHeight", "minSize", "bestSize", "midSize", "fitsWidth", "fitsHeight", "optimizeFitText", "optimalSize", "cssRule", "idCounter", "getOrCreateStyleElement", "elementId", "styleId", "styleElement", "getElementIdentifier", "element", "initializeFitText", "applyFitText", "elementSelector", "optimizeFitText", "css", "initializeAllFitText"]
}
