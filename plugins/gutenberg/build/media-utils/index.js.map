{
  "version": 3,
  "sources": ["wordpress-external:@wordpress/element", "wordpress-external:@wordpress/i18n", "wordpress-external:@wordpress/blob", "wordpress-external:@wordpress/api-fetch", "wordpress-external:@wordpress/private-apis", "../../packages/media-utils/src/index.ts", "../../packages/media-utils/src/components/media-upload/index.js", "../../packages/media-utils/src/utils/upload-media.ts", "../../packages/media-utils/src/utils/upload-to-server.ts", "../../packages/media-utils/src/utils/flatten-form-data.ts", "../../packages/media-utils/src/utils/transform-attachment.ts", "../../packages/media-utils/src/utils/validate-mime-type.ts", "../../packages/media-utils/src/utils/upload-error.ts", "../../packages/media-utils/src/utils/validate-mime-type-for-user.ts", "../../packages/media-utils/src/utils/get-mime-types-array.ts", "../../packages/media-utils/src/utils/validate-file-size.ts", "../../packages/media-utils/src/utils/sideload-media.ts", "../../packages/media-utils/src/utils/sideload-to-server.ts", "../../packages/media-utils/src/lock-unlock.ts", "../../packages/media-utils/src/private-apis.ts"],
  "sourcesContent": ["module.exports = window.wp.element;", "module.exports = window.wp.i18n;", "module.exports = window.wp.blob;", "module.exports = window.wp.apiFetch;", "module.exports = window.wp.privateApis;", "export * from './components';\n\nexport { uploadMedia } from './utils/upload-media';\nexport { transformAttachment } from './utils/transform-attachment';\nexport { validateFileSize } from './utils/validate-file-size';\nexport { validateMimeType } from './utils/validate-mime-type';\nexport { validateMimeTypeForUser } from './utils/validate-mime-type-for-user';\n\nexport type { Attachment, RestAttachment } from './utils/types';\n\nexport { privateApis } from './private-apis';\n", "/**\n * WordPress dependencies\n */\nimport { Component } from '@wordpress/element';\nimport { __ } from '@wordpress/i18n';\n\nconst DEFAULT_EMPTY_GALLERY = [];\n\n/**\n * Prepares the Featured Image toolbars and frames.\n *\n * @return {window.wp.media.view.MediaFrame.Select} The default media workflow.\n */\nconst getFeaturedImageMediaFrame = () => {\n\tconst { wp } = window;\n\n\treturn wp.media.view.MediaFrame.Select.extend( {\n\t\t/**\n\t\t * Enables the Set Featured Image Button.\n\t\t *\n\t\t * @param {Object} toolbar toolbar for featured image state\n\t\t * @return {void}\n\t\t */\n\t\tfeaturedImageToolbar( toolbar ) {\n\t\t\tthis.createSelectToolbar( toolbar, {\n\t\t\t\ttext: wp.media.view.l10n.setFeaturedImage,\n\t\t\t\tstate: this.options.state,\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t * Handle the edit state requirements of selected media item.\n\t\t *\n\t\t * @return {void}\n\t\t */\n\t\teditState() {\n\t\t\tconst selection = this.state( 'featured-image' ).get( 'selection' );\n\t\t\tconst view = new wp.media.view.EditImage( {\n\t\t\t\tmodel: selection.single(),\n\t\t\t\tcontroller: this,\n\t\t\t} ).render();\n\n\t\t\t// Set the view to the EditImage frame using the selected image.\n\t\t\tthis.content.set( view );\n\n\t\t\t// After bringing in the frame, load the actual editor via an ajax call.\n\t\t\tview.loadEditor();\n\t\t},\n\n\t\t/**\n\t\t * Create the default states.\n\t\t *\n\t\t * @return {void}\n\t\t */\n\t\tcreateStates: function createStates() {\n\t\t\tthis.on(\n\t\t\t\t'toolbar:create:featured-image',\n\t\t\t\tthis.featuredImageToolbar,\n\t\t\t\tthis\n\t\t\t);\n\t\t\tthis.on( 'content:render:edit-image', this.editState, this );\n\n\t\t\tthis.states.add( [\n\t\t\t\tnew wp.media.controller.FeaturedImage(),\n\t\t\t\tnew wp.media.controller.EditImage( {\n\t\t\t\t\tmodel: this.options.editImage,\n\t\t\t\t} ),\n\t\t\t] );\n\t\t},\n\t} );\n};\n\n/**\n * Prepares the default frame for selecting a single media item.\n *\n * @return {window.wp.media.view.MediaFrame.Select} The default media workflow.\n */\nconst getSingleMediaFrame = () => {\n\tconst { wp } = window;\n\n\t// Extend the default Select frame, and use the same `createStates` method as in core,\n\t// but with the addition of `filterable: 'uploaded'` to the Library state, so that\n\t// the user can filter the media library by uploaded media.\n\treturn wp.media.view.MediaFrame.Select.extend( {\n\t\t/**\n\t\t * Create the default states on the frame.\n\t\t */\n\t\tcreateStates() {\n\t\t\tconst options = this.options;\n\n\t\t\tif ( this.options.states ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Add the default states.\n\t\t\tthis.states.add( [\n\t\t\t\t// Main states.\n\t\t\t\tnew wp.media.controller.Library( {\n\t\t\t\t\tlibrary: wp.media.query( options.library ),\n\t\t\t\t\tmultiple: options.multiple,\n\t\t\t\t\ttitle: options.title,\n\t\t\t\t\tpriority: 20,\n\t\t\t\t\tfilterable: 'uploaded', // Allow filtering by uploaded images.\n\t\t\t\t} ),\n\t\t\t\tnew wp.media.controller.EditImage( {\n\t\t\t\t\tmodel: options.editImage,\n\t\t\t\t} ),\n\t\t\t] );\n\t\t},\n\t} );\n};\n\n/**\n * Prepares the Gallery toolbars and frames.\n *\n * @return {window.wp.media.view.MediaFrame.Post} The default media workflow.\n */\nconst getGalleryDetailsMediaFrame = () => {\n\tconst { wp } = window;\n\t/**\n\t * Custom gallery details frame.\n\t *\n\t * @see https://github.com/xwp/wp-core-media-widgets/blob/905edbccfc2a623b73a93dac803c5335519d7837/wp-admin/js/widgets/media-gallery-widget.js\n\t * @class GalleryDetailsMediaFrame\n\t * @class\n\t */\n\treturn wp.media.view.MediaFrame.Post.extend( {\n\t\t/**\n\t\t * Set up gallery toolbar.\n\t\t *\n\t\t * @return {void}\n\t\t */\n\t\tgalleryToolbar() {\n\t\t\tconst editing = this.state().get( 'editing' );\n\t\t\tthis.toolbar.set(\n\t\t\t\tnew wp.media.view.Toolbar( {\n\t\t\t\t\tcontroller: this,\n\t\t\t\t\titems: {\n\t\t\t\t\t\tinsert: {\n\t\t\t\t\t\t\tstyle: 'primary',\n\t\t\t\t\t\t\ttext: editing\n\t\t\t\t\t\t\t\t? wp.media.view.l10n.updateGallery\n\t\t\t\t\t\t\t\t: wp.media.view.l10n.insertGallery,\n\t\t\t\t\t\t\tpriority: 80,\n\t\t\t\t\t\t\trequires: { library: true },\n\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * @fires wp.media.controller.State#update\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tclick() {\n\t\t\t\t\t\t\t\tconst controller = this.controller,\n\t\t\t\t\t\t\t\t\tstate = controller.state();\n\n\t\t\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t\t\t\tstate.trigger(\n\t\t\t\t\t\t\t\t\t'update',\n\t\t\t\t\t\t\t\t\tstate.get( 'library' )\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t// Restore and reset the default state.\n\t\t\t\t\t\t\t\tcontroller.setState( controller.options.state );\n\t\t\t\t\t\t\t\tcontroller.reset();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t} )\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Handle the edit state requirements of selected media item.\n\t\t *\n\t\t * @return {void}\n\t\t */\n\t\teditState() {\n\t\t\tconst selection = this.state( 'gallery' ).get( 'selection' );\n\t\t\tconst view = new wp.media.view.EditImage( {\n\t\t\t\tmodel: selection.single(),\n\t\t\t\tcontroller: this,\n\t\t\t} ).render();\n\n\t\t\t// Set the view to the EditImage frame using the selected image.\n\t\t\tthis.content.set( view );\n\n\t\t\t// After bringing in the frame, load the actual editor via an ajax call.\n\t\t\tview.loadEditor();\n\t\t},\n\n\t\t/**\n\t\t * Create the default states.\n\t\t *\n\t\t * @return {void}\n\t\t */\n\t\tcreateStates: function createStates() {\n\t\t\tthis.on( 'toolbar:create:main-gallery', this.galleryToolbar, this );\n\t\t\tthis.on( 'content:render:edit-image', this.editState, this );\n\n\t\t\tthis.states.add( [\n\t\t\t\tnew wp.media.controller.Library( {\n\t\t\t\t\tid: 'gallery',\n\t\t\t\t\ttitle: wp.media.view.l10n.createGalleryTitle,\n\t\t\t\t\tpriority: 40,\n\t\t\t\t\ttoolbar: 'main-gallery',\n\t\t\t\t\tfilterable: 'uploaded',\n\t\t\t\t\tmultiple: 'add',\n\t\t\t\t\teditable: false,\n\n\t\t\t\t\tlibrary: wp.media.query( {\n\t\t\t\t\t\ttype: 'image',\n\t\t\t\t\t\t...this.options.library,\n\t\t\t\t\t} ),\n\t\t\t\t} ),\n\t\t\t\tnew wp.media.controller.EditImage( {\n\t\t\t\t\tmodel: this.options.editImage,\n\t\t\t\t} ),\n\n\t\t\t\tnew wp.media.controller.GalleryEdit( {\n\t\t\t\t\tlibrary: this.options.selection,\n\t\t\t\t\tediting: this.options.editing,\n\t\t\t\t\tmenu: 'gallery',\n\t\t\t\t\tdisplaySettings: false,\n\t\t\t\t\tmultiple: true,\n\t\t\t\t} ),\n\n\t\t\t\tnew wp.media.controller.GalleryAdd(),\n\t\t\t] );\n\t\t},\n\t} );\n};\n\n// The media library image object contains numerous attributes\n// we only need this set to display the image in the library.\nconst slimImageObject = ( img ) => {\n\tconst attrSet = [\n\t\t'sizes',\n\t\t'mime',\n\t\t'type',\n\t\t'subtype',\n\t\t'id',\n\t\t'url',\n\t\t'alt',\n\t\t'link',\n\t\t'caption',\n\t];\n\treturn attrSet.reduce( ( result, key ) => {\n\t\tif ( img?.hasOwnProperty( key ) ) {\n\t\t\tresult[ key ] = img[ key ];\n\t\t}\n\t\treturn result;\n\t}, {} );\n};\n\nconst getAttachmentsCollection = ( ids ) => {\n\tconst { wp } = window;\n\n\treturn wp.media.query( {\n\t\torder: 'ASC',\n\t\torderby: 'post__in',\n\t\tpost__in: ids,\n\t\tposts_per_page: -1,\n\t\tquery: true,\n\t\ttype: 'image',\n\t} );\n};\n\nclass MediaUpload extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\t\tthis.openModal = this.openModal.bind( this );\n\t\tthis.onOpen = this.onOpen.bind( this );\n\t\tthis.onSelect = this.onSelect.bind( this );\n\t\tthis.onUpdate = this.onUpdate.bind( this );\n\t\tthis.onClose = this.onClose.bind( this );\n\t}\n\n\tinitializeListeners() {\n\t\t// When an image is selected in the media frame...\n\t\tthis.frame.on( 'select', this.onSelect );\n\t\tthis.frame.on( 'update', this.onUpdate );\n\t\tthis.frame.on( 'open', this.onOpen );\n\t\tthis.frame.on( 'close', this.onClose );\n\t}\n\n\t/**\n\t * Sets the Gallery frame and initializes listeners.\n\t *\n\t * @return {void}\n\t */\n\tbuildAndSetGalleryFrame() {\n\t\tconst {\n\t\t\taddToGallery = false,\n\t\t\tallowedTypes,\n\t\t\tmultiple = false,\n\t\t\tvalue = DEFAULT_EMPTY_GALLERY,\n\t\t} = this.props;\n\n\t\t// If the value did not changed there is no need to rebuild the frame,\n\t\t// we can continue to use the existing one.\n\t\tif ( value === this.lastGalleryValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { wp } = window;\n\n\t\tthis.lastGalleryValue = value;\n\n\t\t// If a frame already existed remove it.\n\t\tif ( this.frame ) {\n\t\t\tthis.frame.remove();\n\t\t}\n\t\tlet currentState;\n\t\tif ( addToGallery ) {\n\t\t\tcurrentState = 'gallery-library';\n\t\t} else {\n\t\t\tcurrentState = value && value.length ? 'gallery-edit' : 'gallery';\n\t\t}\n\t\tif ( ! this.GalleryDetailsMediaFrame ) {\n\t\t\tthis.GalleryDetailsMediaFrame = getGalleryDetailsMediaFrame();\n\t\t}\n\t\tconst attachments = getAttachmentsCollection( value );\n\t\tconst selection = new wp.media.model.Selection( attachments.models, {\n\t\t\tprops: attachments.props.toJSON(),\n\t\t\tmultiple,\n\t\t} );\n\t\tthis.frame = new this.GalleryDetailsMediaFrame( {\n\t\t\tmimeType: allowedTypes,\n\t\t\tstate: currentState,\n\t\t\tmultiple,\n\t\t\tselection,\n\t\t\tediting: !! value?.length,\n\t\t} );\n\t\twp.media.frame = this.frame;\n\t\tthis.initializeListeners();\n\t}\n\n\t/**\n\t * Initializes the Media Library requirements for the featured image flow.\n\t *\n\t * @return {void}\n\t */\n\tbuildAndSetFeatureImageFrame() {\n\t\tconst { wp } = window;\n\t\tconst { value: featuredImageId, multiple, allowedTypes } = this.props;\n\t\tconst featuredImageFrame = getFeaturedImageMediaFrame();\n\t\tconst attachments = getAttachmentsCollection( featuredImageId );\n\t\tconst selection = new wp.media.model.Selection( attachments.models, {\n\t\t\tprops: attachments.props.toJSON(),\n\t\t} );\n\t\tthis.frame = new featuredImageFrame( {\n\t\t\tmimeType: allowedTypes,\n\t\t\tstate: 'featured-image',\n\t\t\tmultiple,\n\t\t\tselection,\n\t\t\tediting: featuredImageId,\n\t\t} );\n\t\twp.media.frame = this.frame;\n\t\t// In order to select the current featured image when opening\n\t\t// the media library we have to set the appropriate settings.\n\t\t// Currently they are set in php for the post editor, but\n\t\t// not for site editor.\n\t\twp.media.view.settings.post = {\n\t\t\t...wp.media.view.settings.post,\n\t\t\tfeaturedImageId: featuredImageId || -1,\n\t\t};\n\t}\n\n\t/**\n\t * Initializes the Media Library requirements for the single image flow.\n\t *\n\t * @return {void}\n\t */\n\tbuildAndSetSingleMediaFrame() {\n\t\tconst { wp } = window;\n\t\tconst {\n\t\t\tallowedTypes,\n\t\t\tmultiple = false,\n\t\t\ttitle = __( 'Select or Upload Media' ),\n\t\t\tvalue,\n\t\t} = this.props;\n\n\t\tconst frameConfig = {\n\t\t\ttitle,\n\t\t\tmultiple,\n\t\t};\n\t\tif ( !! allowedTypes ) {\n\t\t\tframeConfig.library = { type: allowedTypes };\n\t\t}\n\n\t\t// If a frame already exists, remove it.\n\t\tif ( this.frame ) {\n\t\t\tthis.frame.remove();\n\t\t}\n\n\t\tconst singleImageFrame = getSingleMediaFrame();\n\t\tconst attachments = getAttachmentsCollection( value );\n\t\tconst selection = new wp.media.model.Selection( attachments.models, {\n\t\t\tprops: attachments.props.toJSON(),\n\t\t} );\n\t\tthis.frame = new singleImageFrame( {\n\t\t\tmimeType: allowedTypes,\n\t\t\tmultiple,\n\t\t\tselection,\n\t\t\t...frameConfig,\n\t\t} );\n\t\twp.media.frame = this.frame;\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.frame?.remove();\n\t}\n\n\tonUpdate( selections ) {\n\t\tconst { onSelect, multiple = false } = this.props;\n\t\tconst state = this.frame.state();\n\t\tconst selectedImages = selections || state.get( 'selection' );\n\n\t\tif ( ! selectedImages || ! selectedImages.models.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( multiple ) {\n\t\t\tonSelect(\n\t\t\t\tselectedImages.models.map( ( model ) =>\n\t\t\t\t\tslimImageObject( model.toJSON() )\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\tonSelect( slimImageObject( selectedImages.models[ 0 ].toJSON() ) );\n\t\t}\n\t}\n\n\tonSelect() {\n\t\tconst { onSelect, multiple = false } = this.props;\n\t\t// Get media attachment details from the frame state.\n\t\tconst attachment = this.frame.state().get( 'selection' ).toJSON();\n\t\tonSelect( multiple ? attachment : attachment[ 0 ] );\n\t}\n\n\tonOpen() {\n\t\tconst { wp } = window;\n\t\tconst { value } = this.props;\n\t\tthis.updateCollection();\n\n\t\t//Handle active tab in media model on model open.\n\t\tif ( this.props.mode ) {\n\t\t\tthis.frame.content.mode( this.props.mode );\n\t\t}\n\n\t\t// Handle both this.props.value being either (number[]) multiple ids\n\t\t// (for galleries) or a (number) singular id (e.g. image block).\n\t\tconst hasMedia = Array.isArray( value ) ? !! value?.length : !! value;\n\n\t\tif ( ! hasMedia ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isGallery = this.props.gallery;\n\t\tconst selection = this.frame.state().get( 'selection' );\n\t\tconst valueArray = Array.isArray( value ) ? value : [ value ];\n\n\t\tif ( ! isGallery ) {\n\t\t\tvalueArray.forEach( ( id ) => {\n\t\t\t\tselection.add( wp.media.attachment( id ) );\n\t\t\t} );\n\t\t}\n\n\t\t// Load the images so they are available in the media modal.\n\t\tconst attachments = getAttachmentsCollection( valueArray );\n\n\t\t// Once attachments are loaded, set the current selection.\n\t\tattachments.more().done( function () {\n\t\t\tif ( isGallery && attachments?.models?.length ) {\n\t\t\t\tselection.add( attachments.models );\n\t\t\t}\n\t\t} );\n\t}\n\n\tonClose() {\n\t\tconst { onClose } = this.props;\n\n\t\tif ( onClose ) {\n\t\t\tonClose();\n\t\t}\n\n\t\tthis.frame.detach();\n\t}\n\n\tupdateCollection() {\n\t\tconst frameContent = this.frame.content.get();\n\t\tif ( frameContent && frameContent.collection ) {\n\t\t\tconst collection = frameContent.collection;\n\n\t\t\t// Clean all attachments we have in memory.\n\t\t\tcollection\n\t\t\t\t.toArray()\n\t\t\t\t.forEach( ( model ) => model.trigger( 'destroy', model ) );\n\n\t\t\t// Reset has more flag, if library had small amount of items all items may have been loaded before.\n\t\t\tcollection.mirroring._hasMore = true;\n\n\t\t\t// Request items.\n\t\t\tcollection.more();\n\t\t}\n\t}\n\n\topenModal() {\n\t\tconst {\n\t\t\tgallery = false,\n\t\t\tunstableFeaturedImageFlow = false,\n\t\t\tmodalClass,\n\t\t} = this.props;\n\n\t\tif ( gallery ) {\n\t\t\tthis.buildAndSetGalleryFrame();\n\t\t} else {\n\t\t\tthis.buildAndSetSingleMediaFrame();\n\t\t}\n\n\t\tif ( modalClass ) {\n\t\t\tthis.frame.$el.addClass( modalClass );\n\t\t}\n\n\t\tif ( unstableFeaturedImageFlow ) {\n\t\t\tthis.buildAndSetFeatureImageFrame();\n\t\t}\n\t\tthis.initializeListeners();\n\t\tthis.frame.open();\n\t}\n\n\trender() {\n\t\treturn this.props.render( { open: this.openModal } );\n\t}\n}\n\nexport default MediaUpload;\n", "/**\n * WordPress dependencies\n */\nimport { __, sprintf } from '@wordpress/i18n';\nimport { createBlobURL, revokeBlobURL } from '@wordpress/blob';\n\n/**\n * Internal dependencies\n */\nimport type {\n\tAdditionalData,\n\tAttachment,\n\tOnChangeHandler,\n\tOnErrorHandler,\n} from './types';\nimport { uploadToServer } from './upload-to-server';\nimport { validateMimeType } from './validate-mime-type';\nimport { validateMimeTypeForUser } from './validate-mime-type-for-user';\nimport { validateFileSize } from './validate-file-size';\nimport { UploadError } from './upload-error';\n\ndeclare global {\n\tinterface Window {\n\t\t__experimentalMediaProcessing?: boolean;\n\t}\n}\n\ninterface UploadMediaArgs {\n\t// Additional data to include in the request.\n\tadditionalData?: AdditionalData;\n\t// Array with the types of media that can be uploaded, if unset all types are allowed.\n\tallowedTypes?: string[];\n\t// List of files.\n\tfilesList: File[];\n\t// Maximum upload size in bytes allowed for the site.\n\tmaxUploadFileSize?: number;\n\t// Function called when an error happens.\n\tonError?: OnErrorHandler;\n\t// Function called each time a file or a temporary representation of the file is available.\n\tonFileChange?: OnChangeHandler;\n\t// List of allowed mime types and file extensions.\n\twpAllowedMimeTypes?: Record< string, string > | null;\n\t// Abort signal.\n\tsignal?: AbortSignal;\n\t// Whether to allow multiple files to be uploaded.\n\tmultiple?: boolean;\n}\n\n/**\n * Upload a media file when the file upload button is activated\n * or when adding a file to the editor via drag & drop.\n *\n * @param $0                    Parameters object passed to the function.\n * @param $0.allowedTypes       Array with the types of media that can be uploaded, if unset all types are allowed.\n * @param $0.additionalData     Additional data to include in the request.\n * @param $0.filesList          List of files.\n * @param $0.maxUploadFileSize  Maximum upload size in bytes allowed for the site.\n * @param $0.onError            Function called when an error happens.\n * @param $0.onFileChange       Function called each time a file or a temporary representation of the file is available.\n * @param $0.wpAllowedMimeTypes List of allowed mime types and file extensions.\n * @param $0.signal             Abort signal.\n * @param $0.multiple           Whether to allow multiple files to be uploaded.\n */\nexport function uploadMedia( {\n\twpAllowedMimeTypes,\n\tallowedTypes,\n\tadditionalData = {},\n\tfilesList,\n\tmaxUploadFileSize,\n\tonError,\n\tonFileChange,\n\tsignal,\n\tmultiple = true,\n}: UploadMediaArgs ) {\n\tif ( ! multiple && filesList.length > 1 ) {\n\t\tonError?.( new Error( __( 'Only one file can be used here.' ) ) );\n\t\treturn;\n\t}\n\n\tconst validFiles = [];\n\n\tconst filesSet: Array< Partial< Attachment > | null > = [];\n\tconst setAndUpdateFiles = ( index: number, value: Attachment | null ) => {\n\t\t// For client-side media processing, this is handled by the upload-media package.\n\t\tif ( ! window.__experimentalMediaProcessing ) {\n\t\t\tif ( filesSet[ index ]?.url ) {\n\t\t\t\trevokeBlobURL( filesSet[ index ].url );\n\t\t\t}\n\t\t}\n\t\tfilesSet[ index ] = value;\n\t\tonFileChange?.(\n\t\t\tfilesSet.filter( ( attachment ) => attachment !== null )\n\t\t);\n\t};\n\n\tfor ( const mediaFile of filesList ) {\n\t\t// Verify if user is allowed to upload this mime type.\n\t\t// Defer to the server when type not detected.\n\t\ttry {\n\t\t\tvalidateMimeTypeForUser( mediaFile, wpAllowedMimeTypes );\n\t\t} catch ( error: unknown ) {\n\t\t\tonError?.( error as Error );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Check if the caller (e.g. a block) supports this mime type.\n\t\t// Defer to the server when type not detected.\n\t\ttry {\n\t\t\tvalidateMimeType( mediaFile, allowedTypes );\n\t\t} catch ( error: unknown ) {\n\t\t\tonError?.( error as Error );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Verify if file is greater than the maximum file upload size allowed for the site.\n\t\ttry {\n\t\t\tvalidateFileSize( mediaFile, maxUploadFileSize );\n\t\t} catch ( error: unknown ) {\n\t\t\tonError?.( error as Error );\n\t\t\tcontinue;\n\t\t}\n\n\t\tvalidFiles.push( mediaFile );\n\n\t\t// For client-side media processing, this is handled by the upload-media package.\n\t\tif ( ! window.__experimentalMediaProcessing ) {\n\t\t\t// Set temporary URL to create placeholder media file, this is replaced\n\t\t\t// with final file from media gallery when upload is `done` below.\n\t\t\tfilesSet.push( { url: createBlobURL( mediaFile ) } );\n\t\t\tonFileChange?.( filesSet as Array< Partial< Attachment > > );\n\t\t}\n\t}\n\n\tvalidFiles.map( async ( file, index ) => {\n\t\ttry {\n\t\t\tconst attachment = await uploadToServer(\n\t\t\t\tfile,\n\t\t\t\tadditionalData,\n\t\t\t\tsignal\n\t\t\t);\n\t\t\tsetAndUpdateFiles( index, attachment );\n\t\t} catch ( error ) {\n\t\t\t// Reset to empty on failure.\n\t\t\tsetAndUpdateFiles( index, null );\n\n\t\t\t// @wordpress/api-fetch throws any response that isn't in the 200 range as-is.\n\t\t\tlet message: string;\n\t\t\tif (\n\t\t\t\ttypeof error === 'object' &&\n\t\t\t\terror !== null &&\n\t\t\t\t'message' in error\n\t\t\t) {\n\t\t\t\tmessage =\n\t\t\t\t\ttypeof error.message === 'string'\n\t\t\t\t\t\t? error.message\n\t\t\t\t\t\t: String( error.message );\n\t\t\t} else {\n\t\t\t\tmessage = sprintf(\n\t\t\t\t\t// translators: %s: file name\n\t\t\t\t\t__( 'Error while uploading file %s to the media library.' ),\n\t\t\t\t\tfile.name\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tonError?.(\n\t\t\t\tnew UploadError( {\n\t\t\t\t\tcode: 'GENERAL',\n\t\t\t\t\tmessage,\n\t\t\t\t\tfile,\n\t\t\t\t\tcause: error instanceof Error ? error : undefined,\n\t\t\t\t} )\n\t\t\t);\n\t\t}\n\t} );\n}\n", "/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\n\n/**\n * Internal dependencies\n */\nimport { flattenFormData } from './flatten-form-data';\nimport { transformAttachment } from './transform-attachment';\nimport type { CreateRestAttachment, RestAttachment } from './types';\n\nexport async function uploadToServer(\n\tfile: File,\n\tadditionalData: CreateRestAttachment = {},\n\tsignal?: AbortSignal\n) {\n\t// Create upload payload.\n\tconst data = new FormData();\n\tdata.append( 'file', file, file.name || file.type.replace( '/', '.' ) );\n\tfor ( const [ key, value ] of Object.entries( additionalData ) ) {\n\t\tflattenFormData(\n\t\t\tdata,\n\t\t\tkey,\n\t\t\tvalue as string | Record< string, string > | undefined\n\t\t);\n\t}\n\n\treturn transformAttachment(\n\t\tawait apiFetch< RestAttachment >( {\n\t\t\t// This allows the video block to directly get a video's poster image.\n\t\t\tpath: '/wp/v2/media?_embed=wp:featuredmedia',\n\t\t\tbody: data,\n\t\t\tmethod: 'POST',\n\t\t\tsignal,\n\t\t} )\n\t);\n}\n", "/**\n * Determines whether the passed argument appears to be a plain object.\n *\n * @param data The object to inspect.\n */\nfunction isPlainObject( data: unknown ): data is Record< string, unknown > {\n\treturn (\n\t\tdata !== null &&\n\t\ttypeof data === 'object' &&\n\t\tObject.getPrototypeOf( data ) === Object.prototype\n\t);\n}\n\n/**\n * Recursively flatten data passed to form data, to allow using multi-level objects.\n *\n * @param {FormData}      formData Form data object.\n * @param {string}        key      Key to amend to form data object\n * @param {string|Object} data     Data to be amended to form data.\n */\nexport function flattenFormData(\n\tformData: FormData,\n\tkey: string,\n\tdata: string | undefined | Record< string, string >\n) {\n\tif ( isPlainObject( data ) ) {\n\t\tfor ( const [ name, value ] of Object.entries( data ) ) {\n\t\t\tflattenFormData( formData, `${ key }[${ name }]`, value );\n\t\t}\n\t} else if ( data !== undefined ) {\n\t\tformData.append( key, String( data ) );\n\t}\n}\n", "/**\n * Internal dependencies\n */\nimport type { Attachment, RestAttachment } from './types';\n\n/**\n * Transforms an attachment object from the REST API shape into the shape expected by the block editor and other consumers.\n *\n * @param attachment REST API attachment object.\n */\nexport function transformAttachment( attachment: RestAttachment ): Attachment {\n\t// eslint-disable-next-line camelcase\n\tconst { alt_text, source_url, ...savedMediaProps } = attachment;\n\treturn {\n\t\t...savedMediaProps,\n\t\talt: attachment.alt_text,\n\t\tcaption: attachment.caption?.raw ?? '',\n\t\ttitle: attachment.title.raw,\n\t\turl: attachment.source_url,\n\t\tposter:\n\t\t\tattachment._embedded?.[ 'wp:featuredmedia' ]?.[ 0 ]?.source_url ||\n\t\t\tundefined,\n\t};\n}\n", "/**\n * WordPress dependencies\n */\nimport { __, sprintf } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { UploadError } from './upload-error';\n\n/**\n * Verifies if the caller (e.g. a block) supports this mime type.\n *\n * @param file         File object.\n * @param allowedTypes List of allowed mime types.\n */\nexport function validateMimeType( file: File, allowedTypes?: string[] ) {\n\tif ( ! allowedTypes ) {\n\t\treturn;\n\t}\n\n\t// Allowed type specified by consumer.\n\tconst isAllowedType = allowedTypes.some( ( allowedType ) => {\n\t\t// If a complete mimetype is specified verify if it matches exactly the mime type of the file.\n\t\tif ( allowedType.includes( '/' ) ) {\n\t\t\treturn allowedType === file.type;\n\t\t}\n\t\t// Otherwise a general mime type is used, and we should verify if the file mimetype starts with it.\n\t\treturn file.type.startsWith( `${ allowedType }/` );\n\t} );\n\n\tif ( file.type && ! isAllowedType ) {\n\t\tthrow new UploadError( {\n\t\t\tcode: 'MIME_TYPE_NOT_SUPPORTED',\n\t\t\tmessage: sprintf(\n\t\t\t\t// translators: %s: file name.\n\t\t\t\t__( '%s: Sorry, this file type is not supported here.' ),\n\t\t\t\tfile.name\n\t\t\t),\n\t\t\tfile,\n\t\t} );\n\t}\n}\n", "interface UploadErrorArgs {\n\tcode: string;\n\tmessage: string;\n\tfile: File;\n\tcause?: Error;\n}\n\n/**\n * MediaError class.\n *\n * Small wrapper around the `Error` class\n * to hold an error code and a reference to a file object.\n */\nexport class UploadError extends Error {\n\tcode: string;\n\tfile: File;\n\n\tconstructor( { code, message, file, cause }: UploadErrorArgs ) {\n\t\tsuper( message, { cause } );\n\n\t\tObject.setPrototypeOf( this, new.target.prototype );\n\n\t\tthis.code = code;\n\t\tthis.file = file;\n\t}\n}\n", "/**\n * WordPress dependencies\n */\nimport { __, sprintf } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { UploadError } from './upload-error';\nimport { getMimeTypesArray } from './get-mime-types-array';\n\n/**\n * Verifies if the user is allowed to upload this mime type.\n *\n * @param file               File object.\n * @param wpAllowedMimeTypes List of allowed mime types and file extensions.\n */\nexport function validateMimeTypeForUser(\n\tfile: File,\n\twpAllowedMimeTypes?: Record< string, string > | null\n) {\n\t// Allowed types for the current WP_User.\n\tconst allowedMimeTypesForUser = getMimeTypesArray( wpAllowedMimeTypes );\n\n\tif ( ! allowedMimeTypesForUser ) {\n\t\treturn;\n\t}\n\n\tconst isAllowedMimeTypeForUser = allowedMimeTypesForUser.includes(\n\t\tfile.type\n\t);\n\n\tif ( file.type && ! isAllowedMimeTypeForUser ) {\n\t\tthrow new UploadError( {\n\t\t\tcode: 'MIME_TYPE_NOT_ALLOWED_FOR_USER',\n\t\t\tmessage: sprintf(\n\t\t\t\t// translators: %s: file name.\n\t\t\t\t__(\n\t\t\t\t\t'%s: Sorry, you are not allowed to upload this file type.'\n\t\t\t\t),\n\t\t\t\tfile.name\n\t\t\t),\n\t\t\tfile,\n\t\t} );\n\t}\n}\n", "/**\n * Browsers may use unexpected mime types, and they differ from browser to browser.\n * This function computes a flexible array of mime types from the mime type structured provided by the server.\n * Converts { jpg|jpeg|jpe: \"image/jpeg\" } into [ \"image/jpeg\", \"image/jpg\", \"image/jpeg\", \"image/jpe\" ]\n *\n * @param {?Object} wpMimeTypesObject Mime type object received from the server.\n *                                    Extensions are keys separated by '|' and values are mime types associated with an extension.\n *\n * @return An array of mime types or null\n */\nexport function getMimeTypesArray(\n\twpMimeTypesObject?: Record< string, string > | null\n) {\n\tif ( ! wpMimeTypesObject ) {\n\t\treturn null;\n\t}\n\treturn Object.entries( wpMimeTypesObject ).flatMap(\n\t\t( [ extensionsString, mime ] ) => {\n\t\t\tconst [ type ] = mime.split( '/' );\n\t\t\tconst extensions = extensionsString.split( '|' );\n\t\t\treturn [\n\t\t\t\tmime,\n\t\t\t\t...extensions.map(\n\t\t\t\t\t( extension ) => `${ type }/${ extension }`\n\t\t\t\t),\n\t\t\t];\n\t\t}\n\t);\n}\n", "/**\n * WordPress dependencies\n */\nimport { __, sprintf } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { UploadError } from './upload-error';\n\n/**\n * Verifies whether the file is within the file upload size limits for the site.\n *\n * @param file              File object.\n * @param maxUploadFileSize Maximum upload size in bytes allowed for the site.\n */\nexport function validateFileSize( file: File, maxUploadFileSize?: number ) {\n\t// Don't allow empty files to be uploaded.\n\tif ( file.size <= 0 ) {\n\t\tthrow new UploadError( {\n\t\t\tcode: 'EMPTY_FILE',\n\t\t\tmessage: sprintf(\n\t\t\t\t// translators: %s: file name.\n\t\t\t\t__( '%s: This file is empty.' ),\n\t\t\t\tfile.name\n\t\t\t),\n\t\t\tfile,\n\t\t} );\n\t}\n\n\tif ( maxUploadFileSize && file.size > maxUploadFileSize ) {\n\t\tthrow new UploadError( {\n\t\t\tcode: 'SIZE_ABOVE_LIMIT',\n\t\t\tmessage: sprintf(\n\t\t\t\t// translators: %s: file name.\n\t\t\t\t__(\n\t\t\t\t\t'%s: This file exceeds the maximum upload size for this site.'\n\t\t\t\t),\n\t\t\t\tfile.name\n\t\t\t),\n\t\t\tfile,\n\t\t} );\n\t}\n}\n", "/**\n * WordPress dependencies\n */\nimport { __, sprintf } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport type {\n\tOnChangeHandler,\n\tOnErrorHandler,\n\tCreateSideloadFile,\n\tRestAttachment,\n} from './types';\nimport { sideloadToServer } from './sideload-to-server';\nimport { UploadError } from './upload-error';\n\nconst noop = () => {};\n\ninterface SideloadMediaArgs {\n\t// Additional data to include in the request.\n\tadditionalData?: CreateSideloadFile;\n\t// File to sideload.\n\tfile: File;\n\t// Attachment ID.\n\tattachmentId: RestAttachment[ 'id' ];\n\t// Function called when an error happens.\n\tonError?: OnErrorHandler;\n\t// Function called each time a file or a temporary representation of the file is available.\n\tonFileChange?: OnChangeHandler;\n\t// Abort signal.\n\tsignal?: AbortSignal;\n}\n\n/**\n * Uploads a file to the server without creating an attachment.\n *\n * @param $0                Parameters object passed to the function.\n * @param $0.file           Media File to Save.\n * @param $0.attachmentId   Parent attachment ID.\n * @param $0.additionalData Additional data to include in the request.\n * @param $0.signal         Abort signal.\n * @param $0.onFileChange   Function called each time a file or a temporary representation of the file is available.\n * @param $0.onError        Function called when an error happens.\n */\nexport async function sideloadMedia( {\n\tfile,\n\tattachmentId,\n\tadditionalData = {},\n\tsignal,\n\tonFileChange,\n\tonError = noop,\n}: SideloadMediaArgs ) {\n\ttry {\n\t\tconst attachment = await sideloadToServer(\n\t\t\tfile,\n\t\t\tattachmentId,\n\t\t\tadditionalData,\n\t\t\tsignal\n\t\t);\n\t\tonFileChange?.( [ attachment ] );\n\t} catch ( error ) {\n\t\tlet message;\n\t\tif ( error instanceof Error ) {\n\t\t\tmessage = error.message;\n\t\t} else {\n\t\t\tmessage = sprintf(\n\t\t\t\t// translators: %s: file name\n\t\t\t\t__( 'Error while sideloading file %s to the server.' ),\n\t\t\t\tfile.name\n\t\t\t);\n\t\t}\n\t\tonError(\n\t\t\tnew UploadError( {\n\t\t\t\tcode: 'GENERAL',\n\t\t\t\tmessage,\n\t\t\t\tfile,\n\t\t\t\tcause: error instanceof Error ? error : undefined,\n\t\t\t} )\n\t\t);\n\t}\n}\n", "/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\n\n/**\n * Internal dependencies\n */\nimport type { CreateSideloadFile, RestAttachment } from './types';\nimport { flattenFormData } from './flatten-form-data';\nimport { transformAttachment } from './transform-attachment';\n\n/**\n * Uploads a file to the server without creating an attachment.\n *\n * @param file           Media File to Save.\n * @param attachmentId   Parent attachment ID.\n * @param additionalData Additional data to include in the request.\n * @param signal         Abort signal.\n *\n * @return The saved attachment.\n */\nexport async function sideloadToServer(\n\tfile: File,\n\tattachmentId: RestAttachment[ 'id' ],\n\tadditionalData: CreateSideloadFile = {},\n\tsignal?: AbortSignal\n) {\n\t// Create upload payload.\n\tconst data = new FormData();\n\tdata.append( 'file', file, file.name || file.type.replace( '/', '.' ) );\n\tfor ( const [ key, value ] of Object.entries( additionalData ) ) {\n\t\tflattenFormData(\n\t\t\tdata,\n\t\t\tkey,\n\t\t\tvalue as string | Record< string, string > | undefined\n\t\t);\n\t}\n\n\treturn transformAttachment(\n\t\tawait apiFetch< RestAttachment >( {\n\t\t\tpath: `/wp/v2/media/${ attachmentId }/sideload`,\n\t\t\tbody: data,\n\t\t\tmethod: 'POST',\n\t\t\tsignal,\n\t\t} )\n\t);\n}\n", "/**\n * WordPress dependencies\n */\nimport { __dangerousOptInToUnstableAPIsOnlyForCoreModules } from '@wordpress/private-apis';\n\nexport const { lock, unlock } =\n\t__dangerousOptInToUnstableAPIsOnlyForCoreModules(\n\t\t'I acknowledge private features are not for use in themes or plugins and doing so will break in the next version of WordPress.',\n\t\t'@wordpress/media-utils'\n\t);\n", "/**\n * Internal dependencies\n */\nimport { sideloadMedia } from './utils/sideload-media';\nimport { lock } from './lock-unlock';\n\n/**\n * Private @wordpress/media-utils APIs.\n */\nexport const privateApis = {};\n\nlock( privateApis, {\n\tsideloadMedia,\n} );\n"],
  "mappings": "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",
  "names": ["import_i18n", "apiFetch", "import_i18n", "import_i18n", "import_i18n", "import_i18n", "import_api_fetch", "apiFetch"]
}
