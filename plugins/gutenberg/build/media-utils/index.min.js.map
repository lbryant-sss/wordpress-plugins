{
  "version": 3,
  "sources": ["wordpress-external:@wordpress/element", "wordpress-external:@wordpress/i18n", "wordpress-external:@wordpress/blob", "wordpress-external:@wordpress/api-fetch", "wordpress-external:@wordpress/private-apis", "../../packages/media-utils/src/index.ts", "../../packages/media-utils/src/components/media-upload/index.js", "../../packages/media-utils/src/utils/upload-media.ts", "../../packages/media-utils/src/utils/upload-to-server.ts", "../../packages/media-utils/src/utils/flatten-form-data.ts", "../../packages/media-utils/src/utils/transform-attachment.ts", "../../packages/media-utils/src/utils/validate-mime-type.ts", "../../packages/media-utils/src/utils/upload-error.ts", "../../packages/media-utils/src/utils/validate-mime-type-for-user.ts", "../../packages/media-utils/src/utils/get-mime-types-array.ts", "../../packages/media-utils/src/utils/validate-file-size.ts", "../../packages/media-utils/src/utils/sideload-media.ts", "../../packages/media-utils/src/utils/sideload-to-server.ts", "../../packages/media-utils/src/lock-unlock.ts", "../../packages/media-utils/src/private-apis.ts"],
  "sourcesContent": ["module.exports = window.wp.element;", "module.exports = window.wp.i18n;", "module.exports = window.wp.blob;", "module.exports = window.wp.apiFetch;", "module.exports = window.wp.privateApis;", "export * from './components';\n\nexport { uploadMedia } from './utils/upload-media';\nexport { transformAttachment } from './utils/transform-attachment';\nexport { validateFileSize } from './utils/validate-file-size';\nexport { validateMimeType } from './utils/validate-mime-type';\nexport { validateMimeTypeForUser } from './utils/validate-mime-type-for-user';\n\nexport type { Attachment, RestAttachment } from './utils/types';\n\nexport { privateApis } from './private-apis';\n", "/**\n * WordPress dependencies\n */\nimport { Component } from '@wordpress/element';\nimport { __ } from '@wordpress/i18n';\n\nconst DEFAULT_EMPTY_GALLERY = [];\n\n/**\n * Prepares the Featured Image toolbars and frames.\n *\n * @return {window.wp.media.view.MediaFrame.Select} The default media workflow.\n */\nconst getFeaturedImageMediaFrame = () => {\n\tconst { wp } = window;\n\n\treturn wp.media.view.MediaFrame.Select.extend( {\n\t\t/**\n\t\t * Enables the Set Featured Image Button.\n\t\t *\n\t\t * @param {Object} toolbar toolbar for featured image state\n\t\t * @return {void}\n\t\t */\n\t\tfeaturedImageToolbar( toolbar ) {\n\t\t\tthis.createSelectToolbar( toolbar, {\n\t\t\t\ttext: wp.media.view.l10n.setFeaturedImage,\n\t\t\t\tstate: this.options.state,\n\t\t\t} );\n\t\t},\n\n\t\t/**\n\t\t * Handle the edit state requirements of selected media item.\n\t\t *\n\t\t * @return {void}\n\t\t */\n\t\teditState() {\n\t\t\tconst selection = this.state( 'featured-image' ).get( 'selection' );\n\t\t\tconst view = new wp.media.view.EditImage( {\n\t\t\t\tmodel: selection.single(),\n\t\t\t\tcontroller: this,\n\t\t\t} ).render();\n\n\t\t\t// Set the view to the EditImage frame using the selected image.\n\t\t\tthis.content.set( view );\n\n\t\t\t// After bringing in the frame, load the actual editor via an ajax call.\n\t\t\tview.loadEditor();\n\t\t},\n\n\t\t/**\n\t\t * Create the default states.\n\t\t *\n\t\t * @return {void}\n\t\t */\n\t\tcreateStates: function createStates() {\n\t\t\tthis.on(\n\t\t\t\t'toolbar:create:featured-image',\n\t\t\t\tthis.featuredImageToolbar,\n\t\t\t\tthis\n\t\t\t);\n\t\t\tthis.on( 'content:render:edit-image', this.editState, this );\n\n\t\t\tthis.states.add( [\n\t\t\t\tnew wp.media.controller.FeaturedImage(),\n\t\t\t\tnew wp.media.controller.EditImage( {\n\t\t\t\t\tmodel: this.options.editImage,\n\t\t\t\t} ),\n\t\t\t] );\n\t\t},\n\t} );\n};\n\n/**\n * Prepares the default frame for selecting a single media item.\n *\n * @return {window.wp.media.view.MediaFrame.Select} The default media workflow.\n */\nconst getSingleMediaFrame = () => {\n\tconst { wp } = window;\n\n\t// Extend the default Select frame, and use the same `createStates` method as in core,\n\t// but with the addition of `filterable: 'uploaded'` to the Library state, so that\n\t// the user can filter the media library by uploaded media.\n\treturn wp.media.view.MediaFrame.Select.extend( {\n\t\t/**\n\t\t * Create the default states on the frame.\n\t\t */\n\t\tcreateStates() {\n\t\t\tconst options = this.options;\n\n\t\t\tif ( this.options.states ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Add the default states.\n\t\t\tthis.states.add( [\n\t\t\t\t// Main states.\n\t\t\t\tnew wp.media.controller.Library( {\n\t\t\t\t\tlibrary: wp.media.query( options.library ),\n\t\t\t\t\tmultiple: options.multiple,\n\t\t\t\t\ttitle: options.title,\n\t\t\t\t\tpriority: 20,\n\t\t\t\t\tfilterable: 'uploaded', // Allow filtering by uploaded images.\n\t\t\t\t} ),\n\t\t\t\tnew wp.media.controller.EditImage( {\n\t\t\t\t\tmodel: options.editImage,\n\t\t\t\t} ),\n\t\t\t] );\n\t\t},\n\t} );\n};\n\n/**\n * Prepares the Gallery toolbars and frames.\n *\n * @return {window.wp.media.view.MediaFrame.Post} The default media workflow.\n */\nconst getGalleryDetailsMediaFrame = () => {\n\tconst { wp } = window;\n\t/**\n\t * Custom gallery details frame.\n\t *\n\t * @see https://github.com/xwp/wp-core-media-widgets/blob/905edbccfc2a623b73a93dac803c5335519d7837/wp-admin/js/widgets/media-gallery-widget.js\n\t * @class GalleryDetailsMediaFrame\n\t * @class\n\t */\n\treturn wp.media.view.MediaFrame.Post.extend( {\n\t\t/**\n\t\t * Set up gallery toolbar.\n\t\t *\n\t\t * @return {void}\n\t\t */\n\t\tgalleryToolbar() {\n\t\t\tconst editing = this.state().get( 'editing' );\n\t\t\tthis.toolbar.set(\n\t\t\t\tnew wp.media.view.Toolbar( {\n\t\t\t\t\tcontroller: this,\n\t\t\t\t\titems: {\n\t\t\t\t\t\tinsert: {\n\t\t\t\t\t\t\tstyle: 'primary',\n\t\t\t\t\t\t\ttext: editing\n\t\t\t\t\t\t\t\t? wp.media.view.l10n.updateGallery\n\t\t\t\t\t\t\t\t: wp.media.view.l10n.insertGallery,\n\t\t\t\t\t\t\tpriority: 80,\n\t\t\t\t\t\t\trequires: { library: true },\n\n\t\t\t\t\t\t\t/**\n\t\t\t\t\t\t\t * @fires wp.media.controller.State#update\n\t\t\t\t\t\t\t */\n\t\t\t\t\t\t\tclick() {\n\t\t\t\t\t\t\t\tconst controller = this.controller,\n\t\t\t\t\t\t\t\t\tstate = controller.state();\n\n\t\t\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t\t\t\tstate.trigger(\n\t\t\t\t\t\t\t\t\t'update',\n\t\t\t\t\t\t\t\t\tstate.get( 'library' )\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t\t// Restore and reset the default state.\n\t\t\t\t\t\t\t\tcontroller.setState( controller.options.state );\n\t\t\t\t\t\t\t\tcontroller.reset();\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t} )\n\t\t\t);\n\t\t},\n\n\t\t/**\n\t\t * Handle the edit state requirements of selected media item.\n\t\t *\n\t\t * @return {void}\n\t\t */\n\t\teditState() {\n\t\t\tconst selection = this.state( 'gallery' ).get( 'selection' );\n\t\t\tconst view = new wp.media.view.EditImage( {\n\t\t\t\tmodel: selection.single(),\n\t\t\t\tcontroller: this,\n\t\t\t} ).render();\n\n\t\t\t// Set the view to the EditImage frame using the selected image.\n\t\t\tthis.content.set( view );\n\n\t\t\t// After bringing in the frame, load the actual editor via an ajax call.\n\t\t\tview.loadEditor();\n\t\t},\n\n\t\t/**\n\t\t * Create the default states.\n\t\t *\n\t\t * @return {void}\n\t\t */\n\t\tcreateStates: function createStates() {\n\t\t\tthis.on( 'toolbar:create:main-gallery', this.galleryToolbar, this );\n\t\t\tthis.on( 'content:render:edit-image', this.editState, this );\n\n\t\t\tthis.states.add( [\n\t\t\t\tnew wp.media.controller.Library( {\n\t\t\t\t\tid: 'gallery',\n\t\t\t\t\ttitle: wp.media.view.l10n.createGalleryTitle,\n\t\t\t\t\tpriority: 40,\n\t\t\t\t\ttoolbar: 'main-gallery',\n\t\t\t\t\tfilterable: 'uploaded',\n\t\t\t\t\tmultiple: 'add',\n\t\t\t\t\teditable: false,\n\n\t\t\t\t\tlibrary: wp.media.query( {\n\t\t\t\t\t\ttype: 'image',\n\t\t\t\t\t\t...this.options.library,\n\t\t\t\t\t} ),\n\t\t\t\t} ),\n\t\t\t\tnew wp.media.controller.EditImage( {\n\t\t\t\t\tmodel: this.options.editImage,\n\t\t\t\t} ),\n\n\t\t\t\tnew wp.media.controller.GalleryEdit( {\n\t\t\t\t\tlibrary: this.options.selection,\n\t\t\t\t\tediting: this.options.editing,\n\t\t\t\t\tmenu: 'gallery',\n\t\t\t\t\tdisplaySettings: false,\n\t\t\t\t\tmultiple: true,\n\t\t\t\t} ),\n\n\t\t\t\tnew wp.media.controller.GalleryAdd(),\n\t\t\t] );\n\t\t},\n\t} );\n};\n\n// The media library image object contains numerous attributes\n// we only need this set to display the image in the library.\nconst slimImageObject = ( img ) => {\n\tconst attrSet = [\n\t\t'sizes',\n\t\t'mime',\n\t\t'type',\n\t\t'subtype',\n\t\t'id',\n\t\t'url',\n\t\t'alt',\n\t\t'link',\n\t\t'caption',\n\t];\n\treturn attrSet.reduce( ( result, key ) => {\n\t\tif ( img?.hasOwnProperty( key ) ) {\n\t\t\tresult[ key ] = img[ key ];\n\t\t}\n\t\treturn result;\n\t}, {} );\n};\n\nconst getAttachmentsCollection = ( ids ) => {\n\tconst { wp } = window;\n\n\treturn wp.media.query( {\n\t\torder: 'ASC',\n\t\torderby: 'post__in',\n\t\tpost__in: ids,\n\t\tposts_per_page: -1,\n\t\tquery: true,\n\t\ttype: 'image',\n\t} );\n};\n\nclass MediaUpload extends Component {\n\tconstructor() {\n\t\tsuper( ...arguments );\n\t\tthis.openModal = this.openModal.bind( this );\n\t\tthis.onOpen = this.onOpen.bind( this );\n\t\tthis.onSelect = this.onSelect.bind( this );\n\t\tthis.onUpdate = this.onUpdate.bind( this );\n\t\tthis.onClose = this.onClose.bind( this );\n\t}\n\n\tinitializeListeners() {\n\t\t// When an image is selected in the media frame...\n\t\tthis.frame.on( 'select', this.onSelect );\n\t\tthis.frame.on( 'update', this.onUpdate );\n\t\tthis.frame.on( 'open', this.onOpen );\n\t\tthis.frame.on( 'close', this.onClose );\n\t}\n\n\t/**\n\t * Sets the Gallery frame and initializes listeners.\n\t *\n\t * @return {void}\n\t */\n\tbuildAndSetGalleryFrame() {\n\t\tconst {\n\t\t\taddToGallery = false,\n\t\t\tallowedTypes,\n\t\t\tmultiple = false,\n\t\t\tvalue = DEFAULT_EMPTY_GALLERY,\n\t\t} = this.props;\n\n\t\t// If the value did not changed there is no need to rebuild the frame,\n\t\t// we can continue to use the existing one.\n\t\tif ( value === this.lastGalleryValue ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst { wp } = window;\n\n\t\tthis.lastGalleryValue = value;\n\n\t\t// If a frame already existed remove it.\n\t\tif ( this.frame ) {\n\t\t\tthis.frame.remove();\n\t\t}\n\t\tlet currentState;\n\t\tif ( addToGallery ) {\n\t\t\tcurrentState = 'gallery-library';\n\t\t} else {\n\t\t\tcurrentState = value && value.length ? 'gallery-edit' : 'gallery';\n\t\t}\n\t\tif ( ! this.GalleryDetailsMediaFrame ) {\n\t\t\tthis.GalleryDetailsMediaFrame = getGalleryDetailsMediaFrame();\n\t\t}\n\t\tconst attachments = getAttachmentsCollection( value );\n\t\tconst selection = new wp.media.model.Selection( attachments.models, {\n\t\t\tprops: attachments.props.toJSON(),\n\t\t\tmultiple,\n\t\t} );\n\t\tthis.frame = new this.GalleryDetailsMediaFrame( {\n\t\t\tmimeType: allowedTypes,\n\t\t\tstate: currentState,\n\t\t\tmultiple,\n\t\t\tselection,\n\t\t\tediting: !! value?.length,\n\t\t} );\n\t\twp.media.frame = this.frame;\n\t\tthis.initializeListeners();\n\t}\n\n\t/**\n\t * Initializes the Media Library requirements for the featured image flow.\n\t *\n\t * @return {void}\n\t */\n\tbuildAndSetFeatureImageFrame() {\n\t\tconst { wp } = window;\n\t\tconst { value: featuredImageId, multiple, allowedTypes } = this.props;\n\t\tconst featuredImageFrame = getFeaturedImageMediaFrame();\n\t\tconst attachments = getAttachmentsCollection( featuredImageId );\n\t\tconst selection = new wp.media.model.Selection( attachments.models, {\n\t\t\tprops: attachments.props.toJSON(),\n\t\t} );\n\t\tthis.frame = new featuredImageFrame( {\n\t\t\tmimeType: allowedTypes,\n\t\t\tstate: 'featured-image',\n\t\t\tmultiple,\n\t\t\tselection,\n\t\t\tediting: featuredImageId,\n\t\t} );\n\t\twp.media.frame = this.frame;\n\t\t// In order to select the current featured image when opening\n\t\t// the media library we have to set the appropriate settings.\n\t\t// Currently they are set in php for the post editor, but\n\t\t// not for site editor.\n\t\twp.media.view.settings.post = {\n\t\t\t...wp.media.view.settings.post,\n\t\t\tfeaturedImageId: featuredImageId || -1,\n\t\t};\n\t}\n\n\t/**\n\t * Initializes the Media Library requirements for the single image flow.\n\t *\n\t * @return {void}\n\t */\n\tbuildAndSetSingleMediaFrame() {\n\t\tconst { wp } = window;\n\t\tconst {\n\t\t\tallowedTypes,\n\t\t\tmultiple = false,\n\t\t\ttitle = __( 'Select or Upload Media' ),\n\t\t\tvalue,\n\t\t} = this.props;\n\n\t\tconst frameConfig = {\n\t\t\ttitle,\n\t\t\tmultiple,\n\t\t};\n\t\tif ( !! allowedTypes ) {\n\t\t\tframeConfig.library = { type: allowedTypes };\n\t\t}\n\n\t\t// If a frame already exists, remove it.\n\t\tif ( this.frame ) {\n\t\t\tthis.frame.remove();\n\t\t}\n\n\t\tconst singleImageFrame = getSingleMediaFrame();\n\t\tconst attachments = getAttachmentsCollection( value );\n\t\tconst selection = new wp.media.model.Selection( attachments.models, {\n\t\t\tprops: attachments.props.toJSON(),\n\t\t} );\n\t\tthis.frame = new singleImageFrame( {\n\t\t\tmimeType: allowedTypes,\n\t\t\tmultiple,\n\t\t\tselection,\n\t\t\t...frameConfig,\n\t\t} );\n\t\twp.media.frame = this.frame;\n\t}\n\n\tcomponentWillUnmount() {\n\t\tthis.frame?.remove();\n\t}\n\n\tonUpdate( selections ) {\n\t\tconst { onSelect, multiple = false } = this.props;\n\t\tconst state = this.frame.state();\n\t\tconst selectedImages = selections || state.get( 'selection' );\n\n\t\tif ( ! selectedImages || ! selectedImages.models.length ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( multiple ) {\n\t\t\tonSelect(\n\t\t\t\tselectedImages.models.map( ( model ) =>\n\t\t\t\t\tslimImageObject( model.toJSON() )\n\t\t\t\t)\n\t\t\t);\n\t\t} else {\n\t\t\tonSelect( slimImageObject( selectedImages.models[ 0 ].toJSON() ) );\n\t\t}\n\t}\n\n\tonSelect() {\n\t\tconst { onSelect, multiple = false } = this.props;\n\t\t// Get media attachment details from the frame state.\n\t\tconst attachment = this.frame.state().get( 'selection' ).toJSON();\n\t\tonSelect( multiple ? attachment : attachment[ 0 ] );\n\t}\n\n\tonOpen() {\n\t\tconst { wp } = window;\n\t\tconst { value } = this.props;\n\t\tthis.updateCollection();\n\n\t\t//Handle active tab in media model on model open.\n\t\tif ( this.props.mode ) {\n\t\t\tthis.frame.content.mode( this.props.mode );\n\t\t}\n\n\t\t// Handle both this.props.value being either (number[]) multiple ids\n\t\t// (for galleries) or a (number) singular id (e.g. image block).\n\t\tconst hasMedia = Array.isArray( value ) ? !! value?.length : !! value;\n\n\t\tif ( ! hasMedia ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst isGallery = this.props.gallery;\n\t\tconst selection = this.frame.state().get( 'selection' );\n\t\tconst valueArray = Array.isArray( value ) ? value : [ value ];\n\n\t\tif ( ! isGallery ) {\n\t\t\tvalueArray.forEach( ( id ) => {\n\t\t\t\tselection.add( wp.media.attachment( id ) );\n\t\t\t} );\n\t\t}\n\n\t\t// Load the images so they are available in the media modal.\n\t\tconst attachments = getAttachmentsCollection( valueArray );\n\n\t\t// Once attachments are loaded, set the current selection.\n\t\tattachments.more().done( function () {\n\t\t\tif ( isGallery && attachments?.models?.length ) {\n\t\t\t\tselection.add( attachments.models );\n\t\t\t}\n\t\t} );\n\t}\n\n\tonClose() {\n\t\tconst { onClose } = this.props;\n\n\t\tif ( onClose ) {\n\t\t\tonClose();\n\t\t}\n\n\t\tthis.frame.detach();\n\t}\n\n\tupdateCollection() {\n\t\tconst frameContent = this.frame.content.get();\n\t\tif ( frameContent && frameContent.collection ) {\n\t\t\tconst collection = frameContent.collection;\n\n\t\t\t// Clean all attachments we have in memory.\n\t\t\tcollection\n\t\t\t\t.toArray()\n\t\t\t\t.forEach( ( model ) => model.trigger( 'destroy', model ) );\n\n\t\t\t// Reset has more flag, if library had small amount of items all items may have been loaded before.\n\t\t\tcollection.mirroring._hasMore = true;\n\n\t\t\t// Request items.\n\t\t\tcollection.more();\n\t\t}\n\t}\n\n\topenModal() {\n\t\tconst {\n\t\t\tgallery = false,\n\t\t\tunstableFeaturedImageFlow = false,\n\t\t\tmodalClass,\n\t\t} = this.props;\n\n\t\tif ( gallery ) {\n\t\t\tthis.buildAndSetGalleryFrame();\n\t\t} else {\n\t\t\tthis.buildAndSetSingleMediaFrame();\n\t\t}\n\n\t\tif ( modalClass ) {\n\t\t\tthis.frame.$el.addClass( modalClass );\n\t\t}\n\n\t\tif ( unstableFeaturedImageFlow ) {\n\t\t\tthis.buildAndSetFeatureImageFrame();\n\t\t}\n\t\tthis.initializeListeners();\n\t\tthis.frame.open();\n\t}\n\n\trender() {\n\t\treturn this.props.render( { open: this.openModal } );\n\t}\n}\n\nexport default MediaUpload;\n", "/**\n * WordPress dependencies\n */\nimport { __, sprintf } from '@wordpress/i18n';\nimport { createBlobURL, revokeBlobURL } from '@wordpress/blob';\n\n/**\n * Internal dependencies\n */\nimport type {\n\tAdditionalData,\n\tAttachment,\n\tOnChangeHandler,\n\tOnErrorHandler,\n} from './types';\nimport { uploadToServer } from './upload-to-server';\nimport { validateMimeType } from './validate-mime-type';\nimport { validateMimeTypeForUser } from './validate-mime-type-for-user';\nimport { validateFileSize } from './validate-file-size';\nimport { UploadError } from './upload-error';\n\ndeclare global {\n\tinterface Window {\n\t\t__experimentalMediaProcessing?: boolean;\n\t}\n}\n\ninterface UploadMediaArgs {\n\t// Additional data to include in the request.\n\tadditionalData?: AdditionalData;\n\t// Array with the types of media that can be uploaded, if unset all types are allowed.\n\tallowedTypes?: string[];\n\t// List of files.\n\tfilesList: File[];\n\t// Maximum upload size in bytes allowed for the site.\n\tmaxUploadFileSize?: number;\n\t// Function called when an error happens.\n\tonError?: OnErrorHandler;\n\t// Function called each time a file or a temporary representation of the file is available.\n\tonFileChange?: OnChangeHandler;\n\t// List of allowed mime types and file extensions.\n\twpAllowedMimeTypes?: Record< string, string > | null;\n\t// Abort signal.\n\tsignal?: AbortSignal;\n\t// Whether to allow multiple files to be uploaded.\n\tmultiple?: boolean;\n}\n\n/**\n * Upload a media file when the file upload button is activated\n * or when adding a file to the editor via drag & drop.\n *\n * @param $0                    Parameters object passed to the function.\n * @param $0.allowedTypes       Array with the types of media that can be uploaded, if unset all types are allowed.\n * @param $0.additionalData     Additional data to include in the request.\n * @param $0.filesList          List of files.\n * @param $0.maxUploadFileSize  Maximum upload size in bytes allowed for the site.\n * @param $0.onError            Function called when an error happens.\n * @param $0.onFileChange       Function called each time a file or a temporary representation of the file is available.\n * @param $0.wpAllowedMimeTypes List of allowed mime types and file extensions.\n * @param $0.signal             Abort signal.\n * @param $0.multiple           Whether to allow multiple files to be uploaded.\n */\nexport function uploadMedia( {\n\twpAllowedMimeTypes,\n\tallowedTypes,\n\tadditionalData = {},\n\tfilesList,\n\tmaxUploadFileSize,\n\tonError,\n\tonFileChange,\n\tsignal,\n\tmultiple = true,\n}: UploadMediaArgs ) {\n\tif ( ! multiple && filesList.length > 1 ) {\n\t\tonError?.( new Error( __( 'Only one file can be used here.' ) ) );\n\t\treturn;\n\t}\n\n\tconst validFiles = [];\n\n\tconst filesSet: Array< Partial< Attachment > | null > = [];\n\tconst setAndUpdateFiles = ( index: number, value: Attachment | null ) => {\n\t\t// For client-side media processing, this is handled by the upload-media package.\n\t\tif ( ! window.__experimentalMediaProcessing ) {\n\t\t\tif ( filesSet[ index ]?.url ) {\n\t\t\t\trevokeBlobURL( filesSet[ index ].url );\n\t\t\t}\n\t\t}\n\t\tfilesSet[ index ] = value;\n\t\tonFileChange?.(\n\t\t\tfilesSet.filter( ( attachment ) => attachment !== null )\n\t\t);\n\t};\n\n\tfor ( const mediaFile of filesList ) {\n\t\t// Verify if user is allowed to upload this mime type.\n\t\t// Defer to the server when type not detected.\n\t\ttry {\n\t\t\tvalidateMimeTypeForUser( mediaFile, wpAllowedMimeTypes );\n\t\t} catch ( error: unknown ) {\n\t\t\tonError?.( error as Error );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Check if the caller (e.g. a block) supports this mime type.\n\t\t// Defer to the server when type not detected.\n\t\ttry {\n\t\t\tvalidateMimeType( mediaFile, allowedTypes );\n\t\t} catch ( error: unknown ) {\n\t\t\tonError?.( error as Error );\n\t\t\tcontinue;\n\t\t}\n\n\t\t// Verify if file is greater than the maximum file upload size allowed for the site.\n\t\ttry {\n\t\t\tvalidateFileSize( mediaFile, maxUploadFileSize );\n\t\t} catch ( error: unknown ) {\n\t\t\tonError?.( error as Error );\n\t\t\tcontinue;\n\t\t}\n\n\t\tvalidFiles.push( mediaFile );\n\n\t\t// For client-side media processing, this is handled by the upload-media package.\n\t\tif ( ! window.__experimentalMediaProcessing ) {\n\t\t\t// Set temporary URL to create placeholder media file, this is replaced\n\t\t\t// with final file from media gallery when upload is `done` below.\n\t\t\tfilesSet.push( { url: createBlobURL( mediaFile ) } );\n\t\t\tonFileChange?.( filesSet as Array< Partial< Attachment > > );\n\t\t}\n\t}\n\n\tvalidFiles.map( async ( file, index ) => {\n\t\ttry {\n\t\t\tconst attachment = await uploadToServer(\n\t\t\t\tfile,\n\t\t\t\tadditionalData,\n\t\t\t\tsignal\n\t\t\t);\n\t\t\tsetAndUpdateFiles( index, attachment );\n\t\t} catch ( error ) {\n\t\t\t// Reset to empty on failure.\n\t\t\tsetAndUpdateFiles( index, null );\n\n\t\t\t// @wordpress/api-fetch throws any response that isn't in the 200 range as-is.\n\t\t\tlet message: string;\n\t\t\tif (\n\t\t\t\ttypeof error === 'object' &&\n\t\t\t\terror !== null &&\n\t\t\t\t'message' in error\n\t\t\t) {\n\t\t\t\tmessage =\n\t\t\t\t\ttypeof error.message === 'string'\n\t\t\t\t\t\t? error.message\n\t\t\t\t\t\t: String( error.message );\n\t\t\t} else {\n\t\t\t\tmessage = sprintf(\n\t\t\t\t\t// translators: %s: file name\n\t\t\t\t\t__( 'Error while uploading file %s to the media library.' ),\n\t\t\t\t\tfile.name\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tonError?.(\n\t\t\t\tnew UploadError( {\n\t\t\t\t\tcode: 'GENERAL',\n\t\t\t\t\tmessage,\n\t\t\t\t\tfile,\n\t\t\t\t\tcause: error instanceof Error ? error : undefined,\n\t\t\t\t} )\n\t\t\t);\n\t\t}\n\t} );\n}\n", "/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\n\n/**\n * Internal dependencies\n */\nimport { flattenFormData } from './flatten-form-data';\nimport { transformAttachment } from './transform-attachment';\nimport type { CreateRestAttachment, RestAttachment } from './types';\n\nexport async function uploadToServer(\n\tfile: File,\n\tadditionalData: CreateRestAttachment = {},\n\tsignal?: AbortSignal\n) {\n\t// Create upload payload.\n\tconst data = new FormData();\n\tdata.append( 'file', file, file.name || file.type.replace( '/', '.' ) );\n\tfor ( const [ key, value ] of Object.entries( additionalData ) ) {\n\t\tflattenFormData(\n\t\t\tdata,\n\t\t\tkey,\n\t\t\tvalue as string | Record< string, string > | undefined\n\t\t);\n\t}\n\n\treturn transformAttachment(\n\t\tawait apiFetch< RestAttachment >( {\n\t\t\t// This allows the video block to directly get a video's poster image.\n\t\t\tpath: '/wp/v2/media?_embed=wp:featuredmedia',\n\t\t\tbody: data,\n\t\t\tmethod: 'POST',\n\t\t\tsignal,\n\t\t} )\n\t);\n}\n", "/**\n * Determines whether the passed argument appears to be a plain object.\n *\n * @param data The object to inspect.\n */\nfunction isPlainObject( data: unknown ): data is Record< string, unknown > {\n\treturn (\n\t\tdata !== null &&\n\t\ttypeof data === 'object' &&\n\t\tObject.getPrototypeOf( data ) === Object.prototype\n\t);\n}\n\n/**\n * Recursively flatten data passed to form data, to allow using multi-level objects.\n *\n * @param {FormData}      formData Form data object.\n * @param {string}        key      Key to amend to form data object\n * @param {string|Object} data     Data to be amended to form data.\n */\nexport function flattenFormData(\n\tformData: FormData,\n\tkey: string,\n\tdata: string | undefined | Record< string, string >\n) {\n\tif ( isPlainObject( data ) ) {\n\t\tfor ( const [ name, value ] of Object.entries( data ) ) {\n\t\t\tflattenFormData( formData, `${ key }[${ name }]`, value );\n\t\t}\n\t} else if ( data !== undefined ) {\n\t\tformData.append( key, String( data ) );\n\t}\n}\n", "/**\n * Internal dependencies\n */\nimport type { Attachment, RestAttachment } from './types';\n\n/**\n * Transforms an attachment object from the REST API shape into the shape expected by the block editor and other consumers.\n *\n * @param attachment REST API attachment object.\n */\nexport function transformAttachment( attachment: RestAttachment ): Attachment {\n\t// eslint-disable-next-line camelcase\n\tconst { alt_text, source_url, ...savedMediaProps } = attachment;\n\treturn {\n\t\t...savedMediaProps,\n\t\talt: attachment.alt_text,\n\t\tcaption: attachment.caption?.raw ?? '',\n\t\ttitle: attachment.title.raw,\n\t\turl: attachment.source_url,\n\t\tposter:\n\t\t\tattachment._embedded?.[ 'wp:featuredmedia' ]?.[ 0 ]?.source_url ||\n\t\t\tundefined,\n\t};\n}\n", "/**\n * WordPress dependencies\n */\nimport { __, sprintf } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { UploadError } from './upload-error';\n\n/**\n * Verifies if the caller (e.g. a block) supports this mime type.\n *\n * @param file         File object.\n * @param allowedTypes List of allowed mime types.\n */\nexport function validateMimeType( file: File, allowedTypes?: string[] ) {\n\tif ( ! allowedTypes ) {\n\t\treturn;\n\t}\n\n\t// Allowed type specified by consumer.\n\tconst isAllowedType = allowedTypes.some( ( allowedType ) => {\n\t\t// If a complete mimetype is specified verify if it matches exactly the mime type of the file.\n\t\tif ( allowedType.includes( '/' ) ) {\n\t\t\treturn allowedType === file.type;\n\t\t}\n\t\t// Otherwise a general mime type is used, and we should verify if the file mimetype starts with it.\n\t\treturn file.type.startsWith( `${ allowedType }/` );\n\t} );\n\n\tif ( file.type && ! isAllowedType ) {\n\t\tthrow new UploadError( {\n\t\t\tcode: 'MIME_TYPE_NOT_SUPPORTED',\n\t\t\tmessage: sprintf(\n\t\t\t\t// translators: %s: file name.\n\t\t\t\t__( '%s: Sorry, this file type is not supported here.' ),\n\t\t\t\tfile.name\n\t\t\t),\n\t\t\tfile,\n\t\t} );\n\t}\n}\n", "interface UploadErrorArgs {\n\tcode: string;\n\tmessage: string;\n\tfile: File;\n\tcause?: Error;\n}\n\n/**\n * MediaError class.\n *\n * Small wrapper around the `Error` class\n * to hold an error code and a reference to a file object.\n */\nexport class UploadError extends Error {\n\tcode: string;\n\tfile: File;\n\n\tconstructor( { code, message, file, cause }: UploadErrorArgs ) {\n\t\tsuper( message, { cause } );\n\n\t\tObject.setPrototypeOf( this, new.target.prototype );\n\n\t\tthis.code = code;\n\t\tthis.file = file;\n\t}\n}\n", "/**\n * WordPress dependencies\n */\nimport { __, sprintf } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { UploadError } from './upload-error';\nimport { getMimeTypesArray } from './get-mime-types-array';\n\n/**\n * Verifies if the user is allowed to upload this mime type.\n *\n * @param file               File object.\n * @param wpAllowedMimeTypes List of allowed mime types and file extensions.\n */\nexport function validateMimeTypeForUser(\n\tfile: File,\n\twpAllowedMimeTypes?: Record< string, string > | null\n) {\n\t// Allowed types for the current WP_User.\n\tconst allowedMimeTypesForUser = getMimeTypesArray( wpAllowedMimeTypes );\n\n\tif ( ! allowedMimeTypesForUser ) {\n\t\treturn;\n\t}\n\n\tconst isAllowedMimeTypeForUser = allowedMimeTypesForUser.includes(\n\t\tfile.type\n\t);\n\n\tif ( file.type && ! isAllowedMimeTypeForUser ) {\n\t\tthrow new UploadError( {\n\t\t\tcode: 'MIME_TYPE_NOT_ALLOWED_FOR_USER',\n\t\t\tmessage: sprintf(\n\t\t\t\t// translators: %s: file name.\n\t\t\t\t__(\n\t\t\t\t\t'%s: Sorry, you are not allowed to upload this file type.'\n\t\t\t\t),\n\t\t\t\tfile.name\n\t\t\t),\n\t\t\tfile,\n\t\t} );\n\t}\n}\n", "/**\n * Browsers may use unexpected mime types, and they differ from browser to browser.\n * This function computes a flexible array of mime types from the mime type structured provided by the server.\n * Converts { jpg|jpeg|jpe: \"image/jpeg\" } into [ \"image/jpeg\", \"image/jpg\", \"image/jpeg\", \"image/jpe\" ]\n *\n * @param {?Object} wpMimeTypesObject Mime type object received from the server.\n *                                    Extensions are keys separated by '|' and values are mime types associated with an extension.\n *\n * @return An array of mime types or null\n */\nexport function getMimeTypesArray(\n\twpMimeTypesObject?: Record< string, string > | null\n) {\n\tif ( ! wpMimeTypesObject ) {\n\t\treturn null;\n\t}\n\treturn Object.entries( wpMimeTypesObject ).flatMap(\n\t\t( [ extensionsString, mime ] ) => {\n\t\t\tconst [ type ] = mime.split( '/' );\n\t\t\tconst extensions = extensionsString.split( '|' );\n\t\t\treturn [\n\t\t\t\tmime,\n\t\t\t\t...extensions.map(\n\t\t\t\t\t( extension ) => `${ type }/${ extension }`\n\t\t\t\t),\n\t\t\t];\n\t\t}\n\t);\n}\n", "/**\n * WordPress dependencies\n */\nimport { __, sprintf } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { UploadError } from './upload-error';\n\n/**\n * Verifies whether the file is within the file upload size limits for the site.\n *\n * @param file              File object.\n * @param maxUploadFileSize Maximum upload size in bytes allowed for the site.\n */\nexport function validateFileSize( file: File, maxUploadFileSize?: number ) {\n\t// Don't allow empty files to be uploaded.\n\tif ( file.size <= 0 ) {\n\t\tthrow new UploadError( {\n\t\t\tcode: 'EMPTY_FILE',\n\t\t\tmessage: sprintf(\n\t\t\t\t// translators: %s: file name.\n\t\t\t\t__( '%s: This file is empty.' ),\n\t\t\t\tfile.name\n\t\t\t),\n\t\t\tfile,\n\t\t} );\n\t}\n\n\tif ( maxUploadFileSize && file.size > maxUploadFileSize ) {\n\t\tthrow new UploadError( {\n\t\t\tcode: 'SIZE_ABOVE_LIMIT',\n\t\t\tmessage: sprintf(\n\t\t\t\t// translators: %s: file name.\n\t\t\t\t__(\n\t\t\t\t\t'%s: This file exceeds the maximum upload size for this site.'\n\t\t\t\t),\n\t\t\t\tfile.name\n\t\t\t),\n\t\t\tfile,\n\t\t} );\n\t}\n}\n", "/**\n * WordPress dependencies\n */\nimport { __, sprintf } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport type {\n\tOnChangeHandler,\n\tOnErrorHandler,\n\tCreateSideloadFile,\n\tRestAttachment,\n} from './types';\nimport { sideloadToServer } from './sideload-to-server';\nimport { UploadError } from './upload-error';\n\nconst noop = () => {};\n\ninterface SideloadMediaArgs {\n\t// Additional data to include in the request.\n\tadditionalData?: CreateSideloadFile;\n\t// File to sideload.\n\tfile: File;\n\t// Attachment ID.\n\tattachmentId: RestAttachment[ 'id' ];\n\t// Function called when an error happens.\n\tonError?: OnErrorHandler;\n\t// Function called each time a file or a temporary representation of the file is available.\n\tonFileChange?: OnChangeHandler;\n\t// Abort signal.\n\tsignal?: AbortSignal;\n}\n\n/**\n * Uploads a file to the server without creating an attachment.\n *\n * @param $0                Parameters object passed to the function.\n * @param $0.file           Media File to Save.\n * @param $0.attachmentId   Parent attachment ID.\n * @param $0.additionalData Additional data to include in the request.\n * @param $0.signal         Abort signal.\n * @param $0.onFileChange   Function called each time a file or a temporary representation of the file is available.\n * @param $0.onError        Function called when an error happens.\n */\nexport async function sideloadMedia( {\n\tfile,\n\tattachmentId,\n\tadditionalData = {},\n\tsignal,\n\tonFileChange,\n\tonError = noop,\n}: SideloadMediaArgs ) {\n\ttry {\n\t\tconst attachment = await sideloadToServer(\n\t\t\tfile,\n\t\t\tattachmentId,\n\t\t\tadditionalData,\n\t\t\tsignal\n\t\t);\n\t\tonFileChange?.( [ attachment ] );\n\t} catch ( error ) {\n\t\tlet message;\n\t\tif ( error instanceof Error ) {\n\t\t\tmessage = error.message;\n\t\t} else {\n\t\t\tmessage = sprintf(\n\t\t\t\t// translators: %s: file name\n\t\t\t\t__( 'Error while sideloading file %s to the server.' ),\n\t\t\t\tfile.name\n\t\t\t);\n\t\t}\n\t\tonError(\n\t\t\tnew UploadError( {\n\t\t\t\tcode: 'GENERAL',\n\t\t\t\tmessage,\n\t\t\t\tfile,\n\t\t\t\tcause: error instanceof Error ? error : undefined,\n\t\t\t} )\n\t\t);\n\t}\n}\n", "/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\n\n/**\n * Internal dependencies\n */\nimport type { CreateSideloadFile, RestAttachment } from './types';\nimport { flattenFormData } from './flatten-form-data';\nimport { transformAttachment } from './transform-attachment';\n\n/**\n * Uploads a file to the server without creating an attachment.\n *\n * @param file           Media File to Save.\n * @param attachmentId   Parent attachment ID.\n * @param additionalData Additional data to include in the request.\n * @param signal         Abort signal.\n *\n * @return The saved attachment.\n */\nexport async function sideloadToServer(\n\tfile: File,\n\tattachmentId: RestAttachment[ 'id' ],\n\tadditionalData: CreateSideloadFile = {},\n\tsignal?: AbortSignal\n) {\n\t// Create upload payload.\n\tconst data = new FormData();\n\tdata.append( 'file', file, file.name || file.type.replace( '/', '.' ) );\n\tfor ( const [ key, value ] of Object.entries( additionalData ) ) {\n\t\tflattenFormData(\n\t\t\tdata,\n\t\t\tkey,\n\t\t\tvalue as string | Record< string, string > | undefined\n\t\t);\n\t}\n\n\treturn transformAttachment(\n\t\tawait apiFetch< RestAttachment >( {\n\t\t\tpath: `/wp/v2/media/${ attachmentId }/sideload`,\n\t\t\tbody: data,\n\t\t\tmethod: 'POST',\n\t\t\tsignal,\n\t\t} )\n\t);\n}\n", "/**\n * WordPress dependencies\n */\nimport { __dangerousOptInToUnstableAPIsOnlyForCoreModules } from '@wordpress/private-apis';\n\nexport const { lock, unlock } =\n\t__dangerousOptInToUnstableAPIsOnlyForCoreModules(\n\t\t'I acknowledge private features are not for use in themes or plugins and doing so will break in the next version of WordPress.',\n\t\t'@wordpress/media-utils'\n\t);\n", "/**\n * Internal dependencies\n */\nimport { sideloadMedia } from './utils/sideload-media';\nimport { lock } from './lock-unlock';\n\n/**\n * Private @wordpress/media-utils APIs.\n */\nexport const privateApis = {};\n\nlock( privateApis, {\n\tsideloadMedia,\n} );\n"],
  "mappings": "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",
  "names": ["require_element", "__commonJSMin", "exports", "module", "require_i18n", "__commonJSMin", "exports", "module", "require_blob", "__commonJSMin", "exports", "module", "require_api_fetch", "__commonJSMin", "exports", "module", "require_private_apis", "__commonJSMin", "exports", "module", "index_exports", "__export", "media_upload_default", "privateApis", "transformAttachment", "uploadMedia", "validateFileSize", "validateMimeType", "validateMimeTypeForUser", "import_element", "import_i18n", "DEFAULT_EMPTY_GALLERY", "getFeaturedImageMediaFrame", "wp", "toolbar", "selection", "view", "getSingleMediaFrame", "options", "getGalleryDetailsMediaFrame", "editing", "controller", "state", "slimImageObject", "img", "result", "key", "getAttachmentsCollection", "ids", "MediaUpload", "addToGallery", "allowedTypes", "multiple", "value", "currentState", "attachments", "featuredImageId", "featuredImageFrame", "title", "frameConfig", "singleImageFrame", "selections", "onSelect", "selectedImages", "model", "attachment", "isGallery", "valueArray", "id", "onClose", "frameContent", "collection", "gallery", "unstableFeaturedImageFlow", "modalClass", "media_upload_default", "import_i18n", "import_blob", "import_api_fetch", "isPlainObject", "data", "flattenFormData", "formData", "key", "name", "value", "transformAttachment", "attachment", "alt_text", "source_url", "savedMediaProps", "uploadToServer", "file", "additionalData", "signal", "data", "key", "value", "flattenFormData", "transformAttachment", "apiFetch", "import_i18n", "UploadError", "code", "message", "file", "cause", "validateMimeType", "file", "allowedTypes", "isAllowedType", "allowedType", "UploadError", "import_i18n", "getMimeTypesArray", "wpMimeTypesObject", "extensionsString", "mime", "type", "extensions", "extension", "validateMimeTypeForUser", "file", "wpAllowedMimeTypes", "allowedMimeTypesForUser", "getMimeTypesArray", "isAllowedMimeTypeForUser", "UploadError", "import_i18n", "validateFileSize", "file", "maxUploadFileSize", "UploadError", "uploadMedia", "wpAllowedMimeTypes", "allowedTypes", "additionalData", "filesList", "maxUploadFileSize", "onError", "onFileChange", "signal", "multiple", "validFiles", "filesSet", "setAndUpdateFiles", "index", "value", "attachment", "mediaFile", "validateMimeTypeForUser", "error", "validateMimeType", "validateFileSize", "file", "uploadToServer", "message", "UploadError", "import_i18n", "import_api_fetch", "sideloadToServer", "file", "attachmentId", "additionalData", "signal", "data", "key", "value", "flattenFormData", "transformAttachment", "apiFetch", "noop", "sideloadMedia", "file", "attachmentId", "additionalData", "signal", "onFileChange", "onError", "attachment", "sideloadToServer", "error", "message", "UploadError", "import_private_apis", "lock", "unlock", "privateApis", "lock", "sideloadMedia"]
}
