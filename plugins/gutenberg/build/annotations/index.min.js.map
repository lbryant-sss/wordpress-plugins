{
  "version": 3,
  "sources": ["wordpress-external:@wordpress/rich-text", "wordpress-external:@wordpress/i18n", "wordpress-external:@wordpress/hooks", "wordpress-external:@wordpress/data", "../../packages/annotations/src/index.js", "../../packages/annotations/src/format/index.js", "../../packages/annotations/src/format/annotation.js", "../../packages/annotations/src/store/constants.js", "../../packages/annotations/src/block/index.js", "../../packages/annotations/src/store/index.js", "../../packages/annotations/src/store/reducer.js", "../../packages/annotations/src/store/selectors.js", "../../packages/annotations/src/store/actions.js", "../../node_modules/uuid/dist/esm-browser/rng.js", "../../node_modules/uuid/dist/esm-browser/stringify.js", "../../node_modules/uuid/dist/esm-browser/native.js", "../../node_modules/uuid/dist/esm-browser/v4.js"],
  "sourcesContent": ["module.exports = window.wp.richText;", "module.exports = window.wp.i18n;", "module.exports = window.wp.hooks;", "module.exports = window.wp.data;", "/**\n * Internal dependencies\n */\nimport './format';\nimport './block';\n\nexport { store } from './store';\n", "/**\n * WordPress dependencies\n */\nimport { registerFormatType } from '@wordpress/rich-text';\n\n/**\n * Internal dependencies\n */\nimport { annotation } from './annotation';\n\nconst { name, ...settings } = annotation;\n\nregisterFormatType( name, settings );\n", "/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { applyFormat, removeFormat } from '@wordpress/rich-text';\n\nconst FORMAT_NAME = 'core/annotation';\n\nconst ANNOTATION_ATTRIBUTE_PREFIX = 'annotation-text-';\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from '../store/constants';\n\n/**\n * Applies given annotations to the given record.\n *\n * @param {Object} record      The record to apply annotations to.\n * @param {Array}  annotations The annotation to apply.\n * @return {Object} A record with the annotations applied.\n */\nexport function applyAnnotations( record, annotations = [] ) {\n\tannotations.forEach( ( annotation ) => {\n\t\tlet { start, end } = annotation;\n\n\t\tif ( start > record.text.length ) {\n\t\t\tstart = record.text.length;\n\t\t}\n\n\t\tif ( end > record.text.length ) {\n\t\t\tend = record.text.length;\n\t\t}\n\n\t\tconst className = ANNOTATION_ATTRIBUTE_PREFIX + annotation.source;\n\t\tconst id = ANNOTATION_ATTRIBUTE_PREFIX + annotation.id;\n\n\t\trecord = applyFormat(\n\t\t\trecord,\n\t\t\t{\n\t\t\t\ttype: FORMAT_NAME,\n\t\t\t\tattributes: {\n\t\t\t\t\tclassName,\n\t\t\t\t\tid,\n\t\t\t\t},\n\t\t\t},\n\t\t\tstart,\n\t\t\tend\n\t\t);\n\t} );\n\n\treturn record;\n}\n\n/**\n * Removes annotations from the given record.\n *\n * @param {Object} record Record to remove annotations from.\n * @return {Object} The cleaned record.\n */\nexport function removeAnnotations( record ) {\n\treturn removeFormat( record, 'core/annotation', 0, record.text.length );\n}\n\n/**\n * Retrieves the positions of annotations inside an array of formats.\n *\n * @param {Array} formats Formats with annotations in there.\n * @return {Object} ID keyed positions of annotations.\n */\nfunction retrieveAnnotationPositions( formats ) {\n\tconst positions = {};\n\n\tformats.forEach( ( characterFormats, i ) => {\n\t\tcharacterFormats = characterFormats || [];\n\t\tcharacterFormats = characterFormats.filter(\n\t\t\t( format ) => format.type === FORMAT_NAME\n\t\t);\n\t\tcharacterFormats.forEach( ( format ) => {\n\t\t\tlet { id } = format.attributes;\n\t\t\tid = id.replace( ANNOTATION_ATTRIBUTE_PREFIX, '' );\n\n\t\t\tif ( ! positions.hasOwnProperty( id ) ) {\n\t\t\t\tpositions[ id ] = {\n\t\t\t\t\tstart: i,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Annotations refer to positions between characters.\n\t\t\t// Formats refer to the character themselves.\n\t\t\t// So we need to adjust for that here.\n\t\t\tpositions[ id ].end = i + 1;\n\t\t} );\n\t} );\n\n\treturn positions;\n}\n\n/**\n * Updates annotations in the state based on positions retrieved from RichText.\n *\n * @param {Array}    annotations                   The annotations that are currently applied.\n * @param {Array}    positions                     The current positions of the given annotations.\n * @param {Object}   actions\n * @param {Function} actions.removeAnnotation      Function to remove an annotation from the state.\n * @param {Function} actions.updateAnnotationRange Function to update an annotation range in the state.\n */\nfunction updateAnnotationsWithPositions(\n\tannotations,\n\tpositions,\n\t{ removeAnnotation, updateAnnotationRange }\n) {\n\tannotations.forEach( ( currentAnnotation ) => {\n\t\tconst position = positions[ currentAnnotation.id ];\n\t\t// If we cannot find an annotation, delete it.\n\t\tif ( ! position ) {\n\t\t\t// Apparently the annotation has been removed, so remove it from the state:\n\t\t\t// Remove...\n\t\t\tremoveAnnotation( currentAnnotation.id );\n\t\t\treturn;\n\t\t}\n\n\t\tconst { start, end } = currentAnnotation;\n\t\tif ( start !== position.start || end !== position.end ) {\n\t\t\tupdateAnnotationRange(\n\t\t\t\tcurrentAnnotation.id,\n\t\t\t\tposition.start,\n\t\t\t\tposition.end\n\t\t\t);\n\t\t}\n\t} );\n}\n\nexport const annotation = {\n\tname: FORMAT_NAME,\n\ttitle: __( 'Annotation' ),\n\ttagName: 'mark',\n\tclassName: 'annotation-text',\n\tattributes: {\n\t\tclassName: 'class',\n\t\tid: 'id',\n\t},\n\tedit() {\n\t\treturn null;\n\t},\n\t__experimentalGetPropsForEditableTreePreparation(\n\t\tselect,\n\t\t{ richTextIdentifier, blockClientId }\n\t) {\n\t\treturn {\n\t\t\tannotations: select(\n\t\t\t\tSTORE_NAME\n\t\t\t).__experimentalGetAnnotationsForRichText(\n\t\t\t\tblockClientId,\n\t\t\t\trichTextIdentifier\n\t\t\t),\n\t\t};\n\t},\n\t__experimentalCreatePrepareEditableTree( { annotations } ) {\n\t\treturn ( formats, text ) => {\n\t\t\tif ( annotations.length === 0 ) {\n\t\t\t\treturn formats;\n\t\t\t}\n\n\t\t\tlet record = { formats, text };\n\t\t\trecord = applyAnnotations( record, annotations );\n\t\t\treturn record.formats;\n\t\t};\n\t},\n\t__experimentalGetPropsForEditableTreeChangeHandler( dispatch ) {\n\t\treturn {\n\t\t\tremoveAnnotation:\n\t\t\t\tdispatch( STORE_NAME ).__experimentalRemoveAnnotation,\n\t\t\tupdateAnnotationRange:\n\t\t\t\tdispatch( STORE_NAME ).__experimentalUpdateAnnotationRange,\n\t\t};\n\t},\n\t__experimentalCreateOnChangeEditableValue( props ) {\n\t\treturn ( formats ) => {\n\t\t\tconst positions = retrieveAnnotationPositions( formats );\n\t\t\tconst { removeAnnotation, updateAnnotationRange, annotations } =\n\t\t\t\tprops;\n\n\t\t\tupdateAnnotationsWithPositions( annotations, positions, {\n\t\t\t\tremoveAnnotation,\n\t\t\t\tupdateAnnotationRange,\n\t\t\t} );\n\t\t};\n\t},\n};\n", "/**\n * The identifier for the data store.\n *\n * @type {string}\n */\nexport const STORE_NAME = 'core/annotations';\n", "/**\n * WordPress dependencies\n */\nimport { addFilter } from '@wordpress/hooks';\nimport { withSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from '../store/constants';\n/**\n * Adds annotation className to the block-list-block component.\n *\n * @param {Object} OriginalComponent The original BlockListBlock component.\n * @return {Object} The enhanced component.\n */\nconst addAnnotationClassName = ( OriginalComponent ) => {\n\treturn withSelect( ( select, { clientId, className } ) => {\n\t\tconst annotations =\n\t\t\tselect( STORE_NAME ).__experimentalGetAnnotationsForBlock(\n\t\t\t\tclientId\n\t\t\t);\n\n\t\treturn {\n\t\t\tclassName: annotations\n\t\t\t\t.map( ( annotation ) => {\n\t\t\t\t\treturn 'is-annotated-by-' + annotation.source;\n\t\t\t\t} )\n\t\t\t\t.concat( className )\n\t\t\t\t.filter( Boolean )\n\t\t\t\t.join( ' ' ),\n\t\t};\n\t} )( OriginalComponent );\n};\n\naddFilter(\n\t'editor.BlockListBlock',\n\t'core/annotations',\n\taddAnnotationClassName\n);\n", "/**\n * WordPress dependencies\n */\nimport { register, createReduxStore } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport reducer from './reducer';\nimport * as selectors from './selectors';\nimport * as actions from './actions';\n\n/**\n * Module Constants\n */\nimport { STORE_NAME } from './constants';\n\n/**\n * Store definition for the annotations namespace.\n *\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore\n *\n * @type {Object}\n */\nexport const store = createReduxStore( STORE_NAME, {\n\treducer,\n\tselectors,\n\tactions,\n} );\n\nregister( store );\n", "/**\n * Filters an array based on the predicate, but keeps the reference the same if\n * the array hasn't changed.\n *\n * @param {Array}    collection The collection to filter.\n * @param {Function} predicate  Function that determines if the item should stay\n *                              in the array.\n * @return {Array} Filtered array.\n */\nfunction filterWithReference( collection, predicate ) {\n\tconst filteredCollection = collection.filter( predicate );\n\n\treturn collection.length === filteredCollection.length\n\t\t? collection\n\t\t: filteredCollection;\n}\n\n/**\n * Creates a new object with the same keys, but with `callback()` called as\n * a transformer function on each of the values.\n *\n * @param {Object}   obj      The object to transform.\n * @param {Function} callback The function to transform each object value.\n * @return {Array} Transformed object.\n */\nconst mapValues = ( obj, callback ) =>\n\tObject.entries( obj ).reduce(\n\t\t( acc, [ key, value ] ) => ( {\n\t\t\t...acc,\n\t\t\t[ key ]: callback( value ),\n\t\t} ),\n\t\t{}\n\t);\n\n/**\n * Verifies whether the given annotations is a valid annotation.\n *\n * @param {Object} annotation The annotation to verify.\n * @return {boolean} Whether the given annotation is valid.\n */\nfunction isValidAnnotationRange( annotation ) {\n\treturn (\n\t\ttypeof annotation.start === 'number' &&\n\t\ttypeof annotation.end === 'number' &&\n\t\tannotation.start <= annotation.end\n\t);\n}\n\n/**\n * Reducer managing annotations.\n *\n * @param {Object} state  The annotations currently shown in the editor.\n * @param {Object} action Dispatched action.\n *\n * @return {Array} Updated state.\n */\nexport function annotations( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ANNOTATION_ADD':\n\t\t\tconst blockClientId = action.blockClientId;\n\t\t\tconst newAnnotation = {\n\t\t\t\tid: action.id,\n\t\t\t\tblockClientId,\n\t\t\t\trichTextIdentifier: action.richTextIdentifier,\n\t\t\t\tsource: action.source,\n\t\t\t\tselector: action.selector,\n\t\t\t\trange: action.range,\n\t\t\t};\n\n\t\t\tif (\n\t\t\t\tnewAnnotation.selector === 'range' &&\n\t\t\t\t! isValidAnnotationRange( newAnnotation.range )\n\t\t\t) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tconst previousAnnotationsForBlock = state?.[ blockClientId ] ?? [];\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ blockClientId ]: [\n\t\t\t\t\t...previousAnnotationsForBlock,\n\t\t\t\t\tnewAnnotation,\n\t\t\t\t],\n\t\t\t};\n\n\t\tcase 'ANNOTATION_REMOVE':\n\t\t\treturn mapValues( state, ( annotationsForBlock ) => {\n\t\t\t\treturn filterWithReference(\n\t\t\t\t\tannotationsForBlock,\n\t\t\t\t\t( annotation ) => {\n\t\t\t\t\t\treturn annotation.id !== action.annotationId;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} );\n\n\t\tcase 'ANNOTATION_UPDATE_RANGE':\n\t\t\treturn mapValues( state, ( annotationsForBlock ) => {\n\t\t\t\tlet hasChangedRange = false;\n\n\t\t\t\tconst newAnnotations = annotationsForBlock.map(\n\t\t\t\t\t( annotation ) => {\n\t\t\t\t\t\tif ( annotation.id === action.annotationId ) {\n\t\t\t\t\t\t\thasChangedRange = true;\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...annotation,\n\t\t\t\t\t\t\t\trange: {\n\t\t\t\t\t\t\t\t\tstart: action.start,\n\t\t\t\t\t\t\t\t\tend: action.end,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn annotation;\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\treturn hasChangedRange ? newAnnotations : annotationsForBlock;\n\t\t\t} );\n\n\t\tcase 'ANNOTATION_REMOVE_SOURCE':\n\t\t\treturn mapValues( state, ( annotationsForBlock ) => {\n\t\t\t\treturn filterWithReference(\n\t\t\t\t\tannotationsForBlock,\n\t\t\t\t\t( annotation ) => {\n\t\t\t\t\t\treturn annotation.source !== action.source;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} );\n\t}\n\n\treturn state;\n}\n\nexport default annotations;\n", "/**\n * WordPress dependencies\n */\nimport { createSelector } from '@wordpress/data';\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Array}\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Returns the annotations for a specific client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId The ID of the block to get the annotations for.\n *\n * @return {Array} The annotations applicable to this block.\n */\nexport const __experimentalGetAnnotationsForBlock = createSelector(\n\t( state, blockClientId ) => {\n\t\treturn ( state?.[ blockClientId ] ?? [] ).filter( ( annotation ) => {\n\t\t\treturn annotation.selector === 'block';\n\t\t} );\n\t},\n\t( state, blockClientId ) => [ state?.[ blockClientId ] ?? EMPTY_ARRAY ]\n);\n\nexport function __experimentalGetAllAnnotationsForBlock(\n\tstate,\n\tblockClientId\n) {\n\treturn state?.[ blockClientId ] ?? EMPTY_ARRAY;\n}\n\n/**\n * Returns the annotations that apply to the given RichText instance.\n *\n * Both a blockClientId and a richTextIdentifier are required. This is because\n * a block might have multiple `RichText` components. This does mean that every\n * block needs to implement annotations itself.\n *\n * @param {Object} state              Editor state.\n * @param {string} blockClientId      The client ID for the block.\n * @param {string} richTextIdentifier Unique identifier that identifies the given RichText.\n * @return {Array} All the annotations relevant for the `RichText`.\n */\nexport const __experimentalGetAnnotationsForRichText = createSelector(\n\t( state, blockClientId, richTextIdentifier ) => {\n\t\treturn ( state?.[ blockClientId ] ?? [] )\n\t\t\t.filter( ( annotation ) => {\n\t\t\t\treturn (\n\t\t\t\t\tannotation.selector === 'range' &&\n\t\t\t\t\trichTextIdentifier === annotation.richTextIdentifier\n\t\t\t\t);\n\t\t\t} )\n\t\t\t.map( ( annotation ) => {\n\t\t\t\tconst { range, ...other } = annotation;\n\n\t\t\t\treturn {\n\t\t\t\t\t...range,\n\t\t\t\t\t...other,\n\t\t\t\t};\n\t\t\t} );\n\t},\n\t( state, blockClientId ) => [ state?.[ blockClientId ] ?? EMPTY_ARRAY ]\n);\n\n/**\n * Returns all annotations in the editor state.\n *\n * @param {Object} state Editor state.\n * @return {Array} All annotations currently applied.\n */\nexport function __experimentalGetAnnotations( state ) {\n\treturn Object.values( state ).flat();\n}\n", "/**\n * External dependencies\n */\nimport { v4 as uuid } from 'uuid';\n\n/**\n * @typedef WPAnnotationRange\n *\n * @property {number} start The offset where the annotation should start.\n * @property {number} end   The offset where the annotation should end.\n */\n\n/**\n * Adds an annotation to a block.\n *\n * The `block` attribute refers to a block ID that needs to be annotated.\n * `isBlockAnnotation` controls whether or not the annotation is a block\n * annotation. The `source` is the source of the annotation, this will be used\n * to identity groups of annotations.\n *\n * The `range` property is only relevant if the selector is 'range'.\n *\n * @param {Object}            annotation                    The annotation to add.\n * @param {string}            annotation.blockClientId      The blockClientId to add the annotation to.\n * @param {string}            annotation.richTextIdentifier Identifier for the RichText instance the annotation applies to.\n * @param {WPAnnotationRange} annotation.range              The range at which to apply this annotation.\n * @param {string}            [annotation.selector=\"range\"] The way to apply this annotation.\n * @param {string}            [annotation.source=\"default\"] The source that added the annotation.\n * @param {string}            [annotation.id]               The ID the annotation should have. Generates a UUID by default.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalAddAnnotation( {\n\tblockClientId,\n\trichTextIdentifier = null,\n\trange = null,\n\tselector = 'range',\n\tsource = 'default',\n\tid = uuid(),\n} ) {\n\tconst action = {\n\t\ttype: 'ANNOTATION_ADD',\n\t\tid,\n\t\tblockClientId,\n\t\trichTextIdentifier,\n\t\tsource,\n\t\tselector,\n\t};\n\n\tif ( selector === 'range' ) {\n\t\taction.range = range;\n\t}\n\n\treturn action;\n}\n\n/**\n * Removes an annotation with a specific ID.\n *\n * @param {string} annotationId The annotation to remove.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalRemoveAnnotation( annotationId ) {\n\treturn {\n\t\ttype: 'ANNOTATION_REMOVE',\n\t\tannotationId,\n\t};\n}\n\n/**\n * Updates the range of an annotation.\n *\n * @param {string} annotationId ID of the annotation to update.\n * @param {number} start        The start of the new range.\n * @param {number} end          The end of the new range.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalUpdateAnnotationRange(\n\tannotationId,\n\tstart,\n\tend\n) {\n\treturn {\n\t\ttype: 'ANNOTATION_UPDATE_RANGE',\n\t\tannotationId,\n\t\tstart,\n\t\tend,\n\t};\n}\n\n/**\n * Removes all annotations of a specific source.\n *\n * @param {string} source The source to remove.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalRemoveAnnotationsBySource( source ) {\n\treturn {\n\t\ttype: 'ANNOTATION_REMOVE_SOURCE',\n\t\tsource,\n\t};\n}\n", "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;"],
  "mappings": "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",
  "names": ["require_rich_text", "__commonJSMin", "exports", "module", "require_i18n", "__commonJSMin", "exports", "module", "require_hooks", "__commonJSMin", "exports", "module", "require_data", "__commonJSMin", "exports", "module", "index_exports", "__export", "store", "import_rich_text", "import_i18n", "import_rich_text", "STORE_NAME", "FORMAT_NAME", "ANNOTATION_ATTRIBUTE_PREFIX", "applyAnnotations", "record", "annotations", "annotation", "start", "end", "className", "id", "retrieveAnnotationPositions", "formats", "positions", "characterFormats", "i", "format", "FORMAT_NAME", "id", "ANNOTATION_ATTRIBUTE_PREFIX", "updateAnnotationsWithPositions", "annotations", "removeAnnotation", "updateAnnotationRange", "currentAnnotation", "position", "start", "end", "annotation", "select", "richTextIdentifier", "blockClientId", "STORE_NAME", "text", "record", "applyAnnotations", "dispatch", "props", "name", "settings", "annotation", "import_hooks", "import_data", "addAnnotationClassName", "OriginalComponent", "select", "clientId", "className", "STORE_NAME", "annotation", "import_data", "filterWithReference", "collection", "predicate", "filteredCollection", "mapValues", "obj", "callback", "acc", "key", "value", "isValidAnnotationRange", "annotation", "annotations", "state", "action", "blockClientId", "newAnnotation", "previousAnnotationsForBlock", "annotationsForBlock", "hasChangedRange", "newAnnotations", "reducer_default", "selectors_exports", "__export", "__experimentalGetAllAnnotationsForBlock", "__experimentalGetAnnotations", "__experimentalGetAnnotationsForBlock", "__experimentalGetAnnotationsForRichText", "import_data", "EMPTY_ARRAY", "state", "blockClientId", "annotation", "richTextIdentifier", "range", "other", "actions_exports", "__export", "__experimentalAddAnnotation", "__experimentalRemoveAnnotation", "__experimentalRemoveAnnotationsBySource", "__experimentalUpdateAnnotationRange", "getRandomValues", "rnds8", "rng", "byteToHex", "i", "unsafeStringify", "arr", "offset", "randomUUID", "native_default", "v4", "options", "buf", "offset", "native_default", "rnds", "rng", "i", "unsafeStringify", "v4_default", "__experimentalAddAnnotation", "blockClientId", "richTextIdentifier", "range", "selector", "source", "id", "v4_default", "action", "__experimentalRemoveAnnotation", "annotationId", "__experimentalUpdateAnnotationRange", "start", "end", "__experimentalRemoveAnnotationsBySource", "store", "STORE_NAME", "reducer_default", "selectors_exports", "actions_exports"]
}
