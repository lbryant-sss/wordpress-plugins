{
  "version": 3,
  "sources": ["wordpress-external:@wordpress/rich-text", "wordpress-external:@wordpress/i18n", "wordpress-external:@wordpress/hooks", "wordpress-external:@wordpress/data", "../../packages/annotations/src/index.js", "../../packages/annotations/src/format/index.js", "../../packages/annotations/src/format/annotation.js", "../../packages/annotations/src/store/constants.js", "../../packages/annotations/src/block/index.js", "../../packages/annotations/src/store/index.js", "../../packages/annotations/src/store/reducer.js", "../../packages/annotations/src/store/selectors.js", "../../packages/annotations/src/store/actions.js", "../../node_modules/uuid/dist/esm-browser/rng.js", "../../node_modules/uuid/dist/esm-browser/stringify.js", "../../node_modules/uuid/dist/esm-browser/native.js", "../../node_modules/uuid/dist/esm-browser/v4.js"],
  "sourcesContent": ["module.exports = window.wp.richText;", "module.exports = window.wp.i18n;", "module.exports = window.wp.hooks;", "module.exports = window.wp.data;", "/**\n * Internal dependencies\n */\nimport './format';\nimport './block';\n\nexport { store } from './store';\n", "/**\n * WordPress dependencies\n */\nimport { registerFormatType } from '@wordpress/rich-text';\n\n/**\n * Internal dependencies\n */\nimport { annotation } from './annotation';\n\nconst { name, ...settings } = annotation;\n\nregisterFormatType( name, settings );\n", "/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { applyFormat, removeFormat } from '@wordpress/rich-text';\n\nconst FORMAT_NAME = 'core/annotation';\n\nconst ANNOTATION_ATTRIBUTE_PREFIX = 'annotation-text-';\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from '../store/constants';\n\n/**\n * Applies given annotations to the given record.\n *\n * @param {Object} record      The record to apply annotations to.\n * @param {Array}  annotations The annotation to apply.\n * @return {Object} A record with the annotations applied.\n */\nexport function applyAnnotations( record, annotations = [] ) {\n\tannotations.forEach( ( annotation ) => {\n\t\tlet { start, end } = annotation;\n\n\t\tif ( start > record.text.length ) {\n\t\t\tstart = record.text.length;\n\t\t}\n\n\t\tif ( end > record.text.length ) {\n\t\t\tend = record.text.length;\n\t\t}\n\n\t\tconst className = ANNOTATION_ATTRIBUTE_PREFIX + annotation.source;\n\t\tconst id = ANNOTATION_ATTRIBUTE_PREFIX + annotation.id;\n\n\t\trecord = applyFormat(\n\t\t\trecord,\n\t\t\t{\n\t\t\t\ttype: FORMAT_NAME,\n\t\t\t\tattributes: {\n\t\t\t\t\tclassName,\n\t\t\t\t\tid,\n\t\t\t\t},\n\t\t\t},\n\t\t\tstart,\n\t\t\tend\n\t\t);\n\t} );\n\n\treturn record;\n}\n\n/**\n * Removes annotations from the given record.\n *\n * @param {Object} record Record to remove annotations from.\n * @return {Object} The cleaned record.\n */\nexport function removeAnnotations( record ) {\n\treturn removeFormat( record, 'core/annotation', 0, record.text.length );\n}\n\n/**\n * Retrieves the positions of annotations inside an array of formats.\n *\n * @param {Array} formats Formats with annotations in there.\n * @return {Object} ID keyed positions of annotations.\n */\nfunction retrieveAnnotationPositions( formats ) {\n\tconst positions = {};\n\n\tformats.forEach( ( characterFormats, i ) => {\n\t\tcharacterFormats = characterFormats || [];\n\t\tcharacterFormats = characterFormats.filter(\n\t\t\t( format ) => format.type === FORMAT_NAME\n\t\t);\n\t\tcharacterFormats.forEach( ( format ) => {\n\t\t\tlet { id } = format.attributes;\n\t\t\tid = id.replace( ANNOTATION_ATTRIBUTE_PREFIX, '' );\n\n\t\t\tif ( ! positions.hasOwnProperty( id ) ) {\n\t\t\t\tpositions[ id ] = {\n\t\t\t\t\tstart: i,\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Annotations refer to positions between characters.\n\t\t\t// Formats refer to the character themselves.\n\t\t\t// So we need to adjust for that here.\n\t\t\tpositions[ id ].end = i + 1;\n\t\t} );\n\t} );\n\n\treturn positions;\n}\n\n/**\n * Updates annotations in the state based on positions retrieved from RichText.\n *\n * @param {Array}    annotations                   The annotations that are currently applied.\n * @param {Array}    positions                     The current positions of the given annotations.\n * @param {Object}   actions\n * @param {Function} actions.removeAnnotation      Function to remove an annotation from the state.\n * @param {Function} actions.updateAnnotationRange Function to update an annotation range in the state.\n */\nfunction updateAnnotationsWithPositions(\n\tannotations,\n\tpositions,\n\t{ removeAnnotation, updateAnnotationRange }\n) {\n\tannotations.forEach( ( currentAnnotation ) => {\n\t\tconst position = positions[ currentAnnotation.id ];\n\t\t// If we cannot find an annotation, delete it.\n\t\tif ( ! position ) {\n\t\t\t// Apparently the annotation has been removed, so remove it from the state:\n\t\t\t// Remove...\n\t\t\tremoveAnnotation( currentAnnotation.id );\n\t\t\treturn;\n\t\t}\n\n\t\tconst { start, end } = currentAnnotation;\n\t\tif ( start !== position.start || end !== position.end ) {\n\t\t\tupdateAnnotationRange(\n\t\t\t\tcurrentAnnotation.id,\n\t\t\t\tposition.start,\n\t\t\t\tposition.end\n\t\t\t);\n\t\t}\n\t} );\n}\n\nexport const annotation = {\n\tname: FORMAT_NAME,\n\ttitle: __( 'Annotation' ),\n\ttagName: 'mark',\n\tclassName: 'annotation-text',\n\tattributes: {\n\t\tclassName: 'class',\n\t\tid: 'id',\n\t},\n\tedit() {\n\t\treturn null;\n\t},\n\t__experimentalGetPropsForEditableTreePreparation(\n\t\tselect,\n\t\t{ richTextIdentifier, blockClientId }\n\t) {\n\t\treturn {\n\t\t\tannotations: select(\n\t\t\t\tSTORE_NAME\n\t\t\t).__experimentalGetAnnotationsForRichText(\n\t\t\t\tblockClientId,\n\t\t\t\trichTextIdentifier\n\t\t\t),\n\t\t};\n\t},\n\t__experimentalCreatePrepareEditableTree( { annotations } ) {\n\t\treturn ( formats, text ) => {\n\t\t\tif ( annotations.length === 0 ) {\n\t\t\t\treturn formats;\n\t\t\t}\n\n\t\t\tlet record = { formats, text };\n\t\t\trecord = applyAnnotations( record, annotations );\n\t\t\treturn record.formats;\n\t\t};\n\t},\n\t__experimentalGetPropsForEditableTreeChangeHandler( dispatch ) {\n\t\treturn {\n\t\t\tremoveAnnotation:\n\t\t\t\tdispatch( STORE_NAME ).__experimentalRemoveAnnotation,\n\t\t\tupdateAnnotationRange:\n\t\t\t\tdispatch( STORE_NAME ).__experimentalUpdateAnnotationRange,\n\t\t};\n\t},\n\t__experimentalCreateOnChangeEditableValue( props ) {\n\t\treturn ( formats ) => {\n\t\t\tconst positions = retrieveAnnotationPositions( formats );\n\t\t\tconst { removeAnnotation, updateAnnotationRange, annotations } =\n\t\t\t\tprops;\n\n\t\t\tupdateAnnotationsWithPositions( annotations, positions, {\n\t\t\t\tremoveAnnotation,\n\t\t\t\tupdateAnnotationRange,\n\t\t\t} );\n\t\t};\n\t},\n};\n", "/**\n * The identifier for the data store.\n *\n * @type {string}\n */\nexport const STORE_NAME = 'core/annotations';\n", "/**\n * WordPress dependencies\n */\nimport { addFilter } from '@wordpress/hooks';\nimport { withSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { STORE_NAME } from '../store/constants';\n/**\n * Adds annotation className to the block-list-block component.\n *\n * @param {Object} OriginalComponent The original BlockListBlock component.\n * @return {Object} The enhanced component.\n */\nconst addAnnotationClassName = ( OriginalComponent ) => {\n\treturn withSelect( ( select, { clientId, className } ) => {\n\t\tconst annotations =\n\t\t\tselect( STORE_NAME ).__experimentalGetAnnotationsForBlock(\n\t\t\t\tclientId\n\t\t\t);\n\n\t\treturn {\n\t\t\tclassName: annotations\n\t\t\t\t.map( ( annotation ) => {\n\t\t\t\t\treturn 'is-annotated-by-' + annotation.source;\n\t\t\t\t} )\n\t\t\t\t.concat( className )\n\t\t\t\t.filter( Boolean )\n\t\t\t\t.join( ' ' ),\n\t\t};\n\t} )( OriginalComponent );\n};\n\naddFilter(\n\t'editor.BlockListBlock',\n\t'core/annotations',\n\taddAnnotationClassName\n);\n", "/**\n * WordPress dependencies\n */\nimport { register, createReduxStore } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport reducer from './reducer';\nimport * as selectors from './selectors';\nimport * as actions from './actions';\n\n/**\n * Module Constants\n */\nimport { STORE_NAME } from './constants';\n\n/**\n * Store definition for the annotations namespace.\n *\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore\n *\n * @type {Object}\n */\nexport const store = createReduxStore( STORE_NAME, {\n\treducer,\n\tselectors,\n\tactions,\n} );\n\nregister( store );\n", "/**\n * Filters an array based on the predicate, but keeps the reference the same if\n * the array hasn't changed.\n *\n * @param {Array}    collection The collection to filter.\n * @param {Function} predicate  Function that determines if the item should stay\n *                              in the array.\n * @return {Array} Filtered array.\n */\nfunction filterWithReference( collection, predicate ) {\n\tconst filteredCollection = collection.filter( predicate );\n\n\treturn collection.length === filteredCollection.length\n\t\t? collection\n\t\t: filteredCollection;\n}\n\n/**\n * Creates a new object with the same keys, but with `callback()` called as\n * a transformer function on each of the values.\n *\n * @param {Object}   obj      The object to transform.\n * @param {Function} callback The function to transform each object value.\n * @return {Array} Transformed object.\n */\nconst mapValues = ( obj, callback ) =>\n\tObject.entries( obj ).reduce(\n\t\t( acc, [ key, value ] ) => ( {\n\t\t\t...acc,\n\t\t\t[ key ]: callback( value ),\n\t\t} ),\n\t\t{}\n\t);\n\n/**\n * Verifies whether the given annotations is a valid annotation.\n *\n * @param {Object} annotation The annotation to verify.\n * @return {boolean} Whether the given annotation is valid.\n */\nfunction isValidAnnotationRange( annotation ) {\n\treturn (\n\t\ttypeof annotation.start === 'number' &&\n\t\ttypeof annotation.end === 'number' &&\n\t\tannotation.start <= annotation.end\n\t);\n}\n\n/**\n * Reducer managing annotations.\n *\n * @param {Object} state  The annotations currently shown in the editor.\n * @param {Object} action Dispatched action.\n *\n * @return {Array} Updated state.\n */\nexport function annotations( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'ANNOTATION_ADD':\n\t\t\tconst blockClientId = action.blockClientId;\n\t\t\tconst newAnnotation = {\n\t\t\t\tid: action.id,\n\t\t\t\tblockClientId,\n\t\t\t\trichTextIdentifier: action.richTextIdentifier,\n\t\t\t\tsource: action.source,\n\t\t\t\tselector: action.selector,\n\t\t\t\trange: action.range,\n\t\t\t};\n\n\t\t\tif (\n\t\t\t\tnewAnnotation.selector === 'range' &&\n\t\t\t\t! isValidAnnotationRange( newAnnotation.range )\n\t\t\t) {\n\t\t\t\treturn state;\n\t\t\t}\n\n\t\t\tconst previousAnnotationsForBlock = state?.[ blockClientId ] ?? [];\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ blockClientId ]: [\n\t\t\t\t\t...previousAnnotationsForBlock,\n\t\t\t\t\tnewAnnotation,\n\t\t\t\t],\n\t\t\t};\n\n\t\tcase 'ANNOTATION_REMOVE':\n\t\t\treturn mapValues( state, ( annotationsForBlock ) => {\n\t\t\t\treturn filterWithReference(\n\t\t\t\t\tannotationsForBlock,\n\t\t\t\t\t( annotation ) => {\n\t\t\t\t\t\treturn annotation.id !== action.annotationId;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} );\n\n\t\tcase 'ANNOTATION_UPDATE_RANGE':\n\t\t\treturn mapValues( state, ( annotationsForBlock ) => {\n\t\t\t\tlet hasChangedRange = false;\n\n\t\t\t\tconst newAnnotations = annotationsForBlock.map(\n\t\t\t\t\t( annotation ) => {\n\t\t\t\t\t\tif ( annotation.id === action.annotationId ) {\n\t\t\t\t\t\t\thasChangedRange = true;\n\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t...annotation,\n\t\t\t\t\t\t\t\trange: {\n\t\t\t\t\t\t\t\t\tstart: action.start,\n\t\t\t\t\t\t\t\t\tend: action.end,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn annotation;\n\t\t\t\t\t}\n\t\t\t\t);\n\n\t\t\t\treturn hasChangedRange ? newAnnotations : annotationsForBlock;\n\t\t\t} );\n\n\t\tcase 'ANNOTATION_REMOVE_SOURCE':\n\t\t\treturn mapValues( state, ( annotationsForBlock ) => {\n\t\t\t\treturn filterWithReference(\n\t\t\t\t\tannotationsForBlock,\n\t\t\t\t\t( annotation ) => {\n\t\t\t\t\t\treturn annotation.source !== action.source;\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} );\n\t}\n\n\treturn state;\n}\n\nexport default annotations;\n", "/**\n * WordPress dependencies\n */\nimport { createSelector } from '@wordpress/data';\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation, as in a connected or\n * other pure component which performs `shouldComponentUpdate` check on props.\n * This should be used as a last resort, since the normalized data should be\n * maintained by the reducer result in state.\n *\n * @type {Array}\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Returns the annotations for a specific client ID.\n *\n * @param {Object} state    Editor state.\n * @param {string} clientId The ID of the block to get the annotations for.\n *\n * @return {Array} The annotations applicable to this block.\n */\nexport const __experimentalGetAnnotationsForBlock = createSelector(\n\t( state, blockClientId ) => {\n\t\treturn ( state?.[ blockClientId ] ?? [] ).filter( ( annotation ) => {\n\t\t\treturn annotation.selector === 'block';\n\t\t} );\n\t},\n\t( state, blockClientId ) => [ state?.[ blockClientId ] ?? EMPTY_ARRAY ]\n);\n\nexport function __experimentalGetAllAnnotationsForBlock(\n\tstate,\n\tblockClientId\n) {\n\treturn state?.[ blockClientId ] ?? EMPTY_ARRAY;\n}\n\n/**\n * Returns the annotations that apply to the given RichText instance.\n *\n * Both a blockClientId and a richTextIdentifier are required. This is because\n * a block might have multiple `RichText` components. This does mean that every\n * block needs to implement annotations itself.\n *\n * @param {Object} state              Editor state.\n * @param {string} blockClientId      The client ID for the block.\n * @param {string} richTextIdentifier Unique identifier that identifies the given RichText.\n * @return {Array} All the annotations relevant for the `RichText`.\n */\nexport const __experimentalGetAnnotationsForRichText = createSelector(\n\t( state, blockClientId, richTextIdentifier ) => {\n\t\treturn ( state?.[ blockClientId ] ?? [] )\n\t\t\t.filter( ( annotation ) => {\n\t\t\t\treturn (\n\t\t\t\t\tannotation.selector === 'range' &&\n\t\t\t\t\trichTextIdentifier === annotation.richTextIdentifier\n\t\t\t\t);\n\t\t\t} )\n\t\t\t.map( ( annotation ) => {\n\t\t\t\tconst { range, ...other } = annotation;\n\n\t\t\t\treturn {\n\t\t\t\t\t...range,\n\t\t\t\t\t...other,\n\t\t\t\t};\n\t\t\t} );\n\t},\n\t( state, blockClientId ) => [ state?.[ blockClientId ] ?? EMPTY_ARRAY ]\n);\n\n/**\n * Returns all annotations in the editor state.\n *\n * @param {Object} state Editor state.\n * @return {Array} All annotations currently applied.\n */\nexport function __experimentalGetAnnotations( state ) {\n\treturn Object.values( state ).flat();\n}\n", "/**\n * External dependencies\n */\nimport { v4 as uuid } from 'uuid';\n\n/**\n * @typedef WPAnnotationRange\n *\n * @property {number} start The offset where the annotation should start.\n * @property {number} end   The offset where the annotation should end.\n */\n\n/**\n * Adds an annotation to a block.\n *\n * The `block` attribute refers to a block ID that needs to be annotated.\n * `isBlockAnnotation` controls whether or not the annotation is a block\n * annotation. The `source` is the source of the annotation, this will be used\n * to identity groups of annotations.\n *\n * The `range` property is only relevant if the selector is 'range'.\n *\n * @param {Object}            annotation                    The annotation to add.\n * @param {string}            annotation.blockClientId      The blockClientId to add the annotation to.\n * @param {string}            annotation.richTextIdentifier Identifier for the RichText instance the annotation applies to.\n * @param {WPAnnotationRange} annotation.range              The range at which to apply this annotation.\n * @param {string}            [annotation.selector=\"range\"] The way to apply this annotation.\n * @param {string}            [annotation.source=\"default\"] The source that added the annotation.\n * @param {string}            [annotation.id]               The ID the annotation should have. Generates a UUID by default.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalAddAnnotation( {\n\tblockClientId,\n\trichTextIdentifier = null,\n\trange = null,\n\tselector = 'range',\n\tsource = 'default',\n\tid = uuid(),\n} ) {\n\tconst action = {\n\t\ttype: 'ANNOTATION_ADD',\n\t\tid,\n\t\tblockClientId,\n\t\trichTextIdentifier,\n\t\tsource,\n\t\tselector,\n\t};\n\n\tif ( selector === 'range' ) {\n\t\taction.range = range;\n\t}\n\n\treturn action;\n}\n\n/**\n * Removes an annotation with a specific ID.\n *\n * @param {string} annotationId The annotation to remove.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalRemoveAnnotation( annotationId ) {\n\treturn {\n\t\ttype: 'ANNOTATION_REMOVE',\n\t\tannotationId,\n\t};\n}\n\n/**\n * Updates the range of an annotation.\n *\n * @param {string} annotationId ID of the annotation to update.\n * @param {number} start        The start of the new range.\n * @param {number} end          The end of the new range.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalUpdateAnnotationRange(\n\tannotationId,\n\tstart,\n\tend\n) {\n\treturn {\n\t\ttype: 'ANNOTATION_UPDATE_RANGE',\n\t\tannotationId,\n\t\tstart,\n\t\tend,\n\t};\n}\n\n/**\n * Removes all annotations of a specific source.\n *\n * @param {string} source The source to remove.\n *\n * @return {Object} Action object.\n */\nexport function __experimentalRemoveAnnotationsBySource( source ) {\n\treturn {\n\t\ttype: 'ANNOTATION_REMOVE_SOURCE',\n\t\tsource,\n\t};\n}\n", "// Unique ID creation requires a high quality random # generator. In the browser we therefore\n// require the crypto API and do not support built-in fallback to lower quality random number\n// generators (like Math.random()).\nlet getRandomValues;\nconst rnds8 = new Uint8Array(16);\nexport default function rng() {\n  // lazy load so that environments that need to polyfill have a chance to do so\n  if (!getRandomValues) {\n    // getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\n    getRandomValues = typeof crypto !== 'undefined' && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);\n\n    if (!getRandomValues) {\n      throw new Error('crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported');\n    }\n  }\n\n  return getRandomValues(rnds8);\n}", "import validate from './validate.js';\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\n\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).slice(1));\n}\n\nexport function unsafeStringify(arr, offset = 0) {\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + '-' + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + '-' + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + '-' + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + '-' + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];\n}\n\nfunction stringify(arr, offset = 0) {\n  const uuid = unsafeStringify(arr, offset); // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // of the following:\n  // - One or more input array values don't map to a hex octet (leading to\n  // \"undefined\" in the uuid)\n  // - Invalid input values for the RFC `version` or `variant` fields\n\n  if (!validate(uuid)) {\n    throw TypeError('Stringified UUID is invalid');\n  }\n\n  return uuid;\n}\n\nexport default stringify;", "const randomUUID = typeof crypto !== 'undefined' && crypto.randomUUID && crypto.randomUUID.bind(crypto);\nexport default {\n  randomUUID\n};", "import native from './native.js';\nimport rng from './rng.js';\nimport { unsafeStringify } from './stringify.js';\n\nfunction v4(options, buf, offset) {\n  if (native.randomUUID && !buf && !options) {\n    return native.randomUUID();\n  }\n\n  options = options || {};\n  const rnds = options.random || (options.rng || rng)(); // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n\n  rnds[6] = rnds[6] & 0x0f | 0x40;\n  rnds[8] = rnds[8] & 0x3f | 0x80; // Copy bytes to buffer, if provided\n\n  if (buf) {\n    offset = offset || 0;\n\n    for (let i = 0; i < 16; ++i) {\n      buf[offset + i] = rnds[i];\n    }\n\n    return buf;\n  }\n\n  return unsafeStringify(rnds);\n}\n\nexport default v4;"],
  "mappings": "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",
  "names": ["import_rich_text", "annotations", "annotation", "annotations", "annotations", "annotation", "import_data", "annotation", "import_data", "annotation"]
}
