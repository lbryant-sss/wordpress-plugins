{
  "version": 3,
  "sources": ["wordpress-external:@wordpress/api-fetch", "../../packages/preferences-persistence/src/index.js", "../../packages/preferences-persistence/src/create/index.js", "../../packages/preferences-persistence/src/create/debounce-async.js", "../../packages/preferences-persistence/src/migrations/legacy-local-storage-data/move-feature-preferences.js", "../../packages/preferences-persistence/src/migrations/legacy-local-storage-data/move-third-party-feature-preferences.js", "../../packages/preferences-persistence/src/migrations/legacy-local-storage-data/move-individual-preference.js", "../../packages/preferences-persistence/src/migrations/legacy-local-storage-data/move-interface-enable-items.js", "../../packages/preferences-persistence/src/migrations/legacy-local-storage-data/convert-edit-post-panels.js", "../../packages/preferences-persistence/src/migrations/legacy-local-storage-data/index.js", "../../packages/preferences-persistence/src/migrations/preferences-package-data/convert-complementary-areas.js", "../../packages/preferences-persistence/src/migrations/preferences-package-data/convert-editor-settings.js", "../../packages/preferences-persistence/src/migrations/preferences-package-data/index.js"],
  "sourcesContent": ["module.exports = window.wp.apiFetch;", "/**\n * Internal dependencies\n */\nimport create from './create';\nimport convertLegacyLocalStorageData from './migrations/legacy-local-storage-data';\nimport convertPreferencesPackageData from './migrations/preferences-package-data';\n\nexport { create };\n\n/**\n * Creates the persistence layer with preloaded data.\n *\n * It prioritizes any data from the server, but falls back first to localStorage\n * restore data, and then to any legacy data.\n *\n * This function is used internally by WordPress in an inline script, so\n * prefixed with `__unstable`.\n *\n * @param {Object} serverData Preferences data preloaded from the server.\n * @param {string} userId     The user id.\n *\n * @return {Object} The persistence layer initialized with the preloaded data.\n */\nexport function __unstableCreatePersistenceLayer( serverData, userId ) {\n\tconst localStorageRestoreKey = `WP_PREFERENCES_USER_${ userId }`;\n\tconst localData = JSON.parse(\n\t\twindow.localStorage.getItem( localStorageRestoreKey )\n\t);\n\n\t// Date parse returns NaN for invalid input. Coerce anything invalid\n\t// into a conveniently comparable zero.\n\tconst serverModified =\n\t\tDate.parse( serverData && serverData._modified ) || 0;\n\tconst localModified = Date.parse( localData && localData._modified ) || 0;\n\n\tlet preloadedData;\n\tif ( serverData && serverModified >= localModified ) {\n\t\tpreloadedData = convertPreferencesPackageData( serverData );\n\t} else if ( localData ) {\n\t\tpreloadedData = convertPreferencesPackageData( localData );\n\t} else {\n\t\t// Check if there is data in the legacy format from the old persistence system.\n\t\tpreloadedData = convertLegacyLocalStorageData( userId );\n\t}\n\n\treturn create( {\n\t\tpreloadedData,\n\t\tlocalStorageRestoreKey,\n\t} );\n}\n", "/**\n * WordPress dependencies\n */\nimport apiFetch from '@wordpress/api-fetch';\n\n/**\n * Internal dependencies\n */\nimport debounceAsync from './debounce-async';\n\nconst EMPTY_OBJECT = {};\nconst localStorage = window.localStorage;\n\n/**\n * Creates a persistence layer that stores data in WordPress user meta via the\n * REST API.\n *\n * @param {Object}  options\n * @param {?Object} options.preloadedData          Any persisted preferences data that should be preloaded.\n *                                                 When set, the persistence layer will avoid fetching data\n *                                                 from the REST API.\n * @param {?string} options.localStorageRestoreKey The key to use for restoring the localStorage backup, used\n *                                                 when the persistence layer calls `localStorage.getItem` or\n *                                                 `localStorage.setItem`.\n * @param {?number} options.requestDebounceMS      Debounce requests to the API so that they only occur at\n *                                                 minimum every `requestDebounceMS` milliseconds, and don't\n *                                                 swamp the server. Defaults to 2500ms.\n *\n * @return {Object} A persistence layer for WordPress user meta.\n */\nexport default function create( {\n\tpreloadedData,\n\tlocalStorageRestoreKey = 'WP_PREFERENCES_RESTORE_DATA',\n\trequestDebounceMS = 2500,\n} = {} ) {\n\tlet cache = preloadedData;\n\tconst debouncedApiFetch = debounceAsync( apiFetch, requestDebounceMS );\n\n\tasync function get() {\n\t\tif ( cache ) {\n\t\t\treturn cache;\n\t\t}\n\n\t\tconst user = await apiFetch( {\n\t\t\tpath: '/wp/v2/users/me?context=edit',\n\t\t} );\n\n\t\tconst serverData = user?.meta?.persisted_preferences;\n\t\tconst localData = JSON.parse(\n\t\t\tlocalStorage.getItem( localStorageRestoreKey )\n\t\t);\n\n\t\t// Date parse returns NaN for invalid input. Coerce anything invalid\n\t\t// into a conveniently comparable zero.\n\t\tconst serverTimestamp = Date.parse( serverData?._modified ) || 0;\n\t\tconst localTimestamp = Date.parse( localData?._modified ) || 0;\n\n\t\t// Prefer server data if it exists and is more recent.\n\t\t// Otherwise fallback to localStorage data.\n\t\tif ( serverData && serverTimestamp >= localTimestamp ) {\n\t\t\tcache = serverData;\n\t\t} else if ( localData ) {\n\t\t\tcache = localData;\n\t\t} else {\n\t\t\tcache = EMPTY_OBJECT;\n\t\t}\n\n\t\treturn cache;\n\t}\n\n\tfunction set( newData ) {\n\t\tconst dataWithTimestamp = {\n\t\t\t...newData,\n\t\t\t_modified: new Date().toISOString(),\n\t\t};\n\t\tcache = dataWithTimestamp;\n\n\t\t// Store data in local storage as a fallback. If for some reason the\n\t\t// api request does not complete or becomes unavailable, this data\n\t\t// can be used to restore preferences.\n\t\tlocalStorage.setItem(\n\t\t\tlocalStorageRestoreKey,\n\t\t\tJSON.stringify( dataWithTimestamp )\n\t\t);\n\n\t\t// The user meta endpoint seems susceptible to errors when consecutive\n\t\t// requests are made in quick succession. Ensure there's a gap between\n\t\t// any consecutive requests.\n\t\t//\n\t\t// Catch and do nothing with errors from the REST API.\n\t\tdebouncedApiFetch( {\n\t\t\tpath: '/wp/v2/users/me',\n\t\t\tmethod: 'PUT',\n\t\t\t// `keepalive` will still send the request in the background,\n\t\t\t// even when a browser unload event might interrupt it.\n\t\t\t// This should hopefully make things more resilient.\n\t\t\t// This does have a size limit of 64kb, but the data is usually\n\t\t\t// much less.\n\t\t\tkeepalive: true,\n\t\t\tdata: {\n\t\t\t\tmeta: {\n\t\t\t\t\tpersisted_preferences: dataWithTimestamp,\n\t\t\t\t},\n\t\t\t},\n\t\t} ).catch( () => {} );\n\t}\n\n\treturn {\n\t\tget,\n\t\tset,\n\t};\n}\n", "/**\n * Performs a leading edge debounce of async functions.\n *\n * If three functions are throttled at the same time:\n * - The first happens immediately.\n * - The second is never called.\n * - The third happens `delayMS` milliseconds after the first has resolved.\n *\n * This is distinct from `{ debounce } from @wordpress/compose` in that it\n * waits for promise resolution.\n *\n * @param {Function} func    A function that returns a promise.\n * @param {number}   delayMS A delay in milliseconds.\n *\n * @return {Function} A function that debounce whatever function is passed\n *                    to it.\n */\nexport default function debounceAsync( func, delayMS ) {\n\tlet timeoutId;\n\tlet activePromise;\n\n\treturn async function debounced( ...args ) {\n\t\t// This is a leading edge debounce. If there's no promise or timeout\n\t\t// in progress, call the debounced function immediately.\n\t\tif ( ! activePromise && ! timeoutId ) {\n\t\t\treturn new Promise( ( resolve, reject ) => {\n\t\t\t\t// Keep a reference to the promise.\n\t\t\t\tactivePromise = func( ...args )\n\t\t\t\t\t.then( ( ...thenArgs ) => {\n\t\t\t\t\t\tresolve( ...thenArgs );\n\t\t\t\t\t} )\n\t\t\t\t\t.catch( ( error ) => {\n\t\t\t\t\t\treject( error );\n\t\t\t\t\t} )\n\t\t\t\t\t.finally( () => {\n\t\t\t\t\t\t// As soon this promise is complete, clear the way for the\n\t\t\t\t\t\t// next one to happen immediately.\n\t\t\t\t\t\tactivePromise = null;\n\t\t\t\t\t} );\n\t\t\t} );\n\t\t}\n\n\t\tif ( activePromise ) {\n\t\t\t// Let any active promises finish before queuing the next request.\n\t\t\tawait activePromise;\n\t\t}\n\n\t\t// Clear any active timeouts, abandoning any requests that have\n\t\t// been queued but not been made.\n\t\tif ( timeoutId ) {\n\t\t\tclearTimeout( timeoutId );\n\t\t\ttimeoutId = null;\n\t\t}\n\n\t\t// Trigger any trailing edge calls to the function.\n\t\treturn new Promise( ( resolve, reject ) => {\n\t\t\t// Schedule the next request but with a delay.\n\t\t\ttimeoutId = setTimeout( () => {\n\t\t\t\tactivePromise = func( ...args )\n\t\t\t\t\t.then( ( ...thenArgs ) => {\n\t\t\t\t\t\tresolve( ...thenArgs );\n\t\t\t\t\t} )\n\t\t\t\t\t.catch( ( error ) => {\n\t\t\t\t\t\treject( error );\n\t\t\t\t\t} )\n\t\t\t\t\t.finally( () => {\n\t\t\t\t\t\t// As soon this promise is complete, clear the way for the\n\t\t\t\t\t\t// next one to happen immediately.\n\t\t\t\t\t\tactivePromise = null;\n\t\t\t\t\t\ttimeoutId = null;\n\t\t\t\t\t} );\n\t\t\t}, delayMS );\n\t\t} );\n\t};\n}\n", "/**\n * Move the 'features' object in local storage from the sourceStoreName to the\n * preferences store data structure.\n *\n * Previously, editors used a data structure like this for feature preferences:\n * ```js\n * {\n *     'core/edit-post': {\n *         preferences: {\n *             features; {\n *                 topToolbar: true,\n *                 // ... other boolean 'feature' preferences\n *             },\n *         },\n *     },\n * }\n * ```\n *\n * And for a while these feature preferences lived in the interface package:\n * ```js\n * {\n *     'core/interface': {\n *         preferences: {\n *             features: {\n *                 'core/edit-post': {\n *                     topToolbar: true\n *                 }\n *             }\n *         }\n *     }\n * }\n * ```\n *\n * In the preferences store, 'features' aren't considered special, they're\n * merged to the root level of the scope along with other preferences:\n * ```js\n * {\n *     'core/preferences': {\n *         preferences: {\n *             'core/edit-post': {\n *                 topToolbar: true,\n *                 // ... any other preferences.\n *             }\n *         }\n *     }\n * }\n * ```\n *\n * This function handles moving from either the source store or the interface\n * store to the preferences data structure.\n *\n * @param {Object} state           The state before migration.\n * @param {string} sourceStoreName The name of the store that has persisted\n *                                 preferences to migrate to the preferences\n *                                 package.\n * @return {Object} The migrated state\n */\nexport default function moveFeaturePreferences( state, sourceStoreName ) {\n\tconst preferencesStoreName = 'core/preferences';\n\tconst interfaceStoreName = 'core/interface';\n\n\t// Features most recently (and briefly) lived in the interface package.\n\t// If data exists there, prioritize using that for the migration. If not\n\t// also check the original package as the user may have updated from an\n\t// older block editor version.\n\tconst interfaceFeatures =\n\t\tstate?.[ interfaceStoreName ]?.preferences?.features?.[\n\t\t\tsourceStoreName\n\t\t];\n\tconst sourceFeatures = state?.[ sourceStoreName ]?.preferences?.features;\n\tconst featuresToMigrate = interfaceFeatures\n\t\t? interfaceFeatures\n\t\t: sourceFeatures;\n\n\tif ( ! featuresToMigrate ) {\n\t\treturn state;\n\t}\n\n\tconst existingPreferences = state?.[ preferencesStoreName ]?.preferences;\n\n\t// Avoid migrating features again if they've previously been migrated.\n\tif ( existingPreferences?.[ sourceStoreName ] ) {\n\t\treturn state;\n\t}\n\n\tlet updatedInterfaceState;\n\tif ( interfaceFeatures ) {\n\t\tconst otherInterfaceState = state?.[ interfaceStoreName ];\n\t\tconst otherInterfaceScopes =\n\t\t\tstate?.[ interfaceStoreName ]?.preferences?.features;\n\n\t\tupdatedInterfaceState = {\n\t\t\t[ interfaceStoreName ]: {\n\t\t\t\t...otherInterfaceState,\n\t\t\t\tpreferences: {\n\t\t\t\t\tfeatures: {\n\t\t\t\t\t\t...otherInterfaceScopes,\n\t\t\t\t\t\t[ sourceStoreName ]: undefined,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t}\n\n\tlet updatedSourceState;\n\tif ( sourceFeatures ) {\n\t\tconst otherSourceState = state?.[ sourceStoreName ];\n\t\tconst sourcePreferences = state?.[ sourceStoreName ]?.preferences;\n\n\t\tupdatedSourceState = {\n\t\t\t[ sourceStoreName ]: {\n\t\t\t\t...otherSourceState,\n\t\t\t\tpreferences: {\n\t\t\t\t\t...sourcePreferences,\n\t\t\t\t\tfeatures: undefined,\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t}\n\n\t// Set the feature values in the interface store, the features\n\t// object is keyed by 'scope', which matches the store name for\n\t// the source.\n\treturn {\n\t\t...state,\n\t\t[ preferencesStoreName ]: {\n\t\t\tpreferences: {\n\t\t\t\t...existingPreferences,\n\t\t\t\t[ sourceStoreName ]: featuresToMigrate,\n\t\t\t},\n\t\t},\n\t\t...updatedInterfaceState,\n\t\t...updatedSourceState,\n\t};\n}\n", "/**\n * The interface package previously had a public API that could be used by\n * plugins to set persisted boolean 'feature' preferences.\n *\n * While usage was likely non-existent or very small, this function ensures\n * those are migrated to the preferences data structure. The interface\n * package's APIs have now been deprecated and use the preferences store.\n *\n * This will convert data that looks like this:\n * ```js\n * {\n *     'core/interface': {\n *         preferences: {\n *             features: {\n *                 'my-plugin': {\n *                     myPluginFeature: true\n *                 }\n *             }\n *         }\n *     }\n * }\n * ```\n *\n * To this:\n * ```js\n *  * {\n *     'core/preferences': {\n *         preferences: {\n *             'my-plugin': {\n *                 myPluginFeature: true\n *             }\n *         }\n *     }\n * }\n * ```\n *\n * @param {Object} state The local storage state\n *\n * @return {Object} The state with third party preferences moved to the\n *                  preferences data structure.\n */\nexport default function moveThirdPartyFeaturePreferencesToPreferences( state ) {\n\tconst interfaceStoreName = 'core/interface';\n\tconst preferencesStoreName = 'core/preferences';\n\n\tconst interfaceScopes =\n\t\tstate?.[ interfaceStoreName ]?.preferences?.features;\n\tconst interfaceScopeKeys = interfaceScopes\n\t\t? Object.keys( interfaceScopes )\n\t\t: [];\n\n\tif ( ! interfaceScopeKeys?.length ) {\n\t\treturn state;\n\t}\n\n\treturn interfaceScopeKeys.reduce( function ( convertedState, scope ) {\n\t\tif ( scope.startsWith( 'core' ) ) {\n\t\t\treturn convertedState;\n\t\t}\n\n\t\tconst featuresToMigrate = interfaceScopes?.[ scope ];\n\t\tif ( ! featuresToMigrate ) {\n\t\t\treturn convertedState;\n\t\t}\n\n\t\tconst existingMigratedData =\n\t\t\tconvertedState?.[ preferencesStoreName ]?.preferences?.[ scope ];\n\n\t\tif ( existingMigratedData ) {\n\t\t\treturn convertedState;\n\t\t}\n\n\t\tconst otherPreferencesScopes =\n\t\t\tconvertedState?.[ preferencesStoreName ]?.preferences;\n\t\tconst otherInterfaceState = convertedState?.[ interfaceStoreName ];\n\t\tconst otherInterfaceScopes =\n\t\t\tconvertedState?.[ interfaceStoreName ]?.preferences?.features;\n\n\t\treturn {\n\t\t\t...convertedState,\n\t\t\t[ preferencesStoreName ]: {\n\t\t\t\tpreferences: {\n\t\t\t\t\t...otherPreferencesScopes,\n\t\t\t\t\t[ scope ]: featuresToMigrate,\n\t\t\t\t},\n\t\t\t},\n\t\t\t[ interfaceStoreName ]: {\n\t\t\t\t...otherInterfaceState,\n\t\t\t\tpreferences: {\n\t\t\t\t\tfeatures: {\n\t\t\t\t\t\t...otherInterfaceScopes,\n\t\t\t\t\t\t[ scope ]: undefined,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t};\n\t}, state );\n}\n", "const identity = ( arg ) => arg;\n\n/**\n * Migrates an individual item inside the `preferences` object for a package's store.\n *\n * Previously, some packages had individual 'preferences' of any data type, and many used\n * complex nested data structures. For example:\n * ```js\n * {\n *     'core/edit-post': {\n *         preferences: {\n *             panels: {\n *                 publish: {\n *                     opened: true,\n *                     enabled: true,\n *                 }\n *             },\n *             // ...other preferences.\n *         },\n *     },\n * }\n *\n * This function supports moving an individual preference like 'panels' above into the\n * preferences package data structure.\n *\n * It supports moving a preference to a particular scope in the preferences store and\n * optionally converting the data using a `convert` function.\n *\n * ```\n *\n * @param {Object}    state        The original state.\n * @param {Object}    migrate      An options object that contains details of the migration.\n * @param {string}    migrate.from The name of the store to migrate from.\n * @param {string}    migrate.to   The scope in the preferences store to migrate to.\n * @param {string}    key          The key in the preferences object to migrate.\n * @param {?Function} convert      A function that converts preferences from one format to another.\n */\nexport default function moveIndividualPreferenceToPreferences(\n\tstate,\n\t{ from: sourceStoreName, to: scope },\n\tkey,\n\tconvert = identity\n) {\n\tconst preferencesStoreName = 'core/preferences';\n\tconst sourcePreference = state?.[ sourceStoreName ]?.preferences?.[ key ];\n\n\t// There's nothing to migrate, exit early.\n\tif ( sourcePreference === undefined ) {\n\t\treturn state;\n\t}\n\n\tconst targetPreference =\n\t\tstate?.[ preferencesStoreName ]?.preferences?.[ scope ]?.[ key ];\n\n\t// There's existing data at the target, so don't overwrite it, exit early.\n\tif ( targetPreference ) {\n\t\treturn state;\n\t}\n\n\tconst otherScopes = state?.[ preferencesStoreName ]?.preferences;\n\tconst otherPreferences =\n\t\tstate?.[ preferencesStoreName ]?.preferences?.[ scope ];\n\n\tconst otherSourceState = state?.[ sourceStoreName ];\n\tconst allSourcePreferences = state?.[ sourceStoreName ]?.preferences;\n\n\t// Pass an object with the key and value as this allows the convert\n\t// function to convert to a data structure that has different keys.\n\tconst convertedPreferences = convert( { [ key ]: sourcePreference } );\n\n\treturn {\n\t\t...state,\n\t\t[ preferencesStoreName ]: {\n\t\t\tpreferences: {\n\t\t\t\t...otherScopes,\n\t\t\t\t[ scope ]: {\n\t\t\t\t\t...otherPreferences,\n\t\t\t\t\t...convertedPreferences,\n\t\t\t\t},\n\t\t\t},\n\t\t},\n\t\t[ sourceStoreName ]: {\n\t\t\t...otherSourceState,\n\t\t\tpreferences: {\n\t\t\t\t...allSourcePreferences,\n\t\t\t\t[ key ]: undefined,\n\t\t\t},\n\t\t},\n\t};\n}\n", "/**\n * Migrates interface 'enableItems' data to the preferences store.\n *\n * The interface package stores this data in this format:\n * ```js\n * {\n *     enableItems: {\n *         singleEnableItems: {\n * \t           complementaryArea: {\n *                 'core/edit-post': 'edit-post/document',\n *                 'core/edit-site': 'edit-site/global-styles',\n *             }\n *         },\n *         multipleEnableItems: {\n *             pinnedItems: {\n *                 'core/edit-post': {\n *                     'plugin-1': true,\n *                 },\n *                 'core/edit-site': {\n *                     'plugin-2': true,\n *                 },\n *             },\n *         }\n *     }\n * }\n * ```\n *\n * and it should be converted it to:\n * ```js\n * {\n *     'core/edit-post': {\n *         complementaryArea: 'edit-post/document',\n *         pinnedItems: {\n *             'plugin-1': true,\n *         },\n *     },\n *     'core/edit-site': {\n *         complementaryArea: 'edit-site/global-styles',\n *         pinnedItems: {\n *             'plugin-2': true,\n *         },\n *     },\n * }\n * ```\n *\n * @param {Object} state The local storage state.\n */\nexport default function moveInterfaceEnableItems( state ) {\n\tconst interfaceStoreName = 'core/interface';\n\tconst preferencesStoreName = 'core/preferences';\n\tconst sourceEnableItems = state?.[ interfaceStoreName ]?.enableItems;\n\n\t// There's nothing to migrate, exit early.\n\tif ( ! sourceEnableItems ) {\n\t\treturn state;\n\t}\n\n\tconst allPreferences = state?.[ preferencesStoreName ]?.preferences ?? {};\n\n\t// First convert complementaryAreas into the right format.\n\t// Use the existing preferences as the accumulator so that the data is\n\t// merged.\n\tconst sourceComplementaryAreas =\n\t\tsourceEnableItems?.singleEnableItems?.complementaryArea ?? {};\n\n\tconst preferencesWithConvertedComplementaryAreas = Object.keys(\n\t\tsourceComplementaryAreas\n\t).reduce( ( accumulator, scope ) => {\n\t\tconst data = sourceComplementaryAreas[ scope ];\n\n\t\t// Don't overwrite any existing data in the preferences store.\n\t\tif ( accumulator?.[ scope ]?.complementaryArea ) {\n\t\t\treturn accumulator;\n\t\t}\n\n\t\treturn {\n\t\t\t...accumulator,\n\t\t\t[ scope ]: {\n\t\t\t\t...accumulator[ scope ],\n\t\t\t\tcomplementaryArea: data,\n\t\t\t},\n\t\t};\n\t}, allPreferences );\n\n\t// Next feed the converted complementary areas back into a reducer that\n\t// converts the pinned items, resulting in the fully migrated data.\n\tconst sourcePinnedItems =\n\t\tsourceEnableItems?.multipleEnableItems?.pinnedItems ?? {};\n\tconst allConvertedData = Object.keys( sourcePinnedItems ).reduce(\n\t\t( accumulator, scope ) => {\n\t\t\tconst data = sourcePinnedItems[ scope ];\n\t\t\t// Don't overwrite any existing data in the preferences store.\n\t\t\tif ( accumulator?.[ scope ]?.pinnedItems ) {\n\t\t\t\treturn accumulator;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...accumulator,\n\t\t\t\t[ scope ]: {\n\t\t\t\t\t...accumulator[ scope ],\n\t\t\t\t\tpinnedItems: data,\n\t\t\t\t},\n\t\t\t};\n\t\t},\n\t\tpreferencesWithConvertedComplementaryAreas\n\t);\n\n\tconst otherInterfaceItems = state[ interfaceStoreName ];\n\n\treturn {\n\t\t...state,\n\t\t[ preferencesStoreName ]: {\n\t\t\tpreferences: allConvertedData,\n\t\t},\n\t\t[ interfaceStoreName ]: {\n\t\t\t...otherInterfaceItems,\n\t\t\tenableItems: undefined,\n\t\t},\n\t};\n}\n", "/**\n * Convert the post editor's panels state from:\n * ```\n * {\n *     panels: {\n *         tags: {\n *             enabled: true,\n *             opened: true,\n *         },\n *         permalinks: {\n *             enabled: false,\n *             opened: false,\n *         },\n *     },\n * }\n * ```\n *\n * to a new, more concise data structure:\n * {\n *     inactivePanels: [\n *         'permalinks',\n *     ],\n *     openPanels: [\n *         'tags',\n *     ],\n * }\n *\n * @param {Object} preferences A preferences object.\n *\n * @return {Object} The converted data.\n */\nexport default function convertEditPostPanels( preferences ) {\n\tconst panels = preferences?.panels ?? {};\n\treturn Object.keys( panels ).reduce(\n\t\t( convertedData, panelName ) => {\n\t\t\tconst panel = panels[ panelName ];\n\n\t\t\tif ( panel?.enabled === false ) {\n\t\t\t\tconvertedData.inactivePanels.push( panelName );\n\t\t\t}\n\n\t\t\tif ( panel?.opened === true ) {\n\t\t\t\tconvertedData.openPanels.push( panelName );\n\t\t\t}\n\n\t\t\treturn convertedData;\n\t\t},\n\t\t{ inactivePanels: [], openPanels: [] }\n\t);\n}\n", "/**\n * Internal dependencies\n */\nimport moveFeaturePreferences from './move-feature-preferences';\nimport moveThirdPartyFeaturePreferences from './move-third-party-feature-preferences';\nimport moveIndividualPreference from './move-individual-preference';\nimport moveInterfaceEnableItems from './move-interface-enable-items';\nimport convertEditPostPanels from './convert-edit-post-panels';\n\n/**\n * Gets the legacy local storage data for a given user.\n *\n * @param {string | number} userId The user id.\n *\n * @return {Object | null} The local storage data.\n */\nfunction getLegacyData( userId ) {\n\tconst key = `WP_DATA_USER_${ userId }`;\n\tconst unparsedData = window.localStorage.getItem( key );\n\treturn JSON.parse( unparsedData );\n}\n\n/**\n * Converts data from the old `@wordpress/data` package format.\n *\n * @param {Object | null | undefined} data The legacy data in its original format.\n *\n * @return {Object | undefined} The converted data or `undefined` if there was\n *                              nothing to convert.\n */\nexport function convertLegacyData( data ) {\n\tif ( ! data ) {\n\t\treturn;\n\t}\n\n\t// Move boolean feature preferences from each editor into the\n\t// preferences store data structure.\n\tdata = moveFeaturePreferences( data, 'core/edit-widgets' );\n\tdata = moveFeaturePreferences( data, 'core/customize-widgets' );\n\tdata = moveFeaturePreferences( data, 'core/edit-post' );\n\tdata = moveFeaturePreferences( data, 'core/edit-site' );\n\n\t// Move third party boolean feature preferences from the interface package\n\t// to the preferences store data structure.\n\tdata = moveThirdPartyFeaturePreferences( data );\n\n\t// Move and convert the interface store's `enableItems` data into the\n\t// preferences data structure.\n\tdata = moveInterfaceEnableItems( data );\n\n\t// Move individual ad-hoc preferences from various packages into the\n\t// preferences store data structure.\n\tdata = moveIndividualPreference(\n\t\tdata,\n\t\t{ from: 'core/edit-post', to: 'core/edit-post' },\n\t\t'hiddenBlockTypes'\n\t);\n\tdata = moveIndividualPreference(\n\t\tdata,\n\t\t{ from: 'core/edit-post', to: 'core/edit-post' },\n\t\t'editorMode'\n\t);\n\tdata = moveIndividualPreference(\n\t\tdata,\n\t\t{ from: 'core/edit-post', to: 'core/edit-post' },\n\t\t'panels',\n\t\tconvertEditPostPanels\n\t);\n\tdata = moveIndividualPreference(\n\t\tdata,\n\t\t{ from: 'core/editor', to: 'core' },\n\t\t'isPublishSidebarEnabled'\n\t);\n\tdata = moveIndividualPreference(\n\t\tdata,\n\t\t{ from: 'core/edit-post', to: 'core' },\n\t\t'isPublishSidebarEnabled'\n\t);\n\tdata = moveIndividualPreference(\n\t\tdata,\n\t\t{ from: 'core/edit-site', to: 'core/edit-site' },\n\t\t'editorMode'\n\t);\n\n\t// The new system is only concerned with persisting\n\t// 'core/preferences' preferences reducer, so only return that.\n\treturn data?.[ 'core/preferences' ]?.preferences;\n}\n\n/**\n * Gets the legacy local storage data for the given user and returns the\n * data converted to the new format.\n *\n * @param {string | number} userId The user id.\n *\n * @return {Object | undefined} The converted data or undefined if no local\n *                              storage data could be found.\n */\nexport default function convertLegacyLocalStorageData( userId ) {\n\tconst data = getLegacyData( userId );\n\treturn convertLegacyData( data );\n}\n", "export default function convertComplementaryAreas( state ) {\n\treturn Object.keys( state ).reduce( ( stateAccumulator, scope ) => {\n\t\tconst scopeData = state[ scope ];\n\n\t\t// If a complementary area is truthy, convert it to the `isComplementaryAreaVisible` boolean.\n\t\tif ( scopeData?.complementaryArea ) {\n\t\t\tconst updatedScopeData = { ...scopeData };\n\t\t\tdelete updatedScopeData.complementaryArea;\n\t\t\tupdatedScopeData.isComplementaryAreaVisible = true;\n\t\t\tstateAccumulator[ scope ] = updatedScopeData;\n\t\t\treturn stateAccumulator;\n\t\t}\n\n\t\treturn stateAccumulator;\n\t}, state );\n}\n", "/**\n * Internal dependencies\n */\n\nexport default function convertEditorSettings( data ) {\n\tlet newData = data;\n\tconst settingsToMoveToCore = [\n\t\t'allowRightClickOverrides',\n\t\t'distractionFree',\n\t\t'editorMode',\n\t\t'fixedToolbar',\n\t\t'focusMode',\n\t\t'hiddenBlockTypes',\n\t\t'inactivePanels',\n\t\t'keepCaretInsideBlock',\n\t\t'mostUsedBlocks',\n\t\t'openPanels',\n\t\t'showBlockBreadcrumbs',\n\t\t'showIconLabels',\n\t\t'showListViewByDefault',\n\t\t'isPublishSidebarEnabled',\n\t\t'isComplementaryAreaVisible',\n\t\t'pinnedItems',\n\t];\n\n\tsettingsToMoveToCore.forEach( ( setting ) => {\n\t\tif ( data?.[ 'core/edit-post' ]?.[ setting ] !== undefined ) {\n\t\t\tnewData = {\n\t\t\t\t...newData,\n\t\t\t\tcore: {\n\t\t\t\t\t...newData?.core,\n\t\t\t\t\t[ setting ]: data[ 'core/edit-post' ][ setting ],\n\t\t\t\t},\n\t\t\t};\n\t\t\tdelete newData[ 'core/edit-post' ][ setting ];\n\t\t}\n\n\t\tif ( data?.[ 'core/edit-site' ]?.[ setting ] !== undefined ) {\n\t\t\tdelete newData[ 'core/edit-site' ][ setting ];\n\t\t}\n\t} );\n\n\tif ( Object.keys( newData?.[ 'core/edit-post' ] ?? {} )?.length === 0 ) {\n\t\tdelete newData[ 'core/edit-post' ];\n\t}\n\n\tif ( Object.keys( newData?.[ 'core/edit-site' ] ?? {} )?.length === 0 ) {\n\t\tdelete newData[ 'core/edit-site' ];\n\t}\n\n\treturn newData;\n}\n", "/**\n * Internal dependencies\n */\nimport convertComplementaryAreas from './convert-complementary-areas';\nimport convertEditorSettings from './convert-editor-settings';\n\nexport default function convertPreferencesPackageData( data ) {\n\tlet newData = convertComplementaryAreas( data );\n\tnewData = convertEditorSettings( newData );\n\treturn newData;\n}\n"],
  "mappings": "qpBAAA,IAAAA,EAAAC,EAAA,CAAAC,EAAAC,IAAA,CAAAA,EAAO,QAAU,OAAO,GAAG,WCG3B,IAAAC,EAAA,GAAAC,EAAAD,EAAA,sCAAAE,EAAA,WAAAC,ICAA,IAAAC,EAAqB,OCcN,SAARC,EAAgCC,EAAMC,EAAU,CACtD,IAAIC,EACAC,EAEJ,OAAO,kBAA6BC,EAAO,CAG1C,MAAK,CAAED,GAAiB,CAAED,EAClB,IAAI,QAAS,CAAEG,EAASC,IAAY,CAE1CH,EAAgBH,EAAM,GAAGI,CAAK,EAC5B,KAAM,IAAKG,IAAc,CACzBF,EAAS,GAAGE,CAAS,CACtB,CAAE,EACD,MAASC,GAAW,CACpBF,EAAQE,CAAM,CACf,CAAE,EACD,QAAS,IAAM,CAGfL,EAAgB,IACjB,CAAE,CACJ,CAAE,GAGEA,GAEJ,MAAMA,EAKFD,IACJ,aAAcA,CAAU,EACxBA,EAAY,MAIN,IAAI,QAAS,CAAEG,EAASC,IAAY,CAE1CJ,EAAY,WAAY,IAAM,CAC7BC,EAAgBH,EAAM,GAAGI,CAAK,EAC5B,KAAM,IAAKG,IAAc,CACzBF,EAAS,GAAGE,CAAS,CACtB,CAAE,EACD,MAASC,GAAW,CACpBF,EAAQE,CAAM,CACf,CAAE,EACD,QAAS,IAAM,CAGfL,EAAgB,KAChBD,EAAY,IACb,CAAE,CACJ,EAAGD,CAAQ,CACZ,CAAE,EACH,CACD,CDhEA,IAAMQ,EAAe,CAAC,EAChBC,EAAe,OAAO,aAmBb,SAARC,EAAyB,CAC/B,cAAAC,EACA,uBAAAC,EAAyB,8BACzB,kBAAAC,EAAoB,IACrB,EAAI,CAAC,EAAI,CACR,IAAIC,EAAQH,EACNI,EAAoBC,EAAe,EAAAC,QAAUJ,CAAkB,EAErE,eAAeK,GAAM,CACpB,GAAKJ,EACJ,OAAOA,EAOR,IAAMK,GAJO,QAAM,EAAAF,SAAU,CAC5B,KAAM,8BACP,CAAE,IAEuB,MAAM,sBACzBG,EAAY,KAAK,MACtBX,EAAa,QAASG,CAAuB,CAC9C,EAIMS,EAAkB,KAAK,MAAOF,GAAY,SAAU,GAAK,EACzDG,EAAiB,KAAK,MAAOF,GAAW,SAAU,GAAK,EAI7D,OAAKD,GAAcE,GAAmBC,EACrCR,EAAQK,EACGC,EACXN,EAAQM,EAERN,EAAQN,EAGFM,CACR,CAEA,SAASS,EAAKC,EAAU,CACvB,IAAMC,EAAoB,CACzB,GAAGD,EACH,UAAW,IAAI,KAAK,EAAE,YAAY,CACnC,EACAV,EAAQW,EAKRhB,EAAa,QACZG,EACA,KAAK,UAAWa,CAAkB,CACnC,EAOAV,EAAmB,CAClB,KAAM,kBACN,OAAQ,MAMR,UAAW,GACX,KAAM,CACL,KAAM,CACL,sBAAuBU,CACxB,CACD,CACD,CAAE,EAAE,MAAO,IAAM,CAAC,CAAE,CACrB,CAEA,MAAO,CACN,IAAAP,EACA,IAAAK,CACD,CACD,CEtDe,SAARG,EAAyCC,EAAOC,EAAkB,CACxE,IAAMC,EAAuB,mBACvBC,EAAqB,iBAMrBC,EACLJ,IAASG,CAAmB,GAAG,aAAa,WAC3CF,CACD,EACKI,EAAiBL,IAASC,CAAgB,GAAG,aAAa,SAC1DK,EAAoBF,GAEvBC,EAEH,GAAK,CAAEC,EACN,OAAON,EAGR,IAAMO,EAAsBP,IAASE,CAAqB,GAAG,YAG7D,GAAKK,IAAuBN,CAAgB,EAC3C,OAAOD,EAGR,IAAIQ,EACJ,GAAKJ,EAAoB,CACxB,IAAMK,EAAsBT,IAASG,CAAmB,EAClDO,EACLV,IAASG,CAAmB,GAAG,aAAa,SAE7CK,EAAwB,CACvB,CAAEL,CAAmB,EAAG,CACvB,GAAGM,EACH,YAAa,CACZ,SAAU,CACT,GAAGC,EACH,CAAET,CAAgB,EAAG,MACtB,CACD,CACD,CACD,CACD,CAEA,IAAIU,EACJ,GAAKN,EAAiB,CACrB,IAAMO,EAAmBZ,IAASC,CAAgB,EAC5CY,EAAoBb,IAASC,CAAgB,GAAG,YAEtDU,EAAqB,CACpB,CAAEV,CAAgB,EAAG,CACpB,GAAGW,EACH,YAAa,CACZ,GAAGC,EACH,SAAU,MACX,CACD,CACD,CACD,CAKA,MAAO,CACN,GAAGb,EACH,CAAEE,CAAqB,EAAG,CACzB,YAAa,CACZ,GAAGK,EACH,CAAEN,CAAgB,EAAGK,CACtB,CACD,EACA,GAAGE,EACH,GAAGG,CACJ,CACD,CC7Fe,SAARG,EAAgEC,EAAQ,CAC9E,IAAMC,EAAqB,iBACrBC,EAAuB,mBAEvBC,EACLH,IAASC,CAAmB,GAAG,aAAa,SACvCG,EAAqBD,EACxB,OAAO,KAAMA,CAAgB,EAC7B,CAAC,EAEJ,OAAOC,GAAoB,OAIpBA,EAAmB,OAAQ,SAAWC,EAAgBC,EAAQ,CACpE,GAAKA,EAAM,WAAY,MAAO,EAC7B,OAAOD,EAGR,IAAME,EAAoBJ,IAAmBG,CAAM,EAQnD,GAPK,CAAEC,GAKNF,IAAkBH,CAAqB,GAAG,cAAeI,CAAM,EAG/D,OAAOD,EAGR,IAAMG,EACLH,IAAkBH,CAAqB,GAAG,YACrCO,EAAsBJ,IAAkBJ,CAAmB,EAC3DS,EACLL,IAAkBJ,CAAmB,GAAG,aAAa,SAEtD,MAAO,CACN,GAAGI,EACH,CAAEH,CAAqB,EAAG,CACzB,YAAa,CACZ,GAAGM,EACH,CAAEF,CAAM,EAAGC,CACZ,CACD,EACA,CAAEN,CAAmB,EAAG,CACvB,GAAGQ,EACH,YAAa,CACZ,SAAU,CACT,GAAGC,EACH,CAAEJ,CAAM,EAAG,MACZ,CACD,CACD,CACD,CACD,EAAGN,CAAM,EA5CDA,CA6CT,CCjGA,IAAMW,EAAaC,GAASA,EAqCb,SAARC,EACNC,EACA,CAAE,KAAMC,EAAiB,GAAIC,CAAM,EACnCC,EACAC,EAAUP,EACT,CACD,IAAMQ,EAAuB,mBACvBC,EAAmBN,IAASC,CAAgB,GAAG,cAAeE,CAAI,EAWxE,GARKG,IAAqB,QAKzBN,IAASK,CAAqB,GAAG,cAAeH,CAAM,IAAKC,CAAI,EAI/D,OAAOH,EAGR,IAAMO,EAAcP,IAASK,CAAqB,GAAG,YAC/CG,EACLR,IAASK,CAAqB,GAAG,cAAeH,CAAM,EAEjDO,EAAmBT,IAASC,CAAgB,EAC5CS,EAAuBV,IAASC,CAAgB,GAAG,YAInDU,EAAuBP,EAAS,CAAE,CAAED,CAAI,EAAGG,CAAiB,CAAE,EAEpE,MAAO,CACN,GAAGN,EACH,CAAEK,CAAqB,EAAG,CACzB,YAAa,CACZ,GAAGE,EACH,CAAEL,CAAM,EAAG,CACV,GAAGM,EACH,GAAGG,CACJ,CACD,CACD,EACA,CAAEV,CAAgB,EAAG,CACpB,GAAGQ,EACH,YAAa,CACZ,GAAGC,EACH,CAAEP,CAAI,EAAG,MACV,CACD,CACD,CACD,CC1Ce,SAARS,EAA2CC,EAAQ,CACzD,IAAMC,EAAqB,iBACrBC,EAAuB,mBACvBC,EAAoBH,IAASC,CAAmB,GAAG,YAGzD,GAAK,CAAEE,EACN,OAAOH,EAGR,IAAMI,EAAiBJ,IAASE,CAAqB,GAAG,aAAe,CAAC,EAKlEG,EACLF,GAAmB,mBAAmB,mBAAqB,CAAC,EAEvDG,EAA6C,OAAO,KACzDD,CACD,EAAE,OAAQ,CAAEE,EAAaC,IAAW,CACnC,IAAMC,EAAOJ,EAA0BG,CAAM,EAG7C,OAAKD,IAAeC,CAAM,GAAG,kBACrBD,EAGD,CACN,GAAGA,EACH,CAAEC,CAAM,EAAG,CACV,GAAGD,EAAaC,CAAM,EACtB,kBAAmBC,CACpB,CACD,CACD,EAAGL,CAAe,EAIZM,EACLP,GAAmB,qBAAqB,aAAe,CAAC,EACnDQ,EAAmB,OAAO,KAAMD,CAAkB,EAAE,OACzD,CAAEH,EAAaC,IAAW,CACzB,IAAMC,EAAOC,EAAmBF,CAAM,EAEtC,OAAKD,IAAeC,CAAM,GAAG,YACrBD,EAGD,CACN,GAAGA,EACH,CAAEC,CAAM,EAAG,CACV,GAAGD,EAAaC,CAAM,EACtB,YAAaC,CACd,CACD,CACD,EACAH,CACD,EAEMM,EAAsBZ,EAAOC,CAAmB,EAEtD,MAAO,CACN,GAAGD,EACH,CAAEE,CAAqB,EAAG,CACzB,YAAaS,CACd,EACA,CAAEV,CAAmB,EAAG,CACvB,GAAGW,EACH,YAAa,MACd,CACD,CACD,CCxFe,SAARC,EAAwCC,EAAc,CAC5D,IAAMC,EAASD,GAAa,QAAU,CAAC,EACvC,OAAO,OAAO,KAAMC,CAAO,EAAE,OAC5B,CAAEC,EAAeC,IAAe,CAC/B,IAAMC,EAAQH,EAAQE,CAAU,EAEhC,OAAKC,GAAO,UAAY,IACvBF,EAAc,eAAe,KAAMC,CAAU,EAGzCC,GAAO,SAAW,IACtBF,EAAc,WAAW,KAAMC,CAAU,EAGnCD,CACR,EACA,CAAE,eAAgB,CAAC,EAAG,WAAY,CAAC,CAAE,CACtC,CACD,CCjCA,SAASG,EAAeC,EAAS,CAChC,IAAMC,EAAM,gBAAiBD,CAAO,GAC9BE,EAAe,OAAO,aAAa,QAASD,CAAI,EACtD,OAAO,KAAK,MAAOC,CAAa,CACjC,CAUO,SAASC,EAAmBC,EAAO,CACzC,GAAOA,EAMP,OAAAA,EAAOC,EAAwBD,EAAM,mBAAoB,EACzDA,EAAOC,EAAwBD,EAAM,wBAAyB,EAC9DA,EAAOC,EAAwBD,EAAM,gBAAiB,EACtDA,EAAOC,EAAwBD,EAAM,gBAAiB,EAItDA,EAAOE,EAAkCF,CAAK,EAI9CA,EAAOG,EAA0BH,CAAK,EAItCA,EAAOI,EACNJ,EACA,CAAE,KAAM,iBAAkB,GAAI,gBAAiB,EAC/C,kBACD,EACAA,EAAOI,EACNJ,EACA,CAAE,KAAM,iBAAkB,GAAI,gBAAiB,EAC/C,YACD,EACAA,EAAOI,EACNJ,EACA,CAAE,KAAM,iBAAkB,GAAI,gBAAiB,EAC/C,SACAK,CACD,EACAL,EAAOI,EACNJ,EACA,CAAE,KAAM,cAAe,GAAI,MAAO,EAClC,yBACD,EACAA,EAAOI,EACNJ,EACA,CAAE,KAAM,iBAAkB,GAAI,MAAO,EACrC,yBACD,EACAA,EAAOI,EACNJ,EACA,CAAE,KAAM,iBAAkB,GAAI,gBAAiB,EAC/C,YACD,EAIOA,IAAQ,kBAAmB,GAAG,WACtC,CAWe,SAARM,EAAgDV,EAAS,CAC/D,IAAMI,EAAOL,EAAeC,CAAO,EACnC,OAAOG,EAAmBC,CAAK,CAChC,CCrGe,SAARO,EAA4CC,EAAQ,CAC1D,OAAO,OAAO,KAAMA,CAAM,EAAE,OAAQ,CAAEC,EAAkBC,IAAW,CAClE,IAAMC,EAAYH,EAAOE,CAAM,EAG/B,GAAKC,GAAW,kBAAoB,CACnC,IAAMC,EAAmB,CAAE,GAAGD,CAAU,EACxC,cAAOC,EAAiB,kBACxBA,EAAiB,2BAA6B,GAC9CH,EAAkBC,CAAM,EAAIE,EACrBH,CACR,CAEA,OAAOA,CACR,EAAGD,CAAM,CACV,CCXe,SAARK,EAAwCC,EAAO,CACrD,IAAIC,EAAUD,EAoBd,MAnB6B,CAC5B,2BACA,kBACA,aACA,eACA,YACA,mBACA,iBACA,uBACA,iBACA,aACA,uBACA,iBACA,wBACA,0BACA,6BACA,aACD,EAEqB,QAAWE,GAAa,CACvCF,IAAQ,gBAAiB,IAAKE,CAAQ,IAAM,SAChDD,EAAU,CACT,GAAGA,EACH,KAAM,CACL,GAAGA,GAAS,KACZ,CAAEC,CAAQ,EAAGF,EAAM,gBAAiB,EAAGE,CAAQ,CAChD,CACD,EACA,OAAOD,EAAS,gBAAiB,EAAGC,CAAQ,GAGxCF,IAAQ,gBAAiB,IAAKE,CAAQ,IAAM,QAChD,OAAOD,EAAS,gBAAiB,EAAGC,CAAQ,CAE9C,CAAE,EAEG,OAAO,KAAMD,IAAW,gBAAiB,GAAK,CAAC,CAAE,GAAG,SAAW,GACnE,OAAOA,EAAS,gBAAiB,EAG7B,OAAO,KAAMA,IAAW,gBAAiB,GAAK,CAAC,CAAE,GAAG,SAAW,GACnE,OAAOA,EAAS,gBAAiB,EAG3BA,CACR,CC7Ce,SAARE,EAAgDC,EAAO,CAC7D,IAAIC,EAAUC,EAA2BF,CAAK,EAC9C,OAAAC,EAAUE,EAAuBF,CAAQ,EAClCA,CACR,CXaO,SAASG,EAAkCC,EAAYC,EAAS,CACtE,IAAMC,EAAyB,uBAAwBD,CAAO,GACxDE,EAAY,KAAK,MACtB,OAAO,aAAa,QAASD,CAAuB,CACrD,EAIME,EACL,KAAK,MAAOJ,GAAcA,EAAW,SAAU,GAAK,EAC/CK,EAAgB,KAAK,MAAOF,GAAaA,EAAU,SAAU,GAAK,EAEpEG,EACJ,OAAKN,GAAcI,GAAkBC,EACpCC,EAAgBC,EAA+BP,CAAW,EAC/CG,EACXG,EAAgBC,EAA+BJ,CAAU,EAGzDG,EAAgBE,EAA+BP,CAAO,EAGhDQ,EAAQ,CACd,cAAAH,EACA,uBAAAJ,CACD,CAAE,CACH",
  "names": ["require_api_fetch", "__commonJSMin", "exports", "module", "index_exports", "__export", "__unstableCreatePersistenceLayer", "create", "import_api_fetch", "debounceAsync", "func", "delayMS", "timeoutId", "activePromise", "args", "resolve", "reject", "thenArgs", "error", "EMPTY_OBJECT", "localStorage", "create", "preloadedData", "localStorageRestoreKey", "requestDebounceMS", "cache", "debouncedApiFetch", "debounceAsync", "apiFetch", "get", "serverData", "localData", "serverTimestamp", "localTimestamp", "set", "newData", "dataWithTimestamp", "moveFeaturePreferences", "state", "sourceStoreName", "preferencesStoreName", "interfaceStoreName", "interfaceFeatures", "sourceFeatures", "featuresToMigrate", "existingPreferences", "updatedInterfaceState", "otherInterfaceState", "otherInterfaceScopes", "updatedSourceState", "otherSourceState", "sourcePreferences", "moveThirdPartyFeaturePreferencesToPreferences", "state", "interfaceStoreName", "preferencesStoreName", "interfaceScopes", "interfaceScopeKeys", "convertedState", "scope", "featuresToMigrate", "otherPreferencesScopes", "otherInterfaceState", "otherInterfaceScopes", "identity", "arg", "moveIndividualPreferenceToPreferences", "state", "sourceStoreName", "scope", "key", "convert", "preferencesStoreName", "sourcePreference", "otherScopes", "otherPreferences", "otherSourceState", "allSourcePreferences", "convertedPreferences", "moveInterfaceEnableItems", "state", "interfaceStoreName", "preferencesStoreName", "sourceEnableItems", "allPreferences", "sourceComplementaryAreas", "preferencesWithConvertedComplementaryAreas", "accumulator", "scope", "data", "sourcePinnedItems", "allConvertedData", "otherInterfaceItems", "convertEditPostPanels", "preferences", "panels", "convertedData", "panelName", "panel", "getLegacyData", "userId", "key", "unparsedData", "convertLegacyData", "data", "moveFeaturePreferences", "moveThirdPartyFeaturePreferencesToPreferences", "moveInterfaceEnableItems", "moveIndividualPreferenceToPreferences", "convertEditPostPanels", "convertLegacyLocalStorageData", "convertComplementaryAreas", "state", "stateAccumulator", "scope", "scopeData", "updatedScopeData", "convertEditorSettings", "data", "newData", "setting", "convertPreferencesPackageData", "data", "newData", "convertComplementaryAreas", "convertEditorSettings", "__unstableCreatePersistenceLayer", "serverData", "userId", "localStorageRestoreKey", "localData", "serverModified", "localModified", "preloadedData", "convertPreferencesPackageData", "convertLegacyLocalStorageData", "create"]
}
