{
  "version": 3,
  "sources": ["wordpress-external:@wordpress/compose", "wordpress-external:@wordpress/data", "vendor-external:react/jsx-runtime", "../../packages/viewport/src/index.js", "../../packages/viewport/src/listener.js", "../../packages/viewport/src/store/index.js", "../../packages/viewport/src/store/reducer.js", "../../packages/viewport/src/store/actions.js", "../../packages/viewport/src/store/selectors.js", "../../packages/viewport/src/if-viewport-matches.js", "../../packages/viewport/src/with-viewport-match.js"],
  "sourcesContent": ["module.exports = window.wp.compose;", "module.exports = window.wp.data;", "module.exports = window.ReactJSXRuntime;", "/**\n * Internal dependencies\n */\nimport addDimensionsEventListener from './listener';\n\nexport { store } from './store';\nexport { default as ifViewportMatches } from './if-viewport-matches';\nexport { default as withViewportMatch } from './with-viewport-match';\n\n/**\n * Hash of breakpoint names with pixel width at which it becomes effective.\n *\n * @see _breakpoints.scss\n *\n * @type {Object}\n */\nconst BREAKPOINTS = {\n\thuge: 1440,\n\twide: 1280,\n\tlarge: 960,\n\tmedium: 782,\n\tsmall: 600,\n\tmobile: 480,\n};\n\n/**\n * Hash of query operators with corresponding condition for media query.\n *\n * @type {Object}\n */\nconst OPERATORS = {\n\t'<': 'max-width',\n\t'>=': 'min-width',\n};\n\naddDimensionsEventListener( BREAKPOINTS, OPERATORS );\n", "/**\n * WordPress dependencies\n */\nimport { debounce } from '@wordpress/compose';\nimport { dispatch } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { store } from './store';\n\nconst addDimensionsEventListener = ( breakpoints, operators ) => {\n\t/**\n\t * Callback invoked when media query state should be updated. Is invoked a\n\t * maximum of one time per call stack.\n\t */\n\tconst setIsMatching = debounce(\n\t\t() => {\n\t\t\tconst values = Object.fromEntries(\n\t\t\t\tqueries.map( ( [ key, query ] ) => [ key, query.matches ] )\n\t\t\t);\n\t\t\tdispatch( store ).setIsMatching( values );\n\t\t},\n\t\t0,\n\t\t{ leading: true }\n\t);\n\n\t/**\n\t * Hash of breakpoint names with generated MediaQueryList for corresponding\n\t * media query.\n\t *\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\n\t * @see https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList\n\t *\n\t * @type {Object<string,MediaQueryList>}\n\t */\n\tconst operatorEntries = Object.entries( operators );\n\tconst queries = Object.entries( breakpoints ).flatMap(\n\t\t( [ name, width ] ) => {\n\t\t\treturn operatorEntries.map( ( [ operator, condition ] ) => {\n\t\t\t\tconst list = window.matchMedia(\n\t\t\t\t\t`(${ condition }: ${ width }px)`\n\t\t\t\t);\n\t\t\t\tlist.addEventListener( 'change', setIsMatching );\n\t\t\t\treturn [ `${ operator } ${ name }`, list ];\n\t\t\t} );\n\t\t}\n\t);\n\n\twindow.addEventListener( 'orientationchange', setIsMatching );\n\n\t// Set initial values.\n\tsetIsMatching();\n\tsetIsMatching.flush();\n};\n\nexport default addDimensionsEventListener;\n", "/**\n * WordPress dependencies\n */\nimport { createReduxStore, register } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport reducer from './reducer';\nimport * as actions from './actions';\nimport * as selectors from './selectors';\n\nconst STORE_NAME = 'core/viewport';\n\n/**\n * Store definition for the viewport namespace.\n *\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore\n *\n * @type {Object}\n */\nexport const store = createReduxStore( STORE_NAME, {\n\treducer,\n\tactions,\n\tselectors,\n} );\n\nregister( store );\n", "/**\n * Reducer returning the viewport state, as keys of breakpoint queries with\n * boolean value representing whether query is matched.\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nfunction reducer( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'SET_IS_MATCHING':\n\t\t\treturn action.values;\n\t}\n\n\treturn state;\n}\n\nexport default reducer;\n", "/**\n * Returns an action object used in signalling that viewport queries have been\n * updated. Values are specified as an object of breakpoint query keys where\n * value represents whether query matches.\n * Ignored from documentation as it is for internal use only.\n *\n * @ignore\n *\n * @param {Object} values Breakpoint query matches.\n *\n * @return {Object} Action object.\n */\nexport function setIsMatching( values ) {\n\treturn {\n\t\ttype: 'SET_IS_MATCHING',\n\t\tvalues,\n\t};\n}\n", "/**\n * Returns true if the viewport matches the given query, or false otherwise.\n *\n * @param {Object} state Viewport state object.\n * @param {string} query Query string. Includes operator and breakpoint name,\n *                       space separated. Operator defaults to >=.\n *\n * @example\n *\n * ```js\n * import { store as viewportStore } from '@wordpress/viewport';\n * import { useSelect } from '@wordpress/data';\n * import { __ } from '@wordpress/i18n';\n * const ExampleComponent = () => {\n *     const isMobile = useSelect(\n *         ( select ) => select( viewportStore ).isViewportMatch( '< small' ),\n *         []\n *     );\n *\n *     return isMobile ? (\n *         <div>{ __( 'Mobile' ) }</div>\n *     ) : (\n *         <div>{ __( 'Not Mobile' ) }</div>\n *     );\n * };\n * ```\n *\n * @return {boolean} Whether viewport matches query.\n */\nexport function isViewportMatch( state, query ) {\n\t// Default to `>=` if no operator is present.\n\tif ( query.indexOf( ' ' ) === -1 ) {\n\t\tquery = '>= ' + query;\n\t}\n\n\treturn !! state[ query ];\n}\n", "/**\n * WordPress dependencies\n */\nimport {\n\tifCondition,\n\tcompose,\n\tcreateHigherOrderComponent,\n} from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport withViewportMatch from './with-viewport-match';\n\n/**\n * Higher-order component creator, creating a new component which renders if\n * the viewport query is satisfied.\n *\n * @see withViewportMatches\n *\n * @param {string} query Viewport query.\n *\n * @example\n *\n * ```jsx\n * function MyMobileComponent() {\n * \treturn <div>I'm only rendered on mobile viewports!</div>;\n * }\n *\n * MyMobileComponent = ifViewportMatches( '< small' )( MyMobileComponent );\n * ```\n *\n * @return {Function} Higher-order component.\n */\nconst ifViewportMatches = ( query ) =>\n\tcreateHigherOrderComponent(\n\t\tcompose( [\n\t\t\twithViewportMatch( {\n\t\t\t\tisViewportMatch: query,\n\t\t\t} ),\n\t\t\tifCondition( ( props ) => props.isViewportMatch ),\n\t\t] ),\n\t\t'ifViewportMatches'\n\t);\n\nexport default ifViewportMatches;\n", "/**\n * WordPress dependencies\n */\nimport {\n\tcreateHigherOrderComponent,\n\tpure,\n\tuseViewportMatch,\n} from '@wordpress/compose';\n\n/**\n * Higher-order component creator, creating a new component which renders with\n * the given prop names, where the value passed to the underlying component is\n * the result of the query assigned as the object's value.\n *\n * @see isViewportMatch\n *\n * @param {Object} queries Object of prop name to viewport query.\n *\n * @example\n *\n * ```jsx\n * function MyComponent( { isMobile } ) {\n * \treturn (\n * \t\t<div>Currently: { isMobile ? 'Mobile' : 'Not Mobile' }</div>\n * \t);\n * }\n *\n * MyComponent = withViewportMatch( { isMobile: '< small' } )( MyComponent );\n * ```\n *\n * @return {Function} Higher-order component.\n */\nconst withViewportMatch = ( queries ) => {\n\tconst queryEntries = Object.entries( queries );\n\tconst useViewPortQueriesResult = () =>\n\t\tObject.fromEntries(\n\t\t\tqueryEntries.map( ( [ key, query ] ) => {\n\t\t\t\tlet [ operator, breakpointName ] = query.split( ' ' );\n\t\t\t\tif ( breakpointName === undefined ) {\n\t\t\t\t\tbreakpointName = operator;\n\t\t\t\t\toperator = '>=';\n\t\t\t\t}\n\t\t\t\t// Hooks should unconditionally execute in the same order,\n\t\t\t\t// we are respecting that as from the static query of the HOC we generate\n\t\t\t\t// a hook that calls other hooks always in the same order (because the query never changes).\n\t\t\t\t// eslint-disable-next-line react-hooks/rules-of-hooks\n\t\t\t\treturn [ key, useViewportMatch( breakpointName, operator ) ];\n\t\t\t} )\n\t\t);\n\treturn createHigherOrderComponent( ( WrappedComponent ) => {\n\t\treturn pure( ( props ) => {\n\t\t\tconst queriesResult = useViewPortQueriesResult();\n\t\t\treturn <WrappedComponent { ...props } { ...queriesResult } />;\n\t\t} );\n\t}, 'withViewportMatch' );\n};\n\nexport default withViewportMatch;\n"],
  "mappings": "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",
  "names": ["require_compose", "__commonJSMin", "exports", "module", "require_data", "__commonJSMin", "exports", "module", "require_jsx_runtime", "__commonJSMin", "exports", "module", "index_exports", "__export", "if_viewport_matches_default", "store", "with_viewport_match_default", "import_compose", "import_data", "import_data", "reducer", "state", "action", "reducer_default", "actions_exports", "__export", "setIsMatching", "values", "selectors_exports", "__export", "isViewportMatch", "state", "query", "STORE_NAME", "store", "reducer_default", "actions_exports", "selectors_exports", "addDimensionsEventListener", "breakpoints", "operators", "setIsMatching", "values", "queries", "key", "query", "store", "operatorEntries", "name", "width", "operator", "condition", "list", "listener_default", "import_compose", "import_jsx_runtime", "import_compose", "withViewportMatch", "queries", "queryEntries", "useViewPortQueriesResult", "key", "query", "operator", "breakpointName", "WrappedComponent", "props", "queriesResult", "with_viewport_match_default", "ifViewportMatches", "query", "with_viewport_match_default", "props", "if_viewport_matches_default", "BREAKPOINTS", "OPERATORS", "listener_default"]
}
