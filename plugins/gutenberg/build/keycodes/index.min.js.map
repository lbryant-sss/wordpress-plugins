{
  "version": 3,
  "sources": ["wordpress-external:@wordpress/i18n", "../../packages/keycodes/src/index.ts", "../../packages/keycodes/src/platform.ts"],
  "sourcesContent": ["module.exports = window.wp.i18n;", "/**\n * Note: The order of the modifier keys in many of the [foo]Shortcut()\n * functions in this file are intentional and should not be changed. They're\n * designed to fit with the standard menu keyboard shortcuts shown in the\n * user's platform.\n *\n * For example, on MacOS menu shortcuts will place Shift before Command, but\n * on Windows Control will usually come first. So don't provide your own\n * shortcut combos directly to keyboardShortcut().\n */\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport { isAppleOS } from './platform';\n\n/**\n * External dependencies\n */\nimport type { KeyboardEvent as ReactKeyboardEvent } from 'react';\n\nexport type WPModifierPart =\n\t| typeof ALT\n\t| typeof CTRL\n\t| typeof COMMAND\n\t| typeof SHIFT;\n\nexport type WPKeycodeModifier =\n\t| 'primary'\n\t| 'primaryShift'\n\t| 'primaryAlt'\n\t| 'secondary'\n\t| 'access'\n\t| 'ctrl'\n\t| 'alt'\n\t| 'ctrlShift'\n\t| 'shift'\n\t| 'shiftAlt'\n\t| 'undefined';\n\n/**\n * An object of handler functions for each of the possible modifier\n * combinations. A handler will return a value for a given key.\n */\nexport type WPModifierHandler< T > = Record< WPKeycodeModifier, T >;\n\nexport type WPKeyHandler< T > = (\n\tcharacter: string,\n\tisApple?: () => boolean\n) => T;\n\nexport type WPEventKeyHandler = (\n\tevent: ReactKeyboardEvent< HTMLElement > | KeyboardEvent,\n\tcharacter: string,\n\tisApple?: () => boolean\n) => boolean;\n\nexport type WPModifier = ( isApple: () => boolean ) => WPModifierPart[];\n\n/**\n * Keycode for BACKSPACE key.\n */\nexport const BACKSPACE = 8;\n\n/**\n * Keycode for TAB key.\n */\nexport const TAB = 9;\n\n/**\n * Keycode for ENTER key.\n */\nexport const ENTER = 13;\n\n/**\n * Keycode for ESCAPE key.\n */\nexport const ESCAPE = 27;\n\n/**\n * Keycode for SPACE key.\n */\nexport const SPACE = 32;\n\n/**\n * Keycode for PAGEUP key.\n */\nexport const PAGEUP = 33;\n\n/**\n * Keycode for PAGEDOWN key.\n */\nexport const PAGEDOWN = 34;\n\n/**\n * Keycode for END key.\n */\nexport const END = 35;\n\n/**\n * Keycode for HOME key.\n */\nexport const HOME = 36;\n\n/**\n * Keycode for LEFT key.\n */\nexport const LEFT = 37;\n\n/**\n * Keycode for UP key.\n */\nexport const UP = 38;\n\n/**\n * Keycode for RIGHT key.\n */\nexport const RIGHT = 39;\n\n/**\n * Keycode for DOWN key.\n */\nexport const DOWN = 40;\n\n/**\n * Keycode for DELETE key.\n */\nexport const DELETE = 46;\n\n/**\n * Keycode for F10 key.\n */\nexport const F10 = 121;\n\n/**\n * Keycode for ALT key.\n */\nexport const ALT = 'alt';\n\n/**\n * Keycode for CTRL key.\n */\nexport const CTRL = 'ctrl';\n\n/**\n * Keycode for COMMAND/META key.\n */\nexport const COMMAND = 'meta';\n\n/**\n * Keycode for SHIFT key.\n */\nexport const SHIFT = 'shift';\n\n/**\n * Keycode for ZERO key.\n */\nexport const ZERO = 48;\n\nexport { isAppleOS };\n\n/**\n * Capitalise the first character of a string.\n * @param string String to capitalise.\n * @return Capitalised string.\n */\nfunction capitaliseFirstCharacter( string: string ): string {\n\treturn string.length < 2\n\t\t? string.toUpperCase()\n\t\t: string.charAt( 0 ).toUpperCase() + string.slice( 1 );\n}\n\n/**\n * Map the values of an object with a specified callback and return the result object.\n *\n * @template T The object type\n * @template R The return type of the mapping function\n *\n * @param    object Object to map values of.\n * @param    mapFn  Mapping function to apply to each value.\n * @return Object with the same keys and transformed values.\n */\nfunction mapValues< T extends Record< string, any >, R >(\n\tobject: T,\n\tmapFn: ( value: T[ keyof T ] ) => R\n): Record< keyof T, R > {\n\treturn Object.fromEntries(\n\t\tObject.entries( object ).map( ( [ key, value ] ) => [\n\t\t\tkey,\n\t\t\tmapFn( value ),\n\t\t] )\n\t) as Record< keyof T, R >;\n}\n\n/**\n * Object that contains functions that return the available modifier\n * depending on platform.\n */\nexport const modifiers: WPModifierHandler< WPModifier > = {\n\tprimary: ( _isApple ) => ( _isApple() ? [ COMMAND ] : [ CTRL ] ),\n\tprimaryShift: ( _isApple ) =>\n\t\t_isApple() ? [ SHIFT, COMMAND ] : [ CTRL, SHIFT ],\n\tprimaryAlt: ( _isApple ) =>\n\t\t_isApple() ? [ ALT, COMMAND ] : [ CTRL, ALT ],\n\tsecondary: ( _isApple ) =>\n\t\t_isApple() ? [ SHIFT, ALT, COMMAND ] : [ CTRL, SHIFT, ALT ],\n\taccess: ( _isApple ) => ( _isApple() ? [ CTRL, ALT ] : [ SHIFT, ALT ] ),\n\tctrl: () => [ CTRL ],\n\talt: () => [ ALT ],\n\tctrlShift: () => [ CTRL, SHIFT ],\n\tshift: () => [ SHIFT ],\n\tshiftAlt: () => [ SHIFT, ALT ],\n\tundefined: () => [],\n};\n\n/**\n * An object that contains functions to get raw shortcuts.\n *\n * These are intended for user with the KeyboardShortcuts.\n *\n * @example\n * ```js\n * // Assuming macOS:\n * rawShortcut.primary( 'm' )\n * // \"meta+m\"\"\n * ```\n */\nexport const rawShortcut: WPModifierHandler< WPKeyHandler< string > > =\n\t/* @__PURE__ */\n\tmapValues( modifiers, ( modifier: WPModifier ) => {\n\t\treturn ( character: string, _isApple = isAppleOS ) => {\n\t\t\treturn [ ...modifier( _isApple ), character.toLowerCase() ].join(\n\t\t\t\t'+'\n\t\t\t);\n\t\t};\n\t} );\n\n/**\n * Return an array of the parts of a keyboard shortcut chord for display.\n *\n * @example\n * ```js\n * // Assuming macOS:\n * displayShortcutList.primary( 'm' );\n * // [ \"\u2318\", \"M\" ]\n * ```\n *\n * Keyed map of functions to shortcut sequences.\n */\nexport const displayShortcutList: WPModifierHandler<\n\tWPKeyHandler< string[] >\n> =\n\t/* @__PURE__ */\n\tmapValues(\n\t\tmodifiers,\n\t\t( modifier: WPModifier ): WPKeyHandler< string[] > => {\n\t\t\treturn ( character: string, _isApple = isAppleOS ) => {\n\t\t\t\tconst isApple = _isApple();\n\t\t\t\tconst replacementKeyMap = {\n\t\t\t\t\t[ ALT ]: isApple ? '\u2325' : 'Alt',\n\t\t\t\t\t[ CTRL ]: isApple ? '\u2303' : 'Ctrl', // Make sure \u2303 is the U+2303 UP ARROWHEAD unicode character and not the caret character.\n\t\t\t\t\t[ COMMAND ]: '\u2318',\n\t\t\t\t\t[ SHIFT ]: isApple ? '\u21E7' : 'Shift',\n\t\t\t\t};\n\n\t\t\t\tconst modifierKeys = modifier( _isApple ).reduce< string[] >(\n\t\t\t\t\t( accumulator, key ) => {\n\t\t\t\t\t\tconst replacementKey = replacementKeyMap[ key ] ?? key;\n\t\t\t\t\t\t// If on the Mac, adhere to platform convention and don't show plus between keys.\n\t\t\t\t\t\tif ( isApple ) {\n\t\t\t\t\t\t\treturn [ ...accumulator, replacementKey ];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn [ ...accumulator, replacementKey, '+' ];\n\t\t\t\t\t},\n\t\t\t\t\t[]\n\t\t\t\t);\n\n\t\t\t\treturn [\n\t\t\t\t\t...modifierKeys,\n\t\t\t\t\tcapitaliseFirstCharacter( character ),\n\t\t\t\t];\n\t\t\t};\n\t\t}\n\t);\n\n/**\n * An object that contains functions to display shortcuts.\n *\n * @example\n * ```js\n * // Assuming macOS:\n * displayShortcut.primary( 'm' );\n * // \"\u2318M\"\n * ```\n *\n * Keyed map of functions to display shortcuts.\n */\nexport const displayShortcut: WPModifierHandler< WPKeyHandler< string > > =\n\t/* @__PURE__ */\n\tmapValues(\n\t\tdisplayShortcutList,\n\t\t( shortcutList: WPKeyHandler< string[] > ): WPKeyHandler< string > => {\n\t\t\treturn ( character: string, _isApple = isAppleOS ) =>\n\t\t\t\tshortcutList( character, _isApple ).join( '' );\n\t\t}\n\t);\n\n/**\n * An object that contains functions to return an aria label for a keyboard\n * shortcut.\n *\n * @example\n * ```js\n * // Assuming macOS:\n * shortcutAriaLabel.primary( '.' );\n * // \"Command + Period\"\n * ```\n *\n * Keyed map of functions to shortcut ARIA labels.\n */\nexport const shortcutAriaLabel: WPModifierHandler< WPKeyHandler< string > > =\n\t/* @__PURE__ */\n\tmapValues( modifiers, ( modifier: WPModifier ): WPKeyHandler< string > => {\n\t\treturn ( character: string, _isApple = isAppleOS ) => {\n\t\t\tconst isApple = _isApple();\n\t\t\tconst replacementKeyMap: Record< string, string > = {\n\t\t\t\t[ SHIFT ]: 'Shift',\n\t\t\t\t[ COMMAND ]: isApple ? 'Command' : 'Control',\n\t\t\t\t[ CTRL ]: 'Control',\n\t\t\t\t[ ALT ]: isApple ? 'Option' : 'Alt',\n\t\t\t\t/* translators: comma as in the character ',' */\n\t\t\t\t',': __( 'Comma' ),\n\t\t\t\t/* translators: period as in the character '.' */\n\t\t\t\t'.': __( 'Period' ),\n\t\t\t\t/* translators: backtick as in the character '`' */\n\t\t\t\t'`': __( 'Backtick' ),\n\t\t\t\t/* translators: tilde as in the character '~' */\n\t\t\t\t'~': __( 'Tilde' ),\n\t\t\t};\n\n\t\t\treturn [ ...modifier( _isApple ), character ]\n\t\t\t\t.map( ( key ) =>\n\t\t\t\t\tcapitaliseFirstCharacter( replacementKeyMap[ key ] ?? key )\n\t\t\t\t)\n\t\t\t\t.join( isApple ? ' ' : ' + ' );\n\t\t};\n\t} );\n\n/**\n * From a given KeyboardEvent, returns an array of active modifier constants for\n * the event.\n *\n * @param event Keyboard event.\n *\n * @return Active modifier constants.\n */\nfunction getEventModifiers(\n\tevent: ReactKeyboardEvent< HTMLElement > | KeyboardEvent\n): WPModifierPart[] {\n\treturn ( [ ALT, CTRL, COMMAND, SHIFT ] as const ).filter(\n\t\t( key ) =>\n\t\t\t( event as KeyboardEvent )[\n\t\t\t\t`${ key }Key` as 'altKey' | 'ctrlKey' | 'metaKey' | 'shiftKey'\n\t\t\t]\n\t);\n}\n\n/**\n * An object that contains functions to check if a keyboard event matches a\n * predefined shortcut combination.\n *\n * @example\n * ```js\n * // Assuming an event for \u2318M key press:\n * isKeyboardEvent.primary( event, 'm' );\n * // true\n * ```\n *\n * Keyed map of functions to match events.\n */\nexport const isKeyboardEvent: WPModifierHandler< WPEventKeyHandler > =\n\t/* @__PURE__ */\n\tmapValues( modifiers, ( getModifiers: WPModifier ): WPEventKeyHandler => {\n\t\treturn ( event, character, _isApple = isAppleOS ) => {\n\t\t\tconst mods = getModifiers( _isApple );\n\t\t\tconst eventMods = getEventModifiers( event );\n\n\t\t\tconst replacementWithShiftKeyMap: Record< string, string > = {\n\t\t\t\tComma: ',',\n\t\t\t\tBackslash: '\\\\',\n\t\t\t\t// Windows returns `\\` for both IntlRo and IntlYen.\n\t\t\t\tIntlRo: '\\\\',\n\t\t\t\tIntlYen: '\\\\',\n\t\t\t};\n\n\t\t\tconst modsDiff = mods.filter(\n\t\t\t\t( mod ) => ! eventMods.includes( mod )\n\t\t\t);\n\t\t\tconst eventModsDiff = eventMods.filter(\n\t\t\t\t( mod ) => ! mods.includes( mod )\n\t\t\t);\n\n\t\t\tif ( modsDiff.length > 0 || eventModsDiff.length > 0 ) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tlet key = event.key.toLowerCase();\n\n\t\t\tif ( ! character ) {\n\t\t\t\treturn mods.includes( key as WPModifierPart );\n\t\t\t}\n\n\t\t\tif ( event.altKey && character.length === 1 ) {\n\t\t\t\tkey = String.fromCharCode( event.keyCode ).toLowerCase();\n\t\t\t}\n\n\t\t\t// `event.key` returns the value of the key pressed, taking into the state of\n\t\t\t// modifier keys such as `Shift`. If the shift key is pressed, a different\n\t\t\t// value may be returned depending on the keyboard layout. It is necessary to\n\t\t\t// convert to the physical key value that don't take into account keyboard\n\t\t\t// layout or modifier key state.\n\t\t\tif (\n\t\t\t\tevent.shiftKey &&\n\t\t\t\tcharacter.length === 1 &&\n\t\t\t\treplacementWithShiftKeyMap[ event.code ]\n\t\t\t) {\n\t\t\t\tkey = replacementWithShiftKeyMap[ event.code ];\n\t\t\t}\n\n\t\t\t// For backwards compatibility.\n\t\t\tif ( character === 'del' ) {\n\t\t\t\tcharacter = 'delete';\n\t\t\t}\n\n\t\t\treturn key === character.toLowerCase();\n\t\t};\n\t} );\n", "/**\n * Return true if platform is MacOS.\n *\n * @param _window window object by default; used for DI testing.\n *\n * @return True if MacOS; false otherwise.\n */\nexport function isAppleOS( _window?: Window ): boolean {\n\tif ( ! _window ) {\n\t\tif ( typeof window === 'undefined' ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t_window = window;\n\t}\n\n\tconst { platform } = _window.navigator;\n\n\treturn (\n\t\tplatform.indexOf( 'Mac' ) !== -1 ||\n\t\t[ 'iPad', 'iPhone' ].includes( platform )\n\t);\n}\n"],
  "mappings": "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",
  "names": ["require_i18n", "__commonJSMin", "exports", "module", "index_exports", "__export", "ALT", "BACKSPACE", "COMMAND", "CTRL", "DELETE", "DOWN", "END", "ENTER", "ESCAPE", "F10", "HOME", "LEFT", "PAGEDOWN", "PAGEUP", "RIGHT", "SHIFT", "SPACE", "TAB", "UP", "ZERO", "displayShortcut", "displayShortcutList", "isAppleOS", "isKeyboardEvent", "modifiers", "rawShortcut", "shortcutAriaLabel", "import_i18n", "isAppleOS", "_window", "platform", "BACKSPACE", "TAB", "ENTER", "ESCAPE", "SPACE", "PAGEUP", "PAGEDOWN", "END", "HOME", "LEFT", "UP", "RIGHT", "DOWN", "DELETE", "F10", "ALT", "CTRL", "COMMAND", "SHIFT", "ZERO", "capitaliseFirstCharacter", "string", "mapValues", "object", "mapFn", "key", "value", "modifiers", "_isApple", "rawShortcut", "modifier", "character", "isAppleOS", "displayShortcutList", "isApple", "replacementKeyMap", "accumulator", "replacementKey", "displayShortcut", "shortcutList", "shortcutAriaLabel", "getEventModifiers", "event", "isKeyboardEvent", "getModifiers", "mods", "eventMods", "replacementWithShiftKeyMap", "modsDiff", "mod", "eventModsDiff"]
}
