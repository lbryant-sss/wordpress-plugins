{
  "version": 3,
  "sources": ["../../packages/block-serialization-spec-parser/parser.js"],
  "sourcesContent": ["/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { Block_List: peg$parseBlock_List },\n      peg$startRuleFunction  = peg$parseBlock_List,\n\n      peg$c0 = peg$anyExpectation(),\n      peg$c1 = function(pre, b, html) { /** <?php return array( $b, $html ); ?> **/ return [ b, html ] },\n      peg$c2 = function(pre, bs, post) { /** <?php return peg_join_blocks( $pre, $bs, $post ); ?> **/\n          return joinBlocks( pre, bs, post );\n        },\n      peg$c3 = \"<!--\",\n      peg$c4 = peg$literalExpectation(\"<!--\", false),\n      peg$c5 = \"wp:\",\n      peg$c6 = peg$literalExpectation(\"wp:\", false),\n      peg$c7 = function(blockName, a) {\n          /** <?php return $a; ?> **/\n          return a;\n        },\n      peg$c8 = \"/-->\",\n      peg$c9 = peg$literalExpectation(\"/-->\", false),\n      peg$c10 = function(blockName, attrs) {\n          /** <?php\n          return array(\n            'blockName'    => $blockName,\n            'attrs'        => empty( $attrs ) ? peg_empty_attrs() : $attrs,\n            'innerBlocks'  => array(),\n            'innerHTML'    => '',\n            'innerContent' => array(),\n          );\n          ?> **/\n\n          return {\n            blockName: blockName,\n            attrs: attrs || {},\n            innerBlocks: [],\n            innerHTML: '',\n            innerContent: []\n          };\n        },\n      peg$c11 = function(s, children, e) {\n          /** <?php\n          list( $innerHTML, $innerBlocks, $innerContent ) = peg_process_inner_content( $children );\n\n          return array(\n            'blockName'    => $s['blockName'],\n            'attrs'        => empty( $s['attrs'] ) ? peg_empty_attrs() : $s['attrs'],\n            'innerBlocks'  => $innerBlocks,\n            'innerHTML'    => $innerHTML,\n            'innerContent' => $innerContent,\n          );\n          ?> **/\n\n          var innerParts = processInnerContent( children );\n          var innerHTML = innerParts[ 0 ];\n          var innerBlocks = innerParts[ 1 ];\n          var innerContent = innerParts[ 2 ];\n\n          return {\n            blockName: s.blockName,\n            attrs: s.attrs,\n            innerBlocks: innerBlocks,\n            innerHTML: innerHTML,\n            innerContent: innerContent,\n          };\n        },\n      peg$c12 = \"-->\",\n      peg$c13 = peg$literalExpectation(\"-->\", false),\n      peg$c14 = function(blockName, attrs) {\n          /** <?php\n          return array(\n            'blockName' => $blockName,\n            'attrs'     => isset( $attrs ) ? $attrs : array(),\n          );\n          ?> **/\n\n          return {\n            blockName: blockName,\n            attrs: attrs || {}\n          };\n        },\n      peg$c15 = \"/wp:\",\n      peg$c16 = peg$literalExpectation(\"/wp:\", false),\n      peg$c17 = function(blockName) {\n          /** <?php\n          return array(\n            'blockName' => $blockName,\n          );\n          ?> **/\n\n          return {\n            blockName: blockName\n          };\n        },\n      peg$c18 = \"/\",\n      peg$c19 = peg$literalExpectation(\"/\", false),\n      peg$c20 = function(type) {\n          /** <?php return \"core/$type\"; ?> **/\n          return 'core/' + type;\n        },\n      peg$c21 = /^[a-z]/,\n      peg$c22 = peg$classExpectation([[\"a\", \"z\"]], false, false),\n      peg$c23 = /^[a-z0-9_\\-]/,\n      peg$c24 = peg$classExpectation([[\"a\", \"z\"], [\"0\", \"9\"], \"_\", \"-\"], false, false),\n      peg$c25 = peg$otherExpectation(\"JSON-encoded attributes embedded in a block's opening comment\"),\n      peg$c26 = \"{\",\n      peg$c27 = peg$literalExpectation(\"{\", false),\n      peg$c28 = \"}\",\n      peg$c29 = peg$literalExpectation(\"}\", false),\n      peg$c30 = \"\",\n      peg$c31 = function(attrs) {\n          /** <?php return json_decode( $attrs, true ); ?> **/\n          return maybeJSON( attrs );\n        },\n      peg$c32 = /^[ \\t\\r\\n]/,\n      peg$c33 = peg$classExpectation([\" \", \"\\t\", \"\\r\", \"\\n\"], false, false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parseBlock_List() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = [];\n    s3 = peg$currPos;\n    s4 = peg$currPos;\n    peg$silentFails++;\n    s5 = peg$parseBlock();\n    peg$silentFails--;\n    if (s5 === peg$FAILED) {\n      s4 = void 0;\n    } else {\n      peg$currPos = s4;\n      s4 = peg$FAILED;\n    }\n    if (s4 !== peg$FAILED) {\n      if (input.length > peg$currPos) {\n        s5 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c0); }\n      }\n      if (s5 !== peg$FAILED) {\n        s4 = [s4, s5];\n        s3 = s4;\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s3;\n      s3 = peg$FAILED;\n    }\n    while (s3 !== peg$FAILED) {\n      s2.push(s3);\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseBlock();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c0); }\n        }\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n    }\n    if (s2 !== peg$FAILED) {\n      s1 = input.substring(s1, peg$currPos);\n    } else {\n      s1 = s2;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parseBlock();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$currPos;\n        s6 = [];\n        s7 = peg$currPos;\n        s8 = peg$currPos;\n        peg$silentFails++;\n        s9 = peg$parseBlock();\n        peg$silentFails--;\n        if (s9 === peg$FAILED) {\n          s8 = void 0;\n        } else {\n          peg$currPos = s8;\n          s8 = peg$FAILED;\n        }\n        if (s8 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s9 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s9 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c0); }\n          }\n          if (s9 !== peg$FAILED) {\n            s8 = [s8, s9];\n            s7 = s8;\n          } else {\n            peg$currPos = s7;\n            s7 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s7;\n          s7 = peg$FAILED;\n        }\n        while (s7 !== peg$FAILED) {\n          s6.push(s7);\n          s7 = peg$currPos;\n          s8 = peg$currPos;\n          peg$silentFails++;\n          s9 = peg$parseBlock();\n          peg$silentFails--;\n          if (s9 === peg$FAILED) {\n            s8 = void 0;\n          } else {\n            peg$currPos = s8;\n            s8 = peg$FAILED;\n          }\n          if (s8 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s9 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s9 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c0); }\n            }\n            if (s9 !== peg$FAILED) {\n              s8 = [s8, s9];\n              s7 = s8;\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s7;\n            s7 = peg$FAILED;\n          }\n        }\n        if (s6 !== peg$FAILED) {\n          s5 = input.substring(s5, peg$currPos);\n        } else {\n          s5 = s6;\n        }\n        if (s5 !== peg$FAILED) {\n          peg$savedPos = s3;\n          s4 = peg$c1(s1, s4, s5);\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parseBlock();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$currPos;\n          s6 = [];\n          s7 = peg$currPos;\n          s8 = peg$currPos;\n          peg$silentFails++;\n          s9 = peg$parseBlock();\n          peg$silentFails--;\n          if (s9 === peg$FAILED) {\n            s8 = void 0;\n          } else {\n            peg$currPos = s8;\n            s8 = peg$FAILED;\n          }\n          if (s8 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s9 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s9 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c0); }\n            }\n            if (s9 !== peg$FAILED) {\n              s8 = [s8, s9];\n              s7 = s8;\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s7;\n            s7 = peg$FAILED;\n          }\n          while (s7 !== peg$FAILED) {\n            s6.push(s7);\n            s7 = peg$currPos;\n            s8 = peg$currPos;\n            peg$silentFails++;\n            s9 = peg$parseBlock();\n            peg$silentFails--;\n            if (s9 === peg$FAILED) {\n              s8 = void 0;\n            } else {\n              peg$currPos = s8;\n              s8 = peg$FAILED;\n            }\n            if (s8 !== peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s9 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s9 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c0); }\n              }\n              if (s9 !== peg$FAILED) {\n                s8 = [s8, s9];\n                s7 = s8;\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n          }\n          if (s6 !== peg$FAILED) {\n            s5 = input.substring(s5, peg$currPos);\n          } else {\n            s5 = s6;\n          }\n          if (s5 !== peg$FAILED) {\n            peg$savedPos = s3;\n            s4 = peg$c1(s1, s4, s5);\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = [];\n        if (input.length > peg$currPos) {\n          s5 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c0); }\n        }\n        while (s5 !== peg$FAILED) {\n          s4.push(s5);\n          if (input.length > peg$currPos) {\n            s5 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s5 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c0); }\n          }\n        }\n        if (s4 !== peg$FAILED) {\n          s3 = input.substring(s3, peg$currPos);\n        } else {\n          s3 = s4;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c2(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseBlock() {\n    var s0;\n\n    s0 = peg$parseBlock_Void();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseBlock_Balanced();\n    }\n\n    return s0;\n  }\n\n  function peg$parseBlock_Void() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4) === peg$c3) {\n      s1 = peg$c3;\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c4); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3) === peg$c5) {\n          s3 = peg$c5;\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c6); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseBlock_Name();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$currPos;\n              s7 = peg$parseBlock_Attributes();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c7(s4, s7);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 4) === peg$c8) {\n                  s7 = peg$c8;\n                  peg$currPos += 4;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c9); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c10(s4, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseBlock_Balanced() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseBlock_Start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseBlock();\n      if (s3 === peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = [];\n        s5 = peg$currPos;\n        s6 = peg$currPos;\n        peg$silentFails++;\n        s7 = peg$parseBlock();\n        peg$silentFails--;\n        if (s7 === peg$FAILED) {\n          s6 = void 0;\n        } else {\n          peg$currPos = s6;\n          s6 = peg$FAILED;\n        }\n        if (s6 !== peg$FAILED) {\n          s7 = peg$currPos;\n          peg$silentFails++;\n          s8 = peg$parseBlock_End();\n          peg$silentFails--;\n          if (s8 === peg$FAILED) {\n            s7 = void 0;\n          } else {\n            peg$currPos = s7;\n            s7 = peg$FAILED;\n          }\n          if (s7 !== peg$FAILED) {\n            if (input.length > peg$currPos) {\n              s8 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s8 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c0); }\n            }\n            if (s8 !== peg$FAILED) {\n              s6 = [s6, s7, s8];\n              s5 = s6;\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n        if (s5 !== peg$FAILED) {\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$currPos;\n            peg$silentFails++;\n            s7 = peg$parseBlock();\n            peg$silentFails--;\n            if (s7 === peg$FAILED) {\n              s6 = void 0;\n            } else {\n              peg$currPos = s6;\n              s6 = peg$FAILED;\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$currPos;\n              peg$silentFails++;\n              s8 = peg$parseBlock_End();\n              peg$silentFails--;\n              if (s8 === peg$FAILED) {\n                s7 = void 0;\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n              if (s7 !== peg$FAILED) {\n                if (input.length > peg$currPos) {\n                  s8 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s8 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c0); }\n                }\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n        } else {\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s3 = input.substring(s3, peg$currPos);\n        } else {\n          s3 = s4;\n        }\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseBlock();\n        if (s3 === peg$FAILED) {\n          s3 = peg$currPos;\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$currPos;\n          peg$silentFails++;\n          s7 = peg$parseBlock();\n          peg$silentFails--;\n          if (s7 === peg$FAILED) {\n            s6 = void 0;\n          } else {\n            peg$currPos = s6;\n            s6 = peg$FAILED;\n          }\n          if (s6 !== peg$FAILED) {\n            s7 = peg$currPos;\n            peg$silentFails++;\n            s8 = peg$parseBlock_End();\n            peg$silentFails--;\n            if (s8 === peg$FAILED) {\n              s7 = void 0;\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n            if (s7 !== peg$FAILED) {\n              if (input.length > peg$currPos) {\n                s8 = input.charAt(peg$currPos);\n                peg$currPos++;\n              } else {\n                s8 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c0); }\n              }\n              if (s8 !== peg$FAILED) {\n                s6 = [s6, s7, s8];\n                s5 = s6;\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          if (s5 !== peg$FAILED) {\n            while (s5 !== peg$FAILED) {\n              s4.push(s5);\n              s5 = peg$currPos;\n              s6 = peg$currPos;\n              peg$silentFails++;\n              s7 = peg$parseBlock();\n              peg$silentFails--;\n              if (s7 === peg$FAILED) {\n                s6 = void 0;\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$currPos;\n                peg$silentFails++;\n                s8 = peg$parseBlock_End();\n                peg$silentFails--;\n                if (s8 === peg$FAILED) {\n                  s7 = void 0;\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n                if (s7 !== peg$FAILED) {\n                  if (input.length > peg$currPos) {\n                    s8 = input.charAt(peg$currPos);\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c0); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s6 = [s6, s7, s8];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            }\n          } else {\n            s4 = peg$FAILED;\n          }\n          if (s4 !== peg$FAILED) {\n            s3 = input.substring(s3, peg$currPos);\n          } else {\n            s3 = s4;\n          }\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseBlock_End();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c11(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseBlock_Start() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4) === peg$c3) {\n      s1 = peg$c3;\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c4); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3) === peg$c5) {\n          s3 = peg$c5;\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c6); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseBlock_Name();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$currPos;\n              s7 = peg$parseBlock_Attributes();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  peg$savedPos = s6;\n                  s7 = peg$c7(s4, s7);\n                  s6 = s7;\n                } else {\n                  peg$currPos = s6;\n                  s6 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s6;\n                s6 = peg$FAILED;\n              }\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3) === peg$c12) {\n                  s7 = peg$c12;\n                  peg$currPos += 3;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c13); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c14(s4, s6);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseBlock_End() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4) === peg$c3) {\n      s1 = peg$c3;\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c4); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 4) === peg$c15) {\n          s3 = peg$c15;\n          peg$currPos += 4;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c16); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseBlock_Name();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 3) === peg$c12) {\n                s6 = peg$c12;\n                peg$currPos += 3;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c13); }\n              }\n              if (s6 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c17(s4);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseBlock_Name() {\n    var s0;\n\n    s0 = peg$parseNamespaced_Block_Name();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseCore_Block_Name();\n    }\n\n    return s0;\n  }\n\n  function peg$parseNamespaced_Block_Name() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseBlock_Name_Part();\n    if (s2 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s3 = peg$c18;\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c19); }\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseBlock_Name_Part();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseCore_Block_Name() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseBlock_Name_Part();\n    if (s2 !== peg$FAILED) {\n      s1 = input.substring(s1, peg$currPos);\n    } else {\n      s1 = s2;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c20(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseBlock_Name_Part() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (peg$c21.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c22); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = [];\n      if (peg$c23.test(input.charAt(peg$currPos))) {\n        s4 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s4 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c24); }\n      }\n      while (s4 !== peg$FAILED) {\n        s3.push(s4);\n        if (peg$c23.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c24); }\n        }\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s0 = input.substring(s0, peg$currPos);\n    } else {\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseBlock_Attributes() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 123) {\n      s3 = peg$c26;\n      peg$currPos++;\n    } else {\n      s3 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c27); }\n    }\n    if (s3 !== peg$FAILED) {\n      s4 = [];\n      s5 = peg$currPos;\n      s6 = peg$currPos;\n      peg$silentFails++;\n      s7 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 125) {\n        s8 = peg$c28;\n        peg$currPos++;\n      } else {\n        s8 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c29); }\n      }\n      if (s8 !== peg$FAILED) {\n        s9 = peg$parse__();\n        if (s9 !== peg$FAILED) {\n          s10 = peg$c30;\n          if (s10 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 47) {\n              s11 = peg$c18;\n              peg$currPos++;\n            } else {\n              s11 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c19); }\n            }\n            if (s11 === peg$FAILED) {\n              s11 = null;\n            }\n            if (s11 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 3) === peg$c12) {\n                s12 = peg$c12;\n                peg$currPos += 3;\n              } else {\n                s12 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c13); }\n              }\n              if (s12 !== peg$FAILED) {\n                s8 = [s8, s9, s10, s11, s12];\n                s7 = s8;\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s7;\n            s7 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s7;\n          s7 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s7;\n        s7 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s7 === peg$FAILED) {\n        s6 = void 0;\n      } else {\n        peg$currPos = s6;\n        s6 = peg$FAILED;\n      }\n      if (s6 !== peg$FAILED) {\n        if (input.length > peg$currPos) {\n          s7 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s7 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c0); }\n        }\n        if (s7 !== peg$FAILED) {\n          s6 = [s6, s7];\n          s5 = s6;\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s5;\n        s5 = peg$FAILED;\n      }\n      while (s5 !== peg$FAILED) {\n        s4.push(s5);\n        s5 = peg$currPos;\n        s6 = peg$currPos;\n        peg$silentFails++;\n        s7 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 125) {\n          s8 = peg$c28;\n          peg$currPos++;\n        } else {\n          s8 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c29); }\n        }\n        if (s8 !== peg$FAILED) {\n          s9 = peg$parse__();\n          if (s9 !== peg$FAILED) {\n            s10 = peg$c30;\n            if (s10 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 47) {\n                s11 = peg$c18;\n                peg$currPos++;\n              } else {\n                s11 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c19); }\n              }\n              if (s11 === peg$FAILED) {\n                s11 = null;\n              }\n              if (s11 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3) === peg$c12) {\n                  s12 = peg$c12;\n                  peg$currPos += 3;\n                } else {\n                  s12 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c13); }\n                }\n                if (s12 !== peg$FAILED) {\n                  s8 = [s8, s9, s10, s11, s12];\n                  s7 = s8;\n                } else {\n                  peg$currPos = s7;\n                  s7 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s7;\n                s7 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s7;\n              s7 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s7;\n            s7 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s7;\n          s7 = peg$FAILED;\n        }\n        peg$silentFails--;\n        if (s7 === peg$FAILED) {\n          s6 = void 0;\n        } else {\n          peg$currPos = s6;\n          s6 = peg$FAILED;\n        }\n        if (s6 !== peg$FAILED) {\n          if (input.length > peg$currPos) {\n            s7 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s7 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c0); }\n          }\n          if (s7 !== peg$FAILED) {\n            s6 = [s6, s7];\n            s5 = s6;\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s5;\n          s5 = peg$FAILED;\n        }\n      }\n      if (s4 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 125) {\n          s5 = peg$c28;\n          peg$currPos++;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c29); }\n        }\n        if (s5 !== peg$FAILED) {\n          s3 = [s3, s4, s5];\n          s2 = s3;\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      s1 = input.substring(s1, peg$currPos);\n    } else {\n      s1 = s2;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c31(s1);\n    }\n    s0 = s1;\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c25); }\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    if (peg$c32.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c33); }\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$c32.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c33); }\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n\n\n  /*\n   *\n   *    _____       _             _\n   *   / ____|     | |           | |\n   *  | |  __ _   _| |_ ___ _ __ | |__   ___ _ __ __ _\n   *  | | |_ | | | | __/ _ \\ '_ \\| '_ \\ / _ \\ '__/ _` |\n   *  | |__| | |_| | ||  __/ | | | |_) |  __/ | | (_| |\n   *   \\_____|\\__,_|\\__\\___|_| |_|_.__/ \\___|_|  \\__, |\n   *                                              __/ |\n   *                  GRAMMAR                    |___/\n   *\n   *\n   * Welcome to the grammar file for Gutenberg posts!\n   *\n   * Please don't be distracted by the functions at the top\n   * here - they're just helpers for the grammar below. We\n   * try to keep them as minimal and simple as possible,\n   * but the parser generator forces us to declare them at\n   * the beginning of the file.\n   *\n   * What follows is the official specification grammar for\n   * documents created or edited in Gutenberg. It starts at\n   * the top-level rule `Block_List`\n   *\n   * The grammar is defined by a series of _rules_ and ways\n   * to return matches on those rules. It's a _PEG_, a\n   * parsing expression grammar, which simply means that for\n   * each of our rules we have a set of sub-rules to match\n   * on and the generated parser will try them in order\n   * until it finds the first match.\n   *\n   * This grammar is a _specification_ (with as little actual\n   * code as we can get away with) which is used by the\n   * parser generator to generate the actual _parser_ which\n   * is used by Gutenberg. We generate two parsers: one in\n   * JavaScript for use the browser and one in PHP for\n   * WordPress itself. PEG parser generators are available\n   * in many languages, though different libraries may require\n   * some translation of this grammar into their syntax.\n   *\n   * For more information:\n   * @see https://pegjs.org\n   * @see https://en.wikipedia.org/wiki/Parsing_expression_grammar\n   *\n   */\n\n  /** <?php\n  // The `maybeJSON` function is not needed in PHP because its return semantics\n  // are the same as `json_decode`\n\n  if ( ! function_exists( 'peg_empty_attrs' ) ) {\n       function peg_empty_attrs() {\n           static $empty_attrs = null;\n\n           if ( null === $empty_attrs ) {\n               $empty_attrs = json_decode( '{}', true );\n           }\n\n           return $empty_attrs;\n       }\n  }\n\n  // array arguments are backwards because of PHP\n  if ( ! function_exists( 'peg_process_inner_content' ) ) {\n      function peg_process_inner_content( $array ) {\n          $html = '';\n          $blocks = array();\n          $content = array();\n\n          foreach ( $array as $item ) {\n              if ( is_string( $item ) ) {\n                  $html .= $item;\n                  $content[] = $item;\n              } else {\n                  $blocks[] = $item;\n                  $content[] = null;\n              }\n          }\n\n          return array( $html, $blocks, $content );\n      }\n  }\n\n  if ( ! function_exists( 'peg_join_blocks' ) ) {\n      function peg_join_blocks( $pre, $tokens, $post ) {\n          $blocks = array();\n\n          if ( ! empty( $pre ) ) {\n              $blocks[] = array(\n                  'blockName' => null,\n                  'attrs' => peg_empty_attrs(),\n                  'innerBlocks' => array(),\n                  'innerHTML' => $pre,\n                  'innerContent' => array( $pre ),\n              );\n          }\n\n          foreach ( $tokens as $token ) {\n              list( $token, $html ) = $token;\n\n              $blocks[] = $token;\n\n              if ( ! empty( $html ) ) {\n                  $blocks[] = array(\n                      'blockName' => null,\n                      'attrs' => peg_empty_attrs(),\n                      'innerBlocks' => array(),\n                      'innerHTML' => $html,\n                      'innerContent' => array( $html ),\n                  );\n              }\n          }\n\n          if ( ! empty( $post ) ) {\n              $blocks[] = array(\n                  'blockName' => null,\n                  'attrs' => peg_empty_attrs(),\n                  'innerBlocks' => array(),\n                  'innerHTML' => $post,\n                  'innerContent' => array( $post ),\n              );\n          }\n\n          return $blocks;\n      }\n  }\n\n  ?> **/\n\n  function freeform( s ) {\n      return s.length && {\n          blockName: null,\n          attrs: {},\n          innerBlocks: [],\n          innerHTML: s,\n          innerContent: [ s ],\n      };\n  }\n\n  function joinBlocks( pre, tokens, post ) {\n      var blocks = [], i, l, html, item, token;\n\n      if ( pre.length ) {\n          blocks.push( freeform( pre ) );\n      }\n\n      for ( i = 0, l = tokens.length; i < l; i++ ) {\n          item = tokens[ i ];\n          token = item[ 0 ];\n          html = item[ 1 ];\n\n          blocks.push( token );\n          if ( html.length ) {\n              blocks.push( freeform( html ) );\n          }\n      }\n\n      if ( post.length ) {\n          blocks.push( freeform( post ) );\n      }\n\n      return blocks;\n  }\n\n  function maybeJSON( s ) {\n      try {\n          return JSON.parse( s );\n      } catch (e) {\n          return null;\n      }\n  }\n\n  function processInnerContent( list ) {\n      var i, l, item;\n      var html = '';\n      var blocks = [];\n      var content = [];\n\n      // nod to performance over a simpler reduce\n      // and clone model we could have taken here\n      for ( i = 0, l = list.length; i < l; i++ ) {\n          item = list[ i ];\n\n          if ( 'string' === typeof item ) {\n              html += item;\n              content.push( item );\n          } else {\n              blocks.push( item );\n              content.push( null );\n          }\n      };\n\n      return [ html, blocks, content ];\n  }\n\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n"],
  "mappings": "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",
  "names": ["require_parser", "__commonJSMin", "exports", "module", "peg$subclass", "child", "parent", "ctor", "peg$SyntaxError", "message", "expected", "found", "location", "DESCRIBE_EXPECTATION_FNS", "expectation", "literalEscape", "escapedParts", "i", "classEscape", "hex", "ch", "s", "describeExpectation", "describeExpected", "descriptions", "j", "describeFound", "peg$parse", "input", "options", "peg$FAILED", "peg$startRuleFunctions", "peg$parseBlock_List", "peg$startRuleFunction", "peg$c0", "peg$anyExpectation", "peg$c1", "pre", "b", "html", "peg$c2", "bs", "post", "joinBlocks", "peg$c3", "peg$c4", "peg$literalExpectation", "peg$c5", "peg$c6", "peg$c7", "blockName", "a", "peg$c8", "peg$c9", "peg$c10", "attrs", "peg$c11", "children", "e", "innerParts", "processInnerContent", "innerHTML", "innerBlocks", "innerContent", "peg$c12", "peg$c13", "peg$c14", "peg$c15", "peg$c16", "peg$c17", "peg$c18", "peg$c19", "peg$c20", "type", "peg$c21", "peg$c22", "peg$classExpectation", "peg$c23", "peg$c24", "peg$c25", "peg$otherExpectation", "peg$c26", "peg$c27", "peg$c28", "peg$c29", "peg$c30", "peg$c31", "maybeJSON", "peg$c32", "peg$c33", "peg$currPos", "peg$savedPos", "peg$posDetailsCache", "peg$maxFailPos", "peg$maxFailExpected", "peg$silentFails", "peg$result", "text", "peg$computeLocation", "description", "peg$buildStructuredError", "error", "peg$buildSimpleError", "ignoreCase", "parts", "inverted", "peg$endExpectation", "peg$computePosDetails", "pos", "details", "p", "startPos", "endPos", "startPosDetails", "endPosDetails", "peg$fail", "s0", "s1", "s2", "s3", "s4", "s5", "s6", "s7", "s8", "s9", "peg$parseBlock", "peg$parseBlock_Void", "peg$parseBlock_Balanced", "peg$parse__", "peg$parseBlock_Name", "peg$parseBlock_Attributes", "peg$parseBlock_Start", "peg$parseBlock_End", "peg$parseNamespaced_Block_Name", "peg$parseCore_Block_Name", "peg$parseBlock_Name_Part", "s10", "s11", "s12", "freeform", "tokens", "blocks", "l", "item", "token", "list", "content"]
}
