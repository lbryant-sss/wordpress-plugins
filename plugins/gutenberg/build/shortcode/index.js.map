{
  "version": 3,
  "sources": ["../../packages/shortcode/src/index.js", "../../node_modules/memize/dist/index.js"],
  "sourcesContent": ["/**\n * External dependencies\n */\nimport memize from 'memize';\n\nexport * from './types';\n\n/**\n * Find the next matching shortcode.\n *\n * @param {string} tag   Shortcode tag.\n * @param {string} text  Text to search.\n * @param {number} index Index to start search from.\n *\n * @return {import('./types').ShortcodeMatch | undefined} Matched information.\n */\nexport function next( tag, text, index = 0 ) {\n\tconst re = regexp( tag );\n\n\tre.lastIndex = index;\n\n\tconst match = re.exec( text );\n\n\tif ( ! match ) {\n\t\treturn;\n\t}\n\n\t// If we matched an escaped shortcode, try again.\n\tif ( '[' === match[ 1 ] && ']' === match[ 7 ] ) {\n\t\treturn next( tag, text, re.lastIndex );\n\t}\n\n\tconst result = {\n\t\tindex: match.index,\n\t\tcontent: match[ 0 ],\n\t\tshortcode: fromMatch( match ),\n\t};\n\n\t// If we matched a leading `[`, strip it from the match and increment the\n\t// index accordingly.\n\tif ( match[ 1 ] ) {\n\t\tresult.content = result.content.slice( 1 );\n\t\tresult.index++;\n\t}\n\n\t// If we matched a trailing `]`, strip it from the match.\n\tif ( match[ 7 ] ) {\n\t\tresult.content = result.content.slice( 0, -1 );\n\t}\n\n\treturn result;\n}\n\n/**\n * Replace matching shortcodes in a block of text.\n *\n * @param {string}                            tag      Shortcode tag.\n * @param {string}                            text     Text to search.\n * @param {import('./types').ReplaceCallback} callback Function to process the match and return\n *                                                     replacement string.\n *\n * @return {string} Text with shortcodes replaced.\n */\nexport function replace( tag, text, callback ) {\n\treturn text.replace(\n\t\tregexp( tag ),\n\t\tfunction ( match, left, $3, attrs, slash, content, closing, right ) {\n\t\t\t// If both extra brackets exist, the shortcode has been properly\n\t\t\t// escaped.\n\t\t\tif ( left === '[' && right === ']' ) {\n\t\t\t\treturn match;\n\t\t\t}\n\n\t\t\t// Create the match object and pass it through the callback.\n\t\t\tconst result = callback( fromMatch( arguments ) );\n\n\t\t\t// Make sure to return any of the extra brackets if they weren't used to\n\t\t\t// escape the shortcode.\n\t\t\treturn result || result === '' ? left + result + right : match;\n\t\t}\n\t);\n}\n\n/**\n * Generate a string from shortcode parameters.\n *\n * Creates a shortcode instance and returns a string.\n *\n * Accepts the same `options` as the `shortcode()` constructor, containing a\n * `tag` string, a string or object of `attrs`, a boolean indicating whether to\n * format the shortcode using a `single` tag, and a `content` string.\n *\n * @param {Object} options\n *\n * @return {string} String representation of the shortcode.\n */\nexport function string( options ) {\n\treturn new shortcode( options ).string();\n}\n\n/**\n * Generate a RegExp to identify a shortcode.\n *\n * The base regex is functionally equivalent to the one found in\n * `get_shortcode_regex()` in `wp-includes/shortcodes.php`.\n *\n * Capture groups:\n *\n * 1. An extra `[` to allow for escaping shortcodes with double `[[]]`\n * 2. The shortcode name\n * 3. The shortcode argument list\n * 4. The self closing `/`\n * 5. The content of a shortcode when it wraps some content.\n * 6. The closing tag.\n * 7. An extra `]` to allow for escaping shortcodes with double `[[]]`\n *\n * @param {string} tag Shortcode tag.\n *\n * @return {RegExp} Shortcode RegExp.\n */\nexport function regexp( tag ) {\n\treturn new RegExp(\n\t\t'\\\\[(\\\\[?)(' +\n\t\t\ttag +\n\t\t\t')(?![\\\\w-])([^\\\\]\\\\/]*(?:\\\\/(?!\\\\])[^\\\\]\\\\/]*)*?)(?:(\\\\/)\\\\]|\\\\](?:([^\\\\[]*(?:\\\\[(?!\\\\/\\\\2\\\\])[^\\\\[]*)*)(\\\\[\\\\/\\\\2\\\\]))?)(\\\\]?)',\n\t\t'g'\n\t);\n}\n\n/**\n * Parse shortcode attributes.\n *\n * Shortcodes accept many types of attributes. These can chiefly be divided into\n * named and numeric attributes:\n *\n * Named attributes are assigned on a key/value basis, while numeric attributes\n * are treated as an array.\n *\n * Named attributes can be formatted as either `name=\"value\"`, `name='value'`,\n * or `name=value`. Numeric attributes can be formatted as `\"value\"` or just\n * `value`.\n *\n * @param {string} text Serialised shortcode attributes.\n *\n * @return {import('./types').ShortcodeAttrs} Parsed shortcode attributes.\n */\nexport const attrs = memize( ( text ) => {\n\tconst named = {};\n\tconst numeric = [];\n\n\t// This regular expression is reused from `shortcode_parse_atts()` in\n\t// `wp-includes/shortcodes.php`.\n\t//\n\t// Capture groups:\n\t//\n\t// 1. An attribute name, that corresponds to...\n\t// 2. a value in double quotes.\n\t// 3. An attribute name, that corresponds to...\n\t// 4. a value in single quotes.\n\t// 5. An attribute name, that corresponds to...\n\t// 6. an unquoted value.\n\t// 7. A numeric attribute in double quotes.\n\t// 8. A numeric attribute in single quotes.\n\t// 9. An unquoted numeric attribute.\n\tconst pattern =\n\t\t/([\\w-]+)\\s*=\\s*\"([^\"]*)\"(?:\\s|$)|([\\w-]+)\\s*=\\s*'([^']*)'(?:\\s|$)|([\\w-]+)\\s*=\\s*([^\\s'\"]+)(?:\\s|$)|\"([^\"]*)\"(?:\\s|$)|'([^']*)'(?:\\s|$)|(\\S+)(?:\\s|$)/g;\n\n\t// Map zero-width spaces to actual spaces.\n\ttext = text.replace( /[\\u00a0\\u200b]/g, ' ' );\n\n\tlet match;\n\n\t// Match and normalize attributes.\n\twhile ( ( match = pattern.exec( text ) ) ) {\n\t\tif ( match[ 1 ] ) {\n\t\t\tnamed[ match[ 1 ].toLowerCase() ] = match[ 2 ];\n\t\t} else if ( match[ 3 ] ) {\n\t\t\tnamed[ match[ 3 ].toLowerCase() ] = match[ 4 ];\n\t\t} else if ( match[ 5 ] ) {\n\t\t\tnamed[ match[ 5 ].toLowerCase() ] = match[ 6 ];\n\t\t} else if ( match[ 7 ] ) {\n\t\t\tnumeric.push( match[ 7 ] );\n\t\t} else if ( match[ 8 ] ) {\n\t\t\tnumeric.push( match[ 8 ] );\n\t\t} else if ( match[ 9 ] ) {\n\t\t\tnumeric.push( match[ 9 ] );\n\t\t}\n\t}\n\n\treturn { named, numeric };\n} );\n\n/**\n * Generate a Shortcode Object from a RegExp match.\n *\n * Accepts a `match` object from calling `regexp.exec()` on a `RegExp` generated\n * by `regexp()`. `match` can also be set to the `arguments` from a callback\n * passed to `regexp.replace()`.\n *\n * @param {import('./types').Match} match Match array.\n *\n * @return {InstanceType<import('./types').shortcode>} Shortcode instance.\n */\nexport function fromMatch( match ) {\n\tlet type;\n\n\tif ( match[ 4 ] ) {\n\t\ttype = 'self-closing';\n\t} else if ( match[ 6 ] ) {\n\t\ttype = 'closed';\n\t} else {\n\t\ttype = 'single';\n\t}\n\n\treturn new shortcode( {\n\t\ttag: match[ 2 ],\n\t\tattrs: match[ 3 ],\n\t\ttype,\n\t\tcontent: match[ 5 ],\n\t} );\n}\n\n/**\n * Creates a shortcode instance.\n *\n * To access a raw representation of a shortcode, pass an `options` object,\n * containing a `tag` string, a string or object of `attrs`, a string indicating\n * the `type` of the shortcode ('single', 'self-closing', or 'closed'), and a\n * `content` string.\n *\n * @type {import('./types').shortcode} Shortcode instance.\n */\nconst shortcode = Object.assign(\n\tfunction ( options ) {\n\t\tconst { tag, attrs: attributes, type, content } = options || {};\n\t\tObject.assign( this, { tag, type, content } );\n\n\t\t// Ensure we have a correctly formatted `attrs` object.\n\t\tthis.attrs = {\n\t\t\tnamed: {},\n\t\t\tnumeric: [],\n\t\t};\n\n\t\tif ( ! attributes ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attributeTypes = [ 'named', 'numeric' ];\n\n\t\t// Parse a string of attributes.\n\t\tif ( typeof attributes === 'string' ) {\n\t\t\tthis.attrs = attrs( attributes );\n\t\t\t// Identify a correctly formatted `attrs` object.\n\t\t} else if (\n\t\t\tattributes.length === attributeTypes.length &&\n\t\t\tattributeTypes.every( ( t, key ) => t === attributes[ key ] )\n\t\t) {\n\t\t\tthis.attrs = attributes;\n\t\t\t// Handle a flat object of attributes.\n\t\t} else {\n\t\t\tObject.entries( attributes ).forEach( ( [ key, value ] ) => {\n\t\t\t\tthis.set( key, value );\n\t\t\t} );\n\t\t}\n\t},\n\t{\n\t\tnext,\n\t\treplace,\n\t\tstring,\n\t\tregexp,\n\t\tattrs,\n\t\tfromMatch,\n\t}\n);\n\nObject.assign( shortcode.prototype, {\n\t/**\n\t * Get a shortcode attribute.\n\t *\n\t * Automatically detects whether `attr` is named or numeric and routes it\n\t * accordingly.\n\t *\n\t * @param {(number|string)} attr Attribute key.\n\t *\n\t * @return {string} Attribute value.\n\t */\n\tget( attr ) {\n\t\treturn this.attrs[ typeof attr === 'number' ? 'numeric' : 'named' ][\n\t\t\tattr\n\t\t];\n\t},\n\n\t/**\n\t * Set a shortcode attribute.\n\t *\n\t * Automatically detects whether `attr` is named or numeric and routes it\n\t * accordingly.\n\t *\n\t * @param {(number|string)} attr  Attribute key.\n\t * @param {string}          value Attribute value.\n\t *\n\t * @return {InstanceType< import('./types').shortcode >} Shortcode instance.\n\t */\n\tset( attr, value ) {\n\t\tthis.attrs[ typeof attr === 'number' ? 'numeric' : 'named' ][ attr ] =\n\t\t\tvalue;\n\t\treturn this;\n\t},\n\n\t/**\n\t * Transform the shortcode into a string.\n\t *\n\t * @return {string} String representation of the shortcode.\n\t */\n\tstring() {\n\t\tlet text = '[' + this.tag;\n\n\t\tthis.attrs.numeric.forEach( ( value ) => {\n\t\t\tif ( /\\s/.test( value ) ) {\n\t\t\t\ttext += ' \"' + value + '\"';\n\t\t\t} else {\n\t\t\t\ttext += ' ' + value;\n\t\t\t}\n\t\t} );\n\n\t\tObject.entries( this.attrs.named ).forEach( ( [ name, value ] ) => {\n\t\t\ttext += ' ' + name + '=\"' + value + '\"';\n\t\t} );\n\n\t\t// If the tag is marked as `single` or `self-closing`, close the tag and\n\t\t// ignore any additional content.\n\t\tif ( 'single' === this.type ) {\n\t\t\treturn text + ']';\n\t\t} else if ( 'self-closing' === this.type ) {\n\t\t\treturn text + ' /]';\n\t\t}\n\n\t\t// Complete the opening tag.\n\t\ttext += ']';\n\n\t\tif ( this.content ) {\n\t\t\ttext += this.content;\n\t\t}\n\n\t\t// Add the closing tag.\n\t\treturn text + '[/' + this.tag + ']';\n\t},\n} );\n\nexport default shortcode;\n", "/**\n * Memize options object.\n *\n * @typedef MemizeOptions\n *\n * @property {number} [maxSize] Maximum size of the cache.\n */\n\n/**\n * Internal cache entry.\n *\n * @typedef MemizeCacheNode\n *\n * @property {?MemizeCacheNode|undefined} [prev] Previous node.\n * @property {?MemizeCacheNode|undefined} [next] Next node.\n * @property {Array<*>}                   args   Function arguments for cache\n *                                               entry.\n * @property {*}                          val    Function result.\n */\n\n/**\n * Properties of the enhanced function for controlling cache.\n *\n * @typedef MemizeMemoizedFunction\n *\n * @property {()=>void} clear Clear the cache.\n */\n\n/**\n * Accepts a function to be memoized, and returns a new memoized function, with\n * optional options.\n *\n * @template {(...args: any[]) => any} F\n *\n * @param {F}             fn        Function to memoize.\n * @param {MemizeOptions} [options] Options object.\n *\n * @return {((...args: Parameters<F>) => ReturnType<F>) & MemizeMemoizedFunction} Memoized function.\n */\nfunction memize(fn, options) {\n\tvar size = 0;\n\n\t/** @type {?MemizeCacheNode|undefined} */\n\tvar head;\n\n\t/** @type {?MemizeCacheNode|undefined} */\n\tvar tail;\n\n\toptions = options || {};\n\n\tfunction memoized(/* ...args */) {\n\t\tvar node = head,\n\t\t\tlen = arguments.length,\n\t\t\targs,\n\t\t\ti;\n\n\t\tsearchCache: while (node) {\n\t\t\t// Perform a shallow equality test to confirm that whether the node\n\t\t\t// under test is a candidate for the arguments passed. Two arrays\n\t\t\t// are shallowly equal if their length matches and each entry is\n\t\t\t// strictly equal between the two sets. Avoid abstracting to a\n\t\t\t// function which could incur an arguments leaking deoptimization.\n\n\t\t\t// Check whether node arguments match arguments length\n\t\t\tif (node.args.length !== arguments.length) {\n\t\t\t\tnode = node.next;\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// Check whether node arguments match arguments values\n\t\t\tfor (i = 0; i < len; i++) {\n\t\t\t\tif (node.args[i] !== arguments[i]) {\n\t\t\t\t\tnode = node.next;\n\t\t\t\t\tcontinue searchCache;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// At this point we can assume we've found a match\n\n\t\t\t// Surface matched node to head if not already\n\t\t\tif (node !== head) {\n\t\t\t\t// As tail, shift to previous. Must only shift if not also\n\t\t\t\t// head, since if both head and tail, there is no previous.\n\t\t\t\tif (node === tail) {\n\t\t\t\t\ttail = node.prev;\n\t\t\t\t}\n\n\t\t\t\t// Adjust siblings to point to each other. If node was tail,\n\t\t\t\t// this also handles new tail's empty `next` assignment.\n\t\t\t\t/** @type {MemizeCacheNode} */ (node.prev).next = node.next;\n\t\t\t\tif (node.next) {\n\t\t\t\t\tnode.next.prev = node.prev;\n\t\t\t\t}\n\n\t\t\t\tnode.next = head;\n\t\t\t\tnode.prev = null;\n\t\t\t\t/** @type {MemizeCacheNode} */ (head).prev = node;\n\t\t\t\thead = node;\n\t\t\t}\n\n\t\t\t// Return immediately\n\t\t\treturn node.val;\n\t\t}\n\n\t\t// No cached value found. Continue to insertion phase:\n\n\t\t// Create a copy of arguments (avoid leaking deoptimization)\n\t\targs = new Array(len);\n\t\tfor (i = 0; i < len; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\n\t\tnode = {\n\t\t\targs: args,\n\n\t\t\t// Generate the result from original function\n\t\t\tval: fn.apply(null, args),\n\t\t};\n\n\t\t// Don't need to check whether node is already head, since it would\n\t\t// have been returned above already if it was\n\n\t\t// Shift existing head down list\n\t\tif (head) {\n\t\t\thead.prev = node;\n\t\t\tnode.next = head;\n\t\t} else {\n\t\t\t// If no head, follows that there's no tail (at initial or reset)\n\t\t\ttail = node;\n\t\t}\n\n\t\t// Trim tail if we're reached max size and are pending cache insertion\n\t\tif (size === /** @type {MemizeOptions} */ (options).maxSize) {\n\t\t\ttail = /** @type {MemizeCacheNode} */ (tail).prev;\n\t\t\t/** @type {MemizeCacheNode} */ (tail).next = null;\n\t\t} else {\n\t\t\tsize++;\n\t\t}\n\n\t\thead = node;\n\n\t\treturn node.val;\n\t}\n\n\tmemoized.clear = function () {\n\t\thead = null;\n\t\ttail = null;\n\t\tsize = 0;\n\t};\n\n\t// Ignore reason: There's not a clear solution to create an intersection of\n\t// the function with additional properties, where the goal is to retain the\n\t// function signature of the incoming argument and add control properties\n\t// on the return value.\n\n\t// @ts-ignore\n\treturn memoized;\n}\n\nexport { memize as default };\n"],
  "mappings": "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",
  "names": ["attrs"]
}
