{
  "version": 3,
  "sources": ["wordpress-external:@wordpress/data", "wordpress-external:@wordpress/block-editor", "wordpress-external:@wordpress/blocks", "wordpress-external:@wordpress/i18n", "vendor-external:react/jsx-runtime", "wordpress-external:@wordpress/element", "wordpress-external:@wordpress/components", "wordpress-external:@wordpress/primitives", "wordpress-external:@wordpress/notices", "wordpress-external:@wordpress/core-data", "wordpress-external:@wordpress/url", "../../packages/reusable-blocks/src/index.js", "../../packages/reusable-blocks/src/store/index.js", "../../packages/reusable-blocks/src/store/actions.js", "../../packages/reusable-blocks/src/store/reducer.js", "../../packages/reusable-blocks/src/store/selectors.js", "../../packages/reusable-blocks/src/components/reusable-blocks-menu-items/index.js", "../../packages/reusable-blocks/src/components/reusable-blocks-menu-items/reusable-block-convert-button.js", "../../packages/icons/src/library/symbol.tsx", "../../packages/reusable-blocks/src/components/reusable-blocks-menu-items/reusable-blocks-manage-button.js"],
  "sourcesContent": ["module.exports = window.wp.data;", "module.exports = window.wp.blockEditor;", "module.exports = window.wp.blocks;", "module.exports = window.wp.i18n;", "module.exports = window.ReactJSXRuntime;", "module.exports = window.wp.element;", "module.exports = window.wp.components;", "module.exports = window.wp.primitives;", "module.exports = window.wp.notices;", "module.exports = window.wp.coreData;", "module.exports = window.wp.url;", "export { store } from './store';\nexport * from './components';\n", "/**\n * WordPress dependencies\n */\nimport { createReduxStore, register } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport * as actions from './actions';\nimport reducer from './reducer';\nimport * as selectors from './selectors';\n\nconst STORE_NAME = 'core/reusable-blocks';\n\n/**\n * Store definition for the reusable blocks namespace.\n *\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore\n *\n * @type {Object}\n */\nexport const store = createReduxStore( STORE_NAME, {\n\tactions,\n\treducer,\n\tselectors,\n} );\n\nregister( store );\n", "/**\n * WordPress dependencies\n */\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport {\n\tcreateBlock,\n\tisReusableBlock,\n\tparse,\n\tserialize,\n} from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Returns a generator converting a reusable block into a static block.\n *\n * @param {string} clientId The client ID of the block to attach.\n */\nexport const __experimentalConvertBlockToStatic =\n\t( clientId ) =>\n\t( { registry } ) => {\n\t\tconst oldBlock = registry\n\t\t\t.select( blockEditorStore )\n\t\t\t.getBlock( clientId );\n\t\tconst reusableBlock = registry\n\t\t\t.select( 'core' )\n\t\t\t.getEditedEntityRecord(\n\t\t\t\t'postType',\n\t\t\t\t'wp_block',\n\t\t\t\toldBlock.attributes.ref\n\t\t\t);\n\n\t\tconst newBlocks = parse(\n\t\t\ttypeof reusableBlock.content === 'function'\n\t\t\t\t? reusableBlock.content( reusableBlock )\n\t\t\t\t: reusableBlock.content\n\t\t);\n\t\tregistry\n\t\t\t.dispatch( blockEditorStore )\n\t\t\t.replaceBlocks( oldBlock.clientId, newBlocks );\n\t};\n\n/**\n * Returns a generator converting one or more static blocks into a pattern.\n *\n * @param {string[]}             clientIds The client IDs of the block to detach.\n * @param {string}               title     Pattern title.\n * @param {undefined|'unsynced'} syncType  They way block is synced, current undefined (synced) and 'unsynced'.\n */\nexport const __experimentalConvertBlocksToReusable =\n\t( clientIds, title, syncType ) =>\n\tasync ( { registry, dispatch } ) => {\n\t\tconst meta =\n\t\t\tsyncType === 'unsynced'\n\t\t\t\t? {\n\t\t\t\t\t\twp_pattern_sync_status: syncType,\n\t\t\t\t  }\n\t\t\t\t: undefined;\n\n\t\tconst reusableBlock = {\n\t\t\ttitle: title || __( 'Untitled pattern block' ),\n\t\t\tcontent: serialize(\n\t\t\t\tregistry\n\t\t\t\t\t.select( blockEditorStore )\n\t\t\t\t\t.getBlocksByClientId( clientIds )\n\t\t\t),\n\t\t\tstatus: 'publish',\n\t\t\tmeta,\n\t\t};\n\n\t\tconst updatedRecord = await registry\n\t\t\t.dispatch( 'core' )\n\t\t\t.saveEntityRecord( 'postType', 'wp_block', reusableBlock );\n\n\t\tif ( syncType === 'unsynced' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newBlock = createBlock( 'core/block', {\n\t\t\tref: updatedRecord.id,\n\t\t} );\n\t\tregistry\n\t\t\t.dispatch( blockEditorStore )\n\t\t\t.replaceBlocks( clientIds, newBlock );\n\t\tdispatch.__experimentalSetEditingReusableBlock(\n\t\t\tnewBlock.clientId,\n\t\t\ttrue\n\t\t);\n\t};\n\n/**\n * Returns a generator deleting a reusable block.\n *\n * @param {string} id The ID of the reusable block to delete.\n */\nexport const __experimentalDeleteReusableBlock =\n\t( id ) =>\n\tasync ( { registry } ) => {\n\t\tconst reusableBlock = registry\n\t\t\t.select( 'core' )\n\t\t\t.getEditedEntityRecord( 'postType', 'wp_block', id );\n\n\t\t// Don't allow a reusable block with a temporary ID to be deleted.\n\t\tif ( ! reusableBlock ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove any other blocks that reference this reusable block.\n\t\tconst allBlocks = registry.select( blockEditorStore ).getBlocks();\n\t\tconst associatedBlocks = allBlocks.filter(\n\t\t\t( block ) => isReusableBlock( block ) && block.attributes.ref === id\n\t\t);\n\t\tconst associatedBlockClientIds = associatedBlocks.map(\n\t\t\t( block ) => block.clientId\n\t\t);\n\n\t\t// Remove the parsed block.\n\t\tif ( associatedBlockClientIds.length ) {\n\t\t\tregistry\n\t\t\t\t.dispatch( blockEditorStore )\n\t\t\t\t.removeBlocks( associatedBlockClientIds );\n\t\t}\n\n\t\tawait registry\n\t\t\t.dispatch( 'core' )\n\t\t\t.deleteEntityRecord( 'postType', 'wp_block', id );\n\t};\n\n/**\n * Returns an action descriptor for SET_EDITING_REUSABLE_BLOCK action.\n *\n * @param {string}  clientId  The clientID of the reusable block to target.\n * @param {boolean} isEditing Whether the block should be in editing state.\n * @return {Object} Action descriptor.\n */\nexport function __experimentalSetEditingReusableBlock( clientId, isEditing ) {\n\treturn {\n\t\ttype: 'SET_EDITING_REUSABLE_BLOCK',\n\t\tclientId,\n\t\tisEditing,\n\t};\n}\n", "/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\n\nexport function isEditingReusableBlock( state = {}, action ) {\n\tif ( action?.type === 'SET_EDITING_REUSABLE_BLOCK' ) {\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ action.clientId ]: action.isEditing,\n\t\t};\n\t}\n\n\treturn state;\n}\n\nexport default combineReducers( {\n\tisEditingReusableBlock,\n} );\n", "/**\n * Returns true if reusable block is in the editing state.\n *\n * @param {Object} state    Global application state.\n * @param {number} clientId the clientID of the block.\n * @return {boolean} Whether the reusable block is in the editing state.\n */\nexport function __experimentalIsEditingReusableBlock( state, clientId ) {\n\treturn state.isEditingReusableBlock[ clientId ];\n}\n", "/**\n * WordPress dependencies\n */\nimport { BlockSettingsMenuControls } from '@wordpress/block-editor';\n\n/**\n * Internal dependencies\n */\nimport ReusableBlockConvertButton from './reusable-block-convert-button';\nimport ReusableBlocksManageButton from './reusable-blocks-manage-button';\n\nexport default function ReusableBlocksMenuItems( { rootClientId } ) {\n\treturn (\n\t\t<BlockSettingsMenuControls>\n\t\t\t{ ( { onClose, selectedClientIds } ) => (\n\t\t\t\t<>\n\t\t\t\t\t<ReusableBlockConvertButton\n\t\t\t\t\t\tclientIds={ selectedClientIds }\n\t\t\t\t\t\trootClientId={ rootClientId }\n\t\t\t\t\t\tonClose={ onClose }\n\t\t\t\t\t/>\n\t\t\t\t\t{ selectedClientIds.length === 1 && (\n\t\t\t\t\t\t<ReusableBlocksManageButton\n\t\t\t\t\t\t\tclientId={ selectedClientIds[ 0 ] }\n\t\t\t\t\t\t/>\n\t\t\t\t\t) }\n\t\t\t\t</>\n\t\t\t) }\n\t\t</BlockSettingsMenuControls>\n\t);\n}\n", "/**\n * WordPress dependencies\n */\nimport { hasBlockSupport, isReusableBlock } from '@wordpress/blocks';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { useCallback, useState } from '@wordpress/element';\nimport {\n\tMenuItem,\n\tModal,\n\tButton,\n\tTextControl,\n\t__experimentalHStack as HStack,\n\t__experimentalVStack as VStack,\n\tToggleControl,\n} from '@wordpress/components';\nimport { symbol } from '@wordpress/icons';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { __, _x, sprintf } from '@wordpress/i18n';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * Internal dependencies\n */\nimport { store } from '../../store';\n\n/**\n * Menu control to convert block(s) to reusable block.\n *\n * @param {Object}   props              Component props.\n * @param {string[]} props.clientIds    Client ids of selected blocks.\n * @param {string}   props.rootClientId ID of the currently selected top-level block.\n * @param {()=>void} props.onClose      Callback to close the menu.\n * @return {import('react').ComponentType} The menu control or null.\n */\nexport default function ReusableBlockConvertButton( {\n\tclientIds,\n\trootClientId,\n\tonClose,\n} ) {\n\tconst [ syncType, setSyncType ] = useState( undefined );\n\tconst [ isModalOpen, setIsModalOpen ] = useState( false );\n\tconst [ title, setTitle ] = useState( '' );\n\tconst canConvert = useSelect(\n\t\t( select ) => {\n\t\t\tconst { canUser } = select( coreStore );\n\t\t\tconst {\n\t\t\t\tgetBlocksByClientId,\n\t\t\t\tcanInsertBlockType,\n\t\t\t\tgetBlockRootClientId,\n\t\t\t} = select( blockEditorStore );\n\n\t\t\tconst rootId =\n\t\t\t\trootClientId ||\n\t\t\t\t( clientIds.length > 0\n\t\t\t\t\t? getBlockRootClientId( clientIds[ 0 ] )\n\t\t\t\t\t: undefined );\n\n\t\t\tconst blocks = getBlocksByClientId( clientIds ) ?? [];\n\n\t\t\tconst isReusable =\n\t\t\t\tblocks.length === 1 &&\n\t\t\t\tblocks[ 0 ] &&\n\t\t\t\tisReusableBlock( blocks[ 0 ] ) &&\n\t\t\t\t!! select( coreStore ).getEntityRecord(\n\t\t\t\t\t'postType',\n\t\t\t\t\t'wp_block',\n\t\t\t\t\tblocks[ 0 ].attributes.ref\n\t\t\t\t);\n\n\t\t\tconst _canConvert =\n\t\t\t\t// Hide when this is already a reusable block.\n\t\t\t\t! isReusable &&\n\t\t\t\t// Hide when reusable blocks are disabled.\n\t\t\t\tcanInsertBlockType( 'core/block', rootId ) &&\n\t\t\t\tblocks.every(\n\t\t\t\t\t( block ) =>\n\t\t\t\t\t\t// Guard against the case where a regular block has *just* been converted.\n\t\t\t\t\t\t!! block &&\n\t\t\t\t\t\t// Hide on invalid blocks.\n\t\t\t\t\t\tblock.isValid &&\n\t\t\t\t\t\t// Hide when block doesn't support being made reusable.\n\t\t\t\t\t\thasBlockSupport( block.name, 'reusable', true )\n\t\t\t\t) &&\n\t\t\t\t// Hide when current doesn't have permission to do that.\n\t\t\t\t// Blocks refers to the wp_block post type, this checks the ability to create a post of that type.\n\t\t\t\t!! canUser( 'create', {\n\t\t\t\t\tkind: 'postType',\n\t\t\t\t\tname: 'wp_block',\n\t\t\t\t} );\n\n\t\t\treturn _canConvert;\n\t\t},\n\t\t[ clientIds, rootClientId ]\n\t);\n\n\tconst { __experimentalConvertBlocksToReusable: convertBlocksToReusable } =\n\t\tuseDispatch( store );\n\n\tconst { createSuccessNotice, createErrorNotice } =\n\t\tuseDispatch( noticesStore );\n\tconst onConvert = useCallback(\n\t\tasync function ( reusableBlockTitle ) {\n\t\t\ttry {\n\t\t\t\tawait convertBlocksToReusable(\n\t\t\t\t\tclientIds,\n\t\t\t\t\treusableBlockTitle,\n\t\t\t\t\tsyncType\n\t\t\t\t);\n\t\t\t\tcreateSuccessNotice(\n\t\t\t\t\t! syncType\n\t\t\t\t\t\t? sprintf(\n\t\t\t\t\t\t\t\t// translators: %s: the name the user has given to the pattern.\n\t\t\t\t\t\t\t\t__( 'Synced pattern created: %s' ),\n\t\t\t\t\t\t\t\treusableBlockTitle\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: sprintf(\n\t\t\t\t\t\t\t\t// translators: %s: the name the user has given to the pattern.\n\t\t\t\t\t\t\t\t__( 'Unsynced pattern created: %s' ),\n\t\t\t\t\t\t\t\treusableBlockTitle\n\t\t\t\t\t\t  ),\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t\t\tid: 'convert-to-reusable-block-success',\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} catch ( error ) {\n\t\t\t\tcreateErrorNotice( error.message, {\n\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t\tid: 'convert-to-reusable-block-error',\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\t[\n\t\t\tconvertBlocksToReusable,\n\t\t\tclientIds,\n\t\t\tsyncType,\n\t\t\tcreateSuccessNotice,\n\t\t\tcreateErrorNotice,\n\t\t]\n\t);\n\n\tif ( ! canConvert ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<MenuItem icon={ symbol } onClick={ () => setIsModalOpen( true ) }>\n\t\t\t\t{ __( 'Create pattern' ) }\n\t\t\t</MenuItem>\n\t\t\t{ isModalOpen && (\n\t\t\t\t<Modal\n\t\t\t\t\ttitle={ __( 'Create pattern' ) }\n\t\t\t\t\tonRequestClose={ () => {\n\t\t\t\t\t\tsetIsModalOpen( false );\n\t\t\t\t\t\tsetTitle( '' );\n\t\t\t\t\t} }\n\t\t\t\t\toverlayClassName=\"reusable-blocks-menu-items__convert-modal\"\n\t\t\t\t>\n\t\t\t\t\t<form\n\t\t\t\t\t\tonSubmit={ ( event ) => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tonConvert( title );\n\t\t\t\t\t\t\tsetIsModalOpen( false );\n\t\t\t\t\t\t\tsetTitle( '' );\n\t\t\t\t\t\t\tonClose();\n\t\t\t\t\t\t} }\n\t\t\t\t\t>\n\t\t\t\t\t\t<VStack spacing=\"5\">\n\t\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\t\t__next40pxDefaultSize\n\t\t\t\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\t\t\t\tlabel={ __( 'Name' ) }\n\t\t\t\t\t\t\t\tvalue={ title }\n\t\t\t\t\t\t\t\tonChange={ setTitle }\n\t\t\t\t\t\t\t\tplaceholder={ __( 'My pattern' ) }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\t\t\t\tlabel={ _x( 'Synced', 'pattern (singular)' ) }\n\t\t\t\t\t\t\t\thelp={ __(\n\t\t\t\t\t\t\t\t\t'Sync this pattern across multiple locations.'\n\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\tchecked={ ! syncType }\n\t\t\t\t\t\t\t\tonChange={ () => {\n\t\t\t\t\t\t\t\t\tsetSyncType(\n\t\t\t\t\t\t\t\t\t\t! syncType ? 'unsynced' : undefined\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<HStack justify=\"right\">\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t__next40pxDefaultSize\n\t\t\t\t\t\t\t\t\tvariant=\"tertiary\"\n\t\t\t\t\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\t\t\t\t\tsetIsModalOpen( false );\n\t\t\t\t\t\t\t\t\t\tsetTitle( '' );\n\t\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{ __( 'Cancel' ) }\n\t\t\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t__next40pxDefaultSize\n\t\t\t\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{ __( 'Create' ) }\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</HStack>\n\t\t\t\t\t\t</VStack>\n\t\t\t\t\t</form>\n\t\t\t\t</Modal>\n\t\t\t) }\n\t\t</>\n\t);\n}\n", "/* eslint-disable prettier/prettier */\n/**\n * WordPress dependencies\n */\nimport { Path, SVG } from '@wordpress/primitives';\n\nexport default (\n\t<SVG xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n\t<Path d=\"M21.3 10.8l-5.6-5.6c-.7-.7-1.8-.7-2.5 0l-5.6 5.6c-.7.7-.7 1.8 0 2.5l5.6 5.6c.3.3.8.5 1.2.5s.9-.2 1.2-.5l5.6-5.6c.8-.7.8-1.9.1-2.5zm-1 1.4l-5.6 5.6c-.1.1-.3.1-.4 0l-5.6-5.6c-.1-.1-.1-.3 0-.4l5.6-5.6s.1-.1.2-.1.1 0 .2.1l5.6 5.6c.1.1.1.3 0 .4zm-16.6-.4L10 5.5l-1-1-6.3 6.3c-.7.7-.7 1.8 0 2.5L9 19.5l1.1-1.1-6.3-6.3c-.2 0-.2-.2-.1-.3z\" />\n\t</SVG>\n);\n/* eslint-enable */\n", "/**\n * WordPress dependencies\n */\nimport { MenuItem } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\nimport { isReusableBlock } from '@wordpress/blocks';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { addQueryArgs } from '@wordpress/url';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * Internal dependencies\n */\nimport { store as reusableBlocksStore } from '../../store';\n\nfunction ReusableBlocksManageButton( { clientId } ) {\n\tconst { canRemove, isVisible, managePatternsUrl } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getBlock, canRemoveBlock } = select( blockEditorStore );\n\t\t\tconst { canUser } = select( coreStore );\n\t\t\tconst reusableBlock = getBlock( clientId );\n\n\t\t\treturn {\n\t\t\t\tcanRemove: canRemoveBlock( clientId ),\n\t\t\t\tisVisible:\n\t\t\t\t\t!! reusableBlock &&\n\t\t\t\t\tisReusableBlock( reusableBlock ) &&\n\t\t\t\t\t!! canUser( 'update', {\n\t\t\t\t\t\tkind: 'postType',\n\t\t\t\t\t\tname: 'wp_block',\n\t\t\t\t\t\tid: reusableBlock.attributes.ref,\n\t\t\t\t\t} ),\n\t\t\t\t// The site editor and templates both check whether the user\n\t\t\t\t// has edit_theme_options capabilities. We can leverage that here\n\t\t\t\t// and omit the manage patterns link if the user can't access it.\n\t\t\t\tmanagePatternsUrl: canUser( 'create', {\n\t\t\t\t\tkind: 'postType',\n\t\t\t\t\tname: 'wp_template',\n\t\t\t\t} )\n\t\t\t\t\t? addQueryArgs( 'site-editor.php', {\n\t\t\t\t\t\t\tp: '/pattern',\n\t\t\t\t\t  } )\n\t\t\t\t\t: addQueryArgs( 'edit.php', {\n\t\t\t\t\t\t\tpost_type: 'wp_block',\n\t\t\t\t\t  } ),\n\t\t\t};\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\tconst { __experimentalConvertBlockToStatic: convertBlockToStatic } =\n\t\tuseDispatch( reusableBlocksStore );\n\n\tif ( ! isVisible ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<MenuItem href={ managePatternsUrl }>\n\t\t\t\t{ __( 'Manage patterns' ) }\n\t\t\t</MenuItem>\n\t\t\t{ canRemove && (\n\t\t\t\t<MenuItem onClick={ () => convertBlockToStatic( clientId ) }>\n\t\t\t\t\t{ __( 'Detach' ) }\n\t\t\t\t</MenuItem>\n\t\t\t) }\n\t\t</>\n\t);\n}\n\nexport default ReusableBlocksManageButton;\n"],
  "mappings": "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",
  "names": ["import_data", "blockEditorStore", "import_jsx_runtime", "import_block_editor", "import_jsx_runtime", "import_blocks", "import_block_editor", "import_data", "import_i18n", "coreStore", "blockEditorStore", "noticesStore", "VStack", "HStack", "import_jsx_runtime", "import_components", "import_i18n", "import_blocks", "import_data", "import_block_editor", "import_core_data", "blockEditorStore", "coreStore"]
}
