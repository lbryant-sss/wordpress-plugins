{
  "version": 3,
  "sources": ["wordpress-external:@wordpress/data", "wordpress-external:@wordpress/block-editor", "wordpress-external:@wordpress/blocks", "wordpress-external:@wordpress/i18n", "vendor-external:react/jsx-runtime", "wordpress-external:@wordpress/element", "wordpress-external:@wordpress/components", "wordpress-external:@wordpress/primitives", "wordpress-external:@wordpress/notices", "wordpress-external:@wordpress/core-data", "wordpress-external:@wordpress/url", "../../packages/reusable-blocks/src/index.js", "../../packages/reusable-blocks/src/store/index.js", "../../packages/reusable-blocks/src/store/actions.js", "../../packages/reusable-blocks/src/store/reducer.js", "../../packages/reusable-blocks/src/store/selectors.js", "../../packages/reusable-blocks/src/components/reusable-blocks-menu-items/index.js", "../../packages/reusable-blocks/src/components/reusable-blocks-menu-items/reusable-block-convert-button.js", "../../packages/icons/src/library/symbol.tsx", "../../packages/reusable-blocks/src/components/reusable-blocks-menu-items/reusable-blocks-manage-button.js"],
  "sourcesContent": ["module.exports = window.wp.data;", "module.exports = window.wp.blockEditor;", "module.exports = window.wp.blocks;", "module.exports = window.wp.i18n;", "module.exports = window.ReactJSXRuntime;", "module.exports = window.wp.element;", "module.exports = window.wp.components;", "module.exports = window.wp.primitives;", "module.exports = window.wp.notices;", "module.exports = window.wp.coreData;", "module.exports = window.wp.url;", "export { store } from './store';\nexport * from './components';\n", "/**\n * WordPress dependencies\n */\nimport { createReduxStore, register } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport * as actions from './actions';\nimport reducer from './reducer';\nimport * as selectors from './selectors';\n\nconst STORE_NAME = 'core/reusable-blocks';\n\n/**\n * Store definition for the reusable blocks namespace.\n *\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore\n *\n * @type {Object}\n */\nexport const store = createReduxStore( STORE_NAME, {\n\tactions,\n\treducer,\n\tselectors,\n} );\n\nregister( store );\n", "/**\n * WordPress dependencies\n */\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport {\n\tcreateBlock,\n\tisReusableBlock,\n\tparse,\n\tserialize,\n} from '@wordpress/blocks';\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Returns a generator converting a reusable block into a static block.\n *\n * @param {string} clientId The client ID of the block to attach.\n */\nexport const __experimentalConvertBlockToStatic =\n\t( clientId ) =>\n\t( { registry } ) => {\n\t\tconst oldBlock = registry\n\t\t\t.select( blockEditorStore )\n\t\t\t.getBlock( clientId );\n\t\tconst reusableBlock = registry\n\t\t\t.select( 'core' )\n\t\t\t.getEditedEntityRecord(\n\t\t\t\t'postType',\n\t\t\t\t'wp_block',\n\t\t\t\toldBlock.attributes.ref\n\t\t\t);\n\n\t\tconst newBlocks = parse(\n\t\t\ttypeof reusableBlock.content === 'function'\n\t\t\t\t? reusableBlock.content( reusableBlock )\n\t\t\t\t: reusableBlock.content\n\t\t);\n\t\tregistry\n\t\t\t.dispatch( blockEditorStore )\n\t\t\t.replaceBlocks( oldBlock.clientId, newBlocks );\n\t};\n\n/**\n * Returns a generator converting one or more static blocks into a pattern.\n *\n * @param {string[]}             clientIds The client IDs of the block to detach.\n * @param {string}               title     Pattern title.\n * @param {undefined|'unsynced'} syncType  They way block is synced, current undefined (synced) and 'unsynced'.\n */\nexport const __experimentalConvertBlocksToReusable =\n\t( clientIds, title, syncType ) =>\n\tasync ( { registry, dispatch } ) => {\n\t\tconst meta =\n\t\t\tsyncType === 'unsynced'\n\t\t\t\t? {\n\t\t\t\t\t\twp_pattern_sync_status: syncType,\n\t\t\t\t  }\n\t\t\t\t: undefined;\n\n\t\tconst reusableBlock = {\n\t\t\ttitle: title || __( 'Untitled pattern block' ),\n\t\t\tcontent: serialize(\n\t\t\t\tregistry\n\t\t\t\t\t.select( blockEditorStore )\n\t\t\t\t\t.getBlocksByClientId( clientIds )\n\t\t\t),\n\t\t\tstatus: 'publish',\n\t\t\tmeta,\n\t\t};\n\n\t\tconst updatedRecord = await registry\n\t\t\t.dispatch( 'core' )\n\t\t\t.saveEntityRecord( 'postType', 'wp_block', reusableBlock );\n\n\t\tif ( syncType === 'unsynced' ) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst newBlock = createBlock( 'core/block', {\n\t\t\tref: updatedRecord.id,\n\t\t} );\n\t\tregistry\n\t\t\t.dispatch( blockEditorStore )\n\t\t\t.replaceBlocks( clientIds, newBlock );\n\t\tdispatch.__experimentalSetEditingReusableBlock(\n\t\t\tnewBlock.clientId,\n\t\t\ttrue\n\t\t);\n\t};\n\n/**\n * Returns a generator deleting a reusable block.\n *\n * @param {string} id The ID of the reusable block to delete.\n */\nexport const __experimentalDeleteReusableBlock =\n\t( id ) =>\n\tasync ( { registry } ) => {\n\t\tconst reusableBlock = registry\n\t\t\t.select( 'core' )\n\t\t\t.getEditedEntityRecord( 'postType', 'wp_block', id );\n\n\t\t// Don't allow a reusable block with a temporary ID to be deleted.\n\t\tif ( ! reusableBlock ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Remove any other blocks that reference this reusable block.\n\t\tconst allBlocks = registry.select( blockEditorStore ).getBlocks();\n\t\tconst associatedBlocks = allBlocks.filter(\n\t\t\t( block ) => isReusableBlock( block ) && block.attributes.ref === id\n\t\t);\n\t\tconst associatedBlockClientIds = associatedBlocks.map(\n\t\t\t( block ) => block.clientId\n\t\t);\n\n\t\t// Remove the parsed block.\n\t\tif ( associatedBlockClientIds.length ) {\n\t\t\tregistry\n\t\t\t\t.dispatch( blockEditorStore )\n\t\t\t\t.removeBlocks( associatedBlockClientIds );\n\t\t}\n\n\t\tawait registry\n\t\t\t.dispatch( 'core' )\n\t\t\t.deleteEntityRecord( 'postType', 'wp_block', id );\n\t};\n\n/**\n * Returns an action descriptor for SET_EDITING_REUSABLE_BLOCK action.\n *\n * @param {string}  clientId  The clientID of the reusable block to target.\n * @param {boolean} isEditing Whether the block should be in editing state.\n * @return {Object} Action descriptor.\n */\nexport function __experimentalSetEditingReusableBlock( clientId, isEditing ) {\n\treturn {\n\t\ttype: 'SET_EDITING_REUSABLE_BLOCK',\n\t\tclientId,\n\t\tisEditing,\n\t};\n}\n", "/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\n\nexport function isEditingReusableBlock( state = {}, action ) {\n\tif ( action?.type === 'SET_EDITING_REUSABLE_BLOCK' ) {\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ action.clientId ]: action.isEditing,\n\t\t};\n\t}\n\n\treturn state;\n}\n\nexport default combineReducers( {\n\tisEditingReusableBlock,\n} );\n", "/**\n * Returns true if reusable block is in the editing state.\n *\n * @param {Object} state    Global application state.\n * @param {number} clientId the clientID of the block.\n * @return {boolean} Whether the reusable block is in the editing state.\n */\nexport function __experimentalIsEditingReusableBlock( state, clientId ) {\n\treturn state.isEditingReusableBlock[ clientId ];\n}\n", "/**\n * WordPress dependencies\n */\nimport { BlockSettingsMenuControls } from '@wordpress/block-editor';\n\n/**\n * Internal dependencies\n */\nimport ReusableBlockConvertButton from './reusable-block-convert-button';\nimport ReusableBlocksManageButton from './reusable-blocks-manage-button';\n\nexport default function ReusableBlocksMenuItems( { rootClientId } ) {\n\treturn (\n\t\t<BlockSettingsMenuControls>\n\t\t\t{ ( { onClose, selectedClientIds } ) => (\n\t\t\t\t<>\n\t\t\t\t\t<ReusableBlockConvertButton\n\t\t\t\t\t\tclientIds={ selectedClientIds }\n\t\t\t\t\t\trootClientId={ rootClientId }\n\t\t\t\t\t\tonClose={ onClose }\n\t\t\t\t\t/>\n\t\t\t\t\t{ selectedClientIds.length === 1 && (\n\t\t\t\t\t\t<ReusableBlocksManageButton\n\t\t\t\t\t\t\tclientId={ selectedClientIds[ 0 ] }\n\t\t\t\t\t\t/>\n\t\t\t\t\t) }\n\t\t\t\t</>\n\t\t\t) }\n\t\t</BlockSettingsMenuControls>\n\t);\n}\n", "/**\n * WordPress dependencies\n */\nimport { hasBlockSupport, isReusableBlock } from '@wordpress/blocks';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { useCallback, useState } from '@wordpress/element';\nimport {\n\tMenuItem,\n\tModal,\n\tButton,\n\tTextControl,\n\t__experimentalHStack as HStack,\n\t__experimentalVStack as VStack,\n\tToggleControl,\n} from '@wordpress/components';\nimport { symbol } from '@wordpress/icons';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { __, _x, sprintf } from '@wordpress/i18n';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * Internal dependencies\n */\nimport { store } from '../../store';\n\n/**\n * Menu control to convert block(s) to reusable block.\n *\n * @param {Object}   props              Component props.\n * @param {string[]} props.clientIds    Client ids of selected blocks.\n * @param {string}   props.rootClientId ID of the currently selected top-level block.\n * @param {()=>void} props.onClose      Callback to close the menu.\n * @return {import('react').ComponentType} The menu control or null.\n */\nexport default function ReusableBlockConvertButton( {\n\tclientIds,\n\trootClientId,\n\tonClose,\n} ) {\n\tconst [ syncType, setSyncType ] = useState( undefined );\n\tconst [ isModalOpen, setIsModalOpen ] = useState( false );\n\tconst [ title, setTitle ] = useState( '' );\n\tconst canConvert = useSelect(\n\t\t( select ) => {\n\t\t\tconst { canUser } = select( coreStore );\n\t\t\tconst {\n\t\t\t\tgetBlocksByClientId,\n\t\t\t\tcanInsertBlockType,\n\t\t\t\tgetBlockRootClientId,\n\t\t\t} = select( blockEditorStore );\n\n\t\t\tconst rootId =\n\t\t\t\trootClientId ||\n\t\t\t\t( clientIds.length > 0\n\t\t\t\t\t? getBlockRootClientId( clientIds[ 0 ] )\n\t\t\t\t\t: undefined );\n\n\t\t\tconst blocks = getBlocksByClientId( clientIds ) ?? [];\n\n\t\t\tconst isReusable =\n\t\t\t\tblocks.length === 1 &&\n\t\t\t\tblocks[ 0 ] &&\n\t\t\t\tisReusableBlock( blocks[ 0 ] ) &&\n\t\t\t\t!! select( coreStore ).getEntityRecord(\n\t\t\t\t\t'postType',\n\t\t\t\t\t'wp_block',\n\t\t\t\t\tblocks[ 0 ].attributes.ref\n\t\t\t\t);\n\n\t\t\tconst _canConvert =\n\t\t\t\t// Hide when this is already a reusable block.\n\t\t\t\t! isReusable &&\n\t\t\t\t// Hide when reusable blocks are disabled.\n\t\t\t\tcanInsertBlockType( 'core/block', rootId ) &&\n\t\t\t\tblocks.every(\n\t\t\t\t\t( block ) =>\n\t\t\t\t\t\t// Guard against the case where a regular block has *just* been converted.\n\t\t\t\t\t\t!! block &&\n\t\t\t\t\t\t// Hide on invalid blocks.\n\t\t\t\t\t\tblock.isValid &&\n\t\t\t\t\t\t// Hide when block doesn't support being made reusable.\n\t\t\t\t\t\thasBlockSupport( block.name, 'reusable', true )\n\t\t\t\t) &&\n\t\t\t\t// Hide when current doesn't have permission to do that.\n\t\t\t\t// Blocks refers to the wp_block post type, this checks the ability to create a post of that type.\n\t\t\t\t!! canUser( 'create', {\n\t\t\t\t\tkind: 'postType',\n\t\t\t\t\tname: 'wp_block',\n\t\t\t\t} );\n\n\t\t\treturn _canConvert;\n\t\t},\n\t\t[ clientIds, rootClientId ]\n\t);\n\n\tconst { __experimentalConvertBlocksToReusable: convertBlocksToReusable } =\n\t\tuseDispatch( store );\n\n\tconst { createSuccessNotice, createErrorNotice } =\n\t\tuseDispatch( noticesStore );\n\tconst onConvert = useCallback(\n\t\tasync function ( reusableBlockTitle ) {\n\t\t\ttry {\n\t\t\t\tawait convertBlocksToReusable(\n\t\t\t\t\tclientIds,\n\t\t\t\t\treusableBlockTitle,\n\t\t\t\t\tsyncType\n\t\t\t\t);\n\t\t\t\tcreateSuccessNotice(\n\t\t\t\t\t! syncType\n\t\t\t\t\t\t? sprintf(\n\t\t\t\t\t\t\t\t// translators: %s: the name the user has given to the pattern.\n\t\t\t\t\t\t\t\t__( 'Synced pattern created: %s' ),\n\t\t\t\t\t\t\t\treusableBlockTitle\n\t\t\t\t\t\t  )\n\t\t\t\t\t\t: sprintf(\n\t\t\t\t\t\t\t\t// translators: %s: the name the user has given to the pattern.\n\t\t\t\t\t\t\t\t__( 'Unsynced pattern created: %s' ),\n\t\t\t\t\t\t\t\treusableBlockTitle\n\t\t\t\t\t\t  ),\n\t\t\t\t\t{\n\t\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t\t\tid: 'convert-to-reusable-block-success',\n\t\t\t\t\t}\n\t\t\t\t);\n\t\t\t} catch ( error ) {\n\t\t\t\tcreateErrorNotice( error.message, {\n\t\t\t\t\ttype: 'snackbar',\n\t\t\t\t\tid: 'convert-to-reusable-block-error',\n\t\t\t\t} );\n\t\t\t}\n\t\t},\n\t\t[\n\t\t\tconvertBlocksToReusable,\n\t\t\tclientIds,\n\t\t\tsyncType,\n\t\t\tcreateSuccessNotice,\n\t\t\tcreateErrorNotice,\n\t\t]\n\t);\n\n\tif ( ! canConvert ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<MenuItem icon={ symbol } onClick={ () => setIsModalOpen( true ) }>\n\t\t\t\t{ __( 'Create pattern' ) }\n\t\t\t</MenuItem>\n\t\t\t{ isModalOpen && (\n\t\t\t\t<Modal\n\t\t\t\t\ttitle={ __( 'Create pattern' ) }\n\t\t\t\t\tonRequestClose={ () => {\n\t\t\t\t\t\tsetIsModalOpen( false );\n\t\t\t\t\t\tsetTitle( '' );\n\t\t\t\t\t} }\n\t\t\t\t\toverlayClassName=\"reusable-blocks-menu-items__convert-modal\"\n\t\t\t\t>\n\t\t\t\t\t<form\n\t\t\t\t\t\tonSubmit={ ( event ) => {\n\t\t\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\t\t\tonConvert( title );\n\t\t\t\t\t\t\tsetIsModalOpen( false );\n\t\t\t\t\t\t\tsetTitle( '' );\n\t\t\t\t\t\t\tonClose();\n\t\t\t\t\t\t} }\n\t\t\t\t\t>\n\t\t\t\t\t\t<VStack spacing=\"5\">\n\t\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\t\t__next40pxDefaultSize\n\t\t\t\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\t\t\t\tlabel={ __( 'Name' ) }\n\t\t\t\t\t\t\t\tvalue={ title }\n\t\t\t\t\t\t\t\tonChange={ setTitle }\n\t\t\t\t\t\t\t\tplaceholder={ __( 'My pattern' ) }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\t\t\t\tlabel={ _x( 'Synced', 'pattern (singular)' ) }\n\t\t\t\t\t\t\t\thelp={ __(\n\t\t\t\t\t\t\t\t\t'Sync this pattern across multiple locations.'\n\t\t\t\t\t\t\t\t) }\n\t\t\t\t\t\t\t\tchecked={ ! syncType }\n\t\t\t\t\t\t\t\tonChange={ () => {\n\t\t\t\t\t\t\t\t\tsetSyncType(\n\t\t\t\t\t\t\t\t\t\t! syncType ? 'unsynced' : undefined\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<HStack justify=\"right\">\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t__next40pxDefaultSize\n\t\t\t\t\t\t\t\t\tvariant=\"tertiary\"\n\t\t\t\t\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\t\t\t\t\tsetIsModalOpen( false );\n\t\t\t\t\t\t\t\t\t\tsetTitle( '' );\n\t\t\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{ __( 'Cancel' ) }\n\t\t\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\t__next40pxDefaultSize\n\t\t\t\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{ __( 'Create' ) }\n\t\t\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t\t</HStack>\n\t\t\t\t\t\t</VStack>\n\t\t\t\t\t</form>\n\t\t\t\t</Modal>\n\t\t\t) }\n\t\t</>\n\t);\n}\n", "/* eslint-disable prettier/prettier */\n/**\n * WordPress dependencies\n */\nimport { Path, SVG } from '@wordpress/primitives';\n\nexport default (\n\t<SVG xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n\t<Path d=\"M21.3 10.8l-5.6-5.6c-.7-.7-1.8-.7-2.5 0l-5.6 5.6c-.7.7-.7 1.8 0 2.5l5.6 5.6c.3.3.8.5 1.2.5s.9-.2 1.2-.5l5.6-5.6c.8-.7.8-1.9.1-2.5zm-1 1.4l-5.6 5.6c-.1.1-.3.1-.4 0l-5.6-5.6c-.1-.1-.1-.3 0-.4l5.6-5.6s.1-.1.2-.1.1 0 .2.1l5.6 5.6c.1.1.1.3 0 .4zm-16.6-.4L10 5.5l-1-1-6.3 6.3c-.7.7-.7 1.8 0 2.5L9 19.5l1.1-1.1-6.3-6.3c-.2 0-.2-.2-.1-.3z\" />\n\t</SVG>\n);\n/* eslint-enable */\n", "/**\n * WordPress dependencies\n */\nimport { MenuItem } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\nimport { isReusableBlock } from '@wordpress/blocks';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { addQueryArgs } from '@wordpress/url';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * Internal dependencies\n */\nimport { store as reusableBlocksStore } from '../../store';\n\nfunction ReusableBlocksManageButton( { clientId } ) {\n\tconst { canRemove, isVisible, managePatternsUrl } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getBlock, canRemoveBlock } = select( blockEditorStore );\n\t\t\tconst { canUser } = select( coreStore );\n\t\t\tconst reusableBlock = getBlock( clientId );\n\n\t\t\treturn {\n\t\t\t\tcanRemove: canRemoveBlock( clientId ),\n\t\t\t\tisVisible:\n\t\t\t\t\t!! reusableBlock &&\n\t\t\t\t\tisReusableBlock( reusableBlock ) &&\n\t\t\t\t\t!! canUser( 'update', {\n\t\t\t\t\t\tkind: 'postType',\n\t\t\t\t\t\tname: 'wp_block',\n\t\t\t\t\t\tid: reusableBlock.attributes.ref,\n\t\t\t\t\t} ),\n\t\t\t\t// The site editor and templates both check whether the user\n\t\t\t\t// has edit_theme_options capabilities. We can leverage that here\n\t\t\t\t// and omit the manage patterns link if the user can't access it.\n\t\t\t\tmanagePatternsUrl: canUser( 'create', {\n\t\t\t\t\tkind: 'postType',\n\t\t\t\t\tname: 'wp_template',\n\t\t\t\t} )\n\t\t\t\t\t? addQueryArgs( 'site-editor.php', {\n\t\t\t\t\t\t\tp: '/pattern',\n\t\t\t\t\t  } )\n\t\t\t\t\t: addQueryArgs( 'edit.php', {\n\t\t\t\t\t\t\tpost_type: 'wp_block',\n\t\t\t\t\t  } ),\n\t\t\t};\n\t\t},\n\t\t[ clientId ]\n\t);\n\n\tconst { __experimentalConvertBlockToStatic: convertBlockToStatic } =\n\t\tuseDispatch( reusableBlocksStore );\n\n\tif ( ! isVisible ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<MenuItem href={ managePatternsUrl }>\n\t\t\t\t{ __( 'Manage patterns' ) }\n\t\t\t</MenuItem>\n\t\t\t{ canRemove && (\n\t\t\t\t<MenuItem onClick={ () => convertBlockToStatic( clientId ) }>\n\t\t\t\t\t{ __( 'Detach' ) }\n\t\t\t\t</MenuItem>\n\t\t\t) }\n\t\t</>\n\t);\n}\n\nexport default ReusableBlocksManageButton;\n"],
  "mappings": "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",
  "names": ["require_data", "__commonJSMin", "exports", "module", "require_block_editor", "__commonJSMin", "exports", "module", "require_blocks", "__commonJSMin", "exports", "module", "require_i18n", "__commonJSMin", "exports", "module", "require_jsx_runtime", "__commonJSMin", "exports", "module", "require_element", "__commonJSMin", "exports", "module", "require_components", "__commonJSMin", "exports", "module", "require_primitives", "__commonJSMin", "exports", "module", "require_notices", "__commonJSMin", "exports", "module", "require_core_data", "__commonJSMin", "exports", "module", "require_url", "__commonJSMin", "exports", "module", "index_exports", "__export", "ReusableBlocksMenuItems", "store", "import_data", "actions_exports", "__export", "__experimentalConvertBlockToStatic", "__experimentalConvertBlocksToReusable", "__experimentalDeleteReusableBlock", "__experimentalSetEditingReusableBlock", "import_block_editor", "import_blocks", "import_i18n", "clientId", "registry", "oldBlock", "blockEditorStore", "reusableBlock", "newBlocks", "clientIds", "title", "syncType", "dispatch", "meta", "updatedRecord", "newBlock", "id", "associatedBlockClientIds", "block", "isEditing", "import_data", "isEditingReusableBlock", "state", "action", "reducer_default", "selectors_exports", "__export", "__experimentalIsEditingReusableBlock", "state", "clientId", "STORE_NAME", "store", "actions_exports", "reducer_default", "selectors_exports", "import_jsx_runtime", "import_block_editor", "import_jsx_runtime", "import_blocks", "import_block_editor", "import_element", "import_components", "import_jsx_runtime", "import_primitives", "symbol_default", "import_data", "import_i18n", "import_notices", "import_core_data", "ReusableBlockConvertButton", "clientIds", "rootClientId", "onClose", "syncType", "setSyncType", "isModalOpen", "setIsModalOpen", "title", "setTitle", "canConvert", "select", "canUser", "coreStore", "getBlocksByClientId", "canInsertBlockType", "getBlockRootClientId", "blockEditorStore", "rootId", "blocks", "block", "convertBlocksToReusable", "store", "createSuccessNotice", "createErrorNotice", "noticesStore", "onConvert", "reusableBlockTitle", "error", "symbol_default", "event", "VStack", "HStack", "import_jsx_runtime", "import_components", "import_i18n", "import_blocks", "import_data", "import_block_editor", "import_url", "import_core_data", "ReusableBlocksManageButton", "clientId", "canRemove", "isVisible", "managePatternsUrl", "select", "getBlock", "canRemoveBlock", "blockEditorStore", "canUser", "coreStore", "reusableBlock", "convertBlockToStatic", "store", "reusable_blocks_manage_button_default", "ReusableBlocksMenuItems", "rootClientId", "onClose", "selectedClientIds", "ReusableBlockConvertButton", "reusable_blocks_manage_button_default"]
}
