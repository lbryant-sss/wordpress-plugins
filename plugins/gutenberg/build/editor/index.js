"use strict";
var wp;
(wp ||= {}).editor = (() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __export = (target, all) => {
    for (var name in all)
      __defProp(target, name, { get: all[name], enumerable: true });
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));
  var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

  // vendor-external:react/jsx-runtime
  var require_jsx_runtime = __commonJS({
    "vendor-external:react/jsx-runtime"(exports, module) {
      module.exports = window.ReactJSXRuntime;
    }
  });

  // wordpress-external:@wordpress/data
  var require_data = __commonJS({
    "wordpress-external:@wordpress/data"(exports, module) {
      module.exports = window.wp.data;
    }
  });

  // wordpress-external:@wordpress/core-data
  var require_core_data = __commonJS({
    "wordpress-external:@wordpress/core-data"(exports, module) {
      module.exports = window.wp.coreData;
    }
  });

  // wordpress-external:@wordpress/element
  var require_element = __commonJS({
    "wordpress-external:@wordpress/element"(exports, module) {
      module.exports = window.wp.element;
    }
  });

  // wordpress-external:@wordpress/compose
  var require_compose = __commonJS({
    "wordpress-external:@wordpress/compose"(exports, module) {
      module.exports = window.wp.compose;
    }
  });

  // wordpress-external:@wordpress/hooks
  var require_hooks = __commonJS({
    "wordpress-external:@wordpress/hooks"(exports, module) {
      module.exports = window.wp.hooks;
    }
  });

  // wordpress-external:@wordpress/block-editor
  var require_block_editor = __commonJS({
    "wordpress-external:@wordpress/block-editor"(exports, module) {
      module.exports = window.wp.blockEditor;
    }
  });

  // wordpress-external:@wordpress/blocks
  var require_blocks = __commonJS({
    "wordpress-external:@wordpress/blocks"(exports, module) {
      module.exports = window.wp.blocks;
    }
  });

  // wordpress-external:@wordpress/date
  var require_date = __commonJS({
    "wordpress-external:@wordpress/date"(exports, module) {
      module.exports = window.wp.date;
    }
  });

  // wordpress-external:@wordpress/url
  var require_url = __commonJS({
    "wordpress-external:@wordpress/url"(exports, module) {
      module.exports = window.wp.url;
    }
  });

  // wordpress-external:@wordpress/deprecated
  var require_deprecated = __commonJS({
    "wordpress-external:@wordpress/deprecated"(exports, module) {
      module.exports = window.wp.deprecated;
    }
  });

  // wordpress-external:@wordpress/preferences
  var require_preferences = __commonJS({
    "wordpress-external:@wordpress/preferences"(exports, module) {
      module.exports = window.wp.preferences;
    }
  });

  // wordpress-external:@wordpress/primitives
  var require_primitives = __commonJS({
    "wordpress-external:@wordpress/primitives"(exports, module) {
      module.exports = window.wp.primitives;
    }
  });

  // wordpress-external:@wordpress/private-apis
  var require_private_apis = __commonJS({
    "wordpress-external:@wordpress/private-apis"(exports, module) {
      module.exports = window.wp.privateApis;
    }
  });

  // wordpress-external:@wordpress/a11y
  var require_a11y = __commonJS({
    "wordpress-external:@wordpress/a11y"(exports, module) {
      module.exports = window.wp.a11y;
    }
  });

  // wordpress-external:@wordpress/api-fetch
  var require_api_fetch = __commonJS({
    "wordpress-external:@wordpress/api-fetch"(exports, module) {
      module.exports = window.wp.apiFetch;
    }
  });

  // wordpress-external:@wordpress/notices
  var require_notices = __commonJS({
    "wordpress-external:@wordpress/notices"(exports, module) {
      module.exports = window.wp.notices;
    }
  });

  // wordpress-external:@wordpress/i18n
  var require_i18n = __commonJS({
    "wordpress-external:@wordpress/i18n"(exports, module) {
      module.exports = window.wp.i18n;
    }
  });

  // wordpress-external:@wordpress/html-entities
  var require_html_entities = __commonJS({
    "wordpress-external:@wordpress/html-entities"(exports, module) {
      module.exports = window.wp.htmlEntities;
    }
  });

  // wordpress-external:@wordpress/components
  var require_components = __commonJS({
    "wordpress-external:@wordpress/components"(exports, module) {
      module.exports = window.wp.components;
    }
  });

  // wordpress-external:@wordpress/patterns
  var require_patterns = __commonJS({
    "wordpress-external:@wordpress/patterns"(exports, module) {
      module.exports = window.wp.patterns;
    }
  });

  // wordpress-external:@wordpress/media-utils
  var require_media_utils = __commonJS({
    "wordpress-external:@wordpress/media-utils"(exports, module) {
      module.exports = window.wp.mediaUtils;
    }
  });

  // node_modules/remove-accents/index.js
  var require_remove_accents = __commonJS({
    "node_modules/remove-accents/index.js"(exports, module) {
      var characterMap = {
        "\xC0": "A",
        "\xC1": "A",
        "\xC2": "A",
        "\xC3": "A",
        "\xC4": "A",
        "\xC5": "A",
        "\u1EA4": "A",
        "\u1EAE": "A",
        "\u1EB2": "A",
        "\u1EB4": "A",
        "\u1EB6": "A",
        "\xC6": "AE",
        "\u1EA6": "A",
        "\u1EB0": "A",
        "\u0202": "A",
        "\u1EA2": "A",
        "\u1EA0": "A",
        "\u1EA8": "A",
        "\u1EAA": "A",
        "\u1EAC": "A",
        "\xC7": "C",
        "\u1E08": "C",
        "\xC8": "E",
        "\xC9": "E",
        "\xCA": "E",
        "\xCB": "E",
        "\u1EBE": "E",
        "\u1E16": "E",
        "\u1EC0": "E",
        "\u1E14": "E",
        "\u1E1C": "E",
        "\u0206": "E",
        "\u1EBA": "E",
        "\u1EBC": "E",
        "\u1EB8": "E",
        "\u1EC2": "E",
        "\u1EC4": "E",
        "\u1EC6": "E",
        "\xCC": "I",
        "\xCD": "I",
        "\xCE": "I",
        "\xCF": "I",
        "\u1E2E": "I",
        "\u020A": "I",
        "\u1EC8": "I",
        "\u1ECA": "I",
        "\xD0": "D",
        "\xD1": "N",
        "\xD2": "O",
        "\xD3": "O",
        "\xD4": "O",
        "\xD5": "O",
        "\xD6": "O",
        "\xD8": "O",
        "\u1ED0": "O",
        "\u1E4C": "O",
        "\u1E52": "O",
        "\u020E": "O",
        "\u1ECE": "O",
        "\u1ECC": "O",
        "\u1ED4": "O",
        "\u1ED6": "O",
        "\u1ED8": "O",
        "\u1EDC": "O",
        "\u1EDE": "O",
        "\u1EE0": "O",
        "\u1EDA": "O",
        "\u1EE2": "O",
        "\xD9": "U",
        "\xDA": "U",
        "\xDB": "U",
        "\xDC": "U",
        "\u1EE6": "U",
        "\u1EE4": "U",
        "\u1EEC": "U",
        "\u1EEE": "U",
        "\u1EF0": "U",
        "\xDD": "Y",
        "\xE0": "a",
        "\xE1": "a",
        "\xE2": "a",
        "\xE3": "a",
        "\xE4": "a",
        "\xE5": "a",
        "\u1EA5": "a",
        "\u1EAF": "a",
        "\u1EB3": "a",
        "\u1EB5": "a",
        "\u1EB7": "a",
        "\xE6": "ae",
        "\u1EA7": "a",
        "\u1EB1": "a",
        "\u0203": "a",
        "\u1EA3": "a",
        "\u1EA1": "a",
        "\u1EA9": "a",
        "\u1EAB": "a",
        "\u1EAD": "a",
        "\xE7": "c",
        "\u1E09": "c",
        "\xE8": "e",
        "\xE9": "e",
        "\xEA": "e",
        "\xEB": "e",
        "\u1EBF": "e",
        "\u1E17": "e",
        "\u1EC1": "e",
        "\u1E15": "e",
        "\u1E1D": "e",
        "\u0207": "e",
        "\u1EBB": "e",
        "\u1EBD": "e",
        "\u1EB9": "e",
        "\u1EC3": "e",
        "\u1EC5": "e",
        "\u1EC7": "e",
        "\xEC": "i",
        "\xED": "i",
        "\xEE": "i",
        "\xEF": "i",
        "\u1E2F": "i",
        "\u020B": "i",
        "\u1EC9": "i",
        "\u1ECB": "i",
        "\xF0": "d",
        "\xF1": "n",
        "\xF2": "o",
        "\xF3": "o",
        "\xF4": "o",
        "\xF5": "o",
        "\xF6": "o",
        "\xF8": "o",
        "\u1ED1": "o",
        "\u1E4D": "o",
        "\u1E53": "o",
        "\u020F": "o",
        "\u1ECF": "o",
        "\u1ECD": "o",
        "\u1ED5": "o",
        "\u1ED7": "o",
        "\u1ED9": "o",
        "\u1EDD": "o",
        "\u1EDF": "o",
        "\u1EE1": "o",
        "\u1EDB": "o",
        "\u1EE3": "o",
        "\xF9": "u",
        "\xFA": "u",
        "\xFB": "u",
        "\xFC": "u",
        "\u1EE7": "u",
        "\u1EE5": "u",
        "\u1EED": "u",
        "\u1EEF": "u",
        "\u1EF1": "u",
        "\xFD": "y",
        "\xFF": "y",
        "\u0100": "A",
        "\u0101": "a",
        "\u0102": "A",
        "\u0103": "a",
        "\u0104": "A",
        "\u0105": "a",
        "\u0106": "C",
        "\u0107": "c",
        "\u0108": "C",
        "\u0109": "c",
        "\u010A": "C",
        "\u010B": "c",
        "\u010C": "C",
        "\u010D": "c",
        "C\u0306": "C",
        "c\u0306": "c",
        "\u010E": "D",
        "\u010F": "d",
        "\u0110": "D",
        "\u0111": "d",
        "\u0112": "E",
        "\u0113": "e",
        "\u0114": "E",
        "\u0115": "e",
        "\u0116": "E",
        "\u0117": "e",
        "\u0118": "E",
        "\u0119": "e",
        "\u011A": "E",
        "\u011B": "e",
        "\u011C": "G",
        "\u01F4": "G",
        "\u011D": "g",
        "\u01F5": "g",
        "\u011E": "G",
        "\u011F": "g",
        "\u0120": "G",
        "\u0121": "g",
        "\u0122": "G",
        "\u0123": "g",
        "\u0124": "H",
        "\u0125": "h",
        "\u0126": "H",
        "\u0127": "h",
        "\u1E2A": "H",
        "\u1E2B": "h",
        "\u0128": "I",
        "\u0129": "i",
        "\u012A": "I",
        "\u012B": "i",
        "\u012C": "I",
        "\u012D": "i",
        "\u012E": "I",
        "\u012F": "i",
        "\u0130": "I",
        "\u0131": "i",
        "\u0132": "IJ",
        "\u0133": "ij",
        "\u0134": "J",
        "\u0135": "j",
        "\u0136": "K",
        "\u0137": "k",
        "\u1E30": "K",
        "\u1E31": "k",
        "K\u0306": "K",
        "k\u0306": "k",
        "\u0139": "L",
        "\u013A": "l",
        "\u013B": "L",
        "\u013C": "l",
        "\u013D": "L",
        "\u013E": "l",
        "\u013F": "L",
        "\u0140": "l",
        "\u0141": "l",
        "\u0142": "l",
        "\u1E3E": "M",
        "\u1E3F": "m",
        "M\u0306": "M",
        "m\u0306": "m",
        "\u0143": "N",
        "\u0144": "n",
        "\u0145": "N",
        "\u0146": "n",
        "\u0147": "N",
        "\u0148": "n",
        "\u0149": "n",
        "N\u0306": "N",
        "n\u0306": "n",
        "\u014C": "O",
        "\u014D": "o",
        "\u014E": "O",
        "\u014F": "o",
        "\u0150": "O",
        "\u0151": "o",
        "\u0152": "OE",
        "\u0153": "oe",
        "P\u0306": "P",
        "p\u0306": "p",
        "\u0154": "R",
        "\u0155": "r",
        "\u0156": "R",
        "\u0157": "r",
        "\u0158": "R",
        "\u0159": "r",
        "R\u0306": "R",
        "r\u0306": "r",
        "\u0212": "R",
        "\u0213": "r",
        "\u015A": "S",
        "\u015B": "s",
        "\u015C": "S",
        "\u015D": "s",
        "\u015E": "S",
        "\u0218": "S",
        "\u0219": "s",
        "\u015F": "s",
        "\u0160": "S",
        "\u0161": "s",
        "\u0162": "T",
        "\u0163": "t",
        "\u021B": "t",
        "\u021A": "T",
        "\u0164": "T",
        "\u0165": "t",
        "\u0166": "T",
        "\u0167": "t",
        "T\u0306": "T",
        "t\u0306": "t",
        "\u0168": "U",
        "\u0169": "u",
        "\u016A": "U",
        "\u016B": "u",
        "\u016C": "U",
        "\u016D": "u",
        "\u016E": "U",
        "\u016F": "u",
        "\u0170": "U",
        "\u0171": "u",
        "\u0172": "U",
        "\u0173": "u",
        "\u0216": "U",
        "\u0217": "u",
        "V\u0306": "V",
        "v\u0306": "v",
        "\u0174": "W",
        "\u0175": "w",
        "\u1E82": "W",
        "\u1E83": "w",
        "X\u0306": "X",
        "x\u0306": "x",
        "\u0176": "Y",
        "\u0177": "y",
        "\u0178": "Y",
        "Y\u0306": "Y",
        "y\u0306": "y",
        "\u0179": "Z",
        "\u017A": "z",
        "\u017B": "Z",
        "\u017C": "z",
        "\u017D": "Z",
        "\u017E": "z",
        "\u017F": "s",
        "\u0192": "f",
        "\u01A0": "O",
        "\u01A1": "o",
        "\u01AF": "U",
        "\u01B0": "u",
        "\u01CD": "A",
        "\u01CE": "a",
        "\u01CF": "I",
        "\u01D0": "i",
        "\u01D1": "O",
        "\u01D2": "o",
        "\u01D3": "U",
        "\u01D4": "u",
        "\u01D5": "U",
        "\u01D6": "u",
        "\u01D7": "U",
        "\u01D8": "u",
        "\u01D9": "U",
        "\u01DA": "u",
        "\u01DB": "U",
        "\u01DC": "u",
        "\u1EE8": "U",
        "\u1EE9": "u",
        "\u1E78": "U",
        "\u1E79": "u",
        "\u01FA": "A",
        "\u01FB": "a",
        "\u01FC": "AE",
        "\u01FD": "ae",
        "\u01FE": "O",
        "\u01FF": "o",
        "\xDE": "TH",
        "\xFE": "th",
        "\u1E54": "P",
        "\u1E55": "p",
        "\u1E64": "S",
        "\u1E65": "s",
        "X\u0301": "X",
        "x\u0301": "x",
        "\u0403": "\u0413",
        "\u0453": "\u0433",
        "\u040C": "\u041A",
        "\u045C": "\u043A",
        "A\u030B": "A",
        "a\u030B": "a",
        "E\u030B": "E",
        "e\u030B": "e",
        "I\u030B": "I",
        "i\u030B": "i",
        "\u01F8": "N",
        "\u01F9": "n",
        "\u1ED2": "O",
        "\u1ED3": "o",
        "\u1E50": "O",
        "\u1E51": "o",
        "\u1EEA": "U",
        "\u1EEB": "u",
        "\u1E80": "W",
        "\u1E81": "w",
        "\u1EF2": "Y",
        "\u1EF3": "y",
        "\u0200": "A",
        "\u0201": "a",
        "\u0204": "E",
        "\u0205": "e",
        "\u0208": "I",
        "\u0209": "i",
        "\u020C": "O",
        "\u020D": "o",
        "\u0210": "R",
        "\u0211": "r",
        "\u0214": "U",
        "\u0215": "u",
        "B\u030C": "B",
        "b\u030C": "b",
        "\u010C\u0323": "C",
        "\u010D\u0323": "c",
        "\xCA\u030C": "E",
        "\xEA\u030C": "e",
        "F\u030C": "F",
        "f\u030C": "f",
        "\u01E6": "G",
        "\u01E7": "g",
        "\u021E": "H",
        "\u021F": "h",
        "J\u030C": "J",
        "\u01F0": "j",
        "\u01E8": "K",
        "\u01E9": "k",
        "M\u030C": "M",
        "m\u030C": "m",
        "P\u030C": "P",
        "p\u030C": "p",
        "Q\u030C": "Q",
        "q\u030C": "q",
        "\u0158\u0329": "R",
        "\u0159\u0329": "r",
        "\u1E66": "S",
        "\u1E67": "s",
        "V\u030C": "V",
        "v\u030C": "v",
        "W\u030C": "W",
        "w\u030C": "w",
        "X\u030C": "X",
        "x\u030C": "x",
        "Y\u030C": "Y",
        "y\u030C": "y",
        "A\u0327": "A",
        "a\u0327": "a",
        "B\u0327": "B",
        "b\u0327": "b",
        "\u1E10": "D",
        "\u1E11": "d",
        "\u0228": "E",
        "\u0229": "e",
        "\u0190\u0327": "E",
        "\u025B\u0327": "e",
        "\u1E28": "H",
        "\u1E29": "h",
        "I\u0327": "I",
        "i\u0327": "i",
        "\u0197\u0327": "I",
        "\u0268\u0327": "i",
        "M\u0327": "M",
        "m\u0327": "m",
        "O\u0327": "O",
        "o\u0327": "o",
        "Q\u0327": "Q",
        "q\u0327": "q",
        "U\u0327": "U",
        "u\u0327": "u",
        "X\u0327": "X",
        "x\u0327": "x",
        "Z\u0327": "Z",
        "z\u0327": "z",
        "\u0439": "\u0438",
        "\u0419": "\u0418",
        "\u0451": "\u0435",
        "\u0401": "\u0415"
      };
      var chars = Object.keys(characterMap).join("|");
      var allAccents = new RegExp(chars, "g");
      var firstAccent = new RegExp(chars, "");
      function matcher(match) {
        return characterMap[match];
      }
      var removeAccents4 = function(string) {
        return string.replace(allAccents, matcher);
      };
      var hasAccents = function(string) {
        return !!string.match(firstAccent);
      };
      module.exports = removeAccents4;
      module.exports.has = hasAccents;
      module.exports.remove = removeAccents4;
    }
  });

  // wordpress-external:@wordpress/blob
  var require_blob = __commonJS({
    "wordpress-external:@wordpress/blob"(exports, module) {
      module.exports = window.wp.blob;
    }
  });

  // node_modules/deepmerge/dist/cjs.js
  var require_cjs = __commonJS({
    "node_modules/deepmerge/dist/cjs.js"(exports, module) {
      "use strict";
      var isMergeableObject = function isMergeableObject2(value) {
        return isNonNullObject(value) && !isSpecial(value);
      };
      function isNonNullObject(value) {
        return !!value && typeof value === "object";
      }
      function isSpecial(value) {
        var stringValue = Object.prototype.toString.call(value);
        return stringValue === "[object RegExp]" || stringValue === "[object Date]" || isReactElement(value);
      }
      var canUseSymbol = typeof Symbol === "function" && Symbol.for;
      var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for("react.element") : 60103;
      function isReactElement(value) {
        return value.$$typeof === REACT_ELEMENT_TYPE;
      }
      function emptyTarget(val) {
        return Array.isArray(val) ? [] : {};
      }
      function cloneUnlessOtherwiseSpecified(value, options) {
        return options.clone !== false && options.isMergeableObject(value) ? deepmerge2(emptyTarget(value), value, options) : value;
      }
      function defaultArrayMerge(target, source, options) {
        return target.concat(source).map(function(element) {
          return cloneUnlessOtherwiseSpecified(element, options);
        });
      }
      function getMergeFunction(key, options) {
        if (!options.customMerge) {
          return deepmerge2;
        }
        var customMerge = options.customMerge(key);
        return typeof customMerge === "function" ? customMerge : deepmerge2;
      }
      function getEnumerableOwnPropertySymbols(target) {
        return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(target).filter(function(symbol) {
          return Object.propertyIsEnumerable.call(target, symbol);
        }) : [];
      }
      function getKeys(target) {
        return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target));
      }
      function propertyIsOnObject(object, property) {
        try {
          return property in object;
        } catch (_) {
          return false;
        }
      }
      function propertyIsUnsafe(target, key) {
        return propertyIsOnObject(target, key) && !(Object.hasOwnProperty.call(target, key) && Object.propertyIsEnumerable.call(target, key));
      }
      function mergeObject(target, source, options) {
        var destination = {};
        if (options.isMergeableObject(target)) {
          getKeys(target).forEach(function(key) {
            destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
          });
        }
        getKeys(source).forEach(function(key) {
          if (propertyIsUnsafe(target, key)) {
            return;
          }
          if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
            destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
          } else {
            destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
          }
        });
        return destination;
      }
      function deepmerge2(target, source, options) {
        options = options || {};
        options.arrayMerge = options.arrayMerge || defaultArrayMerge;
        options.isMergeableObject = options.isMergeableObject || isMergeableObject;
        options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;
        var sourceIsArray = Array.isArray(source);
        var targetIsArray = Array.isArray(target);
        var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;
        if (!sourceAndTargetTypesMatch) {
          return cloneUnlessOtherwiseSpecified(source, options);
        } else if (sourceIsArray) {
          return options.arrayMerge(target, source, options);
        } else {
          return mergeObject(target, source, options);
        }
      }
      deepmerge2.all = function deepmergeAll(array, options) {
        if (!Array.isArray(array)) {
          throw new Error("first argument should be an array");
        }
        return array.reduce(function(prev, next) {
          return deepmerge2(prev, next, options);
        }, {});
      };
      var deepmerge_1 = deepmerge2;
      module.exports = deepmerge_1;
    }
  });

  // wordpress-external:@wordpress/commands
  var require_commands = __commonJS({
    "wordpress-external:@wordpress/commands"(exports, module) {
      module.exports = window.wp.commands;
    }
  });

  // wordpress-external:@wordpress/viewport
  var require_viewport = __commonJS({
    "wordpress-external:@wordpress/viewport"(exports, module) {
      module.exports = window.wp.viewport;
    }
  });

  // wordpress-external:@wordpress/plugins
  var require_plugins = __commonJS({
    "wordpress-external:@wordpress/plugins"(exports, module) {
      module.exports = window.wp.plugins;
    }
  });

  // wordpress-external:@wordpress/keyboard-shortcuts
  var require_keyboard_shortcuts = __commonJS({
    "wordpress-external:@wordpress/keyboard-shortcuts"(exports, module) {
      module.exports = window.wp.keyboardShortcuts;
    }
  });

  // wordpress-external:@wordpress/keycodes
  var require_keycodes = __commonJS({
    "wordpress-external:@wordpress/keycodes"(exports, module) {
      module.exports = window.wp.keycodes;
    }
  });

  // node_modules/fast-deep-equal/index.js
  var require_fast_deep_equal = __commonJS({
    "node_modules/fast-deep-equal/index.js"(exports, module) {
      "use strict";
      module.exports = function equal(a2, b2) {
        if (a2 === b2) return true;
        if (a2 && b2 && typeof a2 == "object" && typeof b2 == "object") {
          if (a2.constructor !== b2.constructor) return false;
          var length, i2, keys;
          if (Array.isArray(a2)) {
            length = a2.length;
            if (length != b2.length) return false;
            for (i2 = length; i2-- !== 0; )
              if (!equal(a2[i2], b2[i2])) return false;
            return true;
          }
          if (a2.constructor === RegExp) return a2.source === b2.source && a2.flags === b2.flags;
          if (a2.valueOf !== Object.prototype.valueOf) return a2.valueOf() === b2.valueOf();
          if (a2.toString !== Object.prototype.toString) return a2.toString() === b2.toString();
          keys = Object.keys(a2);
          length = keys.length;
          if (length !== Object.keys(b2).length) return false;
          for (i2 = length; i2-- !== 0; )
            if (!Object.prototype.hasOwnProperty.call(b2, keys[i2])) return false;
          for (i2 = length; i2-- !== 0; ) {
            var key = keys[i2];
            if (!equal(a2[key], b2[key])) return false;
          }
          return true;
        }
        return a2 !== a2 && b2 !== b2;
      };
    }
  });

  // wordpress-external:@wordpress/dom
  var require_dom = __commonJS({
    "wordpress-external:@wordpress/dom"(exports, module) {
      module.exports = window.wp.dom;
    }
  });

  // wordpress-external:@wordpress/rich-text
  var require_rich_text = __commonJS({
    "wordpress-external:@wordpress/rich-text"(exports, module) {
      module.exports = window.wp.richText;
    }
  });

  // wordpress-external:@wordpress/warning
  var require_warning = __commonJS({
    "wordpress-external:@wordpress/warning"(exports, module) {
      module.exports = window.wp.warning;
    }
  });

  // vendor-external:react
  var require_react = __commonJS({
    "vendor-external:react"(exports, module) {
      module.exports = window.React;
    }
  });

  // node_modules/react-is/cjs/react-is.development.js
  var require_react_is_development = __commonJS({
    "node_modules/react-is/cjs/react-is.development.js"(exports) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          var hasSymbol = typeof Symbol === "function" && Symbol.for;
          var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
          var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
          var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
          var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
          var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
          var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
          var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
          var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
          var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
          var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
          var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
          var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
          var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
          var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
          var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
          var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
          var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
          var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
          function isValidElementType(type) {
            return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
            type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
          }
          function typeOf(object) {
            if (typeof object === "object" && object !== null) {
              var $$typeof = object.$$typeof;
              switch ($$typeof) {
                case REACT_ELEMENT_TYPE:
                  var type = object.type;
                  switch (type) {
                    case REACT_ASYNC_MODE_TYPE:
                    case REACT_CONCURRENT_MODE_TYPE:
                    case REACT_FRAGMENT_TYPE:
                    case REACT_PROFILER_TYPE:
                    case REACT_STRICT_MODE_TYPE:
                    case REACT_SUSPENSE_TYPE:
                      return type;
                    default:
                      var $$typeofType = type && type.$$typeof;
                      switch ($$typeofType) {
                        case REACT_CONTEXT_TYPE:
                        case REACT_FORWARD_REF_TYPE:
                        case REACT_LAZY_TYPE:
                        case REACT_MEMO_TYPE:
                        case REACT_PROVIDER_TYPE:
                          return $$typeofType;
                        default:
                          return $$typeof;
                      }
                  }
                case REACT_PORTAL_TYPE:
                  return $$typeof;
              }
            }
            return void 0;
          }
          var AsyncMode = REACT_ASYNC_MODE_TYPE;
          var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
          var ContextConsumer = REACT_CONTEXT_TYPE;
          var ContextProvider = REACT_PROVIDER_TYPE;
          var Element2 = REACT_ELEMENT_TYPE;
          var ForwardRef = REACT_FORWARD_REF_TYPE;
          var Fragment54 = REACT_FRAGMENT_TYPE;
          var Lazy = REACT_LAZY_TYPE;
          var Memo = REACT_MEMO_TYPE;
          var Portal = REACT_PORTAL_TYPE;
          var Profiler = REACT_PROFILER_TYPE;
          var StrictMode = REACT_STRICT_MODE_TYPE;
          var Suspense = REACT_SUSPENSE_TYPE;
          var hasWarnedAboutDeprecatedIsAsyncMode = false;
          function isAsyncMode(object) {
            {
              if (!hasWarnedAboutDeprecatedIsAsyncMode) {
                hasWarnedAboutDeprecatedIsAsyncMode = true;
                console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
              }
            }
            return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
          }
          function isConcurrentMode(object) {
            return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
          }
          function isContextConsumer(object) {
            return typeOf(object) === REACT_CONTEXT_TYPE;
          }
          function isContextProvider(object) {
            return typeOf(object) === REACT_PROVIDER_TYPE;
          }
          function isElement2(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          function isForwardRef(object) {
            return typeOf(object) === REACT_FORWARD_REF_TYPE;
          }
          function isFragment(object) {
            return typeOf(object) === REACT_FRAGMENT_TYPE;
          }
          function isLazy(object) {
            return typeOf(object) === REACT_LAZY_TYPE;
          }
          function isMemo(object) {
            return typeOf(object) === REACT_MEMO_TYPE;
          }
          function isPortal(object) {
            return typeOf(object) === REACT_PORTAL_TYPE;
          }
          function isProfiler(object) {
            return typeOf(object) === REACT_PROFILER_TYPE;
          }
          function isStrictMode(object) {
            return typeOf(object) === REACT_STRICT_MODE_TYPE;
          }
          function isSuspense(object) {
            return typeOf(object) === REACT_SUSPENSE_TYPE;
          }
          exports.AsyncMode = AsyncMode;
          exports.ConcurrentMode = ConcurrentMode;
          exports.ContextConsumer = ContextConsumer;
          exports.ContextProvider = ContextProvider;
          exports.Element = Element2;
          exports.ForwardRef = ForwardRef;
          exports.Fragment = Fragment54;
          exports.Lazy = Lazy;
          exports.Memo = Memo;
          exports.Portal = Portal;
          exports.Profiler = Profiler;
          exports.StrictMode = StrictMode;
          exports.Suspense = Suspense;
          exports.isAsyncMode = isAsyncMode;
          exports.isConcurrentMode = isConcurrentMode;
          exports.isContextConsumer = isContextConsumer;
          exports.isContextProvider = isContextProvider;
          exports.isElement = isElement2;
          exports.isForwardRef = isForwardRef;
          exports.isFragment = isFragment;
          exports.isLazy = isLazy;
          exports.isMemo = isMemo;
          exports.isPortal = isPortal;
          exports.isProfiler = isProfiler;
          exports.isStrictMode = isStrictMode;
          exports.isSuspense = isSuspense;
          exports.isValidElementType = isValidElementType;
          exports.typeOf = typeOf;
        })();
      }
    }
  });

  // node_modules/react-is/index.js
  var require_react_is = __commonJS({
    "node_modules/react-is/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_is_development();
      }
    }
  });

  // node_modules/object-assign/index.js
  var require_object_assign = __commonJS({
    "node_modules/object-assign/index.js"(exports, module) {
      "use strict";
      var getOwnPropertySymbols = Object.getOwnPropertySymbols;
      var hasOwnProperty = Object.prototype.hasOwnProperty;
      var propIsEnumerable = Object.prototype.propertyIsEnumerable;
      function toObject(val) {
        if (val === null || val === void 0) {
          throw new TypeError("Object.assign cannot be called with null or undefined");
        }
        return Object(val);
      }
      function shouldUseNative() {
        try {
          if (!Object.assign) {
            return false;
          }
          var test1 = new String("abc");
          test1[5] = "de";
          if (Object.getOwnPropertyNames(test1)[0] === "5") {
            return false;
          }
          var test2 = {};
          for (var i2 = 0; i2 < 10; i2++) {
            test2["_" + String.fromCharCode(i2)] = i2;
          }
          var order2 = Object.getOwnPropertyNames(test2).map(function(n2) {
            return test2[n2];
          });
          if (order2.join("") !== "0123456789") {
            return false;
          }
          var test3 = {};
          "abcdefghijklmnopqrst".split("").forEach(function(letter) {
            test3[letter] = letter;
          });
          if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
            return false;
          }
          return true;
        } catch (err) {
          return false;
        }
      }
      module.exports = shouldUseNative() ? Object.assign : function(target, source) {
        var from;
        var to = toObject(target);
        var symbols;
        for (var s2 = 1; s2 < arguments.length; s2++) {
          from = Object(arguments[s2]);
          for (var key in from) {
            if (hasOwnProperty.call(from, key)) {
              to[key] = from[key];
            }
          }
          if (getOwnPropertySymbols) {
            symbols = getOwnPropertySymbols(from);
            for (var i2 = 0; i2 < symbols.length; i2++) {
              if (propIsEnumerable.call(from, symbols[i2])) {
                to[symbols[i2]] = from[symbols[i2]];
              }
            }
          }
        }
        return to;
      };
    }
  });

  // node_modules/prop-types/lib/ReactPropTypesSecret.js
  var require_ReactPropTypesSecret = __commonJS({
    "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
      "use strict";
      var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
      module.exports = ReactPropTypesSecret;
    }
  });

  // node_modules/prop-types/lib/has.js
  var require_has = __commonJS({
    "node_modules/prop-types/lib/has.js"(exports, module) {
      module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
    }
  });

  // node_modules/prop-types/checkPropTypes.js
  var require_checkPropTypes = __commonJS({
    "node_modules/prop-types/checkPropTypes.js"(exports, module) {
      "use strict";
      var printWarning = function() {
      };
      if (true) {
        ReactPropTypesSecret = require_ReactPropTypesSecret();
        loggedTypeFailures = {};
        has = require_has();
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      var ReactPropTypesSecret;
      var loggedTypeFailures;
      var has;
      function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
        if (true) {
          for (var typeSpecName in typeSpecs) {
            if (has(typeSpecs, typeSpecName)) {
              var error;
              try {
                if (typeof typeSpecs[typeSpecName] !== "function") {
                  var err = Error(
                    (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                  );
                  err.name = "Invariant Violation";
                  throw err;
                }
                error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
              } catch (ex) {
                error = ex;
              }
              if (error && !(error instanceof Error)) {
                printWarning(
                  (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
                );
              }
              if (error instanceof Error && !(error.message in loggedTypeFailures)) {
                loggedTypeFailures[error.message] = true;
                var stack = getStack ? getStack() : "";
                printWarning(
                  "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
                );
              }
            }
          }
        }
      }
      checkPropTypes.resetWarningCache = function() {
        if (true) {
          loggedTypeFailures = {};
        }
      };
      module.exports = checkPropTypes;
    }
  });

  // node_modules/prop-types/factoryWithTypeCheckers.js
  var require_factoryWithTypeCheckers = __commonJS({
    "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
      "use strict";
      var ReactIs = require_react_is();
      var assign = require_object_assign();
      var ReactPropTypesSecret = require_ReactPropTypesSecret();
      var has = require_has();
      var checkPropTypes = require_checkPropTypes();
      var printWarning = function() {
      };
      if (true) {
        printWarning = function(text) {
          var message = "Warning: " + text;
          if (typeof console !== "undefined") {
            console.error(message);
          }
          try {
            throw new Error(message);
          } catch (x) {
          }
        };
      }
      function emptyFunctionThatReturnsNull() {
        return null;
      }
      module.exports = function(isValidElement, throwOnDirectAccess) {
        var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
          if (typeof iteratorFn === "function") {
            return iteratorFn;
          }
        }
        var ANONYMOUS = "<<anonymous>>";
        var ReactPropTypes = {
          array: createPrimitiveTypeChecker("array"),
          bigint: createPrimitiveTypeChecker("bigint"),
          bool: createPrimitiveTypeChecker("boolean"),
          func: createPrimitiveTypeChecker("function"),
          number: createPrimitiveTypeChecker("number"),
          object: createPrimitiveTypeChecker("object"),
          string: createPrimitiveTypeChecker("string"),
          symbol: createPrimitiveTypeChecker("symbol"),
          any: createAnyTypeChecker(),
          arrayOf: createArrayOfTypeChecker,
          element: createElementTypeChecker(),
          elementType: createElementTypeTypeChecker(),
          instanceOf: createInstanceTypeChecker,
          node: createNodeChecker(),
          objectOf: createObjectOfTypeChecker,
          oneOf: createEnumTypeChecker,
          oneOfType: createUnionTypeChecker,
          shape: createShapeTypeChecker,
          exact: createStrictShapeTypeChecker
        };
        function is(x, y2) {
          if (x === y2) {
            return x !== 0 || 1 / x === 1 / y2;
          } else {
            return x !== x && y2 !== y2;
          }
        }
        function PropTypeError(message, data) {
          this.message = message;
          this.data = data && typeof data === "object" ? data : {};
          this.stack = "";
        }
        PropTypeError.prototype = Error.prototype;
        function createChainableTypeChecker(validate) {
          if (true) {
            var manualPropTypeCallCache = {};
            var manualPropTypeWarningCount = 0;
          }
          function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
            componentName = componentName || ANONYMOUS;
            propFullName = propFullName || propName;
            if (secret !== ReactPropTypesSecret) {
              if (throwOnDirectAccess) {
                var err = new Error(
                  "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
                );
                err.name = "Invariant Violation";
                throw err;
              } else if (typeof console !== "undefined") {
                var cacheKey = componentName + ":" + propName;
                if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
                manualPropTypeWarningCount < 3) {
                  printWarning(
                    "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                  );
                  manualPropTypeCallCache[cacheKey] = true;
                  manualPropTypeWarningCount++;
                }
              }
            }
            if (props[propName] == null) {
              if (isRequired) {
                if (props[propName] === null) {
                  return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
                }
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
              }
              return null;
            } else {
              return validate(props, propName, componentName, location, propFullName);
            }
          }
          var chainedCheckType = checkType.bind(null, false);
          chainedCheckType.isRequired = checkType.bind(null, true);
          return chainedCheckType;
        }
        function createPrimitiveTypeChecker(expectedType) {
          function validate(props, propName, componentName, location, propFullName, secret) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== expectedType) {
              var preciseType = getPreciseType(propValue);
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
                { expectedType }
              );
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createAnyTypeChecker() {
          return createChainableTypeChecker(emptyFunctionThatReturnsNull);
        }
        function createArrayOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
            }
            var propValue = props[propName];
            if (!Array.isArray(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
            }
            for (var i2 = 0; i2 < propValue.length; i2++) {
              var error = typeChecker(propValue, i2, componentName, location, propFullName + "[" + i2 + "]", ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!isValidElement(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createElementTypeTypeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            if (!ReactIs.isValidElementType(propValue)) {
              var propType = getPropType(propValue);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createInstanceTypeChecker(expectedClass) {
          function validate(props, propName, componentName, location, propFullName) {
            if (!(props[propName] instanceof expectedClass)) {
              var expectedClassName = expectedClass.name || ANONYMOUS;
              var actualClassName = getClassName(props[propName]);
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createEnumTypeChecker(expectedValues) {
          if (!Array.isArray(expectedValues)) {
            if (true) {
              if (arguments.length > 1) {
                printWarning(
                  "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
                );
              } else {
                printWarning("Invalid argument supplied to oneOf, expected an array.");
              }
            }
            return emptyFunctionThatReturnsNull;
          }
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            for (var i2 = 0; i2 < expectedValues.length; i2++) {
              if (is(propValue, expectedValues[i2])) {
                return null;
              }
            }
            var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
              var type = getPreciseType(value);
              if (type === "symbol") {
                return String(value);
              }
              return value;
            });
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createObjectOfTypeChecker(typeChecker) {
          function validate(props, propName, componentName, location, propFullName) {
            if (typeof typeChecker !== "function") {
              return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
            }
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
            }
            for (var key in propValue) {
              if (has(propValue, key)) {
                var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
                if (error instanceof Error) {
                  return error;
                }
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createUnionTypeChecker(arrayOfTypeCheckers) {
          if (!Array.isArray(arrayOfTypeCheckers)) {
            true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
            return emptyFunctionThatReturnsNull;
          }
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker = arrayOfTypeCheckers[i2];
            if (typeof checker !== "function") {
              printWarning(
                "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i2 + "."
              );
              return emptyFunctionThatReturnsNull;
            }
          }
          function validate(props, propName, componentName, location, propFullName) {
            var expectedTypes = [];
            for (var i3 = 0; i3 < arrayOfTypeCheckers.length; i3++) {
              var checker2 = arrayOfTypeCheckers[i3];
              var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
              if (checkerResult == null) {
                return null;
              }
              if (checkerResult.data && has(checkerResult.data, "expectedType")) {
                expectedTypes.push(checkerResult.data.expectedType);
              }
            }
            var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
          }
          return createChainableTypeChecker(validate);
        }
        function createNodeChecker() {
          function validate(props, propName, componentName, location, propFullName) {
            if (!isNode2(props[propName])) {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function invalidValidatorError(componentName, location, propFullName, key, type) {
          return new PropTypeError(
            (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
          );
        }
        function createShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            for (var key in shapeTypes) {
              var checker = shapeTypes[key];
              if (typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function createStrictShapeTypeChecker(shapeTypes) {
          function validate(props, propName, componentName, location, propFullName) {
            var propValue = props[propName];
            var propType = getPropType(propValue);
            if (propType !== "object") {
              return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
            }
            var allKeys = assign({}, props[propName], shapeTypes);
            for (var key in allKeys) {
              var checker = shapeTypes[key];
              if (has(shapeTypes, key) && typeof checker !== "function") {
                return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
              }
              if (!checker) {
                return new PropTypeError(
                  "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
                );
              }
              var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error) {
                return error;
              }
            }
            return null;
          }
          return createChainableTypeChecker(validate);
        }
        function isNode2(propValue) {
          switch (typeof propValue) {
            case "number":
            case "string":
            case "undefined":
              return true;
            case "boolean":
              return !propValue;
            case "object":
              if (Array.isArray(propValue)) {
                return propValue.every(isNode2);
              }
              if (propValue === null || isValidElement(propValue)) {
                return true;
              }
              var iteratorFn = getIteratorFn(propValue);
              if (iteratorFn) {
                var iterator = iteratorFn.call(propValue);
                var step;
                if (iteratorFn !== propValue.entries) {
                  while (!(step = iterator.next()).done) {
                    if (!isNode2(step.value)) {
                      return false;
                    }
                  }
                } else {
                  while (!(step = iterator.next()).done) {
                    var entry = step.value;
                    if (entry) {
                      if (!isNode2(entry[1])) {
                        return false;
                      }
                    }
                  }
                }
              } else {
                return false;
              }
              return true;
            default:
              return false;
          }
        }
        function isSymbol(propType, propValue) {
          if (propType === "symbol") {
            return true;
          }
          if (!propValue) {
            return false;
          }
          if (propValue["@@toStringTag"] === "Symbol") {
            return true;
          }
          if (typeof Symbol === "function" && propValue instanceof Symbol) {
            return true;
          }
          return false;
        }
        function getPropType(propValue) {
          var propType = typeof propValue;
          if (Array.isArray(propValue)) {
            return "array";
          }
          if (propValue instanceof RegExp) {
            return "object";
          }
          if (isSymbol(propType, propValue)) {
            return "symbol";
          }
          return propType;
        }
        function getPreciseType(propValue) {
          if (typeof propValue === "undefined" || propValue === null) {
            return "" + propValue;
          }
          var propType = getPropType(propValue);
          if (propType === "object") {
            if (propValue instanceof Date) {
              return "date";
            } else if (propValue instanceof RegExp) {
              return "regexp";
            }
          }
          return propType;
        }
        function getPostfixForTypeWarning(value) {
          var type = getPreciseType(value);
          switch (type) {
            case "array":
            case "object":
              return "an " + type;
            case "boolean":
            case "date":
            case "regexp":
              return "a " + type;
            default:
              return type;
          }
        }
        function getClassName(propValue) {
          if (!propValue.constructor || !propValue.constructor.name) {
            return ANONYMOUS;
          }
          return propValue.constructor.name;
        }
        ReactPropTypes.checkPropTypes = checkPropTypes;
        ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
        ReactPropTypes.PropTypes = ReactPropTypes;
        return ReactPropTypes;
      };
    }
  });

  // node_modules/prop-types/index.js
  var require_prop_types = __commonJS({
    "node_modules/prop-types/index.js"(exports, module) {
      if (true) {
        ReactIs = require_react_is();
        throwOnDirectAccess = true;
        module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
      } else {
        module.exports = null();
      }
      var ReactIs;
      var throwOnDirectAccess;
    }
  });

  // node_modules/autosize/dist/autosize.js
  var require_autosize = __commonJS({
    "node_modules/autosize/dist/autosize.js"(exports, module) {
      (function(global, factory) {
        if (typeof define === "function" && define.amd) {
          define(["module", "exports"], factory);
        } else if (typeof exports !== "undefined") {
          factory(module, exports);
        } else {
          var mod = {
            exports: {}
          };
          factory(mod, mod.exports);
          global.autosize = mod.exports;
        }
      })(exports, function(module2, exports2) {
        "use strict";
        var map = typeof Map === "function" ? /* @__PURE__ */ new Map() : /* @__PURE__ */ (function() {
          var keys = [];
          var values = [];
          return {
            has: function has(key) {
              return keys.indexOf(key) > -1;
            },
            get: function get(key) {
              return values[keys.indexOf(key)];
            },
            set: function set(key, value) {
              if (keys.indexOf(key) === -1) {
                keys.push(key);
                values.push(value);
              }
            },
            delete: function _delete(key) {
              var index2 = keys.indexOf(key);
              if (index2 > -1) {
                keys.splice(index2, 1);
                values.splice(index2, 1);
              }
            }
          };
        })();
        var createEvent = function createEvent2(name) {
          return new Event(name, { bubbles: true });
        };
        try {
          new Event("test");
        } catch (e2) {
          createEvent = function createEvent2(name) {
            var evt = document.createEvent("Event");
            evt.initEvent(name, true, false);
            return evt;
          };
        }
        function assign(ta) {
          if (!ta || !ta.nodeName || ta.nodeName !== "TEXTAREA" || map.has(ta)) return;
          var heightOffset = null;
          var clientWidth = null;
          var cachedHeight = null;
          function init() {
            var style = window.getComputedStyle(ta, null);
            if (style.resize === "vertical") {
              ta.style.resize = "none";
            } else if (style.resize === "both") {
              ta.style.resize = "horizontal";
            }
            if (style.boxSizing === "content-box") {
              heightOffset = -(parseFloat(style.paddingTop) + parseFloat(style.paddingBottom));
            } else {
              heightOffset = parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth);
            }
            if (isNaN(heightOffset)) {
              heightOffset = 0;
            }
            update2();
          }
          function changeOverflow(value) {
            {
              var width = ta.style.width;
              ta.style.width = "0px";
              ta.offsetWidth;
              ta.style.width = width;
            }
            ta.style.overflowY = value;
          }
          function getParentOverflows(el) {
            var arr = [];
            while (el && el.parentNode && el.parentNode instanceof Element) {
              if (el.parentNode.scrollTop) {
                arr.push({
                  node: el.parentNode,
                  scrollTop: el.parentNode.scrollTop
                });
              }
              el = el.parentNode;
            }
            return arr;
          }
          function resize() {
            if (ta.scrollHeight === 0) {
              return;
            }
            var overflows = getParentOverflows(ta);
            var docTop = document.documentElement && document.documentElement.scrollTop;
            ta.style.height = "";
            ta.style.height = ta.scrollHeight + heightOffset + "px";
            clientWidth = ta.clientWidth;
            overflows.forEach(function(el) {
              el.node.scrollTop = el.scrollTop;
            });
            if (docTop) {
              document.documentElement.scrollTop = docTop;
            }
          }
          function update2() {
            resize();
            var styleHeight = Math.round(parseFloat(ta.style.height));
            var computed = window.getComputedStyle(ta, null);
            var actualHeight = computed.boxSizing === "content-box" ? Math.round(parseFloat(computed.height)) : ta.offsetHeight;
            if (actualHeight < styleHeight) {
              if (computed.overflowY === "hidden") {
                changeOverflow("scroll");
                resize();
                actualHeight = computed.boxSizing === "content-box" ? Math.round(parseFloat(window.getComputedStyle(ta, null).height)) : ta.offsetHeight;
              }
            } else {
              if (computed.overflowY !== "hidden") {
                changeOverflow("hidden");
                resize();
                actualHeight = computed.boxSizing === "content-box" ? Math.round(parseFloat(window.getComputedStyle(ta, null).height)) : ta.offsetHeight;
              }
            }
            if (cachedHeight !== actualHeight) {
              cachedHeight = actualHeight;
              var evt = createEvent("autosize:resized");
              try {
                ta.dispatchEvent(evt);
              } catch (err) {
              }
            }
          }
          var pageResize = function pageResize2() {
            if (ta.clientWidth !== clientWidth) {
              update2();
            }
          };
          var destroy2 = function(style) {
            window.removeEventListener("resize", pageResize, false);
            ta.removeEventListener("input", update2, false);
            ta.removeEventListener("keyup", update2, false);
            ta.removeEventListener("autosize:destroy", destroy2, false);
            ta.removeEventListener("autosize:update", update2, false);
            Object.keys(style).forEach(function(key) {
              ta.style[key] = style[key];
            });
            map.delete(ta);
          }.bind(ta, {
            height: ta.style.height,
            resize: ta.style.resize,
            overflowY: ta.style.overflowY,
            overflowX: ta.style.overflowX,
            wordWrap: ta.style.wordWrap
          });
          ta.addEventListener("autosize:destroy", destroy2, false);
          if ("onpropertychange" in ta && "oninput" in ta) {
            ta.addEventListener("keyup", update2, false);
          }
          window.addEventListener("resize", pageResize, false);
          ta.addEventListener("input", update2, false);
          ta.addEventListener("autosize:update", update2, false);
          ta.style.overflowX = "hidden";
          ta.style.wordWrap = "break-word";
          map.set(ta, {
            destroy: destroy2,
            update: update2
          });
          init();
        }
        function destroy(ta) {
          var methods = map.get(ta);
          if (methods) {
            methods.destroy();
          }
        }
        function update(ta) {
          var methods = map.get(ta);
          if (methods) {
            methods.update();
          }
        }
        var autosize = null;
        if (typeof window === "undefined" || typeof window.getComputedStyle !== "function") {
          autosize = function autosize2(el) {
            return el;
          };
          autosize.destroy = function(el) {
            return el;
          };
          autosize.update = function(el) {
            return el;
          };
        } else {
          autosize = function autosize2(el, options) {
            if (el) {
              Array.prototype.forEach.call(el.length ? el : [el], function(x) {
                return assign(x, options);
              });
            }
            return el;
          };
          autosize.destroy = function(el) {
            if (el) {
              Array.prototype.forEach.call(el.length ? el : [el], destroy);
            }
            return el;
          };
          autosize.update = function(el) {
            if (el) {
              Array.prototype.forEach.call(el.length ? el : [el], update);
            }
            return el;
          };
        }
        exports2.default = autosize;
        module2.exports = exports2["default"];
      });
    }
  });

  // node_modules/computed-style/dist/computedStyle.commonjs.js
  var require_computedStyle_commonjs = __commonJS({
    "node_modules/computed-style/dist/computedStyle.commonjs.js"(exports, module) {
      var computedStyle = function(el, prop, getComputedStyle2) {
        getComputedStyle2 = window.getComputedStyle;
        return (
          // If we have getComputedStyle
          (getComputedStyle2 ? (
            // Query it
            // TODO: From CSS-Query notes, we might need (node, null) for FF
            getComputedStyle2(el)
          ) : (
            // Otherwise, we are in IE and use currentStyle
            el.currentStyle
          ))[
            // Switch to camelCase for CSSOM
            // DEV: Grabbed from jQuery
            // https://github.com/jquery/jquery/blob/1.9-stable/src/css.js#L191-L194
            // https://github.com/jquery/jquery/blob/1.9-stable/src/core.js#L593-L597
            prop.replace(/-(\w)/gi, function(word, letter) {
              return letter.toUpperCase();
            })
          ]
        );
      };
      module.exports = computedStyle;
    }
  });

  // node_modules/line-height/lib/line-height.js
  var require_line_height = __commonJS({
    "node_modules/line-height/lib/line-height.js"(exports, module) {
      var computedStyle = require_computedStyle_commonjs();
      function lineHeight(node) {
        var lnHeightStr = computedStyle(node, "line-height");
        var lnHeight = parseFloat(lnHeightStr, 10);
        if (lnHeightStr === lnHeight + "") {
          var _lnHeightStyle = node.style.lineHeight;
          node.style.lineHeight = lnHeightStr + "em";
          lnHeightStr = computedStyle(node, "line-height");
          lnHeight = parseFloat(lnHeightStr, 10);
          if (_lnHeightStyle) {
            node.style.lineHeight = _lnHeightStyle;
          } else {
            delete node.style.lineHeight;
          }
        }
        if (lnHeightStr.indexOf("pt") !== -1) {
          lnHeight *= 4;
          lnHeight /= 3;
        } else if (lnHeightStr.indexOf("mm") !== -1) {
          lnHeight *= 96;
          lnHeight /= 25.4;
        } else if (lnHeightStr.indexOf("cm") !== -1) {
          lnHeight *= 96;
          lnHeight /= 2.54;
        } else if (lnHeightStr.indexOf("in") !== -1) {
          lnHeight *= 96;
        } else if (lnHeightStr.indexOf("pc") !== -1) {
          lnHeight *= 16;
        }
        lnHeight = Math.round(lnHeight);
        if (lnHeightStr === "normal") {
          var nodeName = node.nodeName;
          var _node = document.createElement(nodeName);
          _node.innerHTML = "&nbsp;";
          if (nodeName.toUpperCase() === "TEXTAREA") {
            _node.setAttribute("rows", "1");
          }
          var fontSizeStr = computedStyle(node, "font-size");
          _node.style.fontSize = fontSizeStr;
          _node.style.padding = "0px";
          _node.style.border = "0px";
          var body = document.body;
          body.appendChild(_node);
          var height = _node.offsetHeight;
          lnHeight = height;
          body.removeChild(_node);
        }
        return lnHeight;
      }
      module.exports = lineHeight;
    }
  });

  // node_modules/react-autosize-textarea/lib/TextareaAutosize.js
  var require_TextareaAutosize = __commonJS({
    "node_modules/react-autosize-textarea/lib/TextareaAutosize.js"(exports) {
      "use strict";
      var __extends = exports && exports.__extends || (function() {
        var extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p2 in b2) if (b2.hasOwnProperty(p2)) d2[p2] = b2[p2];
        };
        return function(d2, b2) {
          extendStatics(d2, b2);
          function __169() {
            this.constructor = d2;
          }
          d2.prototype = b2 === null ? Object.create(b2) : (__169.prototype = b2.prototype, new __169());
        };
      })();
      var __assign2 = exports && exports.__assign || Object.assign || function(t2) {
        for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
          s2 = arguments[i2];
          for (var p2 in s2) if (Object.prototype.hasOwnProperty.call(s2, p2))
            t2[p2] = s2[p2];
        }
        return t2;
      };
      var __rest = exports && exports.__rest || function(s2, e2) {
        var t2 = {};
        for (var p2 in s2) if (Object.prototype.hasOwnProperty.call(s2, p2) && e2.indexOf(p2) < 0)
          t2[p2] = s2[p2];
        if (s2 != null && typeof Object.getOwnPropertySymbols === "function") {
          for (var i2 = 0, p2 = Object.getOwnPropertySymbols(s2); i2 < p2.length; i2++) if (e2.indexOf(p2[i2]) < 0)
            t2[p2[i2]] = s2[p2[i2]];
        }
        return t2;
      };
      exports.__esModule = true;
      var React2 = require_react();
      var PropTypes = require_prop_types();
      var autosize = require_autosize();
      var _getLineHeight = require_line_height();
      var getLineHeight = _getLineHeight;
      var RESIZED = "autosize:resized";
      var TextareaAutosizeClass = (
        /** @class */
        (function(_super) {
          __extends(TextareaAutosizeClass2, _super);
          function TextareaAutosizeClass2() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.state = {
              lineHeight: null
            };
            _this.textarea = null;
            _this.onResize = function(e2) {
              if (_this.props.onResize) {
                _this.props.onResize(e2);
              }
            };
            _this.updateLineHeight = function() {
              if (_this.textarea) {
                _this.setState({
                  lineHeight: getLineHeight(_this.textarea)
                });
              }
            };
            _this.onChange = function(e2) {
              var onChange = _this.props.onChange;
              _this.currentValue = e2.currentTarget.value;
              onChange && onChange(e2);
            };
            return _this;
          }
          TextareaAutosizeClass2.prototype.componentDidMount = function() {
            var _this = this;
            var _a = this.props, maxRows = _a.maxRows, async = _a.async;
            if (typeof maxRows === "number") {
              this.updateLineHeight();
            }
            if (typeof maxRows === "number" || async) {
              setTimeout(function() {
                return _this.textarea && autosize(_this.textarea);
              });
            } else {
              this.textarea && autosize(this.textarea);
            }
            if (this.textarea) {
              this.textarea.addEventListener(RESIZED, this.onResize);
            }
          };
          TextareaAutosizeClass2.prototype.componentWillUnmount = function() {
            if (this.textarea) {
              this.textarea.removeEventListener(RESIZED, this.onResize);
              autosize.destroy(this.textarea);
            }
          };
          TextareaAutosizeClass2.prototype.render = function() {
            var _this = this;
            var _a = this, _b = _a.props, onResize = _b.onResize, maxRows = _b.maxRows, onChange = _b.onChange, style = _b.style, innerRef = _b.innerRef, children = _b.children, props = __rest(_b, ["onResize", "maxRows", "onChange", "style", "innerRef", "children"]), lineHeight = _a.state.lineHeight;
            var maxHeight = maxRows && lineHeight ? lineHeight * maxRows : null;
            return React2.createElement("textarea", __assign2({}, props, { onChange: this.onChange, style: maxHeight ? __assign2({}, style, { maxHeight }) : style, ref: function(element) {
              _this.textarea = element;
              if (typeof _this.props.innerRef === "function") {
                _this.props.innerRef(element);
              } else if (_this.props.innerRef) {
                _this.props.innerRef.current = element;
              }
            } }), children);
          };
          TextareaAutosizeClass2.prototype.componentDidUpdate = function() {
            this.textarea && autosize.update(this.textarea);
          };
          TextareaAutosizeClass2.defaultProps = {
            rows: 1,
            async: false
          };
          TextareaAutosizeClass2.propTypes = {
            rows: PropTypes.number,
            maxRows: PropTypes.number,
            onResize: PropTypes.func,
            innerRef: PropTypes.any,
            async: PropTypes.bool
          };
          return TextareaAutosizeClass2;
        })(React2.Component)
      );
      exports.TextareaAutosize = React2.forwardRef(function(props, ref) {
        return React2.createElement(TextareaAutosizeClass, __assign2({}, props, { innerRef: ref }));
      });
    }
  });

  // node_modules/react-autosize-textarea/lib/index.js
  var require_lib = __commonJS({
    "node_modules/react-autosize-textarea/lib/index.js"(exports) {
      "use strict";
      exports.__esModule = true;
      var TextareaAutosize_1 = require_TextareaAutosize();
      exports["default"] = TextareaAutosize_1.TextareaAutosize;
    }
  });

  // wordpress-external:@wordpress/wordcount
  var require_wordcount = __commonJS({
    "wordpress-external:@wordpress/wordcount"(exports, module) {
      module.exports = window.wp.wordcount;
    }
  });

  // wordpress-external:@wordpress/server-side-render
  var require_server_side_render = __commonJS({
    "wordpress-external:@wordpress/server-side-render"(exports, module) {
      module.exports = window.wp.serverSideRender;
    }
  });

  // vendor-external:react-dom
  var require_react_dom = __commonJS({
    "vendor-external:react-dom"(exports, module) {
      module.exports = window.ReactDOM;
    }
  });

  // packages/editor/build-module/index.js
  var index_exports = {};
  __export(index_exports, {
    AlignmentToolbar: () => AlignmentToolbar,
    Autocomplete: () => Autocomplete,
    AutosaveMonitor: () => autosave_monitor_default,
    BlockAlignmentToolbar: () => BlockAlignmentToolbar,
    BlockControls: () => BlockControls,
    BlockEdit: () => BlockEdit,
    BlockEditorKeyboardShortcuts: () => BlockEditorKeyboardShortcuts2,
    BlockFormatControls: () => BlockFormatControls,
    BlockIcon: () => BlockIcon2,
    BlockInspector: () => BlockInspector,
    BlockList: () => BlockList,
    BlockMover: () => BlockMover,
    BlockNavigationDropdown: () => BlockNavigationDropdown,
    BlockSelectionClearer: () => BlockSelectionClearer,
    BlockSettingsMenu: () => BlockSettingsMenu,
    BlockTitle: () => BlockTitle,
    BlockToolbar: () => BlockToolbar,
    CharacterCount: () => CharacterCount,
    ColorPalette: () => ColorPalette,
    ContrastChecker: () => ContrastChecker,
    CopyHandler: () => CopyHandler,
    DefaultBlockAppender: () => DefaultBlockAppender,
    DocumentBar: () => DocumentBar,
    DocumentOutline: () => DocumentOutline,
    DocumentOutlineCheck: () => DocumentOutlineCheck,
    EditorHistoryRedo: () => redo_default2,
    EditorHistoryUndo: () => undo_default2,
    EditorKeyboardShortcuts: () => EditorKeyboardShortcuts,
    EditorKeyboardShortcutsRegister: () => register_shortcuts_default,
    EditorNotices: () => editor_notices_default,
    EditorProvider: () => provider_default,
    EditorSnackbars: () => EditorSnackbars,
    EntitiesSavedStates: () => EntitiesSavedStates,
    ErrorBoundary: () => error_boundary_default,
    FontSizePicker: () => FontSizePicker,
    InnerBlocks: () => InnerBlocks,
    Inserter: () => Inserter,
    InspectorAdvancedControls: () => InspectorAdvancedControls,
    InspectorControls: () => InspectorControls,
    LocalAutosaveMonitor: () => local_autosave_monitor_default,
    MediaPlaceholder: () => MediaPlaceholder,
    MediaUpload: () => MediaUpload3,
    MediaUploadCheck: () => MediaUploadCheck2,
    MultiSelectScrollIntoView: () => MultiSelectScrollIntoView,
    NavigableToolbar: () => NavigableToolbar,
    ObserveTyping: () => ObserveTyping,
    PageAttributesCheck: () => check_default2,
    PageAttributesOrder: () => PageAttributesOrderWithChecks,
    PageAttributesPanel: () => PageAttributesPanel,
    PageAttributesParent: () => parent_default2,
    PageTemplate: () => classic_theme_default,
    PanelColorSettings: () => PanelColorSettings,
    PlainText: () => PlainText,
    PluginBlockSettingsMenuItem: () => plugin_block_settings_menu_item_default,
    PluginDocumentSettingPanel: () => plugin_document_setting_panel_default,
    PluginMoreMenuItem: () => PluginMoreMenuItem,
    PluginPostPublishPanel: () => plugin_post_publish_panel_default,
    PluginPostStatusInfo: () => plugin_post_status_info_default,
    PluginPrePublishPanel: () => plugin_pre_publish_panel_default,
    PluginPreviewMenuItem: () => PluginPreviewMenuItem,
    PluginSidebar: () => PluginSidebar,
    PluginSidebarMoreMenuItem: () => PluginSidebarMoreMenuItem,
    PostAuthor: () => post_author_default,
    PostAuthorCheck: () => PostAuthorCheck,
    PostAuthorPanel: () => panel_default,
    PostComments: () => post_comments_default,
    PostDiscussionPanel: () => PostDiscussionPanel,
    PostExcerpt: () => PostExcerpt,
    PostExcerptCheck: () => check_default3,
    PostExcerptPanel: () => PostExcerptPanel,
    PostFeaturedImage: () => post_featured_image_default,
    PostFeaturedImageCheck: () => check_default4,
    PostFeaturedImagePanel: () => PostFeaturedImagePanel,
    PostFormat: () => PostFormat,
    PostFormatCheck: () => PostFormatCheck,
    PostLastRevision: () => post_last_revision_default,
    PostLastRevisionCheck: () => check_default5,
    PostLastRevisionPanel: () => panel_default2,
    PostLockedModal: () => post_locked_modal_default,
    PostPendingStatus: () => post_pending_status_default,
    PostPendingStatusCheck: () => check_default6,
    PostPingbacks: () => post_pingbacks_default,
    PostPreviewButton: () => PostPreviewButton,
    PostPublishButton: () => post_publish_button_default,
    PostPublishButtonLabel: () => PublishButtonLabel,
    PostPublishPanel: () => post_publish_panel_default,
    PostSavedState: () => PostSavedState,
    PostSchedule: () => PostSchedule,
    PostScheduleCheck: () => PostScheduleCheck,
    PostScheduleLabel: () => PostScheduleLabel,
    PostSchedulePanel: () => PostSchedulePanel,
    PostSticky: () => PostSticky,
    PostStickyCheck: () => PostStickyCheck,
    PostSwitchToDraftButton: () => PostSwitchToDraftButton,
    PostSyncStatus: () => PostSyncStatus,
    PostTaxonomies: () => post_taxonomies_default,
    PostTaxonomiesCheck: () => PostTaxonomiesCheck,
    PostTaxonomiesFlatTermSelector: () => FlatTermSelector,
    PostTaxonomiesHierarchicalTermSelector: () => HierarchicalTermSelector,
    PostTaxonomiesPanel: () => PostTaxonomies2,
    PostTemplatePanel: () => PostTemplatePanel,
    PostTextEditor: () => PostTextEditor,
    PostTitle: () => post_title_default,
    PostTitleRaw: () => post_title_raw_default,
    PostTrash: () => PostTrash,
    PostTrashCheck: () => PostTrashCheck,
    PostTypeSupportCheck: () => post_type_support_check_default,
    PostURL: () => PostURL,
    PostURLCheck: () => PostURLCheck,
    PostURLLabel: () => PostURLLabel,
    PostURLPanel: () => PostURLPanel,
    PostVisibility: () => PostVisibility,
    PostVisibilityCheck: () => PostVisibilityCheck,
    PostVisibilityLabel: () => PostVisibilityLabel,
    RichText: () => RichText,
    RichTextShortcut: () => RichTextShortcut,
    RichTextToolbarButton: () => RichTextToolbarButton,
    ServerSideRender: () => import_server_side_render.default,
    SkipToSelectedBlock: () => SkipToSelectedBlock,
    TableOfContents: () => table_of_contents_default,
    TextEditorGlobalKeyboardShortcuts: () => TextEditorGlobalKeyboardShortcuts,
    ThemeSupportCheck: () => ThemeSupportCheck,
    TimeToRead: () => TimeToRead,
    URLInput: () => URLInput,
    URLInputButton: () => URLInputButton,
    URLPopover: () => URLPopover,
    UnsavedChangesWarning: () => UnsavedChangesWarning,
    VisualEditorGlobalKeyboardShortcuts: () => VisualEditorGlobalKeyboardShortcuts,
    Warning: () => Warning,
    WordCount: () => WordCount,
    WritingFlow: () => WritingFlow,
    __unstableRichTextInputEvent: () => __unstableRichTextInputEvent,
    cleanForSlug: () => cleanForSlug3,
    createCustomColorsHOC: () => createCustomColorsHOC,
    getColorClassName: () => getColorClassName,
    getColorObjectByAttributeValues: () => getColorObjectByAttributeValues,
    getColorObjectByColorValue: () => getColorObjectByColorValue,
    getFontSize: () => getFontSize,
    getFontSizeClass: () => getFontSizeClass,
    getTemplatePartIcon: () => getTemplatePartIcon,
    mediaUpload: () => mediaUpload,
    privateApis: () => privateApis3,
    registerEntityAction: () => registerEntityAction2,
    registerEntityField: () => registerEntityField2,
    store: () => store,
    storeConfig: () => storeConfig,
    transformStyles: () => import_block_editor81.transformStyles,
    unregisterEntityAction: () => unregisterEntityAction2,
    unregisterEntityField: () => unregisterEntityField2,
    useEntitiesSavedStatesIsDirty: () => useIsDirty,
    usePostScheduleLabel: () => usePostScheduleLabel,
    usePostURLLabel: () => usePostURLLabel,
    usePostVisibilityLabel: () => usePostVisibilityLabel,
    userAutocompleter: () => user_default,
    withColorContext: () => withColorContext,
    withColors: () => withColors,
    withFontSizes: () => withFontSizes
  });

  // packages/editor/build-module/hooks/custom-sources-backwards-compatibility.js
  var import_jsx_runtime103 = __toESM(require_jsx_runtime());
  var import_data51 = __toESM(require_data());
  var import_core_data35 = __toESM(require_core_data());
  var import_element38 = __toESM(require_element());
  var import_compose9 = __toESM(require_compose());
  var import_hooks5 = __toESM(require_hooks());

  // packages/editor/build-module/store/index.js
  var import_data50 = __toESM(require_data());

  // packages/editor/build-module/store/reducer.js
  var import_data2 = __toESM(require_data());

  // packages/editor/build-module/store/defaults.js
  var import_block_editor = __toESM(require_block_editor());
  var EDITOR_SETTINGS_DEFAULTS = {
    ...import_block_editor.SETTINGS_DEFAULTS,
    richEditingEnabled: true,
    codeEditingEnabled: true,
    fontLibraryEnabled: true,
    enableCustomFields: void 0,
    defaultRenderingMode: "post-only"
  };

  // packages/editor/build-module/dataviews/store/reducer.js
  var import_data = __toESM(require_data());
  function isReady(state = {}, action) {
    switch (action.type) {
      case "SET_IS_READY":
        return {
          ...state,
          [action.kind]: {
            ...state[action.kind],
            [action.name]: true
          }
        };
    }
    return state;
  }
  function actions(state = {}, action) {
    switch (action.type) {
      case "REGISTER_ENTITY_ACTION":
        return {
          ...state,
          [action.kind]: {
            ...state[action.kind],
            [action.name]: [
              ...(state[action.kind]?.[action.name] ?? []).filter(
                (_action) => _action.id !== action.config.id
              ),
              action.config
            ]
          }
        };
      case "UNREGISTER_ENTITY_ACTION": {
        return {
          ...state,
          [action.kind]: {
            ...state[action.kind],
            [action.name]: (state[action.kind]?.[action.name] ?? []).filter((_action) => _action.id !== action.actionId)
          }
        };
      }
    }
    return state;
  }
  function fields(state = {}, action) {
    switch (action.type) {
      case "REGISTER_ENTITY_FIELD":
        return {
          ...state,
          [action.kind]: {
            ...state[action.kind],
            [action.name]: [
              ...(state[action.kind]?.[action.name] ?? []).filter(
                (_field) => _field.id !== action.config.id
              ),
              action.config
            ]
          }
        };
      case "UNREGISTER_ENTITY_FIELD":
        return {
          ...state,
          [action.kind]: {
            ...state[action.kind],
            [action.name]: (state[action.kind]?.[action.name] ?? []).filter((_field) => _field.id !== action.fieldId)
          }
        };
    }
    return state;
  }
  var reducer_default = (0, import_data.combineReducers)({
    actions,
    fields,
    isReady
  });

  // packages/editor/build-module/store/reducer.js
  function getPostRawValue(value) {
    if (value && "object" === typeof value && "raw" in value) {
      return value.raw;
    }
    return value;
  }
  function postId(state = null, action) {
    switch (action.type) {
      case "SET_EDITED_POST":
        return action.postId;
    }
    return state;
  }
  function templateId(state = null, action) {
    switch (action.type) {
      case "SET_CURRENT_TEMPLATE_ID":
        return action.id;
    }
    return state;
  }
  function postType(state = null, action) {
    switch (action.type) {
      case "SET_EDITED_POST":
        return action.postType;
    }
    return state;
  }
  function template(state = { isValid: true }, action) {
    switch (action.type) {
      case "SET_TEMPLATE_VALIDITY":
        return {
          ...state,
          isValid: action.isValid
        };
    }
    return state;
  }
  function saving(state = {}, action) {
    switch (action.type) {
      case "REQUEST_POST_UPDATE_START":
      case "REQUEST_POST_UPDATE_FINISH":
        return {
          pending: action.type === "REQUEST_POST_UPDATE_START",
          options: action.options || {}
        };
    }
    return state;
  }
  function deleting(state = {}, action) {
    switch (action.type) {
      case "REQUEST_POST_DELETE_START":
      case "REQUEST_POST_DELETE_FINISH":
        return {
          pending: action.type === "REQUEST_POST_DELETE_START"
        };
    }
    return state;
  }
  function postLock(state = { isLocked: false }, action) {
    switch (action.type) {
      case "UPDATE_POST_LOCK":
        return action.lock;
    }
    return state;
  }
  function postSavingLock(state = {}, action) {
    switch (action.type) {
      case "LOCK_POST_SAVING":
        return { ...state, [action.lockName]: true };
      case "UNLOCK_POST_SAVING": {
        const { [action.lockName]: removedLockName, ...restState } = state;
        return restState;
      }
    }
    return state;
  }
  function postAutosavingLock(state = {}, action) {
    switch (action.type) {
      case "LOCK_POST_AUTOSAVING":
        return { ...state, [action.lockName]: true };
      case "UNLOCK_POST_AUTOSAVING": {
        const { [action.lockName]: removedLockName, ...restState } = state;
        return restState;
      }
    }
    return state;
  }
  function editorSettings(state = EDITOR_SETTINGS_DEFAULTS, action) {
    switch (action.type) {
      case "UPDATE_EDITOR_SETTINGS":
        return {
          ...state,
          ...action.settings
        };
    }
    return state;
  }
  function renderingMode(state = "post-only", action) {
    switch (action.type) {
      case "SET_RENDERING_MODE":
        return action.mode;
    }
    return state;
  }
  function deviceType(state = "Desktop", action) {
    switch (action.type) {
      case "SET_DEVICE_TYPE":
        return action.deviceType;
    }
    return state;
  }
  function removedPanels(state = [], action) {
    switch (action.type) {
      case "REMOVE_PANEL":
        if (!state.includes(action.panelName)) {
          return [...state, action.panelName];
        }
    }
    return state;
  }
  function blockInserterPanel(state = false, action) {
    switch (action.type) {
      case "SET_IS_LIST_VIEW_OPENED":
        return action.isOpen ? false : state;
      case "SET_IS_INSERTER_OPENED":
        return action.value;
    }
    return state;
  }
  function listViewPanel(state = false, action) {
    switch (action.type) {
      case "SET_IS_INSERTER_OPENED":
        return action.value ? false : state;
      case "SET_IS_LIST_VIEW_OPENED":
        return action.isOpen;
    }
    return state;
  }
  function listViewToggleRef(state = { current: null }) {
    return state;
  }
  function inserterSidebarToggleRef(state = { current: null }) {
    return state;
  }
  function publishSidebarActive(state = false, action) {
    switch (action.type) {
      case "OPEN_PUBLISH_SIDEBAR":
        return true;
      case "CLOSE_PUBLISH_SIDEBAR":
        return false;
      case "TOGGLE_PUBLISH_SIDEBAR":
        return !state;
    }
    return state;
  }
  var reducer_default2 = (0, import_data2.combineReducers)({
    postId,
    postType,
    templateId,
    saving,
    deleting,
    postLock,
    template,
    postSavingLock,
    editorSettings,
    postAutosavingLock,
    renderingMode,
    deviceType,
    removedPanels,
    blockInserterPanel,
    inserterSidebarToggleRef,
    listViewPanel,
    listViewToggleRef,
    publishSidebarActive,
    dataviews: reducer_default
  });

  // packages/editor/build-module/store/selectors.js
  var selectors_exports = {};
  __export(selectors_exports, {
    __experimentalGetDefaultTemplatePartAreas: () => __experimentalGetDefaultTemplatePartAreas,
    __experimentalGetDefaultTemplateType: () => __experimentalGetDefaultTemplateType,
    __experimentalGetDefaultTemplateTypes: () => __experimentalGetDefaultTemplateTypes,
    __experimentalGetTemplateInfo: () => __experimentalGetTemplateInfo,
    __unstableIsEditorReady: () => __unstableIsEditorReady,
    canInsertBlockType: () => canInsertBlockType,
    canUserUseUnfilteredHTML: () => canUserUseUnfilteredHTML,
    didPostSaveRequestFail: () => didPostSaveRequestFail,
    didPostSaveRequestSucceed: () => didPostSaveRequestSucceed,
    getActivePostLock: () => getActivePostLock,
    getAdjacentBlockClientId: () => getAdjacentBlockClientId,
    getAutosaveAttribute: () => getAutosaveAttribute,
    getBlock: () => getBlock,
    getBlockAttributes: () => getBlockAttributes,
    getBlockCount: () => getBlockCount,
    getBlockHierarchyRootClientId: () => getBlockHierarchyRootClientId,
    getBlockIndex: () => getBlockIndex,
    getBlockInsertionPoint: () => getBlockInsertionPoint,
    getBlockListSettings: () => getBlockListSettings,
    getBlockMode: () => getBlockMode,
    getBlockName: () => getBlockName,
    getBlockOrder: () => getBlockOrder,
    getBlockRootClientId: () => getBlockRootClientId,
    getBlockSelectionEnd: () => getBlockSelectionEnd,
    getBlockSelectionStart: () => getBlockSelectionStart,
    getBlocks: () => getBlocks,
    getBlocksByClientId: () => getBlocksByClientId,
    getClientIdsOfDescendants: () => getClientIdsOfDescendants,
    getClientIdsWithDescendants: () => getClientIdsWithDescendants,
    getCurrentPost: () => getCurrentPost,
    getCurrentPostAttribute: () => getCurrentPostAttribute,
    getCurrentPostId: () => getCurrentPostId,
    getCurrentPostLastRevisionId: () => getCurrentPostLastRevisionId,
    getCurrentPostRevisionsCount: () => getCurrentPostRevisionsCount,
    getCurrentPostType: () => getCurrentPostType,
    getCurrentTemplateId: () => getCurrentTemplateId,
    getDeviceType: () => getDeviceType,
    getEditedPostAttribute: () => getEditedPostAttribute,
    getEditedPostContent: () => getEditedPostContent,
    getEditedPostPreviewLink: () => getEditedPostPreviewLink,
    getEditedPostSlug: () => getEditedPostSlug,
    getEditedPostVisibility: () => getEditedPostVisibility,
    getEditorBlocks: () => getEditorBlocks,
    getEditorMode: () => getEditorMode,
    getEditorSelection: () => getEditorSelection,
    getEditorSelectionEnd: () => getEditorSelectionEnd,
    getEditorSelectionStart: () => getEditorSelectionStart,
    getEditorSettings: () => getEditorSettings,
    getFirstMultiSelectedBlockClientId: () => getFirstMultiSelectedBlockClientId,
    getGlobalBlockCount: () => getGlobalBlockCount,
    getInserterItems: () => getInserterItems,
    getLastMultiSelectedBlockClientId: () => getLastMultiSelectedBlockClientId,
    getMultiSelectedBlockClientIds: () => getMultiSelectedBlockClientIds,
    getMultiSelectedBlocks: () => getMultiSelectedBlocks,
    getMultiSelectedBlocksEndClientId: () => getMultiSelectedBlocksEndClientId,
    getMultiSelectedBlocksStartClientId: () => getMultiSelectedBlocksStartClientId,
    getNextBlockClientId: () => getNextBlockClientId,
    getPermalink: () => getPermalink,
    getPermalinkParts: () => getPermalinkParts,
    getPostEdits: () => getPostEdits,
    getPostLockUser: () => getPostLockUser,
    getPostTypeLabel: () => getPostTypeLabel,
    getPreviousBlockClientId: () => getPreviousBlockClientId,
    getRenderingMode: () => getRenderingMode,
    getSelectedBlock: () => getSelectedBlock,
    getSelectedBlockClientId: () => getSelectedBlockClientId,
    getSelectedBlockCount: () => getSelectedBlockCount,
    getSelectedBlocksInitialCaretPosition: () => getSelectedBlocksInitialCaretPosition,
    getStateBeforeOptimisticTransaction: () => getStateBeforeOptimisticTransaction,
    getSuggestedPostFormat: () => getSuggestedPostFormat,
    getTemplate: () => getTemplate,
    getTemplateLock: () => getTemplateLock,
    hasChangedContent: () => hasChangedContent,
    hasEditorRedo: () => hasEditorRedo,
    hasEditorUndo: () => hasEditorUndo,
    hasInserterItems: () => hasInserterItems,
    hasMultiSelection: () => hasMultiSelection,
    hasNonPostEntityChanges: () => hasNonPostEntityChanges,
    hasSelectedBlock: () => hasSelectedBlock,
    hasSelectedInnerBlock: () => hasSelectedInnerBlock,
    inSomeHistory: () => inSomeHistory,
    isAncestorMultiSelected: () => isAncestorMultiSelected,
    isAutosavingPost: () => isAutosavingPost,
    isBlockInsertionPointVisible: () => isBlockInsertionPointVisible,
    isBlockMultiSelected: () => isBlockMultiSelected,
    isBlockSelected: () => isBlockSelected,
    isBlockValid: () => isBlockValid,
    isBlockWithinSelection: () => isBlockWithinSelection,
    isCaretWithinFormattedText: () => isCaretWithinFormattedText,
    isCleanNewPost: () => isCleanNewPost,
    isCurrentPostPending: () => isCurrentPostPending,
    isCurrentPostPublished: () => isCurrentPostPublished,
    isCurrentPostScheduled: () => isCurrentPostScheduled,
    isDeletingPost: () => isDeletingPost,
    isEditedPostAutosaveable: () => isEditedPostAutosaveable,
    isEditedPostBeingScheduled: () => isEditedPostBeingScheduled,
    isEditedPostDateFloating: () => isEditedPostDateFloating,
    isEditedPostDirty: () => isEditedPostDirty,
    isEditedPostEmpty: () => isEditedPostEmpty,
    isEditedPostNew: () => isEditedPostNew,
    isEditedPostPublishable: () => isEditedPostPublishable,
    isEditedPostSaveable: () => isEditedPostSaveable,
    isEditorPanelEnabled: () => isEditorPanelEnabled,
    isEditorPanelOpened: () => isEditorPanelOpened,
    isEditorPanelRemoved: () => isEditorPanelRemoved,
    isFirstMultiSelectedBlock: () => isFirstMultiSelectedBlock,
    isInserterOpened: () => isInserterOpened,
    isListViewOpened: () => isListViewOpened,
    isMultiSelecting: () => isMultiSelecting,
    isPermalinkEditable: () => isPermalinkEditable,
    isPostAutosavingLocked: () => isPostAutosavingLocked,
    isPostLockTakeover: () => isPostLockTakeover,
    isPostLocked: () => isPostLocked,
    isPostSavingLocked: () => isPostSavingLocked,
    isPreviewingPost: () => isPreviewingPost,
    isPublishSidebarEnabled: () => isPublishSidebarEnabled,
    isPublishSidebarOpened: () => isPublishSidebarOpened,
    isPublishingPost: () => isPublishingPost,
    isSavingNonPostEntityChanges: () => isSavingNonPostEntityChanges,
    isSavingPost: () => isSavingPost,
    isSelectionEnabled: () => isSelectionEnabled,
    isTyping: () => isTyping,
    isValidTemplate: () => isValidTemplate
  });
  var import_blocks = __toESM(require_blocks());
  var import_date = __toESM(require_date());
  var import_url = __toESM(require_url());
  var import_data3 = __toESM(require_data());
  var import_deprecated = __toESM(require_deprecated());
  var import_element2 = __toESM(require_element());
  var import_block_editor2 = __toESM(require_block_editor());
  var import_core_data = __toESM(require_core_data());
  var import_preferences = __toESM(require_preferences());

  // packages/editor/build-module/store/constants.js
  var EDIT_MERGE_PROPERTIES = /* @__PURE__ */ new Set(["meta"]);
  var STORE_NAME = "core/editor";
  var PERMALINK_POSTNAME_REGEX = /%(?:postname|pagename)%/;
  var ONE_MINUTE_IN_MS = 60 * 1e3;
  var AUTOSAVE_PROPERTIES = ["title", "excerpt", "content"];
  var TEMPLATE_POST_TYPE = "wp_template";
  var TEMPLATE_PART_POST_TYPE = "wp_template_part";
  var PATTERN_POST_TYPE = "wp_block";
  var NAVIGATION_POST_TYPE = "wp_navigation";
  var TEMPLATE_ORIGINS = {
    custom: "custom",
    theme: "theme",
    plugin: "plugin"
  };
  var TEMPLATE_POST_TYPES = ["wp_template", "wp_template_part"];
  var GLOBAL_POST_TYPES = [
    ...TEMPLATE_POST_TYPES,
    "wp_block",
    "wp_navigation"
  ];

  // packages/icons/build-module/icon/index.js
  var import_element = __toESM(require_element());
  var icon_default = (0, import_element.forwardRef)(
    ({ icon, size: size3 = 24, ...props }, ref) => {
      return (0, import_element.cloneElement)(icon, {
        width: size3,
        height: size3,
        ...props,
        ref
      });
    }
  );

  // packages/icons/build-module/library/add-template.js
  var import_jsx_runtime = __toESM(require_jsx_runtime());
  var import_primitives = __toESM(require_primitives());
  var add_template_default = /* @__PURE__ */ (0, import_jsx_runtime.jsx)(import_primitives.SVG, { viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
    import_primitives.Path,
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M18.5 5.5V8H20V5.5H22.5V4H20V1.5H18.5V4H16V5.5H18.5ZM13.9624 4H6C4.89543 4 4 4.89543 4 6V18C4 19.1046 4.89543 20 6 20H18C19.1046 20 20 19.1046 20 18V10.0391H18.5V18C18.5 18.2761 18.2761 18.5 18 18.5H10L10 10.4917L16.4589 10.5139L16.4641 9.01389L5.5 8.97618V6C5.5 5.72386 5.72386 5.5 6 5.5H13.9624V4ZM5.5 10.4762V18C5.5 18.2761 5.72386 18.5 6 18.5H8.5L8.5 10.4865L5.5 10.4762Z"
    }
  ) });

  // packages/icons/build-module/library/backup.js
  var import_jsx_runtime2 = __toESM(require_jsx_runtime());
  var import_primitives2 = __toESM(require_primitives());
  var backup_default = /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_primitives2.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(import_primitives2.Path, { d: "M5.5 12h1.75l-2.5 3-2.5-3H4a8 8 0 113.134 6.35l.907-1.194A6.5 6.5 0 105.5 12zm9.53 1.97l-2.28-2.28V8.5a.75.75 0 00-1.5 0V12a.747.747 0 00.218.529l1.282-.84-1.28.842 2.5 2.5a.75.75 0 101.06-1.061z" }) });

  // packages/icons/build-module/library/block-default.js
  var import_jsx_runtime3 = __toESM(require_jsx_runtime());
  var import_primitives3 = __toESM(require_primitives());
  var block_default_default = /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_primitives3.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_primitives3.Path, { d: "M19 8h-1V6h-5v2h-2V6H6v2H5c-1.1 0-2 .9-2 2v8c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2v-8c0-1.1-.9-2-2-2zm.5 10c0 .3-.2.5-.5.5H5c-.3 0-.5-.2-.5-.5v-8c0-.3.2-.5.5-.5h14c.3 0 .5.2.5.5v8z" }) });

  // packages/icons/build-module/library/check.js
  var import_jsx_runtime4 = __toESM(require_jsx_runtime());
  var import_primitives4 = __toESM(require_primitives());
  var check_default = /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_primitives4.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(import_primitives4.Path, { d: "M16.5 7.5 10 13.9l-2.5-2.4-1 1 3.5 3.6 7.5-7.6z" }) });

  // packages/icons/build-module/library/chevron-left-small.js
  var import_jsx_runtime5 = __toESM(require_jsx_runtime());
  var import_primitives5 = __toESM(require_primitives());
  var chevron_left_small_default = /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_primitives5.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_primitives5.Path, { d: "m13.1 16-3.4-4 3.4-4 1.1 1-2.6 3 2.6 3-1.1 1z" }) });

  // packages/icons/build-module/library/chevron-right-small.js
  var import_jsx_runtime6 = __toESM(require_jsx_runtime());
  var import_primitives6 = __toESM(require_primitives());
  var chevron_right_small_default = /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(import_primitives6.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(import_primitives6.Path, { d: "M10.8622 8.04053L14.2805 12.0286L10.8622 16.0167L9.72327 15.0405L12.3049 12.0286L9.72327 9.01672L10.8622 8.04053Z" }) });

  // packages/icons/build-module/library/close-small.js
  var import_jsx_runtime7 = __toESM(require_jsx_runtime());
  var import_primitives7 = __toESM(require_primitives());
  var close_small_default = /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_primitives7.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(import_primitives7.Path, { d: "M12 13.06l3.712 3.713 1.061-1.06L13.061 12l3.712-3.712-1.06-1.06L12 10.938 8.288 7.227l-1.061 1.06L10.939 12l-3.712 3.712 1.06 1.061L12 13.061z" }) });

  // packages/icons/build-module/library/cloud-upload.js
  var import_jsx_runtime8 = __toESM(require_jsx_runtime());
  var import_primitives8 = __toESM(require_primitives());
  var cloud_upload_default = /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_primitives8.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_primitives8.Path, { d: "M17.3 10.1C17.3 7.60001 15.2 5.70001 12.5 5.70001C10.3 5.70001 8.4 7.10001 7.9 9.00001H7.7C5.7 9.00001 4 10.7 4 12.8C4 14.9 5.7 16.6 7.7 16.6H9.5V15.2H7.7C6.5 15.2 5.5 14.1 5.5 12.9C5.5 11.7 6.5 10.5 7.7 10.5H9L9.3 9.40001C9.7 8.10001 11 7.20001 12.5 7.20001C14.3 7.20001 15.8 8.50001 15.8 10.1V11.4L17.1 11.6C17.9 11.7 18.5 12.5 18.5 13.4C18.5 14.4 17.7 15.2 16.8 15.2H14.5V16.6H16.7C18.5 16.6 19.9 15.1 19.9 13.3C20 11.7 18.8 10.4 17.3 10.1Z M14.1245 14.2426L15.1852 13.182L12.0032 10L8.82007 13.1831L9.88072 14.2438L11.25 12.8745V18H12.75V12.8681L14.1245 14.2426Z" }) });

  // packages/icons/build-module/library/cloud.js
  var import_jsx_runtime9 = __toESM(require_jsx_runtime());
  var import_primitives9 = __toESM(require_primitives());
  var cloud_default = /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(import_primitives9.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(import_primitives9.Path, { d: "M17.3 10.1c0-2.5-2.1-4.4-4.8-4.4-2.2 0-4.1 1.4-4.6 3.3h-.2C5.7 9 4 10.7 4 12.8c0 2.1 1.7 3.8 3.7 3.8h9c1.8 0 3.2-1.5 3.2-3.3.1-1.6-1.1-2.9-2.6-3.2zm-.5 5.1h-9c-1.2 0-2.2-1.1-2.2-2.3s1-2.4 2.2-2.4h1.3l.3-1.1c.4-1.3 1.7-2.2 3.2-2.2 1.8 0 3.3 1.3 3.3 2.9v1.3l1.3.2c.8.1 1.4.9 1.4 1.8-.1 1-.9 1.8-1.8 1.8z" }) });

  // packages/icons/build-module/library/code.js
  var import_jsx_runtime10 = __toESM(require_jsx_runtime());
  var import_primitives10 = __toESM(require_primitives());
  var code_default = /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(import_primitives10.SVG, { viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(import_primitives10.Path, { d: "M20.8 10.7l-4.3-4.3-1.1 1.1 4.3 4.3c.1.1.1.3 0 .4l-4.3 4.3 1.1 1.1 4.3-4.3c.7-.8.7-1.9 0-2.6zM4.2 11.8l4.3-4.3-1-1-4.3 4.3c-.7.7-.7 1.8 0 2.5l4.3 4.3 1.1-1.1-4.3-4.3c-.2-.1-.2-.3-.1-.4z" }) });

  // packages/icons/build-module/library/comment-author-avatar.js
  var import_jsx_runtime11 = __toESM(require_jsx_runtime());
  var import_primitives11 = __toESM(require_primitives());
  var comment_author_avatar_default = /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(import_primitives11.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(
    import_primitives11.Path,
    {
      fillRule: "evenodd",
      d: "M7.25 16.437a6.5 6.5 0 1 1 9.5 0V16A2.75 2.75 0 0 0 14 13.25h-4A2.75 2.75 0 0 0 7.25 16v.437Zm1.5 1.193a6.47 6.47 0 0 0 3.25.87 6.47 6.47 0 0 0 3.25-.87V16c0-.69-.56-1.25-1.25-1.25h-4c-.69 0-1.25.56-1.25 1.25v1.63ZM4 12a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm10-2a2 2 0 1 1-4 0 2 2 0 0 1 4 0Z",
      clipRule: "evenodd"
    }
  ) });

  // packages/icons/build-module/library/comment.js
  var import_jsx_runtime12 = __toESM(require_jsx_runtime());
  var import_primitives12 = __toESM(require_primitives());
  var comment_default = /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_primitives12.SVG, { viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_primitives12.Path, { d: "M18 4H6c-1.1 0-2 .9-2 2v12.9c0 .6.5 1.1 1.1 1.1.3 0 .5-.1.8-.3L8.5 17H18c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm.5 11c0 .3-.2.5-.5.5H7.9l-2.4 2.4V6c0-.3.2-.5.5-.5h12c.3 0 .5.2.5.5v9z" }) });

  // packages/icons/build-module/library/copy-small.js
  var import_jsx_runtime13 = __toESM(require_jsx_runtime());
  var import_primitives13 = __toESM(require_primitives());
  var copy_small_default = /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(import_primitives13.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime13.jsx)(
    import_primitives13.Path,
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M5.625 5.5h9.75c.069 0 .125.056.125.125v9.75a.125.125 0 0 1-.125.125h-9.75a.125.125 0 0 1-.125-.125v-9.75c0-.069.056-.125.125-.125ZM4 5.625C4 4.728 4.728 4 5.625 4h9.75C16.273 4 17 4.728 17 5.625v9.75c0 .898-.727 1.625-1.625 1.625h-9.75A1.625 1.625 0 0 1 4 15.375v-9.75Zm14.5 11.656v-9H20v9C20 18.8 18.77 20 17.251 20H6.25v-1.5h11.001c.69 0 1.249-.528 1.249-1.219Z"
    }
  ) });

  // packages/icons/build-module/library/desktop.js
  var import_jsx_runtime14 = __toESM(require_jsx_runtime());
  var import_primitives14 = __toESM(require_primitives());
  var desktop_default = /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(import_primitives14.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime14.jsx)(import_primitives14.Path, { d: "M20.5 16h-.7V8c0-1.1-.9-2-2-2H6.2c-1.1 0-2 .9-2 2v8h-.7c-.8 0-1.5.7-1.5 1.5h20c0-.8-.7-1.5-1.5-1.5zM5.7 8c0-.3.2-.5.5-.5h11.6c.3 0 .5.2.5.5v7.6H5.7V8z" }) });

  // packages/icons/build-module/library/download.js
  var import_jsx_runtime15 = __toESM(require_jsx_runtime());
  var import_primitives15 = __toESM(require_primitives());
  var download_default = /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(import_primitives15.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime15.jsx)(import_primitives15.Path, { d: "M18 11.3l-1-1.1-4 4V3h-1.5v11.3L7 10.2l-1 1.1 6.2 5.8 5.8-5.8zm.5 3.7v3.5h-13V15H4v5h16v-5h-1.5z" }) });

  // packages/icons/build-module/library/drafts.js
  var import_jsx_runtime16 = __toESM(require_jsx_runtime());
  var import_primitives16 = __toESM(require_primitives());
  var drafts_default = /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(import_primitives16.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime16.jsx)(
    import_primitives16.Path,
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M12 18.5a6.5 6.5 0 1 1 0-13 6.5 6.5 0 0 1 0 13ZM4 12a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm8 4a4 4 0 0 0 4-4H8a4 4 0 0 0 4 4Z"
    }
  ) });

  // packages/icons/build-module/library/drawer-left.js
  var import_jsx_runtime17 = __toESM(require_jsx_runtime());
  var import_primitives17 = __toESM(require_primitives());
  var drawer_left_default = /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(import_primitives17.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime17.jsx)(
    import_primitives17.Path,
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M18 4H6c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zM8.5 18.5H6c-.3 0-.5-.2-.5-.5V6c0-.3.2-.5.5-.5h2.5v13zm10-.5c0 .3-.2.5-.5.5h-8v-13h8c.3 0 .5.2.5.5v12z"
    }
  ) });

  // packages/icons/build-module/library/drawer-right.js
  var import_jsx_runtime18 = __toESM(require_jsx_runtime());
  var import_primitives18 = __toESM(require_primitives());
  var drawer_right_default = /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(import_primitives18.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime18.jsx)(
    import_primitives18.Path,
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M18 4H6c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h12c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm-4 14.5H6c-.3 0-.5-.2-.5-.5V6c0-.3.2-.5.5-.5h8v13zm4.5-.5c0 .3-.2.5-.5.5h-2.5v-13H18c.3 0 .5.2.5.5v12z"
    }
  ) });

  // packages/icons/build-module/library/external.js
  var import_jsx_runtime19 = __toESM(require_jsx_runtime());
  var import_primitives19 = __toESM(require_primitives());
  var external_default = /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(import_primitives19.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime19.jsx)(import_primitives19.Path, { d: "M19.5 4.5h-7V6h4.44l-5.97 5.97 1.06 1.06L18 7.06v4.44h1.5v-7Zm-13 1a2 2 0 0 0-2 2v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-3H17v3a.5.5 0 0 1-.5.5h-10a.5.5 0 0 1-.5-.5v-10a.5.5 0 0 1 .5-.5h3V5.5h-3Z" }) });

  // packages/icons/build-module/library/footer.js
  var import_jsx_runtime20 = __toESM(require_jsx_runtime());
  var import_primitives20 = __toESM(require_primitives());
  var footer_default = /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(import_primitives20.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime20.jsx)(
    import_primitives20.Path,
    {
      fillRule: "evenodd",
      d: "M18 5.5h-8v8h8.5V6a.5.5 0 00-.5-.5zm-9.5 8h-3V6a.5.5 0 01.5-.5h2.5v8zM6 4h12a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2z"
    }
  ) });

  // packages/icons/build-module/library/format-list-bullets.js
  var import_jsx_runtime21 = __toESM(require_jsx_runtime());
  var import_primitives21 = __toESM(require_primitives());
  var format_list_bullets_default = /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(import_primitives21.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime21.jsx)(import_primitives21.Path, { d: "M11.1 15.8H20v-1.5h-8.9v1.5zm0-8.6v1.5H20V7.2h-8.9zM6 13c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0-7c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z" }) });

  // packages/icons/build-module/library/header.js
  var import_jsx_runtime22 = __toESM(require_jsx_runtime());
  var import_primitives22 = __toESM(require_primitives());
  var header_default = /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(import_primitives22.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime22.jsx)(import_primitives22.Path, { d: "M18.5 10.5H10v8h8a.5.5 0 00.5-.5v-7.5zm-10 0h-3V18a.5.5 0 00.5.5h2.5v-8zM6 4h12a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2z" }) });

  // packages/icons/build-module/library/info.js
  var import_jsx_runtime23 = __toESM(require_jsx_runtime());
  var import_primitives23 = __toESM(require_primitives());
  var info_default = /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(import_primitives23.SVG, { viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime23.jsx)(
    import_primitives23.Path,
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M5.5 12a6.5 6.5 0 1 0 13 0 6.5 6.5 0 0 0-13 0ZM12 4a8 8 0 1 0 0 16 8 8 0 0 0 0-16Zm.75 4v1.5h-1.5V8h1.5Zm0 8v-5h-1.5v5h1.5Z"
    }
  ) });

  // packages/icons/build-module/library/keyboard.js
  var import_jsx_runtime24 = __toESM(require_jsx_runtime());
  var import_primitives24 = __toESM(require_primitives());
  var keyboard_default = /* @__PURE__ */ (0, import_jsx_runtime24.jsxs)(import_primitives24.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: [
    /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(import_primitives24.Path, { d: "m16 15.5h-8v-1.5h8zm-7.5-2.5h-2v-2h2zm3 0h-2v-2h2zm3 0h-2v-2h2zm3 0h-2v-2h2zm-9-3h-2v-2h2zm3 0h-2v-2h2zm3 0h-2v-2h2zm3 0h-2v-2h2z" }),
    /* @__PURE__ */ (0, import_jsx_runtime24.jsx)(import_primitives24.Path, { d: "m18.5 6.5h-13a.5.5 0 0 0 -.5.5v9.5a.5.5 0 0 0 .5.5h13a.5.5 0 0 0 .5-.5v-9.5a.5.5 0 0 0 -.5-.5zm-13-1.5h13a2 2 0 0 1 2 2v9.5a2 2 0 0 1 -2 2h-13a2 2 0 0 1 -2-2v-9.5a2 2 0 0 1 2-2z" })
  ] });

  // packages/icons/build-module/library/layout.js
  var import_jsx_runtime25 = __toESM(require_jsx_runtime());
  var import_primitives25 = __toESM(require_primitives());
  var layout_default = /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(import_primitives25.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime25.jsx)(import_primitives25.Path, { d: "M18 5.5H6a.5.5 0 00-.5.5v3h13V6a.5.5 0 00-.5-.5zm.5 5H10v8h8a.5.5 0 00.5-.5v-7.5zm-10 0h-3V18a.5.5 0 00.5.5h2.5v-8zM6 4h12a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2z" }) });

  // packages/icons/build-module/library/line-solid.js
  var import_jsx_runtime26 = __toESM(require_jsx_runtime());
  var import_primitives26 = __toESM(require_primitives());
  var line_solid_default = /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_primitives26.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime26.jsx)(import_primitives26.Path, { d: "M5 11.25h14v1.5H5z" }) });

  // packages/icons/build-module/library/list-view.js
  var import_jsx_runtime27 = __toESM(require_jsx_runtime());
  var import_primitives27 = __toESM(require_primitives());
  var list_view_default = /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(import_primitives27.SVG, { viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime27.jsx)(import_primitives27.Path, { d: "M3 6h11v1.5H3V6Zm3.5 5.5h11V13h-11v-1.5ZM21 17H10v1.5h11V17Z" }) });

  // packages/icons/build-module/library/lock-small.js
  var import_jsx_runtime28 = __toESM(require_jsx_runtime());
  var import_primitives28 = __toESM(require_primitives());
  var lock_small_default = /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(import_primitives28.SVG, { viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime28.jsx)(
    import_primitives28.Path,
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M15 11h-.2V9c0-1.5-1.2-2.8-2.8-2.8S9.2 7.5 9.2 9v2H9c-.6 0-1 .4-1 1v4c0 .6.4 1 1 1h6c.6 0 1-.4 1-1v-4c0-.6-.4-1-1-1zm-1.8 0h-2.5V9c0-.7.6-1.2 1.2-1.2s1.2.6 1.2 1.2v2z"
    }
  ) });

  // packages/icons/build-module/library/mobile.js
  var import_jsx_runtime29 = __toESM(require_jsx_runtime());
  var import_primitives29 = __toESM(require_primitives());
  var mobile_default = /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(import_primitives29.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime29.jsx)(import_primitives29.Path, { d: "M15 4H9c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h6c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm.5 14c0 .3-.2.5-.5.5H9c-.3 0-.5-.2-.5-.5V6c0-.3.2-.5.5-.5h6c.3 0 .5.2.5.5v12zm-4.5-.5h2V16h-2v1.5z" }) });

  // packages/icons/build-module/library/more-vertical.js
  var import_jsx_runtime30 = __toESM(require_jsx_runtime());
  var import_primitives30 = __toESM(require_primitives());
  var more_vertical_default = /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(import_primitives30.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime30.jsx)(import_primitives30.Path, { d: "M13 19h-2v-2h2v2zm0-6h-2v-2h2v2zm0-6h-2V5h2v2z" }) });

  // packages/icons/build-module/library/navigation.js
  var import_jsx_runtime31 = __toESM(require_jsx_runtime());
  var import_primitives31 = __toESM(require_primitives());
  var navigation_default = /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(import_primitives31.SVG, { viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime31.jsx)(import_primitives31.Path, { d: "M12 4c-4.4 0-8 3.6-8 8s3.6 8 8 8 8-3.6 8-8-3.6-8-8-8zm0 14.5c-3.6 0-6.5-2.9-6.5-6.5S8.4 5.5 12 5.5s6.5 2.9 6.5 6.5-2.9 6.5-6.5 6.5zM9 16l4.5-3L15 8.4l-4.5 3L9 16z" }) });

  // packages/icons/build-module/library/next.js
  var import_jsx_runtime32 = __toESM(require_jsx_runtime());
  var import_primitives32 = __toESM(require_primitives());
  var next_default = /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(import_primitives32.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime32.jsx)(import_primitives32.Path, { d: "M6.6 6L5.4 7l4.5 5-4.5 5 1.1 1 5.5-6-5.4-6zm6 0l-1.1 1 4.5 5-4.5 5 1.1 1 5.5-6-5.5-6z" }) });

  // packages/icons/build-module/library/not-allowed.js
  var import_jsx_runtime33 = __toESM(require_jsx_runtime());
  var import_primitives33 = __toESM(require_primitives());
  var not_allowed_default = /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(import_primitives33.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime33.jsx)(
    import_primitives33.Path,
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M12 18.5A6.5 6.5 0 0 1 6.93 7.931l9.139 9.138A6.473 6.473 0 0 1 12 18.5Zm5.123-2.498a6.5 6.5 0 0 0-9.124-9.124l9.124 9.124ZM4 12a8 8 0 1 1 16 0 8 8 0 0 1-16 0Z"
    }
  ) });

  // packages/icons/build-module/library/page.js
  var import_jsx_runtime34 = __toESM(require_jsx_runtime());
  var import_primitives34 = __toESM(require_primitives());
  var page_default = /* @__PURE__ */ (0, import_jsx_runtime34.jsxs)(import_primitives34.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: [
    /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(import_primitives34.Path, { d: "M15.5 7.5h-7V9h7V7.5Zm-7 3.5h7v1.5h-7V11Zm7 3.5h-7V16h7v-1.5Z" }),
    /* @__PURE__ */ (0, import_jsx_runtime34.jsx)(import_primitives34.Path, { d: "M17 4H7a2 2 0 0 0-2 2v12a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V6a2 2 0 0 0-2-2ZM7 5.5h10a.5.5 0 0 1 .5.5v12a.5.5 0 0 1-.5.5H7a.5.5 0 0 1-.5-.5V6a.5.5 0 0 1 .5-.5Z" })
  ] });

  // packages/icons/build-module/library/pencil.js
  var import_jsx_runtime35 = __toESM(require_jsx_runtime());
  var import_primitives35 = __toESM(require_primitives());
  var pencil_default = /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(import_primitives35.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime35.jsx)(import_primitives35.Path, { d: "m19 7-3-3-8.5 8.5-1 4 4-1L19 7Zm-7 11.5H5V20h7v-1.5Z" }) });

  // packages/icons/build-module/library/pending.js
  var import_jsx_runtime36 = __toESM(require_jsx_runtime());
  var import_primitives36 = __toESM(require_primitives());
  var pending_default = /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(import_primitives36.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime36.jsx)(
    import_primitives36.Path,
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M12 18.5a6.5 6.5 0 1 1 0-13 6.5 6.5 0 0 1 0 13ZM4 12a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm8 4a4 4 0 0 1-4-4h4V8a4 4 0 0 1 0 8Z"
    }
  ) });

  // packages/icons/build-module/library/plus.js
  var import_jsx_runtime37 = __toESM(require_jsx_runtime());
  var import_primitives37 = __toESM(require_primitives());
  var plus_default = /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(import_primitives37.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime37.jsx)(import_primitives37.Path, { d: "M11 12.5V17.5H12.5V12.5H17.5V11H12.5V6H11V11H6V12.5H11Z" }) });

  // packages/icons/build-module/library/previous.js
  var import_jsx_runtime38 = __toESM(require_jsx_runtime());
  var import_primitives38 = __toESM(require_primitives());
  var previous_default = /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(import_primitives38.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime38.jsx)(import_primitives38.Path, { d: "M11.6 7l-1.1-1L5 12l5.5 6 1.1-1L7 12l4.6-5zm6 0l-1.1-1-5.5 6 5.5 6 1.1-1-4.6-5 4.6-5z" }) });

  // packages/icons/build-module/library/published.js
  var import_jsx_runtime39 = __toESM(require_jsx_runtime());
  var import_primitives39 = __toESM(require_primitives());
  var published_default = /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(import_primitives39.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime39.jsx)(
    import_primitives39.Path,
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M12 18.5a6.5 6.5 0 1 1 0-13 6.5 6.5 0 0 1 0 13ZM4 12a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm11.53-1.47-1.06-1.06L11 12.94l-1.47-1.47-1.06 1.06L11 15.06l4.53-4.53Z"
    }
  ) });

  // packages/icons/build-module/library/redo.js
  var import_jsx_runtime40 = __toESM(require_jsx_runtime());
  var import_primitives40 = __toESM(require_primitives());
  var redo_default = /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(import_primitives40.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime40.jsx)(import_primitives40.Path, { d: "M15.6 6.5l-1.1 1 2.9 3.3H8c-.9 0-1.7.3-2.3.9-1.4 1.5-1.4 4.2-1.4 5.6v.2h1.5v-.3c0-1.1 0-3.5 1-4.5.3-.3.7-.5 1.3-.5h9.2L14.5 15l1.1 1.1 4.6-4.6-4.6-5z" }) });

  // packages/icons/build-module/library/rotate-left.js
  var import_jsx_runtime41 = __toESM(require_jsx_runtime());
  var import_primitives41 = __toESM(require_primitives());
  var rotate_left_default = /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(import_primitives41.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime41.jsx)(import_primitives41.Path, { d: "M12 4V2.2L9 4.8l3 2.5V5.5c3.6 0 6.5 2.9 6.5 6.5 0 2.9-1.9 5.3-4.5 6.2v.2l-.1-.2c-.4.1-.7.2-1.1.2l.2 1.5c.3 0 .6-.1 1-.2 3.5-.9 6-4 6-7.7 0-4.4-3.6-8-8-8zm-7.9 7l1.5.2c.1-1.2.5-2.3 1.2-3.2l-1.1-.9C4.8 8.2 4.3 9.6 4.1 11zm1.5 1.8l-1.5.2c.1.7.3 1.4.5 2 .3.7.6 1.3 1 1.8l1.2-.8c-.3-.5-.6-1-.8-1.5s-.4-1.1-.4-1.7zm1.5 5.5c1.1.9 2.4 1.4 3.8 1.6l.2-1.5c-1.1-.1-2.2-.5-3.1-1.2l-.9 1.1z" }) });

  // packages/icons/build-module/library/rotate-right.js
  var import_jsx_runtime42 = __toESM(require_jsx_runtime());
  var import_primitives42 = __toESM(require_primitives());
  var rotate_right_default = /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(import_primitives42.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime42.jsx)(import_primitives42.Path, { d: "M15.1 4.8l-3-2.5V4c-4.4 0-8 3.6-8 8 0 3.7 2.5 6.9 6 7.7.3.1.6.1 1 .2l.2-1.5c-.4 0-.7-.1-1.1-.2l-.1.2v-.2c-2.6-.8-4.5-3.3-4.5-6.2 0-3.6 2.9-6.5 6.5-6.5v1.8l3-2.5zM20 11c-.2-1.4-.7-2.7-1.6-3.8l-1.2.8c.7.9 1.1 2 1.3 3.1L20 11zm-1.5 1.8c-.1.5-.2 1.1-.4 1.6s-.5 1-.8 1.5l1.2.9c.4-.5.8-1.1 1-1.8s.5-1.3.5-2l-1.5-.2zm-5.6 5.6l.2 1.5c1.4-.2 2.7-.7 3.8-1.6l-.9-1.1c-.9.7-2 1.1-3.1 1.2z" }) });

  // packages/icons/build-module/library/scheduled.js
  var import_jsx_runtime43 = __toESM(require_jsx_runtime());
  var import_primitives43 = __toESM(require_primitives());
  var scheduled_default = /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(import_primitives43.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime43.jsx)(
    import_primitives43.Path,
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M12 18.5a6.5 6.5 0 1 1 0-13 6.5 6.5 0 0 1 0 13ZM4 12a8 8 0 1 1 16 0 8 8 0 0 1-16 0Zm9 1V8h-1.5v3.5h-2V13H13Z"
    }
  ) });

  // packages/icons/build-module/library/sidebar.js
  var import_jsx_runtime44 = __toESM(require_jsx_runtime());
  var import_primitives44 = __toESM(require_primitives());
  var sidebar_default = /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(import_primitives44.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime44.jsx)(import_primitives44.Path, { d: "M18 5.5H6a.5.5 0 00-.5.5v3h13V6a.5.5 0 00-.5-.5zm.5 5H10v8h8a.5.5 0 00.5-.5v-7.5zM6 4h12a2 2 0 012 2v12a2 2 0 01-2 2H6a2 2 0 01-2-2V6a2 2 0 012-2z" }) });

  // packages/icons/build-module/library/square.js
  var import_jsx_runtime45 = __toESM(require_jsx_runtime());
  var import_primitives45 = __toESM(require_primitives());
  var square_default = /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(import_primitives45.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime45.jsx)(
    import_primitives45.Path,
    {
      fill: "none",
      d: "M5.75 12.75V18.25H11.25M12.75 5.75H18.25V11.25",
      stroke: "currentColor",
      strokeWidth: "1.5",
      strokeLinecap: "square"
    }
  ) });

  // packages/icons/build-module/library/star-empty.js
  var import_jsx_runtime46 = __toESM(require_jsx_runtime());
  var import_primitives46 = __toESM(require_primitives());
  var star_empty_default = /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(import_primitives46.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime46.jsx)(
    import_primitives46.Path,
    {
      fillRule: "evenodd",
      d: "M9.706 8.646a.25.25 0 01-.188.137l-4.626.672a.25.25 0 00-.139.427l3.348 3.262a.25.25 0 01.072.222l-.79 4.607a.25.25 0 00.362.264l4.138-2.176a.25.25 0 01.233 0l4.137 2.175a.25.25 0 00.363-.263l-.79-4.607a.25.25 0 01.072-.222l3.347-3.262a.25.25 0 00-.139-.427l-4.626-.672a.25.25 0 01-.188-.137l-2.069-4.192a.25.25 0 00-.448 0L9.706 8.646zM12 7.39l-.948 1.921a1.75 1.75 0 01-1.317.957l-2.12.308 1.534 1.495c.412.402.6.982.503 1.55l-.362 2.11 1.896-.997a1.75 1.75 0 011.629 0l1.895.997-.362-2.11a1.75 1.75 0 01.504-1.55l1.533-1.495-2.12-.308a1.75 1.75 0 01-1.317-.957L12 7.39z",
      clipRule: "evenodd"
    }
  ) });

  // packages/icons/build-module/library/star-filled.js
  var import_jsx_runtime47 = __toESM(require_jsx_runtime());
  var import_primitives47 = __toESM(require_primitives());
  var star_filled_default = /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(import_primitives47.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime47.jsx)(import_primitives47.Path, { d: "M11.776 4.454a.25.25 0 01.448 0l2.069 4.192a.25.25 0 00.188.137l4.626.672a.25.25 0 01.139.426l-3.348 3.263a.25.25 0 00-.072.222l.79 4.607a.25.25 0 01-.362.263l-4.138-2.175a.25.25 0 00-.232 0l-4.138 2.175a.25.25 0 01-.363-.263l.79-4.607a.25.25 0 00-.071-.222L4.754 9.881a.25.25 0 01.139-.426l4.626-.672a.25.25 0 00.188-.137l2.069-4.192z" }) });

  // packages/icons/build-module/library/symbol-filled.js
  var import_jsx_runtime48 = __toESM(require_jsx_runtime());
  var import_primitives48 = __toESM(require_primitives());
  var symbol_filled_default = /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(import_primitives48.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime48.jsx)(import_primitives48.Path, { d: "M21.3 10.8l-5.6-5.6c-.7-.7-1.8-.7-2.5 0l-5.6 5.6c-.7.7-.7 1.8 0 2.5l5.6 5.6c.3.3.8.5 1.2.5s.9-.2 1.2-.5l5.6-5.6c.8-.7.8-1.9.1-2.5zm-17.6 1L10 5.5l-1-1-6.3 6.3c-.7.7-.7 1.8 0 2.5L9 19.5l1.1-1.1-6.3-6.3c-.2 0-.2-.2-.1-.3z" }) });

  // packages/icons/build-module/library/symbol.js
  var import_jsx_runtime49 = __toESM(require_jsx_runtime());
  var import_primitives49 = __toESM(require_primitives());
  var symbol_default = /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(import_primitives49.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime49.jsx)(import_primitives49.Path, { d: "M21.3 10.8l-5.6-5.6c-.7-.7-1.8-.7-2.5 0l-5.6 5.6c-.7.7-.7 1.8 0 2.5l5.6 5.6c.3.3.8.5 1.2.5s.9-.2 1.2-.5l5.6-5.6c.8-.7.8-1.9.1-2.5zm-1 1.4l-5.6 5.6c-.1.1-.3.1-.4 0l-5.6-5.6c-.1-.1-.1-.3 0-.4l5.6-5.6s.1-.1.2-.1.1 0 .2.1l5.6 5.6c.1.1.1.3 0 .4zm-16.6-.4L10 5.5l-1-1-6.3 6.3c-.7.7-.7 1.8 0 2.5L9 19.5l1.1-1.1-6.3-6.3c-.2 0-.2-.2-.1-.3z" }) });

  // packages/icons/build-module/library/tablet.js
  var import_jsx_runtime50 = __toESM(require_jsx_runtime());
  var import_primitives50 = __toESM(require_primitives());
  var tablet_default = /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(import_primitives50.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime50.jsx)(import_primitives50.Path, { d: "M17 4H7c-1.1 0-2 .9-2 2v12c0 1.1.9 2 2 2h10c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm.5 14c0 .3-.2.5-.5.5H7c-.3 0-.5-.2-.5-.5V6c0-.3.2-.5.5-.5h10c.3 0 .5.2.5.5v12zm-7.5-.5h4V16h-4v1.5z" }) });

  // packages/icons/build-module/library/trash.js
  var import_jsx_runtime51 = __toESM(require_jsx_runtime());
  var import_primitives51 = __toESM(require_primitives());
  var trash_default = /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(import_primitives51.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime51.jsx)(
    import_primitives51.Path,
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M12 5.5A2.25 2.25 0 0 0 9.878 7h4.244A2.251 2.251 0 0 0 12 5.5ZM12 4a3.751 3.751 0 0 0-3.675 3H5v1.5h1.27l.818 8.997a2.75 2.75 0 0 0 2.739 2.501h4.347a2.75 2.75 0 0 0 2.738-2.5L17.73 8.5H19V7h-3.325A3.751 3.751 0 0 0 12 4Zm4.224 4.5H7.776l.806 8.861a1.25 1.25 0 0 0 1.245 1.137h4.347a1.25 1.25 0 0 0 1.245-1.137l.805-8.861Z"
    }
  ) });

  // packages/icons/build-module/library/undo.js
  var import_jsx_runtime52 = __toESM(require_jsx_runtime());
  var import_primitives52 = __toESM(require_primitives());
  var undo_default = /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(import_primitives52.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime52.jsx)(import_primitives52.Path, { d: "M18.3 11.7c-.6-.6-1.4-.9-2.3-.9H6.7l2.9-3.3-1.1-1-4.5 5L8.5 16l1-1-2.7-2.7H16c.5 0 .9.2 1.3.5 1 1 1 3.4 1 4.5v.3h1.5v-.2c0-1.5 0-4.3-1.5-5.7z" }) });

  // packages/icons/build-module/library/verse.js
  var import_jsx_runtime53 = __toESM(require_jsx_runtime());
  var import_primitives53 = __toESM(require_primitives());
  var verse_default = /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(import_primitives53.SVG, { viewBox: "0 0 24 24", xmlns: "http://www.w3.org/2000/svg", children: /* @__PURE__ */ (0, import_jsx_runtime53.jsx)(import_primitives53.Path, { d: "M17.8 2l-.9.3c-.1 0-3.6 1-5.2 2.1C10 5.5 9.3 6.5 8.9 7.1c-.6.9-1.7 4.7-1.7 6.3l-.9 2.3c-.2.4 0 .8.4 1 .1 0 .2.1.3.1.3 0 .6-.2.7-.5l.6-1.5c.3 0 .7-.1 1.2-.2.7-.1 1.4-.3 2.2-.5.8-.2 1.6-.5 2.4-.8.7-.3 1.4-.7 1.9-1.2s.8-1.2 1-1.9c.2-.7.3-1.6.4-2.4.1-.8.1-1.7.2-2.5 0-.8.1-1.5.2-2.1V2zm-1.9 5.6c-.1.8-.2 1.5-.3 2.1-.2.6-.4 1-.6 1.3-.3.3-.8.6-1.4.9-.7.3-1.4.5-2.2.8-.6.2-1.3.3-1.8.4L15 7.5c.3-.3.6-.7 1-1.1 0 .4 0 .8-.1 1.2zM6 20h8v-1.5H6V20z" }) });

  // packages/icons/build-module/library/wordpress.js
  var import_jsx_runtime54 = __toESM(require_jsx_runtime());
  var import_primitives54 = __toESM(require_primitives());
  var wordpress_default = /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(import_primitives54.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "-2 -2 24 24", children: /* @__PURE__ */ (0, import_jsx_runtime54.jsx)(import_primitives54.Path, { d: "M20 10c0-5.51-4.49-10-10-10C4.48 0 0 4.49 0 10c0 5.52 4.48 10 10 10 5.51 0 10-4.48 10-10zM7.78 15.37L4.37 6.22c.55-.02 1.17-.08 1.17-.08.5-.06.44-1.13-.06-1.11 0 0-1.45.11-2.37.11-.18 0-.37 0-.58-.01C4.12 2.69 6.87 1.11 10 1.11c2.33 0 4.45.87 6.05 2.34-.68-.11-1.65.39-1.65 1.58 0 .74.45 1.36.9 2.1.35.61.55 1.36.55 2.46 0 1.49-1.4 5-1.4 5l-3.03-8.37c.54-.02.82-.17.82-.17.5-.05.44-1.25-.06-1.22 0 0-1.44.12-2.38.12-.87 0-2.33-.12-2.33-.12-.5-.03-.56 1.2-.06 1.22l.92.08 1.26 3.41zM17.41 10c.24-.64.74-1.87.43-4.25.7 1.29 1.05 2.71 1.05 4.25 0 3.29-1.73 6.24-4.4 7.78.97-2.59 1.94-5.2 2.92-7.78zM6.1 18.09C3.12 16.65 1.11 13.53 1.11 10c0-1.3.23-2.48.72-3.59C3.25 10.3 4.67 14.2 6.1 18.09zm4.03-6.63l2.58 6.98c-.86.29-1.76.45-2.71.45-.79 0-1.57-.11-2.29-.33.81-2.38 1.62-4.74 2.42-7.1z" }) });

  // packages/editor/build-module/utils/get-template-part-icon.js
  function getTemplatePartIcon(iconName) {
    if ("header" === iconName) {
      return header_default;
    } else if ("footer" === iconName) {
      return footer_default;
    } else if ("sidebar" === iconName) {
      return sidebar_default;
    }
    return symbol_filled_default;
  }

  // packages/editor/build-module/lock-unlock.js
  var import_private_apis = __toESM(require_private_apis());
  var { lock, unlock } = (0, import_private_apis.__dangerousOptInToUnstableAPIsOnlyForCoreModules)(
    "I acknowledge private features are not for use in themes or plugins and doing so will break in the next version of WordPress.",
    "@wordpress/editor"
  );

  // packages/editor/build-module/utils/get-template-info.js
  var EMPTY_OBJECT = {};
  var getTemplateInfo = (params) => {
    if (!params) {
      return EMPTY_OBJECT;
    }
    const { templateTypes, templateAreas, template: template2 } = params;
    const { description, slug, title, area } = template2;
    const { title: defaultTitle, description: defaultDescription } = Object.values(templateTypes).find((type) => type.slug === slug) ?? EMPTY_OBJECT;
    const templateTitle = typeof title === "string" ? title : title?.rendered;
    const templateDescription = typeof description === "string" ? description : description?.raw;
    const templateAreasWithIcon = templateAreas?.map((item) => ({
      ...item,
      icon: getTemplatePartIcon(item.icon)
    }));
    const templateIcon = templateAreasWithIcon?.find((item) => area === item.area)?.icon || layout_default;
    return {
      title: templateTitle && templateTitle !== slug ? templateTitle : defaultTitle || slug,
      description: templateDescription || defaultDescription,
      icon: templateIcon
    };
  };

  // packages/editor/build-module/store/selectors.js
  var EMPTY_OBJECT2 = {};
  var hasEditorUndo = (0, import_data3.createRegistrySelector)((select4) => () => {
    return select4(import_core_data.store).hasUndo();
  });
  var hasEditorRedo = (0, import_data3.createRegistrySelector)((select4) => () => {
    return select4(import_core_data.store).hasRedo();
  });
  function isEditedPostNew(state) {
    return getCurrentPost(state).status === "auto-draft";
  }
  function hasChangedContent(state) {
    const edits = getPostEdits(state);
    return "content" in edits;
  }
  var isEditedPostDirty = (0, import_data3.createRegistrySelector)(
    (select4) => (state) => {
      const postType2 = getCurrentPostType(state);
      const postId2 = getCurrentPostId(state);
      return select4(import_core_data.store).hasEditsForEntityRecord(
        "postType",
        postType2,
        postId2
      );
    }
  );
  var hasNonPostEntityChanges = (0, import_data3.createRegistrySelector)(
    (select4) => (state) => {
      const dirtyEntityRecords = select4(import_core_data.store).__experimentalGetDirtyEntityRecords();
      const { type, id } = getCurrentPost(state);
      return dirtyEntityRecords.some(
        (entityRecord) => entityRecord.kind !== "postType" || entityRecord.name !== type || entityRecord.key !== id
      );
    }
  );
  function isCleanNewPost(state) {
    return !isEditedPostDirty(state) && isEditedPostNew(state);
  }
  var getCurrentPost = (0, import_data3.createRegistrySelector)(
    (select4) => (state) => {
      const postId2 = getCurrentPostId(state);
      const postType2 = getCurrentPostType(state);
      const post = select4(import_core_data.store).getRawEntityRecord(
        "postType",
        postType2,
        postId2
      );
      if (post) {
        return post;
      }
      return EMPTY_OBJECT2;
    }
  );
  function getCurrentPostType(state) {
    return state.postType;
  }
  function getCurrentPostId(state) {
    return state.postId;
  }
  function getCurrentTemplateId(state) {
    return state.templateId;
  }
  function getCurrentPostRevisionsCount(state) {
    return getCurrentPost(state)._links?.["version-history"]?.[0]?.count ?? 0;
  }
  function getCurrentPostLastRevisionId(state) {
    return getCurrentPost(state)._links?.["predecessor-version"]?.[0]?.id ?? null;
  }
  var getPostEdits = (0, import_data3.createRegistrySelector)((select4) => (state) => {
    const postType2 = getCurrentPostType(state);
    const postId2 = getCurrentPostId(state);
    return select4(import_core_data.store).getEntityRecordEdits(
      "postType",
      postType2,
      postId2
    ) || EMPTY_OBJECT2;
  });
  function getCurrentPostAttribute(state, attributeName) {
    switch (attributeName) {
      case "type":
        return getCurrentPostType(state);
      case "id":
        return getCurrentPostId(state);
      default:
        const post = getCurrentPost(state);
        if (!post.hasOwnProperty(attributeName)) {
          break;
        }
        return getPostRawValue(post[attributeName]);
    }
  }
  var getNestedEditedPostProperty = (0, import_data3.createSelector)(
    (state, attributeName) => {
      const edits = getPostEdits(state);
      if (!edits.hasOwnProperty(attributeName)) {
        return getCurrentPostAttribute(state, attributeName);
      }
      return {
        ...getCurrentPostAttribute(state, attributeName),
        ...edits[attributeName]
      };
    },
    (state, attributeName) => [
      getCurrentPostAttribute(state, attributeName),
      getPostEdits(state)[attributeName]
    ]
  );
  function getEditedPostAttribute(state, attributeName) {
    switch (attributeName) {
      case "content":
        return getEditedPostContent(state);
    }
    const edits = getPostEdits(state);
    if (!edits.hasOwnProperty(attributeName)) {
      return getCurrentPostAttribute(state, attributeName);
    }
    if (EDIT_MERGE_PROPERTIES.has(attributeName)) {
      return getNestedEditedPostProperty(state, attributeName);
    }
    return edits[attributeName];
  }
  var getAutosaveAttribute = (0, import_data3.createRegistrySelector)(
    (select4) => (state, attributeName) => {
      if (!AUTOSAVE_PROPERTIES.includes(attributeName) && attributeName !== "preview_link") {
        return;
      }
      const postType2 = getCurrentPostType(state);
      if (postType2 === "wp_template") {
        return false;
      }
      const postId2 = getCurrentPostId(state);
      const currentUserId = select4(import_core_data.store).getCurrentUser()?.id;
      const autosave2 = select4(import_core_data.store).getAutosave(
        postType2,
        postId2,
        currentUserId
      );
      if (autosave2) {
        return getPostRawValue(autosave2[attributeName]);
      }
    }
  );
  function getEditedPostVisibility(state) {
    const status = getEditedPostAttribute(state, "status");
    if (status === "private") {
      return "private";
    }
    const password = getEditedPostAttribute(state, "password");
    if (password) {
      return "password";
    }
    return "public";
  }
  function isCurrentPostPending(state) {
    return getCurrentPost(state).status === "pending";
  }
  function isCurrentPostPublished(state, currentPost) {
    const post = currentPost || getCurrentPost(state);
    return ["publish", "private"].indexOf(post.status) !== -1 || post.status === "future" && !(0, import_date.isInTheFuture)(
      new Date(Number((0, import_date.getDate)(post.date)) - ONE_MINUTE_IN_MS)
    );
  }
  function isCurrentPostScheduled(state) {
    return getCurrentPost(state).status === "future" && !isCurrentPostPublished(state);
  }
  function isEditedPostPublishable(state) {
    const post = getCurrentPost(state);
    return isEditedPostDirty(state) || ["publish", "private", "future"].indexOf(post.status) === -1;
  }
  function isEditedPostSaveable(state) {
    if (isSavingPost(state)) {
      return false;
    }
    return !!getEditedPostAttribute(state, "title") || !!getEditedPostAttribute(state, "excerpt") || !isEditedPostEmpty(state) || import_element2.Platform.OS === "native";
  }
  var isEditedPostEmpty = (0, import_data3.createRegistrySelector)(
    (select4) => (state) => {
      const postId2 = getCurrentPostId(state);
      const postType2 = getCurrentPostType(state);
      const record = select4(import_core_data.store).getEditedEntityRecord(
        "postType",
        postType2,
        postId2
      );
      if (typeof record.content !== "function") {
        return !record.content;
      }
      const blocks = getEditedPostAttribute(state, "blocks");
      if (blocks.length === 0) {
        return true;
      }
      if (blocks.length > 1) {
        return false;
      }
      const blockName = blocks[0].name;
      if (blockName !== (0, import_blocks.getDefaultBlockName)() && blockName !== (0, import_blocks.getFreeformContentHandlerName)()) {
        return false;
      }
      return !getEditedPostContent(state);
    }
  );
  var isEditedPostAutosaveable = (0, import_data3.createRegistrySelector)(
    (select4) => (state) => {
      if (!isEditedPostSaveable(state)) {
        return false;
      }
      if (isPostAutosavingLocked(state)) {
        return false;
      }
      const postType2 = getCurrentPostType(state);
      const postTypeObject = select4(import_core_data.store).getPostType(postType2);
      if (postType2 === "wp_template" || !postTypeObject?.supports?.autosave) {
        return false;
      }
      const postId2 = getCurrentPostId(state);
      const hasFetchedAutosave = select4(import_core_data.store).hasFetchedAutosaves(
        postType2,
        postId2
      );
      const currentUserId = select4(import_core_data.store).getCurrentUser()?.id;
      const autosave2 = select4(import_core_data.store).getAutosave(
        postType2,
        postId2,
        currentUserId
      );
      if (!hasFetchedAutosave) {
        return false;
      }
      if (!autosave2) {
        return true;
      }
      if (hasChangedContent(state)) {
        return true;
      }
      return ["title", "excerpt", "meta"].some(
        (field) => getPostRawValue(autosave2[field]) !== getEditedPostAttribute(state, field)
      );
    }
  );
  function isEditedPostBeingScheduled(state) {
    const date = getEditedPostAttribute(state, "date");
    const checkedDate = new Date(
      Number((0, import_date.getDate)(date)) - ONE_MINUTE_IN_MS
    );
    return (0, import_date.isInTheFuture)(checkedDate);
  }
  function isEditedPostDateFloating(state) {
    const date = getEditedPostAttribute(state, "date");
    const modified = getEditedPostAttribute(state, "modified");
    const status = getCurrentPost(state).status;
    if (status === "draft" || status === "auto-draft" || status === "pending") {
      return date === modified || date === null;
    }
    return false;
  }
  function isDeletingPost(state) {
    return !!state.deleting.pending;
  }
  function isSavingPost(state) {
    return !!state.saving.pending;
  }
  var isSavingNonPostEntityChanges = (0, import_data3.createRegistrySelector)(
    (select4) => (state) => {
      const entitiesBeingSaved = select4(import_core_data.store).__experimentalGetEntitiesBeingSaved();
      const { type, id } = getCurrentPost(state);
      return entitiesBeingSaved.some(
        (entityRecord) => entityRecord.kind !== "postType" || entityRecord.name !== type || entityRecord.key !== id
      );
    }
  );
  var didPostSaveRequestSucceed = (0, import_data3.createRegistrySelector)(
    (select4) => (state) => {
      const postType2 = getCurrentPostType(state);
      const postId2 = getCurrentPostId(state);
      return !select4(import_core_data.store).getLastEntitySaveError(
        "postType",
        postType2,
        postId2
      );
    }
  );
  var didPostSaveRequestFail = (0, import_data3.createRegistrySelector)(
    (select4) => (state) => {
      const postType2 = getCurrentPostType(state);
      const postId2 = getCurrentPostId(state);
      return !!select4(import_core_data.store).getLastEntitySaveError(
        "postType",
        postType2,
        postId2
      );
    }
  );
  function isAutosavingPost(state) {
    return isSavingPost(state) && Boolean(state.saving.options?.isAutosave);
  }
  function isPreviewingPost(state) {
    return isSavingPost(state) && Boolean(state.saving.options?.isPreview);
  }
  function getEditedPostPreviewLink(state) {
    if (state.saving.pending || isSavingPost(state)) {
      return;
    }
    let previewLink = getAutosaveAttribute(state, "preview_link");
    if (!previewLink || "draft" === getCurrentPost(state).status) {
      previewLink = getEditedPostAttribute(state, "link");
      if (previewLink) {
        previewLink = (0, import_url.addQueryArgs)(previewLink, { preview: true });
      }
    }
    const featuredImageId = getEditedPostAttribute(state, "featured_media");
    if (previewLink && featuredImageId) {
      return (0, import_url.addQueryArgs)(previewLink, { _thumbnail_id: featuredImageId });
    }
    return previewLink;
  }
  var getSuggestedPostFormat = (0, import_data3.createRegistrySelector)(
    (select4) => () => {
      const blocks = select4(import_block_editor2.store).getBlocks();
      if (blocks.length > 2) {
        return null;
      }
      let name;
      if (blocks.length === 1) {
        name = blocks[0].name;
        if (name === "core/embed") {
          const provider = blocks[0].attributes?.providerNameSlug;
          if (["youtube", "vimeo"].includes(provider)) {
            name = "core/video";
          } else if (["spotify", "soundcloud"].includes(provider)) {
            name = "core/audio";
          }
        }
      }
      if (blocks.length === 2 && blocks[1].name === "core/paragraph") {
        name = blocks[0].name;
      }
      switch (name) {
        case "core/image":
          return "image";
        case "core/quote":
        case "core/pullquote":
          return "quote";
        case "core/gallery":
          return "gallery";
        case "core/video":
          return "video";
        case "core/audio":
          return "audio";
        default:
          return null;
      }
    }
  );
  var getEditedPostContent = (0, import_data3.createRegistrySelector)(
    (select4) => (state) => {
      const postId2 = getCurrentPostId(state);
      const postType2 = getCurrentPostType(state);
      const record = select4(import_core_data.store).getEditedEntityRecord(
        "postType",
        postType2,
        postId2
      );
      if (record) {
        if (typeof record.content === "function") {
          return record.content(record);
        } else if (record.blocks) {
          return (0, import_blocks.__unstableSerializeAndClean)(record.blocks);
        } else if (record.content) {
          return record.content;
        }
      }
      return "";
    }
  );
  function isPublishingPost(state) {
    return isSavingPost(state) && !isCurrentPostPublished(state) && getEditedPostAttribute(state, "status") === "publish";
  }
  function isPermalinkEditable(state) {
    const permalinkTemplate = getEditedPostAttribute(
      state,
      "permalink_template"
    );
    return PERMALINK_POSTNAME_REGEX.test(permalinkTemplate);
  }
  function getPermalink(state) {
    const permalinkParts = getPermalinkParts(state);
    if (!permalinkParts) {
      return null;
    }
    const { prefix, postName, suffix } = permalinkParts;
    if (isPermalinkEditable(state)) {
      return prefix + postName + suffix;
    }
    return prefix;
  }
  function getEditedPostSlug(state) {
    return getEditedPostAttribute(state, "slug") || (0, import_url.cleanForSlug)(getEditedPostAttribute(state, "title")) || getCurrentPostId(state);
  }
  function getPermalinkParts(state) {
    const permalinkTemplate = getEditedPostAttribute(
      state,
      "permalink_template"
    );
    if (!permalinkTemplate) {
      return null;
    }
    const postName = getEditedPostAttribute(state, "slug") || getEditedPostAttribute(state, "generated_slug");
    const [prefix, suffix] = permalinkTemplate.split(
      PERMALINK_POSTNAME_REGEX
    );
    return {
      prefix,
      postName,
      suffix
    };
  }
  function isPostLocked(state) {
    return state.postLock.isLocked;
  }
  function isPostSavingLocked(state) {
    return Object.keys(state.postSavingLock).length > 0;
  }
  function isPostAutosavingLocked(state) {
    return Object.keys(state.postAutosavingLock).length > 0;
  }
  function isPostLockTakeover(state) {
    return state.postLock.isTakeover;
  }
  function getPostLockUser(state) {
    return state.postLock.user;
  }
  function getActivePostLock(state) {
    return state.postLock.activePostLock;
  }
  function canUserUseUnfilteredHTML(state) {
    return Boolean(
      getCurrentPost(state)._links?.hasOwnProperty(
        "wp:action-unfiltered-html"
      )
    );
  }
  var isPublishSidebarEnabled = (0, import_data3.createRegistrySelector)(
    (select4) => () => !!select4(import_preferences.store).get("core", "isPublishSidebarEnabled")
  );
  var getEditorBlocks = (0, import_data3.createSelector)(
    (state) => {
      return getEditedPostAttribute(state, "blocks") || (0, import_blocks.parse)(getEditedPostContent(state));
    },
    (state) => [
      getEditedPostAttribute(state, "blocks"),
      getEditedPostContent(state)
    ]
  );
  function isEditorPanelRemoved(state, panelName) {
    return state.removedPanels.includes(panelName);
  }
  var isEditorPanelEnabled = (0, import_data3.createRegistrySelector)(
    (select4) => (state, panelName) => {
      const inactivePanels = select4(import_preferences.store).get(
        "core",
        "inactivePanels"
      );
      return !isEditorPanelRemoved(state, panelName) && !inactivePanels?.includes(panelName);
    }
  );
  var isEditorPanelOpened = (0, import_data3.createRegistrySelector)(
    (select4) => (state, panelName) => {
      const openPanels = select4(import_preferences.store).get(
        "core",
        "openPanels"
      );
      return !!openPanels?.includes(panelName);
    }
  );
  function getEditorSelectionStart(state) {
    (0, import_deprecated.default)("select('core/editor').getEditorSelectionStart", {
      since: "5.8",
      alternative: "select('core/editor').getEditorSelection"
    });
    return getEditedPostAttribute(state, "selection")?.selectionStart;
  }
  function getEditorSelectionEnd(state) {
    (0, import_deprecated.default)("select('core/editor').getEditorSelectionStart", {
      since: "5.8",
      alternative: "select('core/editor').getEditorSelection"
    });
    return getEditedPostAttribute(state, "selection")?.selectionEnd;
  }
  function getEditorSelection(state) {
    return getEditedPostAttribute(state, "selection");
  }
  function __unstableIsEditorReady(state) {
    return !!state.postId;
  }
  function getEditorSettings(state) {
    return state.editorSettings;
  }
  function getRenderingMode(state) {
    return state.renderingMode;
  }
  var getDeviceType = (0, import_data3.createRegistrySelector)(
    (select4) => (state) => {
      const isZoomOut = unlock(select4(import_block_editor2.store)).isZoomOut();
      if (isZoomOut) {
        return "Desktop";
      }
      return state.deviceType;
    }
  );
  function isListViewOpened(state) {
    return state.listViewPanel;
  }
  function isInserterOpened(state) {
    return !!state.blockInserterPanel;
  }
  var getEditorMode = (0, import_data3.createRegistrySelector)(
    (select4) => () => select4(import_preferences.store).get("core", "editorMode") ?? "visual"
  );
  function getStateBeforeOptimisticTransaction() {
    (0, import_deprecated.default)("select('core/editor').getStateBeforeOptimisticTransaction", {
      since: "5.7",
      hint: "No state history is kept on this store anymore"
    });
    return null;
  }
  function inSomeHistory() {
    (0, import_deprecated.default)("select('core/editor').inSomeHistory", {
      since: "5.7",
      hint: "No state history is kept on this store anymore"
    });
    return false;
  }
  function getBlockEditorSelector(name) {
    return (0, import_data3.createRegistrySelector)((select4) => (state, ...args) => {
      (0, import_deprecated.default)("`wp.data.select( 'core/editor' )." + name + "`", {
        since: "5.3",
        alternative: "`wp.data.select( 'core/block-editor' )." + name + "`",
        version: "6.2"
      });
      return select4(import_block_editor2.store)[name](...args);
    });
  }
  var getBlockName = getBlockEditorSelector("getBlockName");
  var isBlockValid = getBlockEditorSelector("isBlockValid");
  var getBlockAttributes = getBlockEditorSelector("getBlockAttributes");
  var getBlock = getBlockEditorSelector("getBlock");
  var getBlocks = getBlockEditorSelector("getBlocks");
  var getClientIdsOfDescendants = getBlockEditorSelector(
    "getClientIdsOfDescendants"
  );
  var getClientIdsWithDescendants = getBlockEditorSelector(
    "getClientIdsWithDescendants"
  );
  var getGlobalBlockCount = getBlockEditorSelector(
    "getGlobalBlockCount"
  );
  var getBlocksByClientId = getBlockEditorSelector(
    "getBlocksByClientId"
  );
  var getBlockCount = getBlockEditorSelector("getBlockCount");
  var getBlockSelectionStart = getBlockEditorSelector(
    "getBlockSelectionStart"
  );
  var getBlockSelectionEnd = getBlockEditorSelector(
    "getBlockSelectionEnd"
  );
  var getSelectedBlockCount = getBlockEditorSelector(
    "getSelectedBlockCount"
  );
  var hasSelectedBlock = getBlockEditorSelector("hasSelectedBlock");
  var getSelectedBlockClientId = getBlockEditorSelector(
    "getSelectedBlockClientId"
  );
  var getSelectedBlock = getBlockEditorSelector("getSelectedBlock");
  var getBlockRootClientId = getBlockEditorSelector(
    "getBlockRootClientId"
  );
  var getBlockHierarchyRootClientId = getBlockEditorSelector(
    "getBlockHierarchyRootClientId"
  );
  var getAdjacentBlockClientId = getBlockEditorSelector(
    "getAdjacentBlockClientId"
  );
  var getPreviousBlockClientId = getBlockEditorSelector(
    "getPreviousBlockClientId"
  );
  var getNextBlockClientId = getBlockEditorSelector(
    "getNextBlockClientId"
  );
  var getSelectedBlocksInitialCaretPosition = getBlockEditorSelector(
    "getSelectedBlocksInitialCaretPosition"
  );
  var getMultiSelectedBlockClientIds = getBlockEditorSelector(
    "getMultiSelectedBlockClientIds"
  );
  var getMultiSelectedBlocks = getBlockEditorSelector(
    "getMultiSelectedBlocks"
  );
  var getFirstMultiSelectedBlockClientId = getBlockEditorSelector(
    "getFirstMultiSelectedBlockClientId"
  );
  var getLastMultiSelectedBlockClientId = getBlockEditorSelector(
    "getLastMultiSelectedBlockClientId"
  );
  var isFirstMultiSelectedBlock = getBlockEditorSelector(
    "isFirstMultiSelectedBlock"
  );
  var isBlockMultiSelected = getBlockEditorSelector(
    "isBlockMultiSelected"
  );
  var isAncestorMultiSelected = getBlockEditorSelector(
    "isAncestorMultiSelected"
  );
  var getMultiSelectedBlocksStartClientId = getBlockEditorSelector(
    "getMultiSelectedBlocksStartClientId"
  );
  var getMultiSelectedBlocksEndClientId = getBlockEditorSelector(
    "getMultiSelectedBlocksEndClientId"
  );
  var getBlockOrder = getBlockEditorSelector("getBlockOrder");
  var getBlockIndex = getBlockEditorSelector("getBlockIndex");
  var isBlockSelected = getBlockEditorSelector("isBlockSelected");
  var hasSelectedInnerBlock = getBlockEditorSelector(
    "hasSelectedInnerBlock"
  );
  var isBlockWithinSelection = getBlockEditorSelector(
    "isBlockWithinSelection"
  );
  var hasMultiSelection = getBlockEditorSelector("hasMultiSelection");
  var isMultiSelecting = getBlockEditorSelector("isMultiSelecting");
  var isSelectionEnabled = getBlockEditorSelector("isSelectionEnabled");
  var getBlockMode = getBlockEditorSelector("getBlockMode");
  var isTyping = getBlockEditorSelector("isTyping");
  var isCaretWithinFormattedText = getBlockEditorSelector(
    "isCaretWithinFormattedText"
  );
  var getBlockInsertionPoint = getBlockEditorSelector(
    "getBlockInsertionPoint"
  );
  var isBlockInsertionPointVisible = getBlockEditorSelector(
    "isBlockInsertionPointVisible"
  );
  var isValidTemplate = getBlockEditorSelector("isValidTemplate");
  var getTemplate = getBlockEditorSelector("getTemplate");
  var getTemplateLock = getBlockEditorSelector("getTemplateLock");
  var canInsertBlockType = getBlockEditorSelector("canInsertBlockType");
  var getInserterItems = getBlockEditorSelector("getInserterItems");
  var hasInserterItems = getBlockEditorSelector("hasInserterItems");
  var getBlockListSettings = getBlockEditorSelector(
    "getBlockListSettings"
  );
  var __experimentalGetDefaultTemplateTypes = (0, import_data3.createRegistrySelector)(
    (select4) => () => {
      (0, import_deprecated.default)(
        "select('core/editor').__experimentalGetDefaultTemplateTypes",
        {
          since: "6.8",
          alternative: "select('core/core-data').getCurrentTheme()?.default_template_types"
        }
      );
      return select4(import_core_data.store).getCurrentTheme()?.default_template_types;
    }
  );
  var __experimentalGetDefaultTemplatePartAreas = (0, import_data3.createRegistrySelector)(
    (select4) => (0, import_data3.createSelector)(() => {
      (0, import_deprecated.default)(
        "select('core/editor').__experimentalGetDefaultTemplatePartAreas",
        {
          since: "6.8",
          alternative: "select('core/core-data').getCurrentTheme()?.default_template_part_areas"
        }
      );
      const areas = select4(import_core_data.store).getCurrentTheme()?.default_template_part_areas || [];
      return areas.map((item) => {
        return { ...item, icon: getTemplatePartIcon(item.icon) };
      });
    })
  );
  var __experimentalGetDefaultTemplateType = (0, import_data3.createRegistrySelector)(
    (select4) => (0, import_data3.createSelector)((state, slug) => {
      (0, import_deprecated.default)(
        "select('core/editor').__experimentalGetDefaultTemplateType",
        {
          since: "6.8"
        }
      );
      const templateTypes = select4(import_core_data.store).getCurrentTheme()?.default_template_types;
      if (!templateTypes) {
        return EMPTY_OBJECT2;
      }
      return Object.values(templateTypes).find(
        (type) => type.slug === slug
      ) ?? EMPTY_OBJECT2;
    })
  );
  var __experimentalGetTemplateInfo = (0, import_data3.createRegistrySelector)(
    (select4) => (0, import_data3.createSelector)((state, template2) => {
      (0, import_deprecated.default)("select('core/editor').__experimentalGetTemplateInfo", {
        since: "6.8"
      });
      if (!template2) {
        return EMPTY_OBJECT2;
      }
      const currentTheme = select4(import_core_data.store).getCurrentTheme();
      const templateTypes = currentTheme?.default_template_types || [];
      const templateAreas = currentTheme?.default_template_part_areas || [];
      return getTemplateInfo({
        template: template2,
        templateAreas,
        templateTypes
      });
    })
  );
  var getPostTypeLabel = (0, import_data3.createRegistrySelector)(
    (select4) => (state) => {
      const currentPostType = getCurrentPostType(state);
      const postType2 = select4(import_core_data.store).getPostType(currentPostType);
      return postType2?.labels?.singular_name;
    }
  );
  function isPublishSidebarOpened(state) {
    return state.publishSidebarActive;
  }

  // packages/editor/build-module/store/actions.js
  var actions_exports = {};
  __export(actions_exports, {
    __experimentalTearDownEditor: () => __experimentalTearDownEditor,
    __unstableSaveForPreview: () => __unstableSaveForPreview,
    autosave: () => autosave,
    clearSelectedBlock: () => clearSelectedBlock,
    closePublishSidebar: () => closePublishSidebar,
    createUndoLevel: () => createUndoLevel,
    disablePublishSidebar: () => disablePublishSidebar,
    editPost: () => editPost,
    enablePublishSidebar: () => enablePublishSidebar,
    enterFormattedText: () => enterFormattedText,
    exitFormattedText: () => exitFormattedText,
    hideInsertionPoint: () => hideInsertionPoint,
    insertBlock: () => insertBlock,
    insertBlocks: () => insertBlocks,
    insertDefaultBlock: () => insertDefaultBlock,
    lockPostAutosaving: () => lockPostAutosaving,
    lockPostSaving: () => lockPostSaving,
    mergeBlocks: () => mergeBlocks,
    moveBlockToPosition: () => moveBlockToPosition,
    moveBlocksDown: () => moveBlocksDown,
    moveBlocksUp: () => moveBlocksUp,
    multiSelect: () => multiSelect,
    openPublishSidebar: () => openPublishSidebar,
    receiveBlocks: () => receiveBlocks,
    redo: () => redo,
    refreshPost: () => refreshPost,
    removeBlock: () => removeBlock,
    removeBlocks: () => removeBlocks,
    removeEditorPanel: () => removeEditorPanel,
    replaceBlock: () => replaceBlock,
    replaceBlocks: () => replaceBlocks,
    resetBlocks: () => resetBlocks,
    resetEditorBlocks: () => resetEditorBlocks,
    resetPost: () => resetPost,
    savePost: () => savePost,
    selectBlock: () => selectBlock,
    setDeviceType: () => setDeviceType,
    setEditedPost: () => setEditedPost,
    setIsInserterOpened: () => setIsInserterOpened,
    setIsListViewOpened: () => setIsListViewOpened,
    setRenderingMode: () => setRenderingMode,
    setTemplateValidity: () => setTemplateValidity,
    setupEditor: () => setupEditor,
    setupEditorState: () => setupEditorState,
    showInsertionPoint: () => showInsertionPoint,
    startMultiSelect: () => startMultiSelect,
    startTyping: () => startTyping,
    stopMultiSelect: () => stopMultiSelect,
    stopTyping: () => stopTyping,
    switchEditorMode: () => switchEditorMode,
    synchronizeTemplate: () => synchronizeTemplate,
    toggleBlockMode: () => toggleBlockMode,
    toggleDistractionFree: () => toggleDistractionFree,
    toggleEditorPanelEnabled: () => toggleEditorPanelEnabled,
    toggleEditorPanelOpened: () => toggleEditorPanelOpened,
    togglePublishSidebar: () => togglePublishSidebar,
    toggleSelection: () => toggleSelection,
    toggleSpotlightMode: () => toggleSpotlightMode,
    toggleTopToolbar: () => toggleTopToolbar,
    trashPost: () => trashPost,
    undo: () => undo,
    unlockPostAutosaving: () => unlockPostAutosaving,
    unlockPostSaving: () => unlockPostSaving,
    updateBlock: () => updateBlock,
    updateBlockAttributes: () => updateBlockAttributes,
    updateBlockListSettings: () => updateBlockListSettings,
    updateEditorSettings: () => updateEditorSettings,
    updatePost: () => updatePost,
    updatePostLock: () => updatePostLock
  });
  var import_a11y = __toESM(require_a11y());
  var import_api_fetch = __toESM(require_api_fetch());
  var import_deprecated2 = __toESM(require_deprecated());
  var import_blocks2 = __toESM(require_blocks());
  var import_notices = __toESM(require_notices());
  var import_core_data2 = __toESM(require_core_data());
  var import_block_editor3 = __toESM(require_block_editor());
  var import_hooks = __toESM(require_hooks());
  var import_preferences2 = __toESM(require_preferences());
  var import_i18n2 = __toESM(require_i18n());

  // packages/editor/build-module/store/local-autosave.js
  function postKey(postId2, isPostNew) {
    return `wp-autosave-block-editor-post-${isPostNew ? "auto-draft" : postId2}`;
  }
  function localAutosaveGet(postId2, isPostNew) {
    return window.sessionStorage.getItem(postKey(postId2, isPostNew));
  }
  function localAutosaveSet(postId2, isPostNew, title, content, excerpt) {
    window.sessionStorage.setItem(
      postKey(postId2, isPostNew),
      JSON.stringify({
        post_title: title,
        content,
        excerpt
      })
    );
  }
  function localAutosaveClear(postId2, isPostNew) {
    window.sessionStorage.removeItem(postKey(postId2, isPostNew));
  }

  // packages/editor/build-module/store/utils/notice-builder.js
  var import_i18n = __toESM(require_i18n());
  function getNotificationArgumentsForSaveSuccess(data) {
    const { previousPost, post, postType: postType2 } = data;
    if (data.options?.isAutosave) {
      return [];
    }
    const publishStatus = ["publish", "private", "future"];
    const isPublished = publishStatus.includes(previousPost.status);
    const willPublish = publishStatus.includes(post.status);
    const willTrash = post.status === "trash" && previousPost.status !== "trash";
    let noticeMessage;
    let shouldShowLink = postType2?.viewable ?? false;
    let isDraft;
    if (willTrash) {
      noticeMessage = postType2.labels.item_trashed;
      shouldShowLink = false;
    } else if (!isPublished && !willPublish) {
      noticeMessage = (0, import_i18n.__)("Draft saved.");
      isDraft = true;
    } else if (isPublished && !willPublish) {
      noticeMessage = postType2.labels.item_reverted_to_draft;
      shouldShowLink = false;
    } else if (!isPublished && willPublish) {
      noticeMessage = {
        publish: postType2.labels.item_published,
        private: postType2.labels.item_published_privately,
        future: postType2.labels.item_scheduled
      }[post.status];
    } else {
      noticeMessage = postType2.labels.item_updated;
    }
    const actions2 = [];
    if (shouldShowLink) {
      actions2.push({
        label: isDraft ? (0, import_i18n.__)("View Preview") : postType2.labels.view_item,
        url: post.link,
        openInNewTab: true
      });
    }
    return [
      noticeMessage,
      {
        id: "editor-save",
        type: "snackbar",
        actions: actions2
      }
    ];
  }
  function getNotificationArgumentsForSaveFail(data) {
    const { post, edits, error } = data;
    if (error && "rest_autosave_no_changes" === error.code) {
      return [];
    }
    const publishStatus = ["publish", "private", "future"];
    const isPublished = publishStatus.indexOf(post.status) !== -1;
    if (error.code === "offline_error") {
      const messages2 = {
        publish: (0, import_i18n.__)("Publishing failed because you were offline."),
        private: (0, import_i18n.__)("Publishing failed because you were offline."),
        future: (0, import_i18n.__)("Scheduling failed because you were offline."),
        default: (0, import_i18n.__)("Updating failed because you were offline.")
      };
      const noticeMessage2 = !isPublished && edits.status in messages2 ? messages2[edits.status] : messages2.default;
      return [noticeMessage2, { id: "editor-save" }];
    }
    const messages = {
      publish: (0, import_i18n.__)("Publishing failed."),
      private: (0, import_i18n.__)("Publishing failed."),
      future: (0, import_i18n.__)("Scheduling failed."),
      default: (0, import_i18n.__)("Updating failed.")
    };
    let noticeMessage = !isPublished && edits.status in messages ? messages[edits.status] : messages.default;
    if (error.message && !/<\/?[^>]*>/.test(error.message)) {
      noticeMessage = [noticeMessage, error.message].join(" ");
    }
    return [
      noticeMessage,
      {
        id: "editor-save"
      }
    ];
  }
  function getNotificationArgumentsForTrashFail(data) {
    return [
      data.error.message && data.error.code !== "unknown_error" ? data.error.message : (0, import_i18n.__)("Trashing failed"),
      {
        id: "editor-trash-fail"
      }
    ];
  }

  // packages/editor/build-module/store/actions.js
  var setupEditor = (post, edits, template2) => ({ dispatch: dispatch5 }) => {
    dispatch5.setEditedPost(post.type, post.id);
    const isNewPost = post.status === "auto-draft";
    if (isNewPost && template2) {
      let content;
      if ("content" in edits) {
        content = edits.content;
      } else {
        content = post.content.raw;
      }
      let blocks = (0, import_blocks2.parse)(content);
      blocks = (0, import_blocks2.synchronizeBlocksWithTemplate)(blocks, template2);
      dispatch5.resetEditorBlocks(blocks, {
        __unstableShouldCreateUndoLevel: false
      });
    }
    if (edits && Object.values(edits).some(
      ([key, edit]) => edit !== (post[key]?.raw ?? post[key])
    )) {
      dispatch5.editPost(edits);
    }
  };
  function __experimentalTearDownEditor() {
    (0, import_deprecated2.default)(
      "wp.data.dispatch( 'core/editor' ).__experimentalTearDownEditor",
      {
        since: "6.5"
      }
    );
    return { type: "DO_NOTHING" };
  }
  function resetPost() {
    (0, import_deprecated2.default)("wp.data.dispatch( 'core/editor' ).resetPost", {
      since: "6.0",
      version: "6.3",
      alternative: "Initialize the editor with the setupEditorState action"
    });
    return { type: "DO_NOTHING" };
  }
  function updatePost() {
    (0, import_deprecated2.default)("wp.data.dispatch( 'core/editor' ).updatePost", {
      since: "5.7",
      alternative: "Use the core entities store instead"
    });
    return {
      type: "DO_NOTHING"
    };
  }
  function setupEditorState(post) {
    (0, import_deprecated2.default)("wp.data.dispatch( 'core/editor' ).setupEditorState", {
      since: "6.5",
      alternative: "wp.data.dispatch( 'core/editor' ).setEditedPost"
    });
    return setEditedPost(post.type, post.id);
  }
  function setEditedPost(postType2, postId2) {
    return {
      type: "SET_EDITED_POST",
      postType: postType2,
      postId: postId2
    };
  }
  var editPost = (edits, options) => ({ select: select4, registry }) => {
    const { id, type } = select4.getCurrentPost();
    registry.dispatch(import_core_data2.store).editEntityRecord("postType", type, id, edits, options);
  };
  var savePost = (options = {}) => async ({ select: select4, dispatch: dispatch5, registry }) => {
    if (!select4.isEditedPostSaveable()) {
      return;
    }
    const content = select4.getEditedPostContent();
    if (!options.isAutosave) {
      dispatch5.editPost({ content }, { undoIgnore: true });
    }
    const previousRecord = select4.getCurrentPost();
    let edits = {
      id: previousRecord.id,
      ...registry.select(import_core_data2.store).getEntityRecordNonTransientEdits(
        "postType",
        previousRecord.type,
        previousRecord.id
      ),
      content
    };
    dispatch5({ type: "REQUEST_POST_UPDATE_START", options });
    let error = false;
    try {
      edits = await (0, import_hooks.applyFiltersAsync)(
        "editor.preSavePost",
        edits,
        options
      );
    } catch (err) {
      error = err;
    }
    if (!error) {
      try {
        await registry.dispatch(import_core_data2.store).saveEntityRecord(
          "postType",
          previousRecord.type,
          edits,
          options
        );
      } catch (err) {
        error = err.message && err.code !== "unknown_error" ? err.message : (0, import_i18n2.__)("An error occurred while updating.");
      }
    }
    if (!error) {
      error = registry.select(import_core_data2.store).getLastEntitySaveError(
        "postType",
        previousRecord.type,
        previousRecord.id
      );
    }
    if (!error) {
      try {
        await (0, import_hooks.applyFilters)(
          "editor.__unstableSavePost",
          Promise.resolve(),
          options
        );
      } catch (err) {
        error = err;
      }
    }
    if (!error) {
      try {
        await (0, import_hooks.doActionAsync)(
          "editor.savePost",
          { id: previousRecord.id, type: previousRecord.type },
          options
        );
      } catch (err) {
        error = err;
      }
    }
    dispatch5({ type: "REQUEST_POST_UPDATE_FINISH", options });
    if (!options.isAutosave && previousRecord.type === "wp_template" && (typeof previousRecord.id === "number" || /^\d+$/.test(previousRecord.id))) {
      templateActivationNotice({ select: select4, dispatch: dispatch5, registry });
    }
    if (error) {
      const args = getNotificationArgumentsForSaveFail({
        post: previousRecord,
        edits,
        error
      });
      if (args.length) {
        registry.dispatch(import_notices.store).createErrorNotice(...args);
      }
    } else {
      const updatedRecord = select4.getCurrentPost();
      const args = getNotificationArgumentsForSaveSuccess({
        previousPost: previousRecord,
        post: updatedRecord,
        postType: await registry.resolveSelect(import_core_data2.store).getPostType(updatedRecord.type),
        options
      });
      if (args.length) {
        registry.dispatch(import_notices.store).createSuccessNotice(...args);
      }
      if (!options.isAutosave) {
        registry.dispatch(import_block_editor3.store).__unstableMarkLastChangeAsPersistent();
      }
    }
  };
  async function templateActivationNotice({ select: select4, registry }) {
    const editorSettings2 = select4.getEditorSettings();
    if (editorSettings2.onNavigateToPreviousEntityRecord) {
      return;
    }
    const { id, slug } = select4.getCurrentPost();
    const site = await registry.select(import_core_data2.store).getEntityRecord("root", "site");
    if (site.active_templates[slug] === id) {
      return;
    }
    const currentTheme = await registry.resolveSelect(import_core_data2.store).getCurrentTheme();
    const templateType = currentTheme?.default_template_types.find(
      (type) => type.slug === slug
    );
    await registry.dispatch(import_notices.store).createNotice(
      "info",
      (0, import_i18n2.sprintf)(
        // translators: %s: The name (or slug) of the type of template.
        (0, import_i18n2.__)('Do you want to activate this "%s" template?'),
        templateType?.title ?? slug
      ),
      {
        id: "template-activate-notice",
        actions: [
          {
            label: (0, import_i18n2.__)("Activate"),
            onClick: async () => {
              await registry.dispatch(import_notices.store).createNotice(
                "info",
                (0, import_i18n2.__)("Activating template\u2026"),
                { id: "template-activate-notice" }
              );
              try {
                const currentSite = await registry.select(import_core_data2.store).getEntityRecord("root", "site");
                await registry.dispatch(import_core_data2.store).saveEntityRecord(
                  "root",
                  "site",
                  {
                    active_templates: {
                      ...currentSite.active_templates,
                      [slug]: id
                    }
                  },
                  { throwOnError: true }
                );
                await registry.dispatch(import_notices.store).createSuccessNotice(
                  (0, import_i18n2.__)("Template activated."),
                  { id: "template-activate-notice" }
                );
              } catch (error) {
                await registry.dispatch(import_notices.store).createErrorNotice(
                  (0, import_i18n2.__)("Template activation failed."),
                  { id: "template-activate-notice" }
                );
                throw error;
              }
            }
          }
        ]
      }
    );
  }
  function refreshPost() {
    (0, import_deprecated2.default)("wp.data.dispatch( 'core/editor' ).refreshPost", {
      since: "6.0",
      version: "6.3",
      alternative: "Use the core entities store instead"
    });
    return { type: "DO_NOTHING" };
  }
  var trashPost = () => async ({ select: select4, dispatch: dispatch5, registry }) => {
    const postTypeSlug = select4.getCurrentPostType();
    const postType2 = await registry.resolveSelect(import_core_data2.store).getPostType(postTypeSlug);
    const { rest_base: restBase, rest_namespace: restNamespace = "wp/v2" } = postType2;
    dispatch5({ type: "REQUEST_POST_DELETE_START" });
    try {
      const post = select4.getCurrentPost();
      await (0, import_api_fetch.default)({
        path: `/${restNamespace}/${restBase}/${post.id}`,
        method: "DELETE"
      });
      await dispatch5.savePost();
    } catch (error) {
      registry.dispatch(import_notices.store).createErrorNotice(
        ...getNotificationArgumentsForTrashFail({ error })
      );
    }
    dispatch5({ type: "REQUEST_POST_DELETE_FINISH" });
  };
  var autosave = ({ local = false, ...options } = {}) => async ({ select: select4, dispatch: dispatch5 }) => {
    const post = select4.getCurrentPost();
    if (post.type === "wp_template") {
      return;
    }
    if (local) {
      const isPostNew = select4.isEditedPostNew();
      const title = select4.getEditedPostAttribute("title");
      const content = select4.getEditedPostAttribute("content");
      const excerpt = select4.getEditedPostAttribute("excerpt");
      localAutosaveSet(post.id, isPostNew, title, content, excerpt);
    } else {
      await dispatch5.savePost({ isAutosave: true, ...options });
    }
  };
  var __unstableSaveForPreview = ({ forceIsAutosaveable } = {}) => async ({ select: select4, dispatch: dispatch5 }) => {
    if ((forceIsAutosaveable || select4.isEditedPostAutosaveable()) && !select4.isPostLocked()) {
      const isDraft = ["draft", "auto-draft"].includes(
        select4.getEditedPostAttribute("status")
      );
      if (isDraft) {
        await dispatch5.savePost({ isPreview: true });
      } else {
        await dispatch5.autosave({ isPreview: true });
      }
    }
    return select4.getEditedPostPreviewLink();
  };
  var redo = () => ({ registry }) => {
    registry.dispatch(import_core_data2.store).redo();
  };
  var undo = () => ({ registry }) => {
    registry.dispatch(import_core_data2.store).undo();
  };
  function createUndoLevel() {
    (0, import_deprecated2.default)("wp.data.dispatch( 'core/editor' ).createUndoLevel", {
      since: "6.0",
      version: "6.3",
      alternative: "Use the core entities store instead"
    });
    return { type: "DO_NOTHING" };
  }
  function updatePostLock(lock3) {
    return {
      type: "UPDATE_POST_LOCK",
      lock: lock3
    };
  }
  var enablePublishSidebar = () => ({ registry }) => {
    registry.dispatch(import_preferences2.store).set("core", "isPublishSidebarEnabled", true);
  };
  var disablePublishSidebar = () => ({ registry }) => {
    registry.dispatch(import_preferences2.store).set("core", "isPublishSidebarEnabled", false);
  };
  function lockPostSaving(lockName) {
    return {
      type: "LOCK_POST_SAVING",
      lockName
    };
  }
  function unlockPostSaving(lockName) {
    return {
      type: "UNLOCK_POST_SAVING",
      lockName
    };
  }
  function lockPostAutosaving(lockName) {
    return {
      type: "LOCK_POST_AUTOSAVING",
      lockName
    };
  }
  function unlockPostAutosaving(lockName) {
    return {
      type: "UNLOCK_POST_AUTOSAVING",
      lockName
    };
  }
  var resetEditorBlocks = (blocks, options = {}) => ({ select: select4, dispatch: dispatch5, registry }) => {
    const { __unstableShouldCreateUndoLevel, selection } = options;
    const edits = { blocks, selection };
    if (__unstableShouldCreateUndoLevel !== false) {
      const { id, type } = select4.getCurrentPost();
      const noChange = registry.select(import_core_data2.store).getEditedEntityRecord("postType", type, id).blocks === edits.blocks;
      if (noChange) {
        registry.dispatch(import_core_data2.store).__unstableCreateUndoLevel("postType", type, id);
        return;
      }
      edits.content = ({ blocks: blocksForSerialization = [] }) => (0, import_blocks2.__unstableSerializeAndClean)(blocksForSerialization);
    }
    dispatch5.editPost(edits);
  };
  function updateEditorSettings(settings) {
    return {
      type: "UPDATE_EDITOR_SETTINGS",
      settings
    };
  }
  var setRenderingMode = (mode) => ({ dispatch: dispatch5, registry, select: select4 }) => {
    if (select4.__unstableIsEditorReady()) {
      registry.dispatch(import_block_editor3.store).clearSelectedBlock();
      dispatch5.editPost({ selection: void 0 }, { undoIgnore: true });
    }
    dispatch5({
      type: "SET_RENDERING_MODE",
      mode
    });
  };
  function setDeviceType(deviceType2) {
    return {
      type: "SET_DEVICE_TYPE",
      deviceType: deviceType2
    };
  }
  var toggleEditorPanelEnabled = (panelName) => ({ registry }) => {
    const inactivePanels = registry.select(import_preferences2.store).get("core", "inactivePanels") ?? [];
    const isPanelInactive = !!inactivePanels?.includes(panelName);
    let updatedInactivePanels;
    if (isPanelInactive) {
      updatedInactivePanels = inactivePanels.filter(
        (invactivePanelName) => invactivePanelName !== panelName
      );
    } else {
      updatedInactivePanels = [...inactivePanels, panelName];
    }
    registry.dispatch(import_preferences2.store).set("core", "inactivePanels", updatedInactivePanels);
  };
  var toggleEditorPanelOpened = (panelName) => ({ registry }) => {
    const openPanels = registry.select(import_preferences2.store).get("core", "openPanels") ?? [];
    const isPanelOpen = !!openPanels?.includes(panelName);
    let updatedOpenPanels;
    if (isPanelOpen) {
      updatedOpenPanels = openPanels.filter(
        (openPanelName) => openPanelName !== panelName
      );
    } else {
      updatedOpenPanels = [...openPanels, panelName];
    }
    registry.dispatch(import_preferences2.store).set("core", "openPanels", updatedOpenPanels);
  };
  function removeEditorPanel(panelName) {
    return {
      type: "REMOVE_PANEL",
      panelName
    };
  }
  var setIsInserterOpened = (value) => ({ dispatch: dispatch5, registry }) => {
    if (typeof value === "object" && value.hasOwnProperty("rootClientId") && value.hasOwnProperty("insertionIndex")) {
      unlock(registry.dispatch(import_block_editor3.store)).setInsertionPoint({
        rootClientId: value.rootClientId,
        index: value.insertionIndex
      });
    }
    dispatch5({
      type: "SET_IS_INSERTER_OPENED",
      value
    });
  };
  function setIsListViewOpened(isOpen) {
    return {
      type: "SET_IS_LIST_VIEW_OPENED",
      isOpen
    };
  }
  var toggleDistractionFree = ({ createNotice = true } = {}) => ({ dispatch: dispatch5, registry }) => {
    const isDistractionFree = registry.select(import_preferences2.store).get("core", "distractionFree");
    if (isDistractionFree) {
      registry.dispatch(import_preferences2.store).set("core", "fixedToolbar", false);
    }
    if (!isDistractionFree) {
      registry.batch(() => {
        registry.dispatch(import_preferences2.store).set("core", "fixedToolbar", true);
        dispatch5.setIsInserterOpened(false);
        dispatch5.setIsListViewOpened(false);
        unlock(
          registry.dispatch(import_block_editor3.store)
        ).resetZoomLevel();
      });
    }
    registry.batch(() => {
      registry.dispatch(import_preferences2.store).set("core", "distractionFree", !isDistractionFree);
      if (createNotice) {
        registry.dispatch(import_notices.store).createInfoNotice(
          isDistractionFree ? (0, import_i18n2.__)("Distraction free mode deactivated.") : (0, import_i18n2.__)("Distraction free mode activated."),
          {
            id: "core/editor/distraction-free-mode/notice",
            type: "snackbar",
            actions: [
              {
                label: (0, import_i18n2.__)("Undo"),
                onClick: () => {
                  registry.batch(() => {
                    registry.dispatch(import_preferences2.store).set(
                      "core",
                      "fixedToolbar",
                      isDistractionFree
                    );
                    registry.dispatch(import_preferences2.store).toggle(
                      "core",
                      "distractionFree"
                    );
                  });
                }
              }
            ]
          }
        );
      }
    });
  };
  var toggleSpotlightMode = () => ({ registry }) => {
    registry.dispatch(import_preferences2.store).toggle("core", "focusMode");
    const isFocusMode = registry.select(import_preferences2.store).get("core", "focusMode");
    registry.dispatch(import_notices.store).createInfoNotice(
      isFocusMode ? (0, import_i18n2.__)("Spotlight mode activated.") : (0, import_i18n2.__)("Spotlight mode deactivated."),
      {
        id: "core/editor/toggle-spotlight-mode/notice",
        type: "snackbar",
        actions: [
          {
            label: (0, import_i18n2.__)("Undo"),
            onClick: () => {
              registry.dispatch(import_preferences2.store).toggle("core", "focusMode");
            }
          }
        ]
      }
    );
  };
  var toggleTopToolbar = () => ({ registry }) => {
    registry.dispatch(import_preferences2.store).toggle("core", "fixedToolbar");
    const isTopToolbar = registry.select(import_preferences2.store).get("core", "fixedToolbar");
    registry.dispatch(import_notices.store).createInfoNotice(
      isTopToolbar ? (0, import_i18n2.__)("Top toolbar activated.") : (0, import_i18n2.__)("Top toolbar deactivated."),
      {
        id: "core/editor/toggle-top-toolbar/notice",
        type: "snackbar",
        actions: [
          {
            label: (0, import_i18n2.__)("Undo"),
            onClick: () => {
              registry.dispatch(import_preferences2.store).toggle("core", "fixedToolbar");
            }
          }
        ]
      }
    );
  };
  var switchEditorMode = (mode) => ({ dispatch: dispatch5, registry }) => {
    registry.dispatch(import_preferences2.store).set("core", "editorMode", mode);
    if (mode !== "visual") {
      registry.dispatch(import_block_editor3.store).clearSelectedBlock();
      unlock(registry.dispatch(import_block_editor3.store)).resetZoomLevel();
    }
    if (mode === "visual") {
      (0, import_a11y.speak)((0, import_i18n2.__)("Visual editor selected"), "assertive");
    } else if (mode === "text") {
      const isDistractionFree = registry.select(import_preferences2.store).get("core", "distractionFree");
      if (isDistractionFree) {
        dispatch5.toggleDistractionFree();
      }
      (0, import_a11y.speak)((0, import_i18n2.__)("Code editor selected"), "assertive");
    }
  };
  function openPublishSidebar() {
    return {
      type: "OPEN_PUBLISH_SIDEBAR"
    };
  }
  function closePublishSidebar() {
    return {
      type: "CLOSE_PUBLISH_SIDEBAR"
    };
  }
  function togglePublishSidebar() {
    return {
      type: "TOGGLE_PUBLISH_SIDEBAR"
    };
  }
  var getBlockEditorAction = (name) => (...args) => ({ registry }) => {
    (0, import_deprecated2.default)("`wp.data.dispatch( 'core/editor' )." + name + "`", {
      since: "5.3",
      alternative: "`wp.data.dispatch( 'core/block-editor' )." + name + "`",
      version: "6.2"
    });
    registry.dispatch(import_block_editor3.store)[name](...args);
  };
  var resetBlocks = getBlockEditorAction("resetBlocks");
  var receiveBlocks = getBlockEditorAction("receiveBlocks");
  var updateBlock = getBlockEditorAction("updateBlock");
  var updateBlockAttributes = getBlockEditorAction(
    "updateBlockAttributes"
  );
  var selectBlock = getBlockEditorAction("selectBlock");
  var startMultiSelect = getBlockEditorAction("startMultiSelect");
  var stopMultiSelect = getBlockEditorAction("stopMultiSelect");
  var multiSelect = getBlockEditorAction("multiSelect");
  var clearSelectedBlock = getBlockEditorAction("clearSelectedBlock");
  var toggleSelection = getBlockEditorAction("toggleSelection");
  var replaceBlocks = getBlockEditorAction("replaceBlocks");
  var replaceBlock = getBlockEditorAction("replaceBlock");
  var moveBlocksDown = getBlockEditorAction("moveBlocksDown");
  var moveBlocksUp = getBlockEditorAction("moveBlocksUp");
  var moveBlockToPosition = getBlockEditorAction(
    "moveBlockToPosition"
  );
  var insertBlock = getBlockEditorAction("insertBlock");
  var insertBlocks = getBlockEditorAction("insertBlocks");
  var showInsertionPoint = getBlockEditorAction("showInsertionPoint");
  var hideInsertionPoint = getBlockEditorAction("hideInsertionPoint");
  var setTemplateValidity = getBlockEditorAction(
    "setTemplateValidity"
  );
  var synchronizeTemplate = getBlockEditorAction(
    "synchronizeTemplate"
  );
  var mergeBlocks = getBlockEditorAction("mergeBlocks");
  var removeBlocks = getBlockEditorAction("removeBlocks");
  var removeBlock = getBlockEditorAction("removeBlock");
  var toggleBlockMode = getBlockEditorAction("toggleBlockMode");
  var startTyping = getBlockEditorAction("startTyping");
  var stopTyping = getBlockEditorAction("stopTyping");
  var enterFormattedText = getBlockEditorAction("enterFormattedText");
  var exitFormattedText = getBlockEditorAction("exitFormattedText");
  var insertDefaultBlock = getBlockEditorAction("insertDefaultBlock");
  var updateBlockListSettings = getBlockEditorAction(
    "updateBlockListSettings"
  );

  // packages/editor/build-module/store/private-actions.js
  var private_actions_exports = {};
  __export(private_actions_exports, {
    createTemplate: () => createTemplate,
    hideBlockTypes: () => hideBlockTypes,
    registerEntityAction: () => registerEntityAction,
    registerEntityField: () => registerEntityField,
    registerPostTypeSchema: () => registerPostTypeSchema,
    removeTemplates: () => removeTemplates,
    revertTemplate: () => revertTemplate2,
    saveDirtyEntities: () => saveDirtyEntities,
    setCurrentTemplateId: () => setCurrentTemplateId,
    setDefaultRenderingMode: () => setDefaultRenderingMode,
    setIsReady: () => setIsReady,
    showBlockTypes: () => showBlockTypes,
    unregisterEntityAction: () => unregisterEntityAction,
    unregisterEntityField: () => unregisterEntityField
  });
  var import_core_data33 = __toESM(require_core_data());
  var import_i18n62 = __toESM(require_i18n());
  var import_notices16 = __toESM(require_notices());
  var import_block_editor21 = __toESM(require_block_editor());
  var import_preferences9 = __toESM(require_preferences());
  var import_url9 = __toESM(require_url());
  var import_api_fetch3 = __toESM(require_api_fetch());
  var import_blocks12 = __toESM(require_blocks());
  var import_html_entities9 = __toESM(require_html_entities());

  // packages/editor/build-module/store/utils/is-template-revertable.js
  function isTemplateRevertable(templateOrTemplatePart) {
    if (!templateOrTemplatePart) {
      return false;
    }
    return templateOrTemplatePart.source === TEMPLATE_ORIGINS.custom && (Boolean(templateOrTemplatePart?.plugin) || templateOrTemplatePart?.has_theme_file);
  }

  // packages/editor/build-module/dataviews/store/private-actions.js
  var import_core_data32 = __toESM(require_core_data());
  var import_hooks4 = __toESM(require_hooks());

  // packages/fields/build-module/fields/slug/index.js
  var import_i18n5 = __toESM(require_i18n());

  // packages/fields/build-module/fields/slug/slug-edit.js
  var import_jsx_runtime55 = __toESM(require_jsx_runtime());
  var import_components = __toESM(require_components());
  var import_compose = __toESM(require_compose());
  var import_data4 = __toESM(require_data());
  var import_element3 = __toESM(require_element());
  var import_notices2 = __toESM(require_notices());
  var import_url3 = __toESM(require_url());
  var import_i18n4 = __toESM(require_i18n());

  // packages/fields/build-module/fields/slug/utils.js
  var import_url2 = __toESM(require_url());

  // packages/fields/build-module/actions/utils.js
  var import_html_entities = __toESM(require_html_entities());
  var import_i18n3 = __toESM(require_i18n());
  function isTemplatePart(post) {
    return post.type === "wp_template_part";
  }
  function isTemplateOrTemplatePart(p2) {
    return p2.type === "wp_template" || p2.type === "wp_template_part";
  }
  function getItemTitle(item, fallback = (0, import_i18n3.__)("(no title)")) {
    let title = "";
    if (typeof item.title === "string") {
      title = (0, import_html_entities.decodeEntities)(item.title);
    } else if (item.title && "rendered" in item.title) {
      title = (0, import_html_entities.decodeEntities)(item.title.rendered);
    } else if (item.title && "raw" in item.title) {
      title = (0, import_html_entities.decodeEntities)(item.title.raw);
    }
    return title || fallback;
  }
  function isTemplateRemovable(template2) {
    if (!template2) {
      return false;
    }
    return [template2.source, template2.source].includes("custom") && !Boolean(template2.type === "wp_template" && template2?.plugin) && !template2.has_theme_file;
  }

  // packages/fields/build-module/fields/slug/utils.js
  var getSlug = (item) => {
    if (typeof item !== "object") {
      return "";
    }
    return item.slug || (0, import_url2.cleanForSlug)(getItemTitle(item)) || item.id.toString();
  };

  // packages/fields/build-module/fields/slug/slug-edit.js
  var SlugEdit = ({
    field,
    onChange,
    data
  }) => {
    const { id } = field;
    const slug = field.getValue({ item: data }) || getSlug(data);
    const permalinkTemplate = data.permalink_template || "";
    const PERMALINK_POSTNAME_REGEX2 = /%(?:postname|pagename)%/;
    const [prefix, suffix] = permalinkTemplate.split(
      PERMALINK_POSTNAME_REGEX2
    );
    const permalinkPrefix = prefix;
    const permalinkSuffix = suffix;
    const isEditable = PERMALINK_POSTNAME_REGEX2.test(permalinkTemplate);
    const originalSlugRef = (0, import_element3.useRef)(slug);
    const slugToDisplay = slug || originalSlugRef.current;
    const permalink = isEditable ? `${permalinkPrefix}${slugToDisplay}${permalinkSuffix}` : (0, import_url3.safeDecodeURIComponent)(data.link || "");
    (0, import_element3.useEffect)(() => {
      if (slug && originalSlugRef.current === void 0) {
        originalSlugRef.current = slug;
      }
    }, [slug]);
    const onChangeControl = (0, import_element3.useCallback)(
      (newValue) => onChange({
        [id]: newValue
      }),
      [id, onChange]
    );
    const { createNotice } = (0, import_data4.useDispatch)(import_notices2.store);
    const copyButtonRef = (0, import_compose.useCopyToClipboard)(permalink, () => {
      createNotice("info", (0, import_i18n4.__)("Copied Permalink to clipboard."), {
        isDismissible: true,
        type: "snackbar"
      });
    });
    const postUrlSlugDescriptionId = "editor-post-url__slug-description-" + (0, import_compose.useInstanceId)(SlugEdit);
    return /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("fieldset", { className: "fields-controls__slug", children: [
      isEditable && /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)(import_components.__experimentalVStack, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)(import_components.__experimentalVStack, { spacing: "0px", children: [
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("span", { children: (0, import_i18n4.__)(
            "Customize the last part of the Permalink."
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(import_components.ExternalLink, { href: "https://wordpress.org/documentation/article/page-post-settings-sidebar/#permalink", children: (0, import_i18n4.__)("Learn more") })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
          import_components.__experimentalInputControl,
          {
            __next40pxDefaultSize: true,
            prefix: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(import_components.__experimentalInputControlPrefixWrapper, { children: "/" }),
            suffix: /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
              import_components.Button,
              {
                __next40pxDefaultSize: true,
                icon: copy_small_default,
                ref: copyButtonRef,
                label: (0, import_i18n4.__)("Copy")
              }
            ),
            label: (0, import_i18n4.__)("Link"),
            hideLabelFromVision: true,
            value: slug,
            autoComplete: "off",
            spellCheck: "false",
            type: "text",
            className: "fields-controls__slug-input",
            onChange: (newValue) => {
              onChangeControl(newValue);
            },
            onBlur: () => {
              if (slug === "") {
                onChangeControl(originalSlugRef.current);
              }
            },
            "aria-describedby": postUrlSlugDescriptionId
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)("div", { className: "fields-controls__slug-help", children: [
          /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("span", { className: "fields-controls__slug-help-visual-label", children: (0, import_i18n4.__)("Permalink:") }),
          /* @__PURE__ */ (0, import_jsx_runtime55.jsxs)(
            import_components.ExternalLink,
            {
              className: "fields-controls__slug-help-link",
              href: permalink,
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("span", { className: "fields-controls__slug-help-prefix", children: permalinkPrefix }),
                /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("span", { className: "fields-controls__slug-help-slug", children: slugToDisplay }),
                /* @__PURE__ */ (0, import_jsx_runtime55.jsx)("span", { className: "fields-controls__slug-help-suffix", children: permalinkSuffix })
              ]
            }
          )
        ] })
      ] }),
      !isEditable && /* @__PURE__ */ (0, import_jsx_runtime55.jsx)(
        import_components.ExternalLink,
        {
          className: "fields-controls__slug-help",
          href: permalink,
          children: permalink
        }
      )
    ] });
  };
  var slug_edit_default = SlugEdit;

  // packages/fields/build-module/fields/slug/slug-view.js
  var import_element4 = __toESM(require_element());
  var SlugView = ({ item }) => {
    const slug = getSlug(item);
    const originalSlugRef = (0, import_element4.useRef)(slug);
    (0, import_element4.useEffect)(() => {
      if (slug && originalSlugRef.current === void 0) {
        originalSlugRef.current = slug;
      }
    }, [slug]);
    const slugToDisplay = slug || originalSlugRef.current;
    return `${slugToDisplay}`;
  };
  var slug_view_default = SlugView;

  // packages/fields/build-module/fields/slug/index.js
  var slugField = {
    id: "slug",
    type: "text",
    label: (0, import_i18n5.__)("Slug"),
    Edit: slug_edit_default,
    render: slug_view_default,
    filterBy: false
  };
  var slug_default = slugField;

  // packages/fields/build-module/fields/title/index.js
  var import_i18n7 = __toESM(require_i18n());

  // packages/fields/build-module/fields/title/view.js
  var import_jsx_runtime56 = __toESM(require_jsx_runtime());

  // node_modules/clsx/dist/clsx.mjs
  function r(e2) {
    var t2, f2, n2 = "";
    if ("string" == typeof e2 || "number" == typeof e2) n2 += e2;
    else if ("object" == typeof e2) if (Array.isArray(e2)) {
      var o2 = e2.length;
      for (t2 = 0; t2 < o2; t2++) e2[t2] && (f2 = r(e2[t2])) && (n2 && (n2 += " "), n2 += f2);
    } else for (f2 in e2) e2[f2] && (n2 && (n2 += " "), n2 += f2);
    return n2;
  }
  function clsx() {
    for (var e2, t2, f2 = 0, n2 = "", o2 = arguments.length; f2 < o2; f2++) (e2 = arguments[f2]) && (t2 = r(e2)) && (n2 && (n2 += " "), n2 += t2);
    return n2;
  }
  var clsx_default = clsx;

  // packages/fields/build-module/fields/title/view.js
  var import_components2 = __toESM(require_components());
  var import_i18n6 = __toESM(require_i18n());
  function BaseTitleView({
    item,
    className,
    children
  }) {
    const renderedTitle = getItemTitle(item);
    return /* @__PURE__ */ (0, import_jsx_runtime56.jsxs)(
      import_components2.__experimentalHStack,
      {
        className: clsx_default("fields-field__title", className),
        alignment: "center",
        justify: "flex-start",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime56.jsx)("span", { children: renderedTitle || (0, import_i18n6.__)("(no title)") }),
          children
        ]
      }
    );
  }
  function TitleView({ item }) {
    return /* @__PURE__ */ (0, import_jsx_runtime56.jsx)(BaseTitleView, { item });
  }

  // packages/fields/build-module/fields/title/index.js
  var titleField = {
    type: "text",
    id: "title",
    label: (0, import_i18n7.__)("Title"),
    placeholder: (0, import_i18n7.__)("No title"),
    getValue: ({ item }) => getItemTitle(item),
    render: TitleView,
    enableHiding: true,
    enableGlobalSearch: true,
    filterBy: false
  };
  var title_default = titleField;

  // packages/fields/build-module/fields/page-title/index.js
  var import_i18n9 = __toESM(require_i18n());

  // packages/fields/build-module/fields/page-title/view.js
  var import_jsx_runtime57 = __toESM(require_jsx_runtime());
  var import_i18n8 = __toESM(require_i18n());
  var import_data5 = __toESM(require_data());
  var import_core_data3 = __toESM(require_core_data());
  var import_components3 = __toESM(require_components());

  // packages/fields/build-module/lock-unlock.js
  var import_private_apis2 = __toESM(require_private_apis());
  var { lock: lock2, unlock: unlock2 } = (0, import_private_apis2.__dangerousOptInToUnstableAPIsOnlyForCoreModules)(
    "I acknowledge private features are not for use in themes or plugins and doing so will break in the next version of WordPress.",
    "@wordpress/fields"
  );

  // packages/fields/build-module/fields/page-title/view.js
  var { Badge } = unlock2(import_components3.privateApis);
  function PageTitleView({ item }) {
    const { frontPageId, postsPageId } = (0, import_data5.useSelect)((select4) => {
      const { getEntityRecord } = select4(import_core_data3.store);
      const siteSettings = getEntityRecord(
        "root",
        "site"
      );
      return {
        frontPageId: siteSettings?.page_on_front,
        postsPageId: siteSettings?.page_for_posts
      };
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(BaseTitleView, { item, className: "fields-field__page-title", children: [frontPageId, postsPageId].includes(item.id) && /* @__PURE__ */ (0, import_jsx_runtime57.jsx)(Badge, { children: item.id === frontPageId ? (0, import_i18n8.__)("Homepage") : (0, import_i18n8.__)("Posts Page") }) });
  }

  // packages/fields/build-module/fields/page-title/index.js
  var pageTitleField = {
    type: "text",
    id: "title",
    label: (0, import_i18n9.__)("Title"),
    placeholder: (0, import_i18n9.__)("No title"),
    getValue: ({ item }) => getItemTitle(item),
    render: PageTitleView,
    enableHiding: false,
    enableGlobalSearch: true,
    filterBy: false
  };
  var page_title_default = pageTitleField;

  // packages/fields/build-module/fields/template-title/index.js
  var import_i18n10 = __toESM(require_i18n());
  var templateTitleField = {
    type: "text",
    label: (0, import_i18n10.__)("Template"),
    placeholder: (0, import_i18n10.__)("No title"),
    id: "title",
    getValue: ({ item }) => getItemTitle(item),
    render: TitleView,
    enableHiding: false,
    enableGlobalSearch: true,
    filterBy: false
  };
  var template_title_default = templateTitleField;

  // packages/fields/build-module/fields/pattern-title/index.js
  var import_i18n12 = __toESM(require_i18n());

  // packages/fields/build-module/fields/pattern-title/view.js
  var import_jsx_runtime58 = __toESM(require_jsx_runtime());
  var import_i18n11 = __toESM(require_i18n());
  var import_components4 = __toESM(require_components());
  var import_patterns = __toESM(require_patterns());
  var { PATTERN_TYPES } = unlock2(import_patterns.privateApis);
  function PatternTitleView({ item }) {
    return /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(BaseTitleView, { item, className: "fields-field__pattern-title", children: item.type === PATTERN_TYPES.theme && /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(
      import_components4.Tooltip,
      {
        placement: "top",
        text: (0, import_i18n11.__)("This pattern cannot be edited."),
        children: /* @__PURE__ */ (0, import_jsx_runtime58.jsx)(icon_default, { icon: lock_small_default, size: 24 })
      }
    ) });
  }

  // packages/fields/build-module/fields/pattern-title/index.js
  var patternTitleField = {
    type: "text",
    id: "title",
    label: (0, import_i18n12.__)("Title"),
    placeholder: (0, import_i18n12.__)("No title"),
    getValue: ({ item }) => getItemTitle(item),
    render: PatternTitleView,
    enableHiding: false,
    enableGlobalSearch: true,
    filterBy: false
  };
  var pattern_title_default = patternTitleField;

  // packages/fields/build-module/fields/featured-image/index.js
  var import_i18n14 = __toESM(require_i18n());

  // packages/fields/build-module/fields/featured-image/featured-image-edit.js
  var import_jsx_runtime59 = __toESM(require_jsx_runtime());
  var import_components5 = __toESM(require_components());
  var import_data6 = __toESM(require_data());
  var import_element5 = __toESM(require_element());
  var import_media_utils = __toESM(require_media_utils());
  var import_core_data4 = __toESM(require_core_data());
  var import_i18n13 = __toESM(require_i18n());
  var FeaturedImageEdit = ({
    data,
    field,
    onChange
  }) => {
    const { id } = field;
    const value = field.getValue({ item: data });
    const media = (0, import_data6.useSelect)(
      (select4) => {
        const { getEntityRecord } = select4(import_core_data4.store);
        return getEntityRecord("postType", "attachment", value);
      },
      [value]
    );
    const onChangeControl = (0, import_element5.useCallback)(
      (newValue) => onChange({
        [id]: newValue
      }),
      [id, onChange]
    );
    const url = media?.source_url;
    const title = media?.title?.rendered;
    const ref = (0, import_element5.useRef)(null);
    return /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("fieldset", { className: "fields-controls__featured-image", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("div", { className: "fields-controls__featured-image-container", children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
      import_media_utils.MediaUpload,
      {
        onSelect: (selectedMedia) => {
          onChangeControl(selectedMedia.id);
        },
        allowedTypes: ["image"],
        render: ({ open }) => {
          return /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
            "div",
            {
              ref,
              role: "button",
              tabIndex: -1,
              onClick: () => {
                open();
              },
              onKeyDown: open,
              children: /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)(
                import_components5.__experimentalGrid,
                {
                  rowGap: 0,
                  columnGap: 8,
                  templateColumns: "24px 1fr 24px",
                  children: [
                    url && /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)(import_jsx_runtime59.Fragment, { children: [
                      /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
                        "img",
                        {
                          className: "fields-controls__featured-image-image",
                          alt: "",
                          width: 24,
                          height: 24,
                          src: url
                        }
                      ),
                      /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("span", { className: "fields-controls__featured-image-title", children: title })
                    ] }),
                    !url && /* @__PURE__ */ (0, import_jsx_runtime59.jsxs)(import_jsx_runtime59.Fragment, { children: [
                      /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
                        "span",
                        {
                          className: "fields-controls__featured-image-placeholder",
                          style: {
                            width: "24px",
                            height: "24px"
                          }
                        }
                      ),
                      /* @__PURE__ */ (0, import_jsx_runtime59.jsx)("span", { className: "fields-controls__featured-image-title", children: (0, import_i18n13.__)("Choose an image\u2026") })
                    ] }),
                    url && /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(import_jsx_runtime59.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime59.jsx)(
                      import_components5.Button,
                      {
                        size: "small",
                        className: "fields-controls__featured-image-remove-button",
                        icon: line_solid_default,
                        onClick: (event) => {
                          event.stopPropagation();
                          onChangeControl(0);
                        }
                      }
                    ) })
                  ]
                }
              )
            }
          );
        }
      }
    ) }) });
  };

  // packages/fields/build-module/fields/featured-image/featured-image-view.js
  var import_jsx_runtime60 = __toESM(require_jsx_runtime());
  var FeaturedImageView = ({
    item,
    config
  }) => {
    const media = item?._embedded?.["wp:featuredmedia"]?.[0];
    const url = media?.source_url;
    if (url) {
      return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)(
        "img",
        {
          className: "fields-controls__featured-image-image",
          src: url,
          alt: "",
          srcSet: media?.media_details?.sizes ? Object.values(media.media_details.sizes).map(
            (size3) => `${size3.source_url} ${size3.width}w`
          ).join(", ") : void 0,
          sizes: config?.sizes || "100vw"
        }
      );
    }
    return /* @__PURE__ */ (0, import_jsx_runtime60.jsx)("span", { className: "fields-controls__featured-image-placeholder" });
  };

  // packages/fields/build-module/fields/featured-image/index.js
  var featuredImageField = {
    id: "featured_media",
    type: "media",
    label: (0, import_i18n14.__)("Featured Image"),
    Edit: FeaturedImageEdit,
    render: FeaturedImageView,
    enableSorting: false,
    filterBy: false
  };
  var featured_image_default = featuredImageField;

  // packages/fields/build-module/fields/template/index.js
  var import_i18n16 = __toESM(require_i18n());

  // packages/fields/build-module/fields/template/template-edit.js
  var import_jsx_runtime61 = __toESM(require_jsx_runtime());
  var import_element6 = __toESM(require_element());
  var import_blocks3 = __toESM(require_blocks());
  var import_core_data5 = __toESM(require_core_data());
  var import_block_editor4 = __toESM(require_block_editor());
  var import_components6 = __toESM(require_components());
  var import_compose2 = __toESM(require_compose());
  var import_data7 = __toESM(require_data());
  var import_html_entities2 = __toESM(require_html_entities());
  var import_i18n15 = __toESM(require_i18n());
  var EMPTY_ARRAY = [];
  var TemplateEdit = ({
    data,
    field,
    onChange
  }) => {
    const { id } = field;
    const postType2 = data.type;
    const postId2 = typeof data.id === "number" ? data.id : parseInt(data.id, 10);
    const slug = data.slug;
    const { canSwitchTemplate, templates } = (0, import_data7.useSelect)(
      (select4) => {
        const allTemplates = select4(import_core_data5.store).getEntityRecords(
          "postType",
          "wp_template",
          {
            per_page: -1,
            post_type: postType2
          }
        ) ?? EMPTY_ARRAY;
        const { getHomePage, getPostsPageId } = unlock2(
          select4(import_core_data5.store)
        );
        const isPostsPage = getPostsPageId() === +postId2;
        const isFrontPage = postType2 === "page" && getHomePage()?.postId === +postId2;
        const allowSwitchingTemplate = !isPostsPage && !isFrontPage;
        return {
          templates: allTemplates,
          canSwitchTemplate: allowSwitchingTemplate
        };
      },
      [postId2, postType2]
    );
    const templatesAsPatterns = (0, import_element6.useMemo)(() => {
      if (!canSwitchTemplate) {
        return [];
      }
      return templates.filter(
        (template2) => template2.is_custom && template2.slug !== data.template && // Skip empty templates.
        !!template2.content.raw
      ).map((template2) => ({
        name: template2.slug,
        blocks: (0, import_blocks3.parse)(template2.content.raw),
        title: (0, import_html_entities2.decodeEntities)(template2.title.rendered),
        id: template2.id
      }));
    }, [canSwitchTemplate, data.template, templates]);
    const shownTemplates = (0, import_compose2.useAsyncList)(templatesAsPatterns);
    const value = field.getValue({ item: data });
    const foundTemplate = templates.find(
      (template2) => template2.slug === value
    );
    const currentTemplate = (0, import_data7.useSelect)(
      (select4) => {
        if (foundTemplate) {
          return foundTemplate;
        }
        let slugToCheck;
        if (slug) {
          slugToCheck = postType2 === "page" ? `${postType2}-${slug}` : `single-${postType2}-${slug}`;
        } else {
          slugToCheck = postType2 === "page" ? "page" : `single-${postType2}`;
        }
        if (postType2) {
          const templateId2 = select4(import_core_data5.store).getDefaultTemplateId({
            slug: slugToCheck
          });
          return select4(import_core_data5.store).getEntityRecord(
            "postType",
            "wp_template",
            templateId2
          );
        }
      },
      [foundTemplate, postType2, slug]
    );
    const [showModal, setShowModal] = (0, import_element6.useState)(false);
    const onChangeControl = (0, import_element6.useCallback)(
      (newValue) => onChange({
        [id]: newValue
      }),
      [id, onChange]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)("fieldset", { className: "fields-controls__template", children: [
      /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
        import_components6.Dropdown,
        {
          popoverProps: { placement: "bottom-start" },
          renderToggle: ({ onToggle }) => /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
            import_components6.Button,
            {
              __next40pxDefaultSize: true,
              variant: "tertiary",
              size: "compact",
              onClick: onToggle,
              children: currentTemplate ? getItemTitle(currentTemplate) : ""
            }
          ),
          renderContent: ({ onToggle }) => /* @__PURE__ */ (0, import_jsx_runtime61.jsxs)(import_components6.MenuGroup, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
              import_components6.MenuItem,
              {
                onClick: () => {
                  setShowModal(true);
                  onToggle();
                },
                children: (0, import_i18n15.__)("Change template")
              }
            ),
            // The default template in a post is indicated by an empty string
            value !== "" && /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
              import_components6.MenuItem,
              {
                onClick: () => {
                  onChangeControl("");
                  onToggle();
                },
                children: (0, import_i18n15.__)("Use default template")
              }
            )
          ] })
        }
      ),
      showModal && /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
        import_components6.Modal,
        {
          title: (0, import_i18n15.__)("Choose a template"),
          onRequestClose: () => setShowModal(false),
          overlayClassName: "fields-controls__template-modal",
          isFullScreen: true,
          children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)("div", { className: "fields-controls__template-content", children: /* @__PURE__ */ (0, import_jsx_runtime61.jsx)(
            import_block_editor4.__experimentalBlockPatternsList,
            {
              label: (0, import_i18n15.__)("Templates"),
              blockPatterns: templatesAsPatterns,
              shownPatterns: shownTemplates,
              onClickPattern: (template2) => {
                onChangeControl(template2.name);
                setShowModal(false);
              }
            }
          ) })
        }
      )
    ] });
  };

  // packages/fields/build-module/fields/template/index.js
  var templateField = {
    id: "template",
    type: "text",
    label: (0, import_i18n16.__)("Template"),
    Edit: TemplateEdit,
    enableSorting: false,
    filterBy: false
  };
  var template_default = templateField;

  // packages/fields/build-module/fields/parent/index.js
  var import_i18n20 = __toESM(require_i18n());

  // packages/fields/build-module/fields/parent/parent-edit.js
  var import_jsx_runtime62 = __toESM(require_jsx_runtime());
  var import_remove_accents = __toESM(require_remove_accents());
  var import_components7 = __toESM(require_components());
  var import_data8 = __toESM(require_data());
  var import_element7 = __toESM(require_element());
  var import_core_data6 = __toESM(require_core_data());
  var import_compose3 = __toESM(require_compose());
  var import_html_entities4 = __toESM(require_html_entities());
  var import_i18n18 = __toESM(require_i18n());
  var import_url4 = __toESM(require_url());

  // packages/fields/build-module/fields/parent/utils.js
  var import_html_entities3 = __toESM(require_html_entities());
  var import_i18n17 = __toESM(require_i18n());
  function getTitleWithFallbackName(post) {
    return typeof post.title === "object" && "rendered" in post.title && post.title.rendered ? (0, import_html_entities3.decodeEntities)(post.title.rendered) : `#${post?.id} (${(0, import_i18n17.__)("no title")})`;
  }

  // packages/fields/build-module/fields/parent/parent-edit.js
  function buildTermsTree(flatTerms) {
    const flatTermsWithParentAndChildren = flatTerms.map((term) => {
      return {
        children: [],
        ...term
      };
    });
    if (flatTermsWithParentAndChildren.some(
      ({ parent }) => parent === null || parent === void 0
    )) {
      return flatTermsWithParentAndChildren;
    }
    const termsByParent = flatTermsWithParentAndChildren.reduce(
      (acc, term) => {
        const { parent } = term;
        if (!acc[parent]) {
          acc[parent] = [];
        }
        acc[parent].push(term);
        return acc;
      },
      {}
    );
    const fillWithChildren = (terms) => {
      return terms.map((term) => {
        const children = termsByParent[term.id];
        return {
          ...term,
          children: children && children.length ? fillWithChildren(children) : []
        };
      });
    };
    return fillWithChildren(termsByParent["0"] || []);
  }
  var getItemPriority = (name, searchValue) => {
    const normalizedName = (0, import_remove_accents.default)(name || "").toLowerCase();
    const normalizedSearch = (0, import_remove_accents.default)(searchValue || "").toLowerCase();
    if (normalizedName === normalizedSearch) {
      return 0;
    }
    if (normalizedName.startsWith(normalizedSearch)) {
      return normalizedName.length;
    }
    return Infinity;
  };
  function PageAttributesParent({
    data,
    onChangeControl
  }) {
    const [fieldValue, setFieldValue] = (0, import_element7.useState)(null);
    const pageId = data.parent;
    const postId2 = data.id;
    const postTypeSlug = data.type;
    const { parentPostTitle, pageItems, isHierarchical } = (0, import_data8.useSelect)(
      (select4) => {
        const { getEntityRecord, getEntityRecords, getPostType } = select4(import_core_data6.store);
        const postTypeInfo = getPostType(postTypeSlug);
        const postIsHierarchical = postTypeInfo?.hierarchical && postTypeInfo.viewable;
        const parentPost = pageId ? getEntityRecord(
          "postType",
          postTypeSlug,
          pageId
        ) : null;
        const query = {
          per_page: 100,
          exclude: postId2,
          parent_exclude: postId2,
          orderby: "menu_order",
          order: "asc",
          _fields: "id,title,parent",
          ...fieldValue !== null && {
            search: fieldValue
          }
        };
        return {
          isHierarchical: postIsHierarchical,
          parentPostTitle: parentPost ? getTitleWithFallbackName(parentPost) : "",
          pageItems: postIsHierarchical ? getEntityRecords(
            "postType",
            postTypeSlug,
            query
          ) : null
        };
      },
      [fieldValue, pageId, postId2, postTypeSlug]
    );
    const parentOptions = (0, import_element7.useMemo)(() => {
      const getOptionsFromTree = (tree2, level = 0) => {
        const mappedNodes = tree2.map((treeNode) => [
          {
            value: treeNode.id,
            label: "\u2014 ".repeat(level) + (0, import_html_entities4.decodeEntities)(treeNode.name),
            rawName: treeNode.name
          },
          ...getOptionsFromTree(treeNode.children || [], level + 1)
        ]);
        const sortedNodes = mappedNodes.sort(([a2], [b2]) => {
          const priorityA = getItemPriority(
            a2.rawName,
            fieldValue ?? ""
          );
          const priorityB = getItemPriority(
            b2.rawName,
            fieldValue ?? ""
          );
          return priorityA >= priorityB ? 1 : -1;
        });
        return sortedNodes.flat();
      };
      if (!pageItems) {
        return [];
      }
      let tree = pageItems.map((item) => ({
        id: item.id,
        parent: item.parent ?? null,
        name: getTitleWithFallbackName(item)
      }));
      if (!fieldValue) {
        tree = buildTermsTree(tree);
      }
      const opts = getOptionsFromTree(tree);
      const optsHasParent = opts.find((item) => item.value === pageId);
      if (pageId && parentPostTitle && !optsHasParent) {
        opts.unshift({
          value: pageId,
          label: parentPostTitle,
          rawName: ""
        });
      }
      return opts.map((option) => ({
        ...option,
        value: option.value.toString()
      }));
    }, [pageItems, fieldValue, parentPostTitle, pageId]);
    if (!isHierarchical) {
      return null;
    }
    const handleKeydown = (inputValue) => {
      setFieldValue(inputValue);
    };
    const handleChange = (selectedPostId) => {
      if (selectedPostId) {
        return onChangeControl(parseInt(selectedPostId, 10) ?? 0);
      }
      onChangeControl(0);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(
      import_components7.ComboboxControl,
      {
        __nextHasNoMarginBottom: true,
        __next40pxDefaultSize: true,
        label: (0, import_i18n18.__)("Parent"),
        help: (0, import_i18n18.__)("Choose a parent page."),
        value: pageId?.toString(),
        options: parentOptions,
        onFilterValueChange: (0, import_compose3.debounce)(
          (value) => handleKeydown(value),
          300
        ),
        onChange: handleChange,
        hideLabelFromVision: true
      }
    );
  }
  var ParentEdit = ({
    data,
    field,
    onChange
  }) => {
    const { id } = field;
    const homeUrl = (0, import_data8.useSelect)((select4) => {
      return select4(import_core_data6.store).getEntityRecord("root", "__unstableBase")?.home;
    }, []);
    const onChangeControl = (0, import_element7.useCallback)(
      (newValue) => onChange({
        [id]: newValue
      }),
      [id, onChange]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("fieldset", { className: "fields-controls__parent", children: /* @__PURE__ */ (0, import_jsx_runtime62.jsxs)("div", { children: [
      (0, import_element7.createInterpolateElement)(
        (0, import_i18n18.sprintf)(
          /* translators: %1$s The home URL of the WordPress installation without the scheme. */
          (0, import_i18n18.__)(
            'Child pages inherit characteristics from their parent, such as URL structure. For instance, if "Pricing" is a child of "Services", its URL would be %1$s<wbr />/services<wbr />/pricing.'
          ),
          (0, import_url4.filterURLForDisplay)(homeUrl).replace(
            /([/.])/g,
            "<wbr />$1"
          )
        ),
        {
          wbr: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("wbr", {})
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsx)("p", { children: (0, import_element7.createInterpolateElement)(
        (0, import_i18n18.__)(
          "They also show up as sub-items in the default navigation menu. <a>Learn more.</a>"
        ),
        {
          a: /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(
            import_components7.ExternalLink,
            {
              href: (0, import_i18n18.__)(
                "https://wordpress.org/documentation/article/page-post-settings-sidebar/#page-attributes"
              ),
              children: void 0
            }
          )
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime62.jsx)(
        PageAttributesParent,
        {
          data,
          onChangeControl
        }
      )
    ] }) });
  };

  // packages/fields/build-module/fields/parent/parent-view.js
  var import_jsx_runtime63 = __toESM(require_jsx_runtime());
  var import_data9 = __toESM(require_data());
  var import_core_data7 = __toESM(require_core_data());
  var import_i18n19 = __toESM(require_i18n());
  var ParentView = ({
    item
  }) => {
    const parent = (0, import_data9.useSelect)(
      (select4) => {
        const { getEntityRecord } = select4(import_core_data7.store);
        return item?.parent ? getEntityRecord("postType", item.type, item.parent) : null;
      },
      [item.parent, item.type]
    );
    if (parent) {
      return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(import_jsx_runtime63.Fragment, { children: getTitleWithFallbackName(parent) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime63.jsx)(import_jsx_runtime63.Fragment, { children: (0, import_i18n19.__)("None") });
  };

  // packages/fields/build-module/fields/parent/index.js
  var parentField = {
    id: "parent",
    type: "text",
    label: (0, import_i18n20.__)("Parent"),
    Edit: ParentEdit,
    render: ParentView,
    enableSorting: true,
    filterBy: false
  };
  var parent_default = parentField;

  // packages/fields/build-module/fields/password/index.js
  var import_i18n22 = __toESM(require_i18n());

  // packages/fields/build-module/fields/password/edit.js
  var import_jsx_runtime64 = __toESM(require_jsx_runtime());
  var import_components8 = __toESM(require_components());
  var import_element8 = __toESM(require_element());
  var import_i18n21 = __toESM(require_i18n());
  function PasswordEdit({
    data,
    onChange,
    field
  }) {
    const [showPassword, setShowPassword] = (0, import_element8.useState)(
      !!field.getValue({ item: data })
    );
    const handleTogglePassword = (value) => {
      setShowPassword(value);
      if (!value) {
        onChange({ password: "" });
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime64.jsxs)(
      import_components8.__experimentalVStack,
      {
        as: "fieldset",
        spacing: 4,
        className: "fields-controls__password",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(
            import_components8.CheckboxControl,
            {
              __nextHasNoMarginBottom: true,
              label: (0, import_i18n21.__)("Password protected"),
              help: (0, import_i18n21.__)("Only visible to those who know the password"),
              checked: showPassword,
              onChange: handleTogglePassword
            }
          ),
          showPassword && /* @__PURE__ */ (0, import_jsx_runtime64.jsx)("div", { className: "fields-controls__password-input", children: /* @__PURE__ */ (0, import_jsx_runtime64.jsx)(
            import_components8.TextControl,
            {
              label: (0, import_i18n21.__)("Password"),
              onChange: (value) => onChange({
                password: value
              }),
              value: field.getValue({ item: data }) || "",
              placeholder: (0, import_i18n21.__)("Use a secure password"),
              type: "text",
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true,
              maxLength: 255
            }
          ) })
        ]
      }
    );
  }
  var edit_default = PasswordEdit;

  // packages/fields/build-module/fields/password/index.js
  var passwordField = {
    id: "password",
    type: "text",
    label: (0, import_i18n22.__)("Password"),
    Edit: edit_default,
    enableSorting: false,
    enableHiding: false,
    isVisible: (item) => item.status !== "private",
    filterBy: false
  };
  var password_default = passwordField;

  // packages/fields/build-module/fields/status/index.js
  var import_i18n24 = __toESM(require_i18n());

  // packages/fields/build-module/fields/status/status-view.js
  var import_jsx_runtime65 = __toESM(require_jsx_runtime());
  var import_components9 = __toESM(require_components());

  // packages/fields/build-module/fields/status/status-elements.js
  var import_i18n23 = __toESM(require_i18n());
  var STATUSES = [
    {
      value: "draft",
      label: (0, import_i18n23.__)("Draft"),
      icon: drafts_default,
      description: (0, import_i18n23.__)("Not ready to publish.")
    },
    {
      value: "future",
      label: (0, import_i18n23.__)("Scheduled"),
      icon: scheduled_default,
      description: (0, import_i18n23.__)("Publish automatically on a chosen date.")
    },
    {
      value: "pending",
      label: (0, import_i18n23.__)("Pending Review"),
      icon: pending_default,
      description: (0, import_i18n23.__)("Waiting for review before publishing.")
    },
    {
      value: "private",
      label: (0, import_i18n23.__)("Private"),
      icon: not_allowed_default,
      description: (0, import_i18n23.__)("Only visible to site admins and editors.")
    },
    {
      value: "publish",
      label: (0, import_i18n23.__)("Published"),
      icon: published_default,
      description: (0, import_i18n23.__)("Visible to everyone.")
    },
    { value: "trash", label: (0, import_i18n23.__)("Trash"), icon: trash_default }
  ];
  var status_elements_default = STATUSES;

  // packages/fields/build-module/fields/status/status-view.js
  function StatusView({ item }) {
    const status = status_elements_default.find(({ value }) => value === item.status);
    const label = status?.label || item.status;
    const icon = status?.icon;
    return /* @__PURE__ */ (0, import_jsx_runtime65.jsxs)(import_components9.__experimentalHStack, { alignment: "left", spacing: 0, children: [
      icon && /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("div", { className: "edit-site-post-list__status-icon", children: /* @__PURE__ */ (0, import_jsx_runtime65.jsx)(import_components9.Icon, { icon }) }),
      /* @__PURE__ */ (0, import_jsx_runtime65.jsx)("span", { children: label })
    ] });
  }
  var status_view_default = StatusView;

  // packages/fields/build-module/fields/status/index.js
  var OPERATOR_IS_ANY = "isAny";
  var statusField = {
    label: (0, import_i18n24.__)("Status"),
    id: "status",
    type: "text",
    elements: status_elements_default,
    render: status_view_default,
    Edit: "radio",
    enableSorting: false,
    filterBy: {
      operators: [OPERATOR_IS_ANY]
    }
  };
  var status_default = statusField;

  // packages/fields/build-module/fields/comment-status/index.js
  var import_i18n25 = __toESM(require_i18n());
  var commentStatusField = {
    id: "comment_status",
    label: (0, import_i18n25.__)("Comments"),
    type: "text",
    Edit: "radio",
    enableSorting: false,
    enableHiding: false,
    filterBy: false,
    elements: [
      {
        value: "open",
        label: (0, import_i18n25.__)("Open"),
        description: (0, import_i18n25.__)("Visitors can add new comments and replies.")
      },
      {
        value: "closed",
        label: (0, import_i18n25.__)("Closed"),
        description: (0, import_i18n25.__)(
          "Visitors cannot add new comments or replies. Existing comments remain visible."
        )
      }
    ]
  };
  var comment_status_default = commentStatusField;

  // packages/fields/build-module/fields/ping-status/index.js
  var import_jsx_runtime66 = __toESM(require_jsx_runtime());
  var import_i18n26 = __toESM(require_i18n());
  var import_components10 = __toESM(require_components());
  function PingStatusEdit({
    data,
    onChange
  }) {
    const pingStatus = data?.ping_status ?? "open";
    const onTogglePingback = (checked) => {
      onChange({
        ...data,
        ping_status: checked ? "open" : "closed"
      });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(
      import_components10.CheckboxControl,
      {
        __nextHasNoMarginBottom: true,
        label: (0, import_i18n26.__)("Enable pingbacks & trackbacks"),
        checked: pingStatus === "open",
        onChange: onTogglePingback,
        help: /* @__PURE__ */ (0, import_jsx_runtime66.jsx)(
          import_components10.ExternalLink,
          {
            href: (0, import_i18n26.__)(
              "https://wordpress.org/documentation/article/trackbacks-and-pingbacks/"
            ),
            children: (0, import_i18n26.__)("Learn more about pingbacks & trackbacks")
          }
        )
      }
    );
  }
  var pingStatusField = {
    id: "ping_status",
    label: (0, import_i18n26.__)("Trackbacks & Pingbacks"),
    type: "text",
    Edit: PingStatusEdit,
    enableSorting: false,
    enableHiding: false,
    filterBy: false,
    elements: [
      {
        value: "open",
        label: (0, import_i18n26.__)("Allow"),
        description: (0, import_i18n26.__)(
          "Allow link notifications from other blogs (pingbacks and trackbacks) on new articles."
        )
      },
      {
        value: "closed",
        label: (0, import_i18n26.__)("Don't allow"),
        description: (0, import_i18n26.__)(
          "Don't allow link notifications from other blogs (pingbacks and trackbacks) on new articles."
        )
      }
    ]
  };
  var ping_status_default = pingStatusField;

  // packages/fields/build-module/fields/discussion/index.js
  var import_i18n27 = __toESM(require_i18n());
  var discussionField = {
    id: "discussion",
    label: (0, import_i18n27.__)("Discussion"),
    type: "text",
    render: ({ item }) => {
      const commentsOpen = item.comment_status === "open";
      const pingsOpen = item.ping_status === "open";
      if (commentsOpen && pingsOpen) {
        return (0, import_i18n27.__)("Open");
      }
      if (commentsOpen && !pingsOpen) {
        return (0, import_i18n27.__)("Comments only");
      }
      if (!commentsOpen && pingsOpen) {
        return (0, import_i18n27.__)("Pings only");
      }
      return (0, import_i18n27.__)("Closed");
    },
    filterBy: false
  };
  var discussion_default = discussionField;

  // packages/fields/build-module/fields/date/index.js
  var import_i18n29 = __toESM(require_i18n());

  // packages/fields/build-module/fields/date/date-view.js
  var import_jsx_runtime67 = __toESM(require_jsx_runtime());
  var import_i18n28 = __toESM(require_i18n());
  var import_element9 = __toESM(require_element());
  var import_date2 = __toESM(require_date());
  var getFormattedDate = (dateToDisplay) => (0, import_date2.dateI18n)(
    (0, import_date2.getSettings)().formats.datetimeAbbreviated,
    (0, import_date2.getDate)(dateToDisplay)
  );
  var DateView = ({ item }) => {
    const isDraftOrPrivate = ["draft", "private"].includes(
      item.status ?? ""
    );
    if (isDraftOrPrivate) {
      return (0, import_element9.createInterpolateElement)(
        (0, import_i18n28.sprintf)(
          /* translators: %s: page creation or modification date. */
          (0, import_i18n28.__)("<span>Modified: <time>%s</time></span>"),
          getFormattedDate(item.date ?? null)
        ),
        {
          span: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("span", {}),
          time: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("time", {})
        }
      );
    }
    const isScheduled = item.status === "future";
    if (isScheduled) {
      return (0, import_element9.createInterpolateElement)(
        (0, import_i18n28.sprintf)(
          /* translators: %s: page creation date */
          (0, import_i18n28.__)("<span>Scheduled: <time>%s</time></span>"),
          getFormattedDate(item.date ?? null)
        ),
        {
          span: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("span", {}),
          time: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("time", {})
        }
      );
    }
    const isPublished = item.status === "publish";
    if (isPublished) {
      return (0, import_element9.createInterpolateElement)(
        (0, import_i18n28.sprintf)(
          /* translators: %s: page creation time */
          (0, import_i18n28.__)("<span>Published: <time>%s</time></span>"),
          getFormattedDate(item.date ?? null)
        ),
        {
          span: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("span", {}),
          time: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("time", {})
        }
      );
    }
    const dateToDisplay = (0, import_date2.getDate)(item.modified ?? null) > (0, import_date2.getDate)(item.date ?? null) ? item.modified : item.date;
    const isPending = item.status === "pending";
    if (isPending) {
      return (0, import_element9.createInterpolateElement)(
        (0, import_i18n28.sprintf)(
          /* translators: %s: page creation or modification date. */
          (0, import_i18n28.__)("<span>Modified: <time>%s</time></span>"),
          getFormattedDate(dateToDisplay ?? null)
        ),
        {
          span: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("span", {}),
          time: /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("time", {})
        }
      );
    }
    return /* @__PURE__ */ (0, import_jsx_runtime67.jsx)("time", { children: getFormattedDate(item.date ?? null) });
  };
  var date_view_default = DateView;

  // packages/fields/build-module/fields/date/index.js
  var dateField = {
    id: "date",
    type: "datetime",
    label: (0, import_i18n29.__)("Date"),
    render: date_view_default,
    filterBy: false
  };
  var date_default = dateField;

  // packages/fields/build-module/fields/author/index.js
  var import_i18n31 = __toESM(require_i18n());
  var import_data10 = __toESM(require_data());
  var import_core_data8 = __toESM(require_core_data());

  // packages/fields/build-module/fields/author/author-view.js
  var import_jsx_runtime68 = __toESM(require_jsx_runtime());
  var import_i18n30 = __toESM(require_i18n());
  var import_element10 = __toESM(require_element());
  var import_components11 = __toESM(require_components());
  function AuthorView({ item }) {
    const text = item?._embedded?.author?.[0]?.name;
    const imageUrl = item?._embedded?.author?.[0]?.avatar_urls?.[48];
    const [isImageLoaded, setIsImageLoaded] = (0, import_element10.useState)(false);
    return /* @__PURE__ */ (0, import_jsx_runtime68.jsxs)(import_components11.__experimentalHStack, { alignment: "left", spacing: 0, children: [
      !!imageUrl && /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(
        "div",
        {
          className: clsx_default("page-templates-author-field__avatar", {
            "is-loaded": isImageLoaded
          }),
          children: /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(
            "img",
            {
              onLoad: () => setIsImageLoaded(true),
              alt: (0, import_i18n30.__)("Author avatar"),
              src: imageUrl
            }
          )
        }
      ),
      !imageUrl && /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("div", { className: "page-templates-author-field__icon", children: /* @__PURE__ */ (0, import_jsx_runtime68.jsx)(import_components11.Icon, { icon: comment_author_avatar_default }) }),
      /* @__PURE__ */ (0, import_jsx_runtime68.jsx)("span", { className: "page-templates-author-field__name", children: text })
    ] });
  }
  var author_view_default = AuthorView;

  // packages/fields/build-module/fields/author/index.js
  var authorField = {
    label: (0, import_i18n31.__)("Author"),
    id: "author",
    type: "integer",
    getElements: async () => {
      const authors = await (0, import_data10.resolveSelect)(import_core_data8.store).getEntityRecords(
        "root",
        "user",
        {
          per_page: -1
        }
      ) ?? [];
      return authors.map(({ id, name }) => ({
        value: id,
        label: name
      }));
    },
    render: author_view_default,
    sort: (a2, b2, direction) => {
      const nameA = a2._embedded?.author?.[0]?.name || "";
      const nameB = b2._embedded?.author?.[0]?.name || "";
      return direction === "asc" ? nameA.localeCompare(nameB) : nameB.localeCompare(nameA);
    },
    filterBy: {
      operators: ["isAny", "isNone"]
    }
  };
  var author_default = authorField;

  // packages/fields/build-module/actions/view-post.js
  var import_i18n32 = __toESM(require_i18n());
  var viewPost = {
    id: "view-post",
    label: (0, import_i18n32._x)("View", "verb"),
    isPrimary: true,
    icon: external_default,
    isEligible(post) {
      return post.status !== "trash";
    },
    callback(posts, { onActionPerformed }) {
      const post = posts[0];
      window.open(post?.link, "_blank");
      if (onActionPerformed) {
        onActionPerformed(posts);
      }
    }
  };
  var view_post_default = viewPost;

  // packages/fields/build-module/actions/reorder-page.js
  var import_jsx_runtime69 = __toESM(require_jsx_runtime());
  var import_data11 = __toESM(require_data());
  var import_core_data9 = __toESM(require_core_data());
  var import_i18n33 = __toESM(require_i18n());
  var import_notices3 = __toESM(require_notices());
  var import_element11 = __toESM(require_element());
  var import_components12 = __toESM(require_components());
  function isItemValid(item) {
    return typeof item.menu_order === "number" && Number.isInteger(item.menu_order) && item.menu_order > 0;
  }
  function ReorderModal({
    items,
    closeModal: closeModal2,
    onActionPerformed
  }) {
    const [item, setItem] = (0, import_element11.useState)(items[0]);
    const { editEntityRecord, saveEditedEntityRecord } = (0, import_data11.useDispatch)(import_core_data9.store);
    const { createSuccessNotice, createErrorNotice } = (0, import_data11.useDispatch)(import_notices3.store);
    const isValid = isItemValid(item);
    async function onOrder(event) {
      event.preventDefault();
      if (!isValid) {
        return;
      }
      try {
        await editEntityRecord("postType", item.type, item.id, {
          menu_order: item.menu_order
        });
        closeModal2?.();
        await saveEditedEntityRecord("postType", item.type, item.id, {
          throwOnError: true
        });
        createSuccessNotice((0, import_i18n33.__)("Order updated."), {
          type: "snackbar"
        });
        onActionPerformed?.(items);
      } catch (error) {
        const typedError = error;
        const errorMessage = typedError.message && typedError.code !== "unknown_error" ? typedError.message : (0, import_i18n33.__)("An error occurred while updating the order");
        createErrorNotice(errorMessage, {
          type: "snackbar"
        });
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("form", { onSubmit: onOrder, children: /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(import_components12.__experimentalVStack, { spacing: "5", children: [
      /* @__PURE__ */ (0, import_jsx_runtime69.jsx)("div", { children: (0, import_i18n33.__)(
        "Determines the order of pages. Pages with the same order value are sorted alphabetically. Negative order values are supported."
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
        import_components12.__experimentalInputControl,
        {
          __next40pxDefaultSize: true,
          label: (0, import_i18n33.__)("Order"),
          type: "number",
          value: typeof item.menu_order === "number" && Number.isInteger(item.menu_order) ? String(item.menu_order) : "",
          onChange: (value) => {
            const parsed = parseInt(value, 10);
            setItem({
              ...item,
              menu_order: isNaN(parsed) ? void 0 : parsed
            });
          }
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime69.jsxs)(import_components12.__experimentalHStack, { justify: "right", children: [
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
          import_components12.Button,
          {
            __next40pxDefaultSize: true,
            variant: "tertiary",
            onClick: () => {
              closeModal2?.();
            },
            children: (0, import_i18n33.__)("Cancel")
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime69.jsx)(
          import_components12.Button,
          {
            __next40pxDefaultSize: true,
            variant: "primary",
            type: "submit",
            accessibleWhenDisabled: true,
            disabled: !isValid,
            children: (0, import_i18n33.__)("Save")
          }
        )
      ] })
    ] }) });
  }
  var reorderPage = {
    id: "order-pages",
    label: (0, import_i18n33.__)("Order"),
    isEligible({ status }) {
      return status !== "trash";
    },
    modalFocusOnMount: "firstContentElement",
    RenderModal: ReorderModal
  };
  var reorder_page_default = reorderPage;

  // packages/fields/build-module/actions/duplicate-post.js
  var import_jsx_runtime70 = __toESM(require_jsx_runtime());
  var import_data12 = __toESM(require_data());
  var import_core_data10 = __toESM(require_core_data());
  var import_i18n34 = __toESM(require_i18n());
  var import_notices4 = __toESM(require_notices());
  var import_element12 = __toESM(require_element());
  var import_components13 = __toESM(require_components());
  var duplicatePost = {
    id: "duplicate-post",
    label: (0, import_i18n34._x)("Duplicate", "action label"),
    isEligible({ status }) {
      return status !== "trash";
    },
    modalFocusOnMount: "firstContentElement",
    RenderModal: ({ items, closeModal: closeModal2, onActionPerformed }) => {
      const [item, setItem] = (0, import_element12.useState)({
        ...items[0],
        title: (0, import_i18n34.sprintf)(
          /* translators: %s: Existing post title */
          (0, import_i18n34._x)("%s (Copy)", "post"),
          getItemTitle(items[0])
        )
      });
      const [isCreatingPage, setIsCreatingPage] = (0, import_element12.useState)(false);
      const { saveEntityRecord } = (0, import_data12.useDispatch)(import_core_data10.store);
      const { createSuccessNotice, createErrorNotice } = (0, import_data12.useDispatch)(import_notices4.store);
      async function createPage(event) {
        event.preventDefault();
        if (isCreatingPage) {
          return;
        }
        const isTemplate = item.type === "wp_template" || item.type === "wp_registered_template";
        const newItemObject = {
          status: isTemplate ? "publish" : "draft",
          title: item.title,
          slug: isTemplate ? item.slug : item.title || (0, import_i18n34.__)("No title"),
          comment_status: item.comment_status,
          content: typeof item.content === "string" ? item.content : item.content.raw,
          excerpt: typeof item.excerpt === "string" ? item.excerpt : item.excerpt?.raw,
          meta: item.meta,
          parent: item.parent,
          password: item.password,
          template: item.template,
          format: item.format,
          featured_media: item.featured_media,
          menu_order: item.menu_order,
          ping_status: item.ping_status
        };
        const assignablePropertiesPrefix = "wp:action-assign-";
        const assignableProperties = Object.keys(item?._links || {}).filter(
          (property) => property.startsWith(assignablePropertiesPrefix)
        ).map(
          (property) => property.slice(assignablePropertiesPrefix.length)
        );
        assignableProperties.forEach((property) => {
          if (item.hasOwnProperty(property)) {
            newItemObject[property] = item[property];
          }
        });
        setIsCreatingPage(true);
        try {
          const newItem = await saveEntityRecord(
            "postType",
            item.type === "wp_registered_template" ? "wp_template" : item.type,
            newItemObject,
            { throwOnError: true }
          );
          createSuccessNotice(
            (0, import_i18n34.sprintf)(
              // translators: %s: Title of the created post, e.g: "Hello world".
              (0, import_i18n34.__)('"%s" successfully created.'),
              getItemTitle(newItem)
            ),
            {
              id: "duplicate-post-action",
              type: "snackbar"
            }
          );
          if (onActionPerformed) {
            onActionPerformed([newItem]);
          }
        } catch (error) {
          const typedError = error;
          const errorMessage = typedError.message && typedError.code !== "unknown_error" ? typedError.message : (0, import_i18n34.__)("An error occurred while duplicating the page.");
          createErrorNotice(errorMessage, {
            type: "snackbar"
          });
        } finally {
          setIsCreatingPage(false);
          closeModal2?.();
        }
      }
      return /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("form", { onSubmit: createPage, children: /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(import_components13.__experimentalVStack, { spacing: 3, children: [
        item.type === "wp_registered_template" && /* @__PURE__ */ (0, import_jsx_runtime70.jsx)("div", { children: (0, import_i18n34.__)(
          "You are about to duplicate a bundled template. Changes will not be live until you activate the new template."
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(
          import_components13.__experimentalInputControl,
          {
            __next40pxDefaultSize: true,
            label: (0, import_i18n34.__)("Title"),
            placeholder: (0, import_i18n34.__)("No title"),
            value: getItemTitle(item),
            onChange: (value) => setItem((prev) => ({
              ...prev,
              title: value || (0, import_i18n34.__)("No title")
            }))
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime70.jsxs)(import_components13.__experimentalHStack, { spacing: 2, justify: "end", children: [
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(
            import_components13.Button,
            {
              variant: "tertiary",
              onClick: closeModal2,
              __next40pxDefaultSize: true,
              children: (0, import_i18n34.__)("Cancel")
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime70.jsx)(
            import_components13.Button,
            {
              variant: "primary",
              type: "submit",
              isBusy: isCreatingPage,
              "aria-disabled": isCreatingPage,
              __next40pxDefaultSize: true,
              children: (0, import_i18n34._x)("Duplicate", "action label")
            }
          )
        ] })
      ] }) });
    }
  };
  var duplicate_post_default = duplicatePost;

  // packages/fields/build-module/actions/rename-post.js
  var import_jsx_runtime71 = __toESM(require_jsx_runtime());
  var import_data13 = __toESM(require_data());
  var import_core_data11 = __toESM(require_core_data());
  var import_i18n35 = __toESM(require_i18n());
  var import_element13 = __toESM(require_element());
  var import_patterns2 = __toESM(require_patterns());
  var import_components14 = __toESM(require_components());
  var import_notices5 = __toESM(require_notices());
  var { PATTERN_TYPES: PATTERN_TYPES2 } = unlock2(import_patterns2.privateApis);
  var renamePost = {
    id: "rename-post",
    label: (0, import_i18n35.__)("Rename"),
    modalFocusOnMount: "firstContentElement",
    isEligible(post) {
      if (post.status === "trash") {
        return false;
      }
      if (![
        "wp_template_part",
        ...Object.values(PATTERN_TYPES2)
      ].includes(post.type)) {
        return post.permissions?.update;
      }
      if (isTemplatePart(post)) {
        return post.source === "custom" && !post?.has_theme_file && post.permissions?.update;
      }
      return post.type === PATTERN_TYPES2.user && post.permissions?.update;
    },
    RenderModal: ({ items, closeModal: closeModal2, onActionPerformed }) => {
      const [item] = items;
      const [title, setTitle] = (0, import_element13.useState)(() => getItemTitle(item, ""));
      const { editEntityRecord, saveEditedEntityRecord } = (0, import_data13.useDispatch)(import_core_data11.store);
      const { createSuccessNotice, createErrorNotice } = (0, import_data13.useDispatch)(import_notices5.store);
      async function onRename(event) {
        event.preventDefault();
        try {
          await editEntityRecord("postType", item.type, item.id, {
            title
          });
          setTitle("");
          closeModal2?.();
          await saveEditedEntityRecord("postType", item.type, item.id, {
            throwOnError: true
          });
          createSuccessNotice((0, import_i18n35.__)("Name updated"), {
            type: "snackbar"
          });
          onActionPerformed?.(items);
        } catch (error) {
          const typedError = error;
          const errorMessage = typedError.message && typedError.code !== "unknown_error" ? typedError.message : (0, import_i18n35.__)("An error occurred while updating the name");
          createErrorNotice(errorMessage, { type: "snackbar" });
        }
      }
      return /* @__PURE__ */ (0, import_jsx_runtime71.jsx)("form", { onSubmit: onRename, children: /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(import_components14.__experimentalVStack, { spacing: "5", children: [
        /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
          import_components14.TextControl,
          {
            __nextHasNoMarginBottom: true,
            __next40pxDefaultSize: true,
            label: (0, import_i18n35.__)("Name"),
            value: title,
            onChange: setTitle,
            required: true
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime71.jsxs)(import_components14.__experimentalHStack, { justify: "right", children: [
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
            import_components14.Button,
            {
              __next40pxDefaultSize: true,
              variant: "tertiary",
              onClick: () => {
                closeModal2?.();
              },
              children: (0, import_i18n35.__)("Cancel")
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime71.jsx)(
            import_components14.Button,
            {
              __next40pxDefaultSize: true,
              variant: "primary",
              type: "submit",
              children: (0, import_i18n35.__)("Save")
            }
          )
        ] })
      ] }) });
    }
  };
  var rename_post_default = renamePost;

  // packages/fields/build-module/actions/reset-post.js
  var import_jsx_runtime72 = __toESM(require_jsx_runtime());
  var import_data14 = __toESM(require_data());
  var import_core_data12 = __toESM(require_core_data());
  var import_i18n36 = __toESM(require_i18n());
  var import_notices6 = __toESM(require_notices());
  var import_element14 = __toESM(require_element());
  var import_blocks4 = __toESM(require_blocks());
  var import_components15 = __toESM(require_components());
  var import_url5 = __toESM(require_url());
  var import_api_fetch2 = __toESM(require_api_fetch());
  var isTemplateRevertable2 = (templateOrTemplatePart) => {
    if (!templateOrTemplatePart) {
      return false;
    }
    return templateOrTemplatePart.source === "custom" && (Boolean(templateOrTemplatePart?.plugin) || templateOrTemplatePart?.has_theme_file);
  };
  var revertTemplate = async (template2, { allowUndo = true } = {}) => {
    const noticeId = "edit-site-template-reverted";
    (0, import_data14.dispatch)(import_notices6.store).removeNotice(noticeId);
    if (!isTemplateRevertable2(template2)) {
      (0, import_data14.dispatch)(import_notices6.store).createErrorNotice(
        (0, import_i18n36.__)("This template is not revertable."),
        {
          type: "snackbar"
        }
      );
      return;
    }
    try {
      const templateEntityConfig = (0, import_data14.select)(import_core_data12.store).getEntityConfig(
        "postType",
        template2.type
      );
      if (!templateEntityConfig) {
        (0, import_data14.dispatch)(import_notices6.store).createErrorNotice(
          (0, import_i18n36.__)(
            "The editor has encountered an unexpected error. Please reload."
          ),
          { type: "snackbar" }
        );
        return;
      }
      const fileTemplatePath = (0, import_url5.addQueryArgs)(
        `${templateEntityConfig.baseURL}/${template2.id}`,
        { context: "edit", source: template2.origin }
      );
      const fileTemplate = await (0, import_api_fetch2.default)({
        path: fileTemplatePath
      });
      if (!fileTemplate) {
        (0, import_data14.dispatch)(import_notices6.store).createErrorNotice(
          (0, import_i18n36.__)(
            "The editor has encountered an unexpected error. Please reload."
          ),
          { type: "snackbar" }
        );
        return;
      }
      const serializeBlocks = ({ blocks: blocksForSerialization = [] }) => (0, import_blocks4.__unstableSerializeAndClean)(blocksForSerialization);
      const edited = (0, import_data14.select)(import_core_data12.store).getEditedEntityRecord(
        "postType",
        template2.type,
        template2.id
      );
      (0, import_data14.dispatch)(import_core_data12.store).editEntityRecord(
        "postType",
        template2.type,
        template2.id,
        {
          content: serializeBlocks,
          // Required to make the `undo` behave correctly.
          blocks: edited.blocks,
          // Required to revert the blocks in the editor.
          source: "custom"
          // required to avoid turning the editor into a dirty state
        },
        {
          undoIgnore: true
          // Required to merge this edit with the last undo level.
        }
      );
      const blocks = (0, import_blocks4.parse)(fileTemplate?.content?.raw);
      (0, import_data14.dispatch)(import_core_data12.store).editEntityRecord(
        "postType",
        template2.type,
        fileTemplate.id,
        {
          content: serializeBlocks,
          blocks,
          source: "theme"
        }
      );
      if (allowUndo) {
        const undoRevert = () => {
          (0, import_data14.dispatch)(import_core_data12.store).editEntityRecord(
            "postType",
            template2.type,
            edited.id,
            {
              content: serializeBlocks,
              blocks: edited.blocks,
              source: "custom"
            }
          );
        };
        (0, import_data14.dispatch)(import_notices6.store).createSuccessNotice(
          (0, import_i18n36.__)("Template reset."),
          {
            type: "snackbar",
            id: noticeId,
            actions: [
              {
                label: (0, import_i18n36.__)("Undo"),
                onClick: undoRevert
              }
            ]
          }
        );
      }
    } catch (error) {
      const errorMessage = error.message && error.code !== "unknown_error" ? error.message : (0, import_i18n36.__)("Template revert failed. Please reload.");
      (0, import_data14.dispatch)(import_notices6.store).createErrorNotice(errorMessage, {
        type: "snackbar"
      });
    }
  };
  var resetPostAction = {
    id: "reset-post",
    label: (0, import_i18n36.__)("Reset"),
    isEligible: (item) => {
      return isTemplateOrTemplatePart(item) && item?.source === "custom" && (Boolean(item.type === "wp_template" && item?.plugin) || item?.has_theme_file);
    },
    icon: backup_default,
    supportsBulk: true,
    hideModalHeader: true,
    modalFocusOnMount: "firstContentElement",
    RenderModal: ({ items, closeModal: closeModal2, onActionPerformed }) => {
      const [isBusy, setIsBusy] = (0, import_element14.useState)(false);
      const { saveEditedEntityRecord } = (0, import_data14.useDispatch)(import_core_data12.store);
      const { createSuccessNotice, createErrorNotice } = (0, import_data14.useDispatch)(import_notices6.store);
      const onConfirm = async () => {
        try {
          for (const template2 of items) {
            await revertTemplate(template2, {
              allowUndo: false
            });
            await saveEditedEntityRecord(
              "postType",
              template2.type,
              template2.id
            );
          }
          createSuccessNotice(
            items.length > 1 ? (0, import_i18n36.sprintf)(
              /* translators: %d: The number of items. */
              (0, import_i18n36.__)("%d items reset."),
              items.length
            ) : (0, import_i18n36.sprintf)(
              /* translators: %s: The template/part's name. */
              (0, import_i18n36.__)('"%s" reset.'),
              getItemTitle(items[0])
            ),
            {
              type: "snackbar",
              id: "revert-template-action"
            }
          );
        } catch (error) {
          let fallbackErrorMessage;
          if (items[0].type === "wp_template") {
            fallbackErrorMessage = items.length === 1 ? (0, import_i18n36.__)(
              "An error occurred while reverting the template."
            ) : (0, import_i18n36.__)(
              "An error occurred while reverting the templates."
            );
          } else {
            fallbackErrorMessage = items.length === 1 ? (0, import_i18n36.__)(
              "An error occurred while reverting the template part."
            ) : (0, import_i18n36.__)(
              "An error occurred while reverting the template parts."
            );
          }
          const typedError = error;
          const errorMessage = typedError.message && typedError.code !== "unknown_error" ? typedError.message : fallbackErrorMessage;
          createErrorNotice(errorMessage, { type: "snackbar" });
        }
      };
      return /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(import_components15.__experimentalVStack, { spacing: "5", children: [
        /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(import_components15.__experimentalText, { children: (0, import_i18n36.__)("Reset to default and clear all customizations?") }),
        /* @__PURE__ */ (0, import_jsx_runtime72.jsxs)(import_components15.__experimentalHStack, { justify: "right", children: [
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
            import_components15.Button,
            {
              __next40pxDefaultSize: true,
              variant: "tertiary",
              onClick: closeModal2,
              disabled: isBusy,
              accessibleWhenDisabled: true,
              children: (0, import_i18n36.__)("Cancel")
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime72.jsx)(
            import_components15.Button,
            {
              __next40pxDefaultSize: true,
              variant: "primary",
              onClick: async () => {
                setIsBusy(true);
                await onConfirm();
                onActionPerformed?.(items);
                setIsBusy(false);
                closeModal2?.();
              },
              isBusy,
              disabled: isBusy,
              accessibleWhenDisabled: true,
              children: (0, import_i18n36.__)("Reset")
            }
          )
        ] })
      ] });
    }
  };
  var reset_post_default = resetPostAction;

  // packages/fields/build-module/actions/duplicate-pattern.js
  var import_jsx_runtime73 = __toESM(require_jsx_runtime());
  var import_i18n37 = __toESM(require_i18n());
  var import_patterns3 = __toESM(require_patterns());
  var { CreatePatternModalContents, useDuplicatePatternProps } = unlock2(import_patterns3.privateApis);
  var duplicatePattern = {
    id: "duplicate-pattern",
    label: (0, import_i18n37._x)("Duplicate", "action label"),
    isEligible: (item) => item.type !== "wp_template_part",
    modalHeader: (0, import_i18n37._x)("Duplicate pattern", "action label"),
    modalFocusOnMount: "firstContentElement",
    RenderModal: ({ items, closeModal: closeModal2 }) => {
      const [item] = items;
      const duplicatedProps = useDuplicatePatternProps({
        pattern: item,
        onSuccess: () => closeModal2?.()
      });
      return /* @__PURE__ */ (0, import_jsx_runtime73.jsx)(
        CreatePatternModalContents,
        {
          onClose: closeModal2,
          confirmLabel: (0, import_i18n37._x)("Duplicate", "action label"),
          ...duplicatedProps
        }
      );
    }
  };
  var duplicate_pattern_default = duplicatePattern;

  // node_modules/tslib/tslib.es6.mjs
  var __assign = function() {
    __assign = Object.assign || function __assign2(t2) {
      for (var s2, i2 = 1, n2 = arguments.length; i2 < n2; i2++) {
        s2 = arguments[i2];
        for (var p2 in s2) if (Object.prototype.hasOwnProperty.call(s2, p2)) t2[p2] = s2[p2];
      }
      return t2;
    };
    return __assign.apply(this, arguments);
  };

  // node_modules/lower-case/dist.es2015/index.js
  function lowerCase(str) {
    return str.toLowerCase();
  }

  // node_modules/no-case/dist.es2015/index.js
  var DEFAULT_SPLIT_REGEXP = [/([a-z0-9])([A-Z])/g, /([A-Z])([A-Z][a-z])/g];
  var DEFAULT_STRIP_REGEXP = /[^A-Z0-9]+/gi;
  function noCase(input, options) {
    if (options === void 0) {
      options = {};
    }
    var _a = options.splitRegexp, splitRegexp = _a === void 0 ? DEFAULT_SPLIT_REGEXP : _a, _b = options.stripRegexp, stripRegexp = _b === void 0 ? DEFAULT_STRIP_REGEXP : _b, _c = options.transform, transform = _c === void 0 ? lowerCase : _c, _d = options.delimiter, delimiter = _d === void 0 ? " " : _d;
    var result = replace(replace(input, splitRegexp, "$1\0$2"), stripRegexp, "\0");
    var start = 0;
    var end = result.length;
    while (result.charAt(start) === "\0")
      start++;
    while (result.charAt(end - 1) === "\0")
      end--;
    return result.slice(start, end).split("\0").map(transform).join(delimiter);
  }
  function replace(input, re, value) {
    if (re instanceof RegExp)
      return input.replace(re, value);
    return re.reduce(function(input2, re2) {
      return input2.replace(re2, value);
    }, input);
  }

  // node_modules/dot-case/dist.es2015/index.js
  function dotCase(input, options) {
    if (options === void 0) {
      options = {};
    }
    return noCase(input, __assign({ delimiter: "." }, options));
  }

  // node_modules/param-case/dist.es2015/index.js
  function paramCase(input, options) {
    if (options === void 0) {
      options = {};
    }
    return dotCase(input, __assign({ delimiter: "-" }, options));
  }

  // node_modules/client-zip/index.js
  "stream" in Blob.prototype || Object.defineProperty(Blob.prototype, "stream", { value() {
    return new Response(this).body;
  } }), "setBigUint64" in DataView.prototype || Object.defineProperty(DataView.prototype, "setBigUint64", { value(e2, n2, t2) {
    const i2 = Number(0xffffffffn & n2), r3 = Number(n2 >> 32n);
    this.setUint32(e2 + (t2 ? 0 : 4), i2, t2), this.setUint32(e2 + (t2 ? 4 : 0), r3, t2);
  } });
  var e = (e2) => new DataView(new ArrayBuffer(e2));
  var n = (e2) => new Uint8Array(e2.buffer || e2);
  var t = (e2) => new TextEncoder().encode(String(e2));
  var i = (e2) => Math.min(4294967295, Number(e2));
  var r2 = (e2) => Math.min(65535, Number(e2));
  function f(e2, i2) {
    if (void 0 === i2 || i2 instanceof Date || (i2 = new Date(i2)), e2 instanceof File) return { isFile: 1, t: i2 || new Date(e2.lastModified), i: e2.stream() };
    if (e2 instanceof Response) return { isFile: 1, t: i2 || new Date(e2.headers.get("Last-Modified") || Date.now()), i: e2.body };
    if (void 0 === i2) i2 = /* @__PURE__ */ new Date();
    else if (isNaN(i2)) throw new Error("Invalid modification date.");
    if (void 0 === e2) return { isFile: 0, t: i2 };
    if ("string" == typeof e2) return { isFile: 1, t: i2, i: t(e2) };
    if (e2 instanceof Blob) return { isFile: 1, t: i2, i: e2.stream() };
    if (e2 instanceof Uint8Array || e2 instanceof ReadableStream) return { isFile: 1, t: i2, i: e2 };
    if (e2 instanceof ArrayBuffer || ArrayBuffer.isView(e2)) return { isFile: 1, t: i2, i: n(e2) };
    if (Symbol.asyncIterator in e2) return { isFile: 1, t: i2, i: o(e2[Symbol.asyncIterator]()) };
    throw new TypeError("Unsupported input format.");
  }
  function o(e2, n2 = e2) {
    return new ReadableStream({ async pull(n3) {
      let t2 = 0;
      for (; n3.desiredSize > t2; ) {
        const i2 = await e2.next();
        if (!i2.value) {
          n3.close();
          break;
        }
        {
          const e3 = a(i2.value);
          n3.enqueue(e3), t2 += e3.byteLength;
        }
      }
    }, cancel(e3) {
      n2.throw?.(e3);
    } });
  }
  function a(e2) {
    return "string" == typeof e2 ? t(e2) : e2 instanceof Uint8Array ? e2 : n(e2);
  }
  function s(e2, i2, r3) {
    let [f2, o2] = (function(e3) {
      return e3 ? e3 instanceof Uint8Array ? [e3, 1] : ArrayBuffer.isView(e3) || e3 instanceof ArrayBuffer ? [n(e3), 1] : [t(e3), 0] : [void 0, 0];
    })(i2);
    if (e2 instanceof File) return { o: d(f2 || t(e2.name)), u: BigInt(e2.size), l: o2 };
    if (e2 instanceof Response) {
      const n2 = e2.headers.get("content-disposition"), i3 = n2 && n2.match(/;\s*filename\*?=["']?(.*?)["']?$/i), a2 = i3 && i3[1] || e2.url && new URL(e2.url).pathname.split("/").findLast(Boolean), s2 = a2 && decodeURIComponent(a2), u2 = r3 || +e2.headers.get("content-length");
      return { o: d(f2 || t(s2)), u: BigInt(u2), l: o2 };
    }
    return f2 = d(f2, void 0 !== e2 || void 0 !== r3), "string" == typeof e2 ? { o: f2, u: BigInt(t(e2).length), l: o2 } : e2 instanceof Blob ? { o: f2, u: BigInt(e2.size), l: o2 } : e2 instanceof ArrayBuffer || ArrayBuffer.isView(e2) ? { o: f2, u: BigInt(e2.byteLength), l: o2 } : { o: f2, u: u(e2, r3), l: o2 };
  }
  function u(e2, n2) {
    return n2 > -1 ? BigInt(n2) : e2 ? void 0 : 0n;
  }
  function d(e2, n2 = 1) {
    if (!e2 || e2.every(((c) => 47 === c))) throw new Error("The file must have a name.");
    if (n2) for (; 47 === e2[e2.length - 1]; ) e2 = e2.subarray(0, -1);
    else 47 !== e2[e2.length - 1] && (e2 = new Uint8Array([...e2, 47]));
    return e2;
  }
  var l = new Uint32Array(256);
  for (let e2 = 0; e2 < 256; ++e2) {
    let n2 = e2;
    for (let e3 = 0; e3 < 8; ++e3) n2 = n2 >>> 1 ^ (1 & n2 && 3988292384);
    l[e2] = n2;
  }
  function y(e2, n2 = 0) {
    n2 ^= -1;
    for (var t2 = 0, i2 = e2.length; t2 < i2; t2++) n2 = n2 >>> 8 ^ l[255 & n2 ^ e2[t2]];
    return (-1 ^ n2) >>> 0;
  }
  function w(e2, n2, t2 = 0) {
    const i2 = e2.getSeconds() >> 1 | e2.getMinutes() << 5 | e2.getHours() << 11, r3 = e2.getDate() | e2.getMonth() + 1 << 5 | e2.getFullYear() - 1980 << 9;
    n2.setUint16(t2, i2, 1), n2.setUint16(t2 + 2, r3, 1);
  }
  function B({ o: e2, l: n2 }, t2) {
    return 8 * (!n2 || (t2 ?? (function(e3) {
      try {
        b.decode(e3);
      } catch {
        return 0;
      }
      return 1;
    })(e2)));
  }
  var b = new TextDecoder("utf8", { fatal: 1 });
  function p(t2, i2 = 0) {
    const r3 = e(30);
    return r3.setUint32(0, 1347093252), r3.setUint32(4, 754976768 | i2), w(t2.t, r3, 10), r3.setUint16(26, t2.o.length, 1), n(r3);
  }
  async function* g(e2) {
    let { i: n2 } = e2;
    if ("then" in n2 && (n2 = await n2), n2 instanceof Uint8Array) yield n2, e2.m = y(n2, 0), e2.u = BigInt(n2.length);
    else {
      e2.u = 0n;
      const t2 = n2.getReader();
      for (; ; ) {
        const { value: n3, done: i2 } = await t2.read();
        if (i2) break;
        e2.m = y(n3, e2.m), e2.u += BigInt(n3.length), yield n3;
      }
    }
  }
  function I(t2, r3) {
    const f2 = e(16 + (r3 ? 8 : 0));
    return f2.setUint32(0, 1347094280), f2.setUint32(4, t2.isFile ? t2.m : 0, 1), r3 ? (f2.setBigUint64(8, t2.u, 1), f2.setBigUint64(16, t2.u, 1)) : (f2.setUint32(8, i(t2.u), 1), f2.setUint32(12, i(t2.u), 1)), n(f2);
  }
  function v(t2, r3, f2 = 0, o2 = 0) {
    const a2 = e(46);
    return a2.setUint32(0, 1347092738), a2.setUint32(4, 755182848), a2.setUint16(8, 2048 | f2), w(t2.t, a2, 12), a2.setUint32(16, t2.isFile ? t2.m : 0, 1), a2.setUint32(20, i(t2.u), 1), a2.setUint32(24, i(t2.u), 1), a2.setUint16(28, t2.o.length, 1), a2.setUint16(30, o2, 1), a2.setUint16(40, t2.isFile ? 33204 : 16893, 1), a2.setUint32(42, i(r3), 1), n(a2);
  }
  function h(t2, i2, r3) {
    const f2 = e(r3);
    return f2.setUint16(0, 1, 1), f2.setUint16(2, r3 - 4, 1), 16 & r3 && (f2.setBigUint64(4, t2.u, 1), f2.setBigUint64(12, t2.u, 1)), f2.setBigUint64(r3 - 8, i2, 1), n(f2);
  }
  function D(e2) {
    return e2 instanceof File || e2 instanceof Response ? [[e2], [e2]] : [[e2.input, e2.name, e2.size], [e2.input, e2.lastModified]];
  }
  var S = (e2) => (function(e3) {
    let n2 = BigInt(22), t2 = 0n, i2 = 0;
    for (const r3 of e3) {
      if (!r3.o) throw new Error("Every file must have a non-empty name.");
      if (void 0 === r3.u) throw new Error(`Missing size for file "${new TextDecoder().decode(r3.o)}".`);
      const e4 = r3.u >= 0xffffffffn, f2 = t2 >= 0xffffffffn;
      t2 += BigInt(46 + r3.o.length + (e4 && 8)) + r3.u, n2 += BigInt(r3.o.length + 46 + (12 * f2 | 28 * e4)), i2 || (i2 = e4);
    }
    return (i2 || t2 >= 0xffffffffn) && (n2 += BigInt(76)), n2 + t2;
  })((function* (e3) {
    for (const n2 of e3) yield s(...D(n2)[0]);
  })(e2));
  function A(e2, n2 = {}) {
    const t2 = { "Content-Type": "application/zip", "Content-Disposition": "attachment" };
    return ("bigint" == typeof n2.length || Number.isInteger(n2.length)) && n2.length > 0 && (t2["Content-Length"] = String(n2.length)), n2.metadata && (t2["Content-Length"] = String(S(n2.metadata))), new Response(N(e2, n2), { headers: t2 });
  }
  function N(t2, a2 = {}) {
    const u2 = (function(e2) {
      const n2 = e2[Symbol.iterator in e2 ? Symbol.iterator : Symbol.asyncIterator]();
      return { async next() {
        const e3 = await n2.next();
        if (e3.done) return e3;
        const [t3, i2] = D(e3.value);
        return { done: 0, value: Object.assign(f(...i2), s(...t3)) };
      }, throw: n2.throw?.bind(n2), [Symbol.asyncIterator]() {
        return this;
      } };
    })(t2);
    return o((async function* (t3, f2) {
      const o2 = [];
      let a3 = 0n, s2 = 0n, u3 = 0;
      for await (const e2 of t3) {
        const n2 = B(e2, f2.buffersAreUTF8);
        yield p(e2, n2), yield new Uint8Array(e2.o), e2.isFile && (yield* g(e2));
        const t4 = e2.u >= 0xffffffffn, i2 = 12 * (a3 >= 0xffffffffn) | 28 * t4;
        yield I(e2, t4), o2.push(v(e2, a3, n2, i2)), o2.push(e2.o), i2 && o2.push(h(e2, a3, i2)), t4 && (a3 += 8n), s2++, a3 += BigInt(46 + e2.o.length) + e2.u, u3 || (u3 = t4);
      }
      let d2 = 0n;
      for (const e2 of o2) yield e2, d2 += BigInt(e2.length);
      if (u3 || a3 >= 0xffffffffn) {
        const t4 = e(76);
        t4.setUint32(0, 1347094022), t4.setBigUint64(4, BigInt(44), 1), t4.setUint32(12, 755182848), t4.setBigUint64(24, s2, 1), t4.setBigUint64(32, s2, 1), t4.setBigUint64(40, d2, 1), t4.setBigUint64(48, a3, 1), t4.setUint32(56, 1347094023), t4.setBigUint64(64, a3 + d2, 1), t4.setUint32(72, 1, 1), yield n(t4);
      }
      const l2 = e(22);
      l2.setUint32(0, 1347093766), l2.setUint16(8, r2(s2), 1), l2.setUint16(10, r2(s2), 1), l2.setUint32(12, i(d2), 1), l2.setUint32(16, i(a3), 1), yield n(l2);
    })(u2, a2), u2);
  }

  // packages/fields/build-module/actions/export-pattern.js
  var import_blob = __toESM(require_blob());
  var import_i18n38 = __toESM(require_i18n());
  function getJsonFromItem(item) {
    return JSON.stringify(
      {
        __file: item.type,
        title: getItemTitle(item),
        content: typeof item.content === "string" ? item.content : item.content?.raw,
        syncStatus: item.wp_pattern_sync_status
      },
      null,
      2
    );
  }
  var exportPattern = {
    id: "export-pattern",
    label: (0, import_i18n38.__)("Export as JSON"),
    icon: download_default,
    supportsBulk: true,
    isEligible: (item) => item.type === "wp_block",
    callback: async (items) => {
      if (items.length === 1) {
        return (0, import_blob.downloadBlob)(
          `${paramCase(
            getItemTitle(items[0]) || items[0].slug
          )}.json`,
          getJsonFromItem(items[0]),
          "application/json"
        );
      }
      const nameCount = {};
      const filesToZip = items.map((item) => {
        const name = paramCase(getItemTitle(item) || item.slug);
        nameCount[name] = (nameCount[name] || 0) + 1;
        return {
          name: `${name + (nameCount[name] > 1 ? "-" + (nameCount[name] - 1) : "")}.json`,
          lastModified: /* @__PURE__ */ new Date(),
          input: getJsonFromItem(item)
        };
      });
      return (0, import_blob.downloadBlob)(
        (0, import_i18n38.__)("patterns-export") + ".zip",
        await A(filesToZip).blob(),
        "application/zip"
      );
    }
  };
  var export_pattern_default = exportPattern;

  // packages/fields/build-module/actions/view-post-revisions.js
  var import_url6 = __toESM(require_url());
  var import_i18n39 = __toESM(require_i18n());
  var viewPostRevisions = {
    id: "view-post-revisions",
    context: "list",
    label(items) {
      const revisionsCount = items[0]._links?.["version-history"]?.[0]?.count ?? 0;
      return (0, import_i18n39.sprintf)(
        /* translators: %d: number of revisions. */
        (0, import_i18n39.__)("View revisions (%d)"),
        revisionsCount
      );
    },
    isEligible(post) {
      if (post.status === "trash") {
        return false;
      }
      const lastRevisionId = post?._links?.["predecessor-version"]?.[0]?.id ?? null;
      const revisionsCount = post?._links?.["version-history"]?.[0]?.count ?? 0;
      return !!lastRevisionId && revisionsCount > 1;
    },
    callback(posts, { onActionPerformed }) {
      const post = posts[0];
      const href = (0, import_url6.addQueryArgs)("revision.php", {
        revision: post?._links?.["predecessor-version"]?.[0]?.id
      });
      document.location.href = href;
      if (onActionPerformed) {
        onActionPerformed(posts);
      }
    }
  };
  var view_post_revisions_default = viewPostRevisions;

  // packages/fields/build-module/actions/permanently-delete-post.js
  var import_jsx_runtime74 = __toESM(require_jsx_runtime());
  var import_core_data13 = __toESM(require_core_data());
  var import_i18n40 = __toESM(require_i18n());
  var import_notices7 = __toESM(require_notices());
  var import_element15 = __toESM(require_element());
  var import_data15 = __toESM(require_data());
  var import_components16 = __toESM(require_components());
  var import_html_entities5 = __toESM(require_html_entities());
  var permanentlyDeletePost = {
    id: "permanently-delete",
    label: (0, import_i18n40.__)("Permanently delete"),
    supportsBulk: true,
    icon: trash_default,
    isEligible(item) {
      if (isTemplateOrTemplatePart(item) || item.type === "wp_block") {
        return false;
      }
      const { status, permissions } = item;
      return status === "trash" && permissions?.delete;
    },
    hideModalHeader: true,
    modalFocusOnMount: "firstContentElement",
    RenderModal: ({ items, closeModal: closeModal2, onActionPerformed }) => {
      const [isBusy, setIsBusy] = (0, import_element15.useState)(false);
      const { createSuccessNotice, createErrorNotice } = (0, import_data15.useDispatch)(import_notices7.store);
      const { deleteEntityRecord } = (0, import_data15.useDispatch)(import_core_data13.store);
      return /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)(import_components16.__experimentalVStack, { spacing: "5", children: [
        /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(import_components16.__experimentalText, { children: items.length > 1 ? (0, import_i18n40.sprintf)(
          // translators: %d: number of items to delete.
          (0, import_i18n40._n)(
            "Are you sure you want to permanently delete %d item?",
            "Are you sure you want to permanently delete %d items?",
            items.length
          ),
          items.length
        ) : (0, import_i18n40.sprintf)(
          // translators: %s: The post's title
          (0, import_i18n40.__)(
            'Are you sure you want to permanently delete "%s"?'
          ),
          (0, import_html_entities5.decodeEntities)(getItemTitle(items[0]))
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime74.jsxs)(import_components16.__experimentalHStack, { justify: "right", children: [
          /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(
            import_components16.Button,
            {
              variant: "tertiary",
              onClick: closeModal2,
              disabled: isBusy,
              accessibleWhenDisabled: true,
              __next40pxDefaultSize: true,
              children: (0, import_i18n40.__)("Cancel")
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime74.jsx)(
            import_components16.Button,
            {
              variant: "primary",
              onClick: async () => {
                setIsBusy(true);
                const promiseResult = await Promise.allSettled(
                  items.map(
                    (post) => deleteEntityRecord(
                      "postType",
                      post.type,
                      post.id,
                      { force: true },
                      { throwOnError: true }
                    )
                  )
                );
                if (promiseResult.every(
                  ({ status }) => status === "fulfilled"
                )) {
                  let successMessage;
                  if (promiseResult.length === 1) {
                    successMessage = (0, import_i18n40.sprintf)(
                      /* translators: %s: The posts's title. */
                      (0, import_i18n40.__)('"%s" permanently deleted.'),
                      getItemTitle(items[0])
                    );
                  } else {
                    successMessage = (0, import_i18n40.__)(
                      "The items were permanently deleted."
                    );
                  }
                  createSuccessNotice(successMessage, {
                    type: "snackbar",
                    id: "permanently-delete-post-action"
                  });
                  onActionPerformed?.(items);
                } else {
                  let errorMessage;
                  if (promiseResult.length === 1) {
                    const typedError = promiseResult[0];
                    if (typedError.reason?.message) {
                      errorMessage = typedError.reason.message;
                    } else {
                      errorMessage = (0, import_i18n40.__)(
                        "An error occurred while permanently deleting the item."
                      );
                    }
                  } else {
                    const errorMessages = /* @__PURE__ */ new Set();
                    const failedPromises = promiseResult.filter(
                      ({ status }) => status === "rejected"
                    );
                    for (const failedPromise of failedPromises) {
                      const typedError = failedPromise;
                      if (typedError.reason?.message) {
                        errorMessages.add(
                          typedError.reason.message
                        );
                      }
                    }
                    if (errorMessages.size === 0) {
                      errorMessage = (0, import_i18n40.__)(
                        "An error occurred while permanently deleting the items."
                      );
                    } else if (errorMessages.size === 1) {
                      errorMessage = (0, import_i18n40.sprintf)(
                        /* translators: %s: an error message */
                        (0, import_i18n40.__)(
                          "An error occurred while permanently deleting the items: %s"
                        ),
                        [...errorMessages][0]
                      );
                    } else {
                      errorMessage = (0, import_i18n40.sprintf)(
                        /* translators: %s: a list of comma separated error messages */
                        (0, import_i18n40.__)(
                          "Some errors occurred while permanently deleting the items: %s"
                        ),
                        [...errorMessages].join(",")
                      );
                    }
                  }
                  createErrorNotice(errorMessage, {
                    type: "snackbar"
                  });
                }
                setIsBusy(false);
                closeModal2?.();
              },
              isBusy,
              disabled: isBusy,
              accessibleWhenDisabled: true,
              __next40pxDefaultSize: true,
              children: (0, import_i18n40.__)("Delete permanently")
            }
          )
        ] })
      ] });
    }
  };
  var permanently_delete_post_default = permanentlyDeletePost;

  // packages/fields/build-module/actions/restore-post.js
  var import_core_data14 = __toESM(require_core_data());
  var import_i18n41 = __toESM(require_i18n());
  var import_notices8 = __toESM(require_notices());
  var restorePost = {
    id: "restore",
    label: (0, import_i18n41.__)("Restore"),
    isPrimary: true,
    icon: backup_default,
    supportsBulk: true,
    isEligible(item) {
      return !isTemplateOrTemplatePart(item) && item.type !== "wp_block" && item.status === "trash" && item.permissions?.update;
    },
    async callback(posts, { registry, onActionPerformed }) {
      const { createSuccessNotice, createErrorNotice } = registry.dispatch(import_notices8.store);
      const { editEntityRecord, saveEditedEntityRecord } = registry.dispatch(import_core_data14.store);
      await Promise.allSettled(
        posts.map((post) => {
          return editEntityRecord("postType", post.type, post.id, {
            status: "draft"
          });
        })
      );
      const promiseResult = await Promise.allSettled(
        posts.map((post) => {
          return saveEditedEntityRecord("postType", post.type, post.id, {
            throwOnError: true
          });
        })
      );
      if (promiseResult.every(({ status }) => status === "fulfilled")) {
        let successMessage;
        if (posts.length === 1) {
          successMessage = (0, import_i18n41.sprintf)(
            /* translators: %s: The number of posts. */
            (0, import_i18n41.__)('"%s" has been restored.'),
            getItemTitle(posts[0])
          );
        } else if (posts[0].type === "page") {
          successMessage = (0, import_i18n41.sprintf)(
            /* translators: %d: The number of posts. */
            (0, import_i18n41.__)("%d pages have been restored."),
            posts.length
          );
        } else {
          successMessage = (0, import_i18n41.sprintf)(
            /* translators: %d: The number of posts. */
            (0, import_i18n41.__)("%d posts have been restored."),
            posts.length
          );
        }
        createSuccessNotice(successMessage, {
          type: "snackbar",
          id: "restore-post-action"
        });
        if (onActionPerformed) {
          onActionPerformed(posts);
        }
      } else {
        let errorMessage;
        if (promiseResult.length === 1) {
          const typedError = promiseResult[0];
          if (typedError.reason?.message) {
            errorMessage = typedError.reason.message;
          } else {
            errorMessage = (0, import_i18n41.__)(
              "An error occurred while restoring the post."
            );
          }
        } else {
          const errorMessages = /* @__PURE__ */ new Set();
          const failedPromises = promiseResult.filter(
            ({ status }) => status === "rejected"
          );
          for (const failedPromise of failedPromises) {
            const typedError = failedPromise;
            if (typedError.reason?.message) {
              errorMessages.add(typedError.reason.message);
            }
          }
          if (errorMessages.size === 0) {
            errorMessage = (0, import_i18n41.__)(
              "An error occurred while restoring the posts."
            );
          } else if (errorMessages.size === 1) {
            errorMessage = (0, import_i18n41.sprintf)(
              /* translators: %s: an error message */
              (0, import_i18n41.__)("An error occurred while restoring the posts: %s"),
              [...errorMessages][0]
            );
          } else {
            errorMessage = (0, import_i18n41.sprintf)(
              /* translators: %s: a list of comma separated error messages */
              (0, import_i18n41.__)(
                "Some errors occurred while restoring the posts: %s"
              ),
              [...errorMessages].join(",")
            );
          }
        }
        createErrorNotice(errorMessage, {
          type: "snackbar"
        });
      }
    }
  };
  var restore_post_default = restorePost;

  // packages/fields/build-module/actions/trash-post.js
  var import_jsx_runtime75 = __toESM(require_jsx_runtime());
  var import_data16 = __toESM(require_data());
  var import_core_data15 = __toESM(require_core_data());
  var import_i18n42 = __toESM(require_i18n());
  var import_notices9 = __toESM(require_notices());
  var import_element16 = __toESM(require_element());
  var import_components17 = __toESM(require_components());
  var trashPost2 = {
    id: "move-to-trash",
    label: (0, import_i18n42.__)("Move to trash"),
    isPrimary: true,
    icon: trash_default,
    isEligible(item) {
      if (item.type === "wp_template_part" || item.type === "wp_block") {
        return false;
      }
      return !!item.status && !["auto-draft", "trash"].includes(item.status) && item.permissions?.delete;
    },
    supportsBulk: true,
    hideModalHeader: true,
    modalFocusOnMount: "firstContentElement",
    RenderModal: ({ items, closeModal: closeModal2, onActionPerformed }) => {
      const [isBusy, setIsBusy] = (0, import_element16.useState)(false);
      const { createSuccessNotice, createErrorNotice } = (0, import_data16.useDispatch)(import_notices9.store);
      const { deleteEntityRecord } = (0, import_data16.useDispatch)(import_core_data15.store);
      return /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(import_components17.__experimentalVStack, { spacing: "5", children: [
        /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(import_components17.__experimentalText, { children: items.length === 1 ? (0, import_i18n42.sprintf)(
          // translators: %s: The item's title.
          (0, import_i18n42.__)(
            'Are you sure you want to move "%s" to the trash?'
          ),
          getItemTitle(items[0])
        ) : (0, import_i18n42.sprintf)(
          // translators: %d: The number of items (2 or more).
          (0, import_i18n42._n)(
            "Are you sure you want to move %d item to the trash ?",
            "Are you sure you want to move %d items to the trash ?",
            items.length
          ),
          items.length
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime75.jsxs)(import_components17.__experimentalHStack, { justify: "right", children: [
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
            import_components17.Button,
            {
              __next40pxDefaultSize: true,
              variant: "tertiary",
              onClick: closeModal2,
              disabled: isBusy,
              accessibleWhenDisabled: true,
              children: (0, import_i18n42.__)("Cancel")
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime75.jsx)(
            import_components17.Button,
            {
              __next40pxDefaultSize: true,
              variant: "primary",
              onClick: async () => {
                setIsBusy(true);
                const promiseResult = await Promise.allSettled(
                  items.map(
                    (item) => deleteEntityRecord(
                      "postType",
                      item.type,
                      item.id.toString(),
                      {},
                      { throwOnError: true }
                    )
                  )
                );
                if (promiseResult.every(
                  ({ status }) => status === "fulfilled"
                )) {
                  let successMessage;
                  if (promiseResult.length === 1) {
                    successMessage = (0, import_i18n42.sprintf)(
                      /* translators: %s: The item's title. */
                      (0, import_i18n42.__)('"%s" moved to the trash.'),
                      getItemTitle(items[0])
                    );
                  } else {
                    successMessage = (0, import_i18n42.sprintf)(
                      /* translators: %d: The number of items. */
                      (0, import_i18n42._n)(
                        "%d item moved to the trash.",
                        "%d items moved to the trash.",
                        items.length
                      ),
                      items.length
                    );
                  }
                  createSuccessNotice(successMessage, {
                    type: "snackbar",
                    id: "move-to-trash-action"
                  });
                } else {
                  let errorMessage;
                  if (promiseResult.length === 1) {
                    const typedError = promiseResult[0];
                    if (typedError.reason?.message) {
                      errorMessage = typedError.reason.message;
                    } else {
                      errorMessage = (0, import_i18n42.__)(
                        "An error occurred while moving the item to the trash."
                      );
                    }
                  } else {
                    const errorMessages = /* @__PURE__ */ new Set();
                    const failedPromises = promiseResult.filter(
                      ({ status }) => status === "rejected"
                    );
                    for (const failedPromise of failedPromises) {
                      const typedError = failedPromise;
                      if (typedError.reason?.message) {
                        errorMessages.add(
                          typedError.reason.message
                        );
                      }
                    }
                    if (errorMessages.size === 0) {
                      errorMessage = (0, import_i18n42.__)(
                        "An error occurred while moving the items to the trash."
                      );
                    } else if (errorMessages.size === 1) {
                      errorMessage = (0, import_i18n42.sprintf)(
                        /* translators: %s: an error message */
                        (0, import_i18n42.__)(
                          "An error occurred while moving the item to the trash: %s"
                        ),
                        [...errorMessages][0]
                      );
                    } else {
                      errorMessage = (0, import_i18n42.sprintf)(
                        /* translators: %s: a list of comma separated error messages */
                        (0, import_i18n42.__)(
                          "Some errors occurred while moving the items to the trash: %s"
                        ),
                        [...errorMessages].join(",")
                      );
                    }
                  }
                  createErrorNotice(errorMessage, {
                    type: "snackbar"
                  });
                }
                if (onActionPerformed) {
                  onActionPerformed(items);
                }
                setIsBusy(false);
                closeModal2?.();
              },
              isBusy,
              disabled: isBusy,
              accessibleWhenDisabled: true,
              children: (0, import_i18n42._x)("Trash", "verb")
            }
          )
        ] })
      ] });
    }
  };
  var trash_post_default = trashPost2;

  // packages/fields/build-module/actions/delete-post.js
  var import_jsx_runtime76 = __toESM(require_jsx_runtime());
  var import_i18n43 = __toESM(require_i18n());
  var import_element17 = __toESM(require_element());
  var import_components18 = __toESM(require_components());
  var import_patterns4 = __toESM(require_patterns());
  var import_html_entities6 = __toESM(require_html_entities());

  // packages/fields/build-module/mutation/index.js
  var import_notices10 = __toESM(require_notices());
  var import_core_data16 = __toESM(require_core_data());
  var import_data17 = __toESM(require_data());
  function getErrorMessagesFromPromises(allSettledResults) {
    const errorMessages = /* @__PURE__ */ new Set();
    if (allSettledResults.length === 1) {
      const typedError = allSettledResults[0];
      if (typedError.reason?.message) {
        errorMessages.add(typedError.reason.message);
      }
    } else {
      const failedPromises = allSettledResults.filter(
        ({ status }) => status === "rejected"
      );
      for (const failedPromise of failedPromises) {
        const typedError = failedPromise;
        if (typedError.reason?.message) {
          errorMessages.add(typedError.reason.message);
        }
      }
    }
    return errorMessages;
  }
  var deletePostWithNotices = async (posts, notice, callbacks) => {
    const { createSuccessNotice, createErrorNotice } = (0, import_data17.dispatch)(import_notices10.store);
    const { deleteEntityRecord } = (0, import_data17.dispatch)(import_core_data16.store);
    const allSettledResults = await Promise.allSettled(
      posts.map((post) => {
        return deleteEntityRecord(
          "postType",
          post.type,
          post.id,
          { force: true },
          { throwOnError: true }
        );
      })
    );
    if (allSettledResults.every(({ status }) => status === "fulfilled")) {
      let successMessage;
      if (allSettledResults.length === 1) {
        successMessage = notice.success.messages.getMessage(posts[0]);
      } else {
        successMessage = notice.success.messages.getBatchMessage(posts);
      }
      createSuccessNotice(successMessage, {
        type: notice.success.type ?? "snackbar",
        id: notice.success.id
      });
      callbacks.onActionPerformed?.(posts);
    } else {
      const errorMessages = getErrorMessagesFromPromises(allSettledResults);
      let errorMessage = "";
      if (allSettledResults.length === 1) {
        errorMessage = notice.error.messages.getMessage(errorMessages);
      } else {
        errorMessage = notice.error.messages.getBatchMessage(errorMessages);
      }
      createErrorNotice(errorMessage, {
        type: notice.error.type ?? "snackbar",
        id: notice.error.id
      });
      callbacks.onActionError?.();
    }
  };

  // packages/fields/build-module/actions/delete-post.js
  var { PATTERN_TYPES: PATTERN_TYPES3 } = unlock2(import_patterns4.privateApis);
  var deletePostAction = {
    id: "delete-post",
    label: (0, import_i18n43.__)("Delete"),
    isPrimary: true,
    icon: trash_default,
    isEligible(post) {
      if (isTemplateOrTemplatePart(post)) {
        return isTemplateRemovable(post);
      }
      return post.type === PATTERN_TYPES3.user;
    },
    supportsBulk: true,
    hideModalHeader: true,
    modalFocusOnMount: "firstContentElement",
    RenderModal: ({ items, closeModal: closeModal2, onActionPerformed }) => {
      const [isBusy, setIsBusy] = (0, import_element17.useState)(false);
      const isResetting = items.every(
        (item) => isTemplateOrTemplatePart(item) && item?.has_theme_file
      );
      return /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)(import_components18.__experimentalVStack, { spacing: "5", children: [
        /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(import_components18.__experimentalText, { children: items.length > 1 ? (0, import_i18n43.sprintf)(
          // translators: %d: number of items to delete.
          (0, import_i18n43._n)(
            "Delete %d item?",
            "Delete %d items?",
            items.length
          ),
          items.length
        ) : (0, import_i18n43.sprintf)(
          // translators: %s: The template or template part's title
          (0, import_i18n43._x)('Delete "%s"?', "template part"),
          getItemTitle(items[0])
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime76.jsxs)(import_components18.__experimentalHStack, { justify: "right", children: [
          /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
            import_components18.Button,
            {
              variant: "tertiary",
              onClick: closeModal2,
              disabled: isBusy,
              accessibleWhenDisabled: true,
              __next40pxDefaultSize: true,
              children: (0, import_i18n43.__)("Cancel")
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime76.jsx)(
            import_components18.Button,
            {
              variant: "primary",
              onClick: async () => {
                setIsBusy(true);
                const notice = {
                  success: {
                    messages: {
                      getMessage: (item) => {
                        return isResetting ? (0, import_i18n43.sprintf)(
                          /* translators: %s: The template/part's name. */
                          (0, import_i18n43.__)('"%s" reset.'),
                          (0, import_html_entities6.decodeEntities)(
                            getItemTitle(item)
                          )
                        ) : (0, import_i18n43.sprintf)(
                          /* translators: %s: The template/part's name. */
                          (0, import_i18n43._x)(
                            '"%s" deleted.',
                            "template part"
                          ),
                          (0, import_html_entities6.decodeEntities)(
                            getItemTitle(item)
                          )
                        );
                      },
                      getBatchMessage: () => {
                        return isResetting ? (0, import_i18n43.__)("Items reset.") : (0, import_i18n43.__)("Items deleted.");
                      }
                    }
                  },
                  error: {
                    messages: {
                      getMessage: (error) => {
                        if (error.size === 1) {
                          return [...error][0];
                        }
                        return isResetting ? (0, import_i18n43.__)(
                          "An error occurred while reverting the item."
                        ) : (0, import_i18n43.__)(
                          "An error occurred while deleting the item."
                        );
                      },
                      getBatchMessage: (errors) => {
                        if (errors.size === 0) {
                          return isResetting ? (0, import_i18n43.__)(
                            "An error occurred while reverting the items."
                          ) : (0, import_i18n43.__)(
                            "An error occurred while deleting the items."
                          );
                        }
                        if (errors.size === 1) {
                          return isResetting ? (0, import_i18n43.sprintf)(
                            /* translators: %s: an error message */
                            (0, import_i18n43.__)(
                              "An error occurred while reverting the items: %s"
                            ),
                            [...errors][0]
                          ) : (0, import_i18n43.sprintf)(
                            /* translators: %s: an error message */
                            (0, import_i18n43.__)(
                              "An error occurred while deleting the items: %s"
                            ),
                            [...errors][0]
                          );
                        }
                        return isResetting ? (0, import_i18n43.sprintf)(
                          /* translators: %s: a list of comma separated error messages */
                          (0, import_i18n43.__)(
                            "Some errors occurred while reverting the items: %s"
                          ),
                          [...errors].join(
                            ","
                          )
                        ) : (0, import_i18n43.sprintf)(
                          /* translators: %s: a list of comma separated error messages */
                          (0, import_i18n43.__)(
                            "Some errors occurred while deleting the items: %s"
                          ),
                          [...errors].join(
                            ","
                          )
                        );
                      }
                    }
                  }
                };
                await deletePostWithNotices(items, notice, {
                  onActionPerformed
                });
                setIsBusy(false);
                closeModal2?.();
              },
              isBusy,
              disabled: isBusy,
              accessibleWhenDisabled: true,
              __next40pxDefaultSize: true,
              children: (0, import_i18n43.__)("Delete")
            }
          )
        ] })
      ] });
    }
  };
  var delete_post_default = deletePostAction;

  // packages/fields/build-module/actions/duplicate-template-part.js
  var import_jsx_runtime78 = __toESM(require_jsx_runtime());
  var import_data20 = __toESM(require_data());
  var import_i18n45 = __toESM(require_i18n());
  var import_notices12 = __toESM(require_notices());
  var import_element19 = __toESM(require_element());
  var import_blocks6 = __toESM(require_blocks());

  // packages/fields/build-module/components/create-template-part-modal/index.js
  var import_jsx_runtime77 = __toESM(require_jsx_runtime());
  var import_components19 = __toESM(require_components());
  var import_compose4 = __toESM(require_compose());
  var import_core_data18 = __toESM(require_core_data());
  var import_data19 = __toESM(require_data());
  var import_element18 = __toESM(require_element());
  var import_i18n44 = __toESM(require_i18n());
  var import_notices11 = __toESM(require_notices());
  var import_blocks5 = __toESM(require_blocks());

  // packages/fields/build-module/components/create-template-part-modal/utils.js
  var import_data18 = __toESM(require_data());
  var import_core_data17 = __toESM(require_core_data());
  var useExistingTemplateParts = () => {
    return (0, import_data18.useSelect)(
      (select4) => select4(import_core_data17.store).getEntityRecords(
        "postType",
        "wp_template_part",
        {
          per_page: -1
        }
      ),
      []
    ) ?? [];
  };
  var getUniqueTemplatePartTitle = (title, templateParts) => {
    const lowercaseTitle = title.toLowerCase();
    const existingTitles = templateParts.map(
      (templatePart) => templatePart.title.rendered.toLowerCase()
    );
    if (!existingTitles.includes(lowercaseTitle)) {
      return title;
    }
    let suffix = 2;
    while (existingTitles.includes(`${lowercaseTitle} ${suffix}`)) {
      suffix++;
    }
    return `${title} ${suffix}`;
  };
  var getCleanTemplatePartSlug = (title) => {
    return paramCase(title).replace(/[^\w-]+/g, "") || "wp-custom-part";
  };

  // packages/fields/build-module/components/create-template-part-modal/index.js
  function getAreaRadioId(value, instanceId) {
    return `fields-create-template-part-modal__area-option-${value}-${instanceId}`;
  }
  function getAreaRadioDescriptionId(value, instanceId) {
    return `fields-create-template-part-modal__area-option-description-${value}-${instanceId}`;
  }
  function CreateTemplatePartModal({
    modalTitle,
    ...restProps
  }) {
    const defaultModalTitle = (0, import_data19.useSelect)(
      (select4) => select4(import_core_data18.store).getPostType("wp_template_part")?.labels?.add_new_item,
      []
    );
    return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
      import_components19.Modal,
      {
        title: modalTitle || defaultModalTitle,
        onRequestClose: restProps.closeModal,
        overlayClassName: "fields-create-template-part-modal",
        focusOnMount: "firstContentElement",
        size: "medium",
        children: /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(CreateTemplatePartModalContents, { ...restProps })
      }
    );
  }
  var getTemplatePartIcon2 = (iconName) => {
    if ("header" === iconName) {
      return header_default;
    } else if ("footer" === iconName) {
      return footer_default;
    } else if ("sidebar" === iconName) {
      return sidebar_default;
    }
    return symbol_filled_default;
  };
  function CreateTemplatePartModalContents({
    defaultArea = "uncategorized",
    blocks = [],
    confirmLabel = (0, import_i18n44.__)("Add"),
    closeModal: closeModal2,
    onCreate,
    onError,
    defaultTitle = ""
  }) {
    const { createErrorNotice } = (0, import_data19.useDispatch)(import_notices11.store);
    const { saveEntityRecord } = (0, import_data19.useDispatch)(import_core_data18.store);
    const existingTemplateParts = useExistingTemplateParts();
    const [title, setTitle] = (0, import_element18.useState)(defaultTitle);
    const [area, setArea] = (0, import_element18.useState)(defaultArea);
    const [isSubmitting, setIsSubmitting] = (0, import_element18.useState)(false);
    const instanceId = (0, import_compose4.useInstanceId)(CreateTemplatePartModal);
    const defaultTemplatePartAreas = (0, import_data19.useSelect)(
      (select4) => select4(import_core_data18.store).getCurrentTheme()?.default_template_part_areas,
      []
    );
    async function createTemplatePart() {
      if (!title || isSubmitting) {
        return;
      }
      try {
        setIsSubmitting(true);
        const uniqueTitle = getUniqueTemplatePartTitle(
          title,
          existingTemplateParts
        );
        const cleanSlug = getCleanTemplatePartSlug(uniqueTitle);
        const templatePart = await saveEntityRecord(
          "postType",
          "wp_template_part",
          {
            slug: cleanSlug,
            title: uniqueTitle,
            content: (0, import_blocks5.serialize)(blocks),
            area
          },
          { throwOnError: true }
        );
        await onCreate(templatePart);
      } catch (error) {
        const errorMessage = error instanceof Error && "code" in error && error.message && error.code !== "unknown_error" ? error.message : (0, import_i18n44.__)(
          "An error occurred while creating the template part."
        );
        createErrorNotice(errorMessage, { type: "snackbar" });
        onError?.();
      } finally {
        setIsSubmitting(false);
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
      "form",
      {
        onSubmit: async (event) => {
          event.preventDefault();
          await createTemplatePart();
        },
        children: /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)(import_components19.__experimentalVStack, { spacing: "4", children: [
          /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
            import_components19.TextControl,
            {
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true,
              label: (0, import_i18n44.__)("Name"),
              value: title,
              onChange: setTitle,
              required: true
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)("fieldset", { className: "fields-create-template-part-modal__area-fieldset", children: [
            /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(import_components19.BaseControl.VisualLabel, { as: "legend", children: (0, import_i18n44.__)("Area") }),
            /* @__PURE__ */ (0, import_jsx_runtime77.jsx)("div", { className: "fields-create-template-part-modal__area-radio-group", children: (defaultTemplatePartAreas ?? []).map(
              (item) => {
                const icon = getTemplatePartIcon2(item.icon);
                return /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)(
                  "div",
                  {
                    className: "fields-create-template-part-modal__area-radio-wrapper",
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
                        "input",
                        {
                          type: "radio",
                          id: getAreaRadioId(
                            item.area,
                            instanceId
                          ),
                          name: `fields-create-template-part-modal__area-${instanceId}`,
                          value: item.area,
                          checked: area === item.area,
                          onChange: () => {
                            setArea(item.area);
                          },
                          "aria-describedby": getAreaRadioDescriptionId(
                            item.area,
                            instanceId
                          )
                        }
                      ),
                      /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
                        import_components19.Icon,
                        {
                          icon,
                          className: "fields-create-template-part-modal__area-radio-icon"
                        }
                      ),
                      /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
                        "label",
                        {
                          htmlFor: getAreaRadioId(
                            item.area,
                            instanceId
                          ),
                          className: "fields-create-template-part-modal__area-radio-label",
                          children: item.label
                        }
                      ),
                      /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
                        import_components19.Icon,
                        {
                          icon: check_default,
                          className: "fields-create-template-part-modal__area-radio-checkmark"
                        }
                      ),
                      /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
                        "p",
                        {
                          className: "fields-create-template-part-modal__area-radio-description",
                          id: getAreaRadioDescriptionId(
                            item.area,
                            instanceId
                          ),
                          children: item.description
                        }
                      )
                    ]
                  },
                  item.area
                );
              }
            ) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime77.jsxs)(import_components19.__experimentalHStack, { justify: "right", children: [
            /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
              import_components19.Button,
              {
                __next40pxDefaultSize: true,
                variant: "tertiary",
                onClick: () => {
                  closeModal2();
                },
                children: (0, import_i18n44.__)("Cancel")
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime77.jsx)(
              import_components19.Button,
              {
                __next40pxDefaultSize: true,
                variant: "primary",
                type: "submit",
                "aria-disabled": !title || isSubmitting,
                isBusy: isSubmitting,
                children: confirmLabel
              }
            )
          ] })
        ] })
      }
    );
  }

  // packages/fields/build-module/actions/duplicate-template-part.js
  var duplicateTemplatePart = {
    id: "duplicate-template-part",
    label: (0, import_i18n45._x)("Duplicate", "action label"),
    isEligible: (item) => item.type === "wp_template_part",
    modalHeader: (0, import_i18n45._x)("Duplicate template part", "action label"),
    modalFocusOnMount: "firstContentElement",
    RenderModal: ({ items, closeModal: closeModal2 }) => {
      const [item] = items;
      const blocks = (0, import_element19.useMemo)(() => {
        return item.blocks ?? (0, import_blocks6.parse)(
          typeof item.content === "string" ? item.content : item.content.raw,
          {
            __unstableSkipMigrationLogs: true
          }
        );
      }, [item.content, item.blocks]);
      const { createSuccessNotice } = (0, import_data20.useDispatch)(import_notices12.store);
      function onTemplatePartSuccess(templatePart) {
        createSuccessNotice(
          (0, import_i18n45.sprintf)(
            // translators: %s: The new template part's title e.g. 'Call to action (copy)'.
            (0, import_i18n45._x)('"%s" duplicated.', "template part"),
            getItemTitle(templatePart)
          ),
          { type: "snackbar", id: "edit-site-patterns-success" }
        );
        closeModal2?.();
      }
      return /* @__PURE__ */ (0, import_jsx_runtime78.jsx)(
        CreateTemplatePartModalContents,
        {
          blocks,
          defaultArea: item.area,
          defaultTitle: (0, import_i18n45.sprintf)(
            /* translators: %s: Existing template part title */
            (0, import_i18n45._x)("%s (Copy)", "template part"),
            getItemTitle(item)
          ),
          onCreate: onTemplatePartSuccess,
          onError: closeModal2,
          confirmLabel: (0, import_i18n45._x)("Duplicate", "action label"),
          closeModal: closeModal2 ?? (() => {
          })
        }
      );
    }
  };
  var duplicate_template_part_default = duplicateTemplatePart;

  // packages/editor/build-module/dataviews/fields/content-preview/index.js
  var import_i18n61 = __toESM(require_i18n());

  // packages/editor/build-module/dataviews/fields/content-preview/content-preview-view.js
  var import_jsx_runtime102 = __toESM(require_jsx_runtime());
  var import_i18n60 = __toESM(require_i18n());
  var import_block_editor20 = __toESM(require_block_editor());
  var import_data48 = __toESM(require_data());
  var import_core_data31 = __toESM(require_core_data());

  // packages/editor/build-module/components/provider/index.js
  var import_jsx_runtime101 = __toESM(require_jsx_runtime());
  var import_element37 = __toESM(require_element());
  var import_data47 = __toESM(require_data());
  var import_i18n59 = __toESM(require_i18n());
  var import_core_data30 = __toESM(require_core_data());
  var import_block_editor19 = __toESM(require_block_editor());
  var import_notices15 = __toESM(require_notices());
  var import_patterns7 = __toESM(require_patterns());
  var import_blocks11 = __toESM(require_blocks());

  // packages/editor/build-module/components/provider/with-registry-provider.js
  var import_jsx_runtime79 = __toESM(require_jsx_runtime());
  var import_element20 = __toESM(require_element());
  var import_data21 = __toESM(require_data());
  var import_compose5 = __toESM(require_compose());
  var import_block_editor5 = __toESM(require_block_editor());
  function getSubRegistry(subRegistries, registry, useSubRegistry) {
    if (!useSubRegistry) {
      return registry;
    }
    let subRegistry = subRegistries.get(registry);
    if (!subRegistry) {
      subRegistry = (0, import_data21.createRegistry)(
        {
          "core/block-editor": import_block_editor5.storeConfig
        },
        registry
      );
      subRegistry.registerStore("core/editor", storeConfig);
      subRegistries.set(registry, subRegistry);
    }
    return subRegistry;
  }
  var withRegistryProvider = (0, import_compose5.createHigherOrderComponent)(
    (WrappedComponent) => ({ useSubRegistry = true, ...props }) => {
      const registry = (0, import_data21.useRegistry)();
      const [subRegistries] = (0, import_element20.useState)(() => /* @__PURE__ */ new WeakMap());
      const subRegistry = getSubRegistry(
        subRegistries,
        registry,
        useSubRegistry
      );
      if (subRegistry === registry) {
        return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(WrappedComponent, { registry, ...props });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(import_data21.RegistryProvider, { value: subRegistry, children: /* @__PURE__ */ (0, import_jsx_runtime79.jsx)(WrappedComponent, { registry: subRegistry, ...props }) });
    },
    "withRegistryProvider"
  );
  var with_registry_provider_default = withRegistryProvider;

  // packages/editor/build-module/components/provider/use-block-editor-settings.js
  var import_element22 = __toESM(require_element());
  var import_data25 = __toESM(require_data());
  var import_core_data22 = __toESM(require_core_data());
  var import_i18n47 = __toESM(require_i18n());
  var import_preferences3 = __toESM(require_preferences());
  var import_compose6 = __toESM(require_compose());
  var import_blocks7 = __toESM(require_blocks());
  var import_block_editor7 = __toESM(require_block_editor());

  // packages/editor/build-module/components/media-categories/index.js
  var import_i18n46 = __toESM(require_i18n());
  var import_data22 = __toESM(require_data());
  var import_html_entities7 = __toESM(require_html_entities());
  var import_core_data19 = __toESM(require_core_data());
  var getExternalLink = (url, text) => `<a ${getExternalLinkAttributes(url)}>${text}</a>`;
  var getExternalLinkAttributes = (url) => `href="${url}" target="_blank" rel="noreferrer noopener"`;
  var getOpenverseLicense = (license, licenseVersion) => {
    let licenseName = license.trim();
    if (license !== "pdm") {
      licenseName = license.toUpperCase().replace("SAMPLING", "Sampling");
    }
    if (licenseVersion) {
      licenseName += ` ${licenseVersion}`;
    }
    if (!["pdm", "cc0"].includes(license)) {
      licenseName = `CC ${licenseName}`;
    }
    return licenseName;
  };
  var getOpenverseCaption = (item) => {
    const {
      title,
      foreign_landing_url: foreignLandingUrl,
      creator,
      creator_url: creatorUrl,
      license,
      license_version: licenseVersion,
      license_url: licenseUrl
    } = item;
    const fullLicense = getOpenverseLicense(license, licenseVersion);
    const _creator = (0, import_html_entities7.decodeEntities)(creator);
    let _caption;
    if (_creator) {
      _caption = title ? (0, import_i18n46.sprintf)(
        // translators: %1s: Title of a media work from Openverse; %2$s: Name of the work's creator; %3s: Work's licence e.g: "CC0 1.0".
        (0, import_i18n46._x)('"%1$s" by %2$s/ %3$s', "caption"),
        getExternalLink(
          foreignLandingUrl,
          (0, import_html_entities7.decodeEntities)(title)
        ),
        creatorUrl ? getExternalLink(creatorUrl, _creator) : _creator,
        licenseUrl ? getExternalLink(
          `${licenseUrl}?ref=openverse`,
          fullLicense
        ) : fullLicense
      ) : (0, import_i18n46.sprintf)(
        // translators: %1s: Link attributes for a given Openverse media work; %2s: Name of the work's creator; %3s: Works's licence e.g: "CC0 1.0".
        (0, import_i18n46._x)("<a %1$s>Work</a> by %2$s/ %3$s", "caption"),
        getExternalLinkAttributes(foreignLandingUrl),
        creatorUrl ? getExternalLink(creatorUrl, _creator) : _creator,
        licenseUrl ? getExternalLink(
          `${licenseUrl}?ref=openverse`,
          fullLicense
        ) : fullLicense
      );
    } else {
      _caption = title ? (0, import_i18n46.sprintf)(
        // translators: %1s: Title of a media work from Openverse; %2s: Work's licence e.g: "CC0 1.0".
        (0, import_i18n46._x)('"%1$s"/ %2$s', "caption"),
        getExternalLink(
          foreignLandingUrl,
          (0, import_html_entities7.decodeEntities)(title)
        ),
        licenseUrl ? getExternalLink(
          `${licenseUrl}?ref=openverse`,
          fullLicense
        ) : fullLicense
      ) : (0, import_i18n46.sprintf)(
        // translators: %1s: Link attributes for a given Openverse media work; %2s: Works's licence e.g: "CC0 1.0".
        (0, import_i18n46._x)("<a %1$s>Work</a>/ %2$s", "caption"),
        getExternalLinkAttributes(foreignLandingUrl),
        licenseUrl ? getExternalLink(
          `${licenseUrl}?ref=openverse`,
          fullLicense
        ) : fullLicense
      );
    }
    return _caption.replace(/\s{2}/g, " ");
  };
  var coreMediaFetch = async (query = {}) => {
    const mediaItems = await (0, import_data22.resolveSelect)(import_core_data19.store).getEntityRecords(
      "postType",
      "attachment",
      {
        ...query,
        orderBy: !!query?.search ? "relevance" : "date"
      }
    );
    return mediaItems.map((mediaItem) => ({
      ...mediaItem,
      alt: mediaItem.alt_text,
      url: mediaItem.source_url,
      previewUrl: mediaItem.media_details?.sizes?.medium?.source_url,
      caption: mediaItem.caption?.raw
    }));
  };
  var inserterMediaCategories = [
    {
      name: "images",
      labels: {
        name: (0, import_i18n46.__)("Images"),
        search_items: (0, import_i18n46.__)("Search images")
      },
      mediaType: "image",
      async fetch(query = {}) {
        return coreMediaFetch({ ...query, media_type: "image" });
      }
    },
    {
      name: "videos",
      labels: {
        name: (0, import_i18n46.__)("Videos"),
        search_items: (0, import_i18n46.__)("Search videos")
      },
      mediaType: "video",
      async fetch(query = {}) {
        return coreMediaFetch({ ...query, media_type: "video" });
      }
    },
    {
      name: "audio",
      labels: {
        name: (0, import_i18n46.__)("Audio"),
        search_items: (0, import_i18n46.__)("Search audio")
      },
      mediaType: "audio",
      async fetch(query = {}) {
        return coreMediaFetch({ ...query, media_type: "audio" });
      }
    },
    {
      name: "openverse",
      labels: {
        name: (0, import_i18n46.__)("Openverse"),
        search_items: (0, import_i18n46.__)("Search Openverse")
      },
      mediaType: "image",
      async fetch(query = {}) {
        const defaultArgs = {
          mature: false,
          excluded_source: "flickr,inaturalist,wikimedia",
          license: "pdm,cc0"
        };
        const finalQuery = { ...query, ...defaultArgs };
        const mapFromInserterMediaRequest = {
          per_page: "page_size",
          search: "q"
        };
        const url = new URL("https://api.openverse.org/v1/images/");
        Object.entries(finalQuery).forEach(([key, value]) => {
          const queryKey = mapFromInserterMediaRequest[key] || key;
          url.searchParams.set(queryKey, value);
        });
        const response = await window.fetch(url, {
          headers: {
            "User-Agent": "WordPress/inserter-media-fetch"
          }
        });
        const jsonResponse = await response.json();
        const results = jsonResponse.results;
        return results.map((result) => ({
          ...result,
          // This is a temp solution for better titles, until Openverse API
          // completes the cleaning up of some titles of their upstream data.
          title: result.title?.toLowerCase().startsWith("file:") ? result.title.slice(5) : result.title,
          sourceId: result.id,
          id: void 0,
          caption: getOpenverseCaption(result),
          previewUrl: result.thumbnail
        }));
      },
      getReportUrl: ({ sourceId }) => `https://wordpress.org/openverse/image/${sourceId}/report/`,
      isExternalResource: true
    }
  ];
  var media_categories_default = inserterMediaCategories;

  // node_modules/uuid/dist/esm-browser/rng.js
  var getRandomValues;
  var rnds8 = new Uint8Array(16);
  function rng() {
    if (!getRandomValues) {
      getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
      if (!getRandomValues) {
        throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
      }
    }
    return getRandomValues(rnds8);
  }

  // node_modules/uuid/dist/esm-browser/stringify.js
  var byteToHex = [];
  for (let i2 = 0; i2 < 256; ++i2) {
    byteToHex.push((i2 + 256).toString(16).slice(1));
  }
  function unsafeStringify(arr, offset3 = 0) {
    return byteToHex[arr[offset3 + 0]] + byteToHex[arr[offset3 + 1]] + byteToHex[arr[offset3 + 2]] + byteToHex[arr[offset3 + 3]] + "-" + byteToHex[arr[offset3 + 4]] + byteToHex[arr[offset3 + 5]] + "-" + byteToHex[arr[offset3 + 6]] + byteToHex[arr[offset3 + 7]] + "-" + byteToHex[arr[offset3 + 8]] + byteToHex[arr[offset3 + 9]] + "-" + byteToHex[arr[offset3 + 10]] + byteToHex[arr[offset3 + 11]] + byteToHex[arr[offset3 + 12]] + byteToHex[arr[offset3 + 13]] + byteToHex[arr[offset3 + 14]] + byteToHex[arr[offset3 + 15]];
  }

  // node_modules/uuid/dist/esm-browser/native.js
  var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
  var native_default = {
    randomUUID
  };

  // node_modules/uuid/dist/esm-browser/v4.js
  function v4(options, buf, offset3) {
    if (native_default.randomUUID && !buf && !options) {
      return native_default.randomUUID();
    }
    options = options || {};
    const rnds = options.random || (options.rng || rng)();
    rnds[6] = rnds[6] & 15 | 64;
    rnds[8] = rnds[8] & 63 | 128;
    if (buf) {
      offset3 = offset3 || 0;
      for (let i2 = 0; i2 < 16; ++i2) {
        buf[offset3 + i2] = rnds[i2];
      }
      return buf;
    }
    return unsafeStringify(rnds);
  }
  var v4_default = v4;

  // packages/editor/build-module/utils/media-upload/index.js
  var import_data23 = __toESM(require_data());
  var import_core_data20 = __toESM(require_core_data());
  var import_media_utils2 = __toESM(require_media_utils());
  var noop = () => {
  };
  function mediaUpload({
    additionalData = {},
    allowedTypes,
    filesList,
    maxUploadFileSize,
    onError = noop,
    onFileChange,
    onSuccess,
    multiple = true
  }) {
    const { receiveEntityRecords } = (0, import_data23.dispatch)(import_core_data20.store);
    const { getCurrentPost: getCurrentPost2, getEditorSettings: getEditorSettings2 } = (0, import_data23.select)(store);
    const {
      lockPostAutosaving: lockPostAutosaving2,
      unlockPostAutosaving: unlockPostAutosaving2,
      lockPostSaving: lockPostSaving2,
      unlockPostSaving: unlockPostSaving2
    } = (0, import_data23.dispatch)(store);
    const wpAllowedMimeTypes = getEditorSettings2().allowedMimeTypes;
    const lockKey = `image-upload-${v4_default()}`;
    let imageIsUploading = false;
    maxUploadFileSize = maxUploadFileSize || getEditorSettings2().maxUploadFileSize;
    const currentPost = getCurrentPost2();
    const currentPostId = typeof currentPost?.id === "number" ? currentPost.id : currentPost?.wp_id;
    const setSaveLock = () => {
      lockPostSaving2(lockKey);
      lockPostAutosaving2(lockKey);
      imageIsUploading = true;
    };
    const postData = currentPostId ? { post: currentPostId } : {};
    const clearSaveLock = () => {
      unlockPostSaving2(lockKey);
      unlockPostAutosaving2(lockKey);
      imageIsUploading = false;
    };
    (0, import_media_utils2.uploadMedia)({
      allowedTypes,
      filesList,
      onFileChange: (file) => {
        if (!imageIsUploading) {
          setSaveLock();
        } else {
          clearSaveLock();
        }
        onFileChange?.(file);
        const entityFiles = file.filter((_file) => _file?.id);
        if (entityFiles?.length) {
          const invalidateCache = true;
          receiveEntityRecords(
            "postType",
            "attachment",
            entityFiles,
            void 0,
            invalidateCache
          );
        }
      },
      onSuccess,
      additionalData: {
        ...postData,
        ...additionalData
      },
      maxUploadFileSize,
      onError: ({ message }) => {
        clearSaveLock();
        onError(message);
      },
      wpAllowedMimeTypes,
      multiple
    });
  }

  // packages/editor/build-module/utils/url.js
  var import_url7 = __toESM(require_url());
  var import_deprecated3 = __toESM(require_deprecated());
  function cleanForSlug3(string) {
    (0, import_deprecated3.default)("wp.editor.cleanForSlug", {
      since: "12.7",
      plugin: "Gutenberg",
      alternative: "wp.url.cleanForSlug"
    });
    return (0, import_url7.cleanForSlug)(string);
  }

  // packages/editor/build-module/utils/media-sideload/index.js
  var import_media_utils3 = __toESM(require_media_utils());
  var { sideloadMedia: mediaSideload } = unlock(import_media_utils3.privateApis);
  var media_sideload_default = mediaSideload;

  // packages/editor/build-module/components/global-styles-provider/index.js
  var import_jsx_runtime80 = __toESM(require_jsx_runtime());
  var import_deepmerge = __toESM(require_cjs());

  // node_modules/is-plain-object/dist/is-plain-object.mjs
  function isObject(o2) {
    return Object.prototype.toString.call(o2) === "[object Object]";
  }
  function isPlainObject(o2) {
    var ctor, prot;
    if (isObject(o2) === false) return false;
    ctor = o2.constructor;
    if (ctor === void 0) return true;
    prot = ctor.prototype;
    if (isObject(prot) === false) return false;
    if (prot.hasOwnProperty("isPrototypeOf") === false) {
      return false;
    }
    return true;
  }

  // packages/editor/build-module/components/global-styles-provider/index.js
  var import_block_editor6 = __toESM(require_block_editor());
  var import_core_data21 = __toESM(require_core_data());
  var import_data24 = __toESM(require_data());
  var import_element21 = __toESM(require_element());
  var { GlobalStylesContext, cleanEmptyObject } = unlock(
    import_block_editor6.privateApis
  );
  function mergeBaseAndUserConfigs(base, user) {
    return (0, import_deepmerge.default)(base, user, {
      /*
       * We only pass as arrays the presets,
       * in which case we want the new array of values
       * to override the old array (no merging).
       */
      isMergeableObject: isPlainObject,
      /*
       * Exceptions to the above rule.
       * Background images should be replaced, not merged,
       * as they themselves are specific object definitions for the style.
       */
      customMerge: (key) => {
        if (key === "backgroundImage") {
          return (baseConfig, userConfig) => userConfig;
        }
        return void 0;
      }
    });
  }
  function useGlobalStylesUserConfig() {
    const { globalStylesId, isReady: isReady2, settings, styles, _links } = (0, import_data24.useSelect)(
      (select4) => {
        const {
          getEntityRecord,
          getEditedEntityRecord: getEditedEntityRecord2,
          hasFinishedResolution,
          canUser
        } = select4(import_core_data21.store);
        const _globalStylesId = select4(import_core_data21.store).__experimentalGetCurrentGlobalStylesId();
        let record;
        const userCanEditGlobalStyles = _globalStylesId ? canUser("update", {
          kind: "root",
          name: "globalStyles",
          id: _globalStylesId
        }) : null;
        if (_globalStylesId && /*
        * Test that the OPTIONS request for user capabilities is complete
        * before fetching the global styles entity record.
        * This is to avoid fetching the global styles entity unnecessarily.
        */
        typeof userCanEditGlobalStyles === "boolean") {
          if (userCanEditGlobalStyles) {
            record = getEditedEntityRecord2(
              "root",
              "globalStyles",
              _globalStylesId
            );
          } else {
            record = getEntityRecord(
              "root",
              "globalStyles",
              _globalStylesId,
              { context: "view" }
            );
          }
        }
        let hasResolved = false;
        if (hasFinishedResolution(
          "__experimentalGetCurrentGlobalStylesId"
        )) {
          if (_globalStylesId) {
            hasResolved = userCanEditGlobalStyles ? hasFinishedResolution("getEditedEntityRecord", [
              "root",
              "globalStyles",
              _globalStylesId
            ]) : hasFinishedResolution("getEntityRecord", [
              "root",
              "globalStyles",
              _globalStylesId,
              { context: "view" }
            ]);
          } else {
            hasResolved = true;
          }
        }
        return {
          globalStylesId: _globalStylesId,
          isReady: hasResolved,
          settings: record?.settings,
          styles: record?.styles,
          _links: record?._links
        };
      },
      []
    );
    const { getEditedEntityRecord } = (0, import_data24.useSelect)(import_core_data21.store);
    const { editEntityRecord } = (0, import_data24.useDispatch)(import_core_data21.store);
    const config = (0, import_element21.useMemo)(() => {
      return {
        settings: settings ?? {},
        styles: styles ?? {},
        _links: _links ?? {}
      };
    }, [settings, styles, _links]);
    const setConfig = (0, import_element21.useCallback)(
      /**
       * Set the global styles config.
       * @param {Function|Object} callbackOrObject If the callbackOrObject is a function, pass the current config to the callback so the consumer can merge values.
       *                                           Otherwise, overwrite the current config with the incoming object.
       * @param {Object}          options          Options for editEntityRecord Core selector.
       */
      (callbackOrObject, options = {}) => {
        const record = getEditedEntityRecord(
          "root",
          "globalStyles",
          globalStylesId
        );
        const currentConfig = {
          styles: record?.styles ?? {},
          settings: record?.settings ?? {},
          _links: record?._links ?? {}
        };
        const updatedConfig = typeof callbackOrObject === "function" ? callbackOrObject(currentConfig) : callbackOrObject;
        editEntityRecord(
          "root",
          "globalStyles",
          globalStylesId,
          {
            styles: cleanEmptyObject(updatedConfig.styles) || {},
            settings: cleanEmptyObject(updatedConfig.settings) || {},
            _links: cleanEmptyObject(updatedConfig._links) || {}
          },
          options
        );
      },
      [globalStylesId, editEntityRecord, getEditedEntityRecord]
    );
    return [isReady2, config, setConfig];
  }
  function useGlobalStylesBaseConfig() {
    const baseConfig = (0, import_data24.useSelect)(
      (select4) => select4(import_core_data21.store).__experimentalGetCurrentThemeBaseGlobalStyles(),
      []
    );
    return [!!baseConfig, baseConfig];
  }
  function useGlobalStylesContext() {
    const [isUserConfigReady, userConfig, setUserConfig] = useGlobalStylesUserConfig();
    const [isBaseConfigReady, baseConfig] = useGlobalStylesBaseConfig();
    const mergedConfig = (0, import_element21.useMemo)(() => {
      if (!baseConfig || !userConfig) {
        return {};
      }
      return mergeBaseAndUserConfigs(baseConfig, userConfig);
    }, [userConfig, baseConfig]);
    const context = (0, import_element21.useMemo)(() => {
      return {
        isReady: isUserConfigReady && isBaseConfigReady,
        user: userConfig,
        base: baseConfig,
        merged: mergedConfig,
        setUserConfig
      };
    }, [
      mergedConfig,
      userConfig,
      baseConfig,
      setUserConfig,
      isUserConfigReady,
      isBaseConfigReady
    ]);
    return context;
  }
  function GlobalStylesProvider({ children }) {
    const context = useGlobalStylesContext();
    if (!context.isReady) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime80.jsx)(GlobalStylesContext.Provider, { value: context, children });
  }

  // packages/editor/build-module/components/provider/use-block-editor-settings.js
  var EMPTY_OBJECT3 = {};
  function __experimentalReusableBlocksSelect(select4) {
    const { RECEIVE_INTERMEDIATE_RESULTS: RECEIVE_INTERMEDIATE_RESULTS2 } = unlock(import_core_data22.privateApis);
    const { getEntityRecords } = select4(import_core_data22.store);
    return getEntityRecords("postType", "wp_block", {
      per_page: -1,
      [RECEIVE_INTERMEDIATE_RESULTS2]: true
    });
  }
  var BLOCK_EDITOR_SETTINGS = [
    "__experimentalBlockBindingsSupportedAttributes",
    "__experimentalBlockDirectory",
    "__experimentalDiscussionSettings",
    "__experimentalFeatures",
    "__experimentalGlobalStylesBaseStyles",
    "alignWide",
    "blockInspectorTabs",
    "maxUploadFileSize",
    "allowedMimeTypes",
    "bodyPlaceholder",
    "canLockBlocks",
    "canUpdateBlockBindings",
    "capabilities",
    "clearBlockSelection",
    "codeEditingEnabled",
    "colors",
    "disableCustomColors",
    "disableCustomFontSizes",
    "disableCustomSpacingSizes",
    "disableCustomGradients",
    "disableLayoutStyles",
    "enableCustomLineHeight",
    "enableCustomSpacing",
    "enableCustomUnits",
    "enableOpenverseMediaCategory",
    "fontSizes",
    "gradients",
    "generateAnchors",
    "onNavigateToEntityRecord",
    "imageDefaultSize",
    "imageDimensions",
    "imageEditing",
    "imageSizes",
    "isPreviewMode",
    "isRTL",
    "locale",
    "maxWidth",
    "postContentAttributes",
    "postsPerPage",
    "readOnly",
    "styles",
    "titlePlaceholder",
    "supportsLayout",
    "widgetTypesToHideFromLegacyWidgetBlock",
    "__unstableHasCustomAppender",
    "__unstableResolvedAssets",
    "__unstableIsBlockBasedTheme"
  ];
  var {
    globalStylesDataKey,
    globalStylesLinksDataKey,
    selectBlockPatternsKey,
    reusableBlocksSelectKey,
    sectionRootClientIdKey,
    mediaEditKey
  } = unlock(import_block_editor7.privateApis);
  function useBlockEditorSettings(settings, postType2, postId2, renderingMode2) {
    const isLargeViewport = (0, import_compose6.useViewportMatch)("medium");
    const {
      allowRightClickOverrides,
      blockTypes,
      focusMode,
      hasFixedToolbar,
      isDistractionFree,
      keepCaretInsideBlock,
      hasUploadPermissions,
      hiddenBlockTypes,
      canUseUnfilteredHTML,
      userCanCreatePages,
      pageOnFront,
      pageForPosts,
      userPatternCategories,
      restBlockPatternCategories,
      sectionRootClientId
    } = (0, import_data25.useSelect)(
      (select4) => {
        const {
          canUser,
          getRawEntityRecord,
          getEntityRecord,
          getUserPatternCategories,
          getBlockPatternCategories
        } = select4(import_core_data22.store);
        const { get } = select4(import_preferences3.store);
        const { getBlockTypes } = select4(import_blocks7.store);
        const { getBlocksByName, getBlockAttributes: getBlockAttributes2 } = select4(import_block_editor7.store);
        const siteSettings = canUser("read", {
          kind: "root",
          name: "site"
        }) ? getEntityRecord("root", "site") : void 0;
        function getSectionRootBlock() {
          if (renderingMode2 === "template-locked") {
            return getBlocksByName("core/post-content")?.[0] ?? "";
          }
          return getBlocksByName("core/group").find(
            (clientId) => getBlockAttributes2(clientId)?.tagName === "main"
          ) ?? "";
        }
        return {
          allowRightClickOverrides: get(
            "core",
            "allowRightClickOverrides"
          ),
          blockTypes: getBlockTypes(),
          canUseUnfilteredHTML: getRawEntityRecord(
            "postType",
            postType2,
            postId2
          )?._links?.hasOwnProperty("wp:action-unfiltered-html"),
          focusMode: get("core", "focusMode"),
          hasFixedToolbar: get("core", "fixedToolbar") || !isLargeViewport,
          hiddenBlockTypes: get("core", "hiddenBlockTypes"),
          isDistractionFree: get("core", "distractionFree"),
          keepCaretInsideBlock: get("core", "keepCaretInsideBlock"),
          hasUploadPermissions: canUser("create", {
            kind: "postType",
            name: "attachment"
          }) ?? true,
          userCanCreatePages: canUser("create", {
            kind: "postType",
            name: "page"
          }),
          pageOnFront: siteSettings?.page_on_front,
          pageForPosts: siteSettings?.page_for_posts,
          userPatternCategories: getUserPatternCategories(),
          restBlockPatternCategories: getBlockPatternCategories(),
          sectionRootClientId: getSectionRootBlock()
        };
      },
      [postType2, postId2, isLargeViewport, renderingMode2]
    );
    const { merged: mergedGlobalStyles } = useGlobalStylesContext();
    const globalStylesData = mergedGlobalStyles.styles ?? EMPTY_OBJECT3;
    const globalStylesLinksData = mergedGlobalStyles._links ?? EMPTY_OBJECT3;
    const settingsBlockPatterns = settings.__experimentalAdditionalBlockPatterns ?? // WP 6.0
    settings.__experimentalBlockPatterns;
    const settingsBlockPatternCategories = settings.__experimentalAdditionalBlockPatternCategories ?? // WP 6.0
    settings.__experimentalBlockPatternCategories;
    const blockPatterns = (0, import_element22.useMemo)(
      () => [...settingsBlockPatterns || []].filter(
        ({ postTypes }) => {
          return !postTypes || Array.isArray(postTypes) && postTypes.includes(postType2);
        }
      ),
      [settingsBlockPatterns, postType2]
    );
    const blockPatternCategories = (0, import_element22.useMemo)(
      () => [
        ...settingsBlockPatternCategories || [],
        ...restBlockPatternCategories || []
      ].filter(
        (x, index2, arr) => index2 === arr.findIndex((y2) => x.name === y2.name)
      ),
      [settingsBlockPatternCategories, restBlockPatternCategories]
    );
    const { undo: undo2, setIsInserterOpened: setIsInserterOpened2 } = (0, import_data25.useDispatch)(store);
    const { editMediaEntity } = unlock((0, import_data25.useDispatch)(import_core_data22.store));
    const { saveEntityRecord } = (0, import_data25.useDispatch)(import_core_data22.store);
    const createPageEntity = (0, import_element22.useCallback)(
      (options) => {
        if (!userCanCreatePages) {
          return Promise.reject({
            message: (0, import_i18n47.__)(
              "You do not have permission to create Pages."
            )
          });
        }
        return saveEntityRecord("postType", "page", options);
      },
      [saveEntityRecord, userCanCreatePages]
    );
    const allowedBlockTypes = (0, import_element22.useMemo)(() => {
      if (hiddenBlockTypes && hiddenBlockTypes.length > 0) {
        const defaultAllowedBlockTypes = true === settings.allowedBlockTypes ? blockTypes.map(({ name }) => name) : settings.allowedBlockTypes || [];
        return defaultAllowedBlockTypes.filter(
          (type) => !hiddenBlockTypes.includes(type)
        );
      }
      return settings.allowedBlockTypes;
    }, [settings.allowedBlockTypes, hiddenBlockTypes, blockTypes]);
    const forceDisableFocusMode = settings.focusMode === false;
    return (0, import_element22.useMemo)(() => {
      const blockEditorSettings = {
        ...Object.fromEntries(
          Object.entries(settings).filter(
            ([key]) => BLOCK_EDITOR_SETTINGS.includes(key)
          )
        ),
        [globalStylesDataKey]: globalStylesData,
        [globalStylesLinksDataKey]: globalStylesLinksData,
        allowedBlockTypes,
        allowRightClickOverrides,
        focusMode: focusMode && !forceDisableFocusMode,
        hasFixedToolbar,
        isDistractionFree,
        keepCaretInsideBlock,
        [mediaEditKey]: hasUploadPermissions ? editMediaEntity : void 0,
        mediaUpload: hasUploadPermissions ? mediaUpload : void 0,
        mediaSideload: hasUploadPermissions ? media_sideload_default : void 0,
        __experimentalBlockPatterns: blockPatterns,
        [selectBlockPatternsKey]: (select4) => {
          const { hasFinishedResolution, getBlockPatternsForPostType } = unlock(select4(import_core_data22.store));
          const patterns2 = getBlockPatternsForPostType(postType2);
          return hasFinishedResolution("getBlockPatterns") ? patterns2 : void 0;
        },
        [reusableBlocksSelectKey]: __experimentalReusableBlocksSelect,
        __experimentalBlockPatternCategories: blockPatternCategories,
        __experimentalUserPatternCategories: userPatternCategories,
        __experimentalFetchLinkSuggestions: (search, searchOptions) => (0, import_core_data22.__experimentalFetchLinkSuggestions)(search, searchOptions, settings),
        inserterMediaCategories: media_categories_default,
        __experimentalFetchRichUrlData: import_core_data22.__experimentalFetchUrlData,
        // Todo: This only checks the top level post, not the post within a template or any other entity that can be edited.
        // This might be better as a generic "canUser" selector.
        __experimentalCanUserUseUnfilteredHTML: canUseUnfilteredHTML,
        //Todo: this is only needed for native and should probably be removed.
        __experimentalUndo: undo2,
        // Check whether we want all site editor frames to have outlines
        // including the navigation / pattern / parts editors.
        outlineMode: !isDistractionFree && postType2 === "wp_template",
        // Check these two properties: they were not present in the site editor.
        __experimentalCreatePageEntity: createPageEntity,
        __experimentalUserCanCreatePages: userCanCreatePages,
        pageOnFront,
        pageForPosts,
        __experimentalPreferPatternsOnRoot: postType2 === "wp_template",
        templateLock: postType2 === "wp_navigation" ? "insert" : settings.templateLock,
        template: postType2 === "wp_navigation" ? [["core/navigation", {}, []]] : settings.template,
        __experimentalSetIsInserterOpened: setIsInserterOpened2,
        [sectionRootClientIdKey]: sectionRootClientId,
        editorTool: renderingMode2 === "post-only" && postType2 !== "wp_template" ? "edit" : void 0
      };
      return blockEditorSettings;
    }, [
      allowedBlockTypes,
      allowRightClickOverrides,
      focusMode,
      forceDisableFocusMode,
      hasFixedToolbar,
      isDistractionFree,
      keepCaretInsideBlock,
      settings,
      hasUploadPermissions,
      userPatternCategories,
      blockPatterns,
      blockPatternCategories,
      canUseUnfilteredHTML,
      undo2,
      createPageEntity,
      userCanCreatePages,
      pageOnFront,
      pageForPosts,
      postType2,
      setIsInserterOpened2,
      sectionRootClientId,
      globalStylesData,
      globalStylesLinksData,
      renderingMode2,
      editMediaEntity
    ]);
  }
  var use_block_editor_settings_default = useBlockEditorSettings;

  // packages/editor/build-module/components/provider/disable-non-page-content-blocks.js
  var import_data27 = __toESM(require_data());
  var import_block_editor8 = __toESM(require_block_editor());
  var import_element24 = __toESM(require_element());

  // packages/editor/build-module/components/provider/use-post-content-blocks.js
  var import_data26 = __toESM(require_data());
  var import_element23 = __toESM(require_element());
  var import_hooks2 = __toESM(require_hooks());
  var POST_CONTENT_BLOCK_TYPES = [
    "core/post-title",
    "core/post-featured-image",
    "core/post-content"
  ];
  function usePostContentBlocks() {
    const contentOnlyBlockTypes = (0, import_element23.useMemo)(
      () => [
        ...(0, import_hooks2.applyFilters)(
          "editor.postContentBlockTypes",
          POST_CONTENT_BLOCK_TYPES
        )
      ],
      []
    );
    const contentOnlyIds = (0, import_data26.useSelect)(
      (select4) => {
        const { getPostBlocksByName: getPostBlocksByName2 } = unlock(select4(store));
        return getPostBlocksByName2(contentOnlyBlockTypes);
      },
      [contentOnlyBlockTypes]
    );
    return contentOnlyIds;
  }

  // packages/editor/build-module/components/provider/disable-non-page-content-blocks.js
  function DisableNonPageContentBlocks() {
    const contentOnlyIds = usePostContentBlocks();
    const { templateParts } = (0, import_data27.useSelect)((select4) => {
      const { getBlocksByName } = select4(import_block_editor8.store);
      return {
        templateParts: getBlocksByName("core/template-part")
      };
    }, []);
    const disabledIds = (0, import_data27.useSelect)(
      (select4) => {
        const { getBlockOrder: getBlockOrder2 } = select4(import_block_editor8.store);
        return templateParts.flatMap(
          (clientId) => getBlockOrder2(clientId)
        );
      },
      [templateParts]
    );
    const registry = (0, import_data27.useRegistry)();
    (0, import_element24.useEffect)(() => {
      const { setBlockEditingMode, unsetBlockEditingMode } = registry.dispatch(import_block_editor8.store);
      setBlockEditingMode("", "disabled");
      return () => {
        unsetBlockEditingMode("");
      };
    }, [registry]);
    (0, import_element24.useEffect)(() => {
      const { setBlockEditingMode, unsetBlockEditingMode } = registry.dispatch(import_block_editor8.store);
      registry.batch(() => {
        for (const clientId of contentOnlyIds) {
          setBlockEditingMode(clientId, "contentOnly");
        }
      });
      return () => {
        registry.batch(() => {
          for (const clientId of contentOnlyIds) {
            unsetBlockEditingMode(clientId);
          }
        });
      };
    }, [contentOnlyIds, registry]);
    (0, import_element24.useEffect)(() => {
      const { setBlockEditingMode, unsetBlockEditingMode } = registry.dispatch(import_block_editor8.store);
      registry.batch(() => {
        for (const clientId of templateParts) {
          setBlockEditingMode(clientId, "contentOnly");
        }
      });
      return () => {
        registry.batch(() => {
          for (const clientId of templateParts) {
            unsetBlockEditingMode(clientId);
          }
        });
      };
    }, [templateParts, registry]);
    (0, import_element24.useEffect)(() => {
      const { setBlockEditingMode, unsetBlockEditingMode } = registry.dispatch(import_block_editor8.store);
      registry.batch(() => {
        for (const clientId of disabledIds) {
          setBlockEditingMode(clientId, "disabled");
        }
      });
      return () => {
        registry.batch(() => {
          for (const clientId of disabledIds) {
            unsetBlockEditingMode(clientId);
          }
        });
      };
    }, [disabledIds, registry]);
    return null;
  }

  // packages/editor/build-module/components/provider/navigation-block-editing-mode.js
  var import_element25 = __toESM(require_element());
  var import_data28 = __toESM(require_data());
  var import_block_editor9 = __toESM(require_block_editor());
  function NavigationBlockEditingMode() {
    const blockClientId = (0, import_data28.useSelect)(
      (select4) => select4(import_block_editor9.store).getBlockOrder()?.[0],
      []
    );
    const { setBlockEditingMode, unsetBlockEditingMode } = (0, import_data28.useDispatch)(import_block_editor9.store);
    (0, import_element25.useEffect)(() => {
      if (!blockClientId) {
        return;
      }
      setBlockEditingMode(blockClientId, "contentOnly");
      return () => {
        unsetBlockEditingMode(blockClientId);
      };
    }, [blockClientId, unsetBlockEditingMode, setBlockEditingMode]);
  }

  // packages/editor/build-module/components/provider/use-hide-blocks-from-inserter.js
  var import_element26 = __toESM(require_element());
  var import_hooks3 = __toESM(require_hooks());
  var POST_TYPES_ALLOWING_POST_CONTENT_TEMPLATE_PART = [
    "wp_block",
    "wp_template",
    "wp_template_part"
  ];
  function useHideBlocksFromInserter(postType2, mode) {
    (0, import_element26.useEffect)(() => {
      (0, import_hooks3.addFilter)(
        "blockEditor.__unstableCanInsertBlockType",
        "removeTemplatePartsFromInserter",
        (canInsert, blockType) => {
          if (!POST_TYPES_ALLOWING_POST_CONTENT_TEMPLATE_PART.includes(
            postType2
          ) && blockType.name === "core/template-part" && mode === "post-only") {
            return false;
          }
          return canInsert;
        }
      );
      (0, import_hooks3.addFilter)(
        "blockEditor.__unstableCanInsertBlockType",
        "removePostContentFromInserter",
        (canInsert, blockType, rootClientId, { getBlockParentsByBlockName }) => {
          if (!POST_TYPES_ALLOWING_POST_CONTENT_TEMPLATE_PART.includes(
            postType2
          ) && blockType.name === "core/post-content") {
            return getBlockParentsByBlockName(rootClientId, "core/query").length > 0;
          }
          return canInsert;
        }
      );
      return () => {
        (0, import_hooks3.removeFilter)(
          "blockEditor.__unstableCanInsertBlockType",
          "removeTemplatePartsFromInserter"
        );
        (0, import_hooks3.removeFilter)(
          "blockEditor.__unstableCanInsertBlockType",
          "removePostContentFromInserter"
        );
      };
    }, [postType2, mode]);
  }

  // packages/editor/build-module/components/commands/index.js
  var import_data36 = __toESM(require_data());
  var import_i18n50 = __toESM(require_i18n());
  var import_commands = __toESM(require_commands());
  var import_preferences7 = __toESM(require_preferences());
  var import_notices13 = __toESM(require_notices());
  var import_block_editor10 = __toESM(require_block_editor());
  var import_core_data25 = __toESM(require_core_data());

  // packages/interface/build-module/index.js
  var build_module_exports = {};
  __export(build_module_exports, {
    ActionItem: () => action_item_default,
    ComplementaryArea: () => complementary_area_default,
    ComplementaryAreaMoreMenuItem: () => ComplementaryAreaMoreMenuItem,
    FullscreenMode: () => fullscreen_mode_default,
    InterfaceSkeleton: () => interface_skeleton_default,
    PinnedItems: () => pinned_items_default,
    store: () => store2
  });

  // packages/interface/build-module/components/complementary-area/index.js
  var import_jsx_runtime86 = __toESM(require_jsx_runtime());
  var import_components24 = __toESM(require_components());
  var import_data33 = __toESM(require_data());
  var import_i18n48 = __toESM(require_i18n());
  var import_element28 = __toESM(require_element());
  var import_viewport = __toESM(require_viewport());
  var import_preferences6 = __toESM(require_preferences());
  var import_compose7 = __toESM(require_compose());
  var import_plugins2 = __toESM(require_plugins());

  // packages/interface/build-module/components/complementary-area-header/index.js
  var import_jsx_runtime82 = __toESM(require_jsx_runtime());

  // packages/interface/build-module/components/complementary-area-toggle/index.js
  var import_jsx_runtime81 = __toESM(require_jsx_runtime());
  var import_components20 = __toESM(require_components());
  var import_data32 = __toESM(require_data());
  var import_plugins = __toESM(require_plugins());

  // packages/interface/build-module/store/index.js
  var import_data31 = __toESM(require_data());

  // packages/interface/build-module/store/actions.js
  var actions_exports2 = {};
  __export(actions_exports2, {
    closeModal: () => closeModal,
    disableComplementaryArea: () => disableComplementaryArea,
    enableComplementaryArea: () => enableComplementaryArea,
    openModal: () => openModal,
    pinItem: () => pinItem,
    setDefaultComplementaryArea: () => setDefaultComplementaryArea,
    setFeatureDefaults: () => setFeatureDefaults,
    setFeatureValue: () => setFeatureValue,
    toggleFeature: () => toggleFeature,
    unpinItem: () => unpinItem
  });
  var import_deprecated5 = __toESM(require_deprecated());
  var import_preferences4 = __toESM(require_preferences());

  // packages/interface/build-module/store/deprecated.js
  var import_deprecated4 = __toESM(require_deprecated());
  function normalizeComplementaryAreaScope(scope) {
    if (["core/edit-post", "core/edit-site"].includes(scope)) {
      (0, import_deprecated4.default)(`${scope} interface scope`, {
        alternative: "core interface scope",
        hint: "core/edit-post and core/edit-site are merging.",
        version: "6.6"
      });
      return "core";
    }
    return scope;
  }
  function normalizeComplementaryAreaName(scope, name) {
    if (scope === "core" && name === "edit-site/template") {
      (0, import_deprecated4.default)(`edit-site/template sidebar`, {
        alternative: "edit-post/document",
        version: "6.6"
      });
      return "edit-post/document";
    }
    if (scope === "core" && name === "edit-site/block-inspector") {
      (0, import_deprecated4.default)(`edit-site/block-inspector sidebar`, {
        alternative: "edit-post/block",
        version: "6.6"
      });
      return "edit-post/block";
    }
    return name;
  }

  // packages/interface/build-module/store/actions.js
  var setDefaultComplementaryArea = (scope, area) => {
    scope = normalizeComplementaryAreaScope(scope);
    area = normalizeComplementaryAreaName(scope, area);
    return {
      type: "SET_DEFAULT_COMPLEMENTARY_AREA",
      scope,
      area
    };
  };
  var enableComplementaryArea = (scope, area) => ({ registry, dispatch: dispatch5 }) => {
    if (!area) {
      return;
    }
    scope = normalizeComplementaryAreaScope(scope);
    area = normalizeComplementaryAreaName(scope, area);
    const isComplementaryAreaVisible = registry.select(import_preferences4.store).get(scope, "isComplementaryAreaVisible");
    if (!isComplementaryAreaVisible) {
      registry.dispatch(import_preferences4.store).set(scope, "isComplementaryAreaVisible", true);
    }
    dispatch5({
      type: "ENABLE_COMPLEMENTARY_AREA",
      scope,
      area
    });
  };
  var disableComplementaryArea = (scope) => ({ registry }) => {
    scope = normalizeComplementaryAreaScope(scope);
    const isComplementaryAreaVisible = registry.select(import_preferences4.store).get(scope, "isComplementaryAreaVisible");
    if (isComplementaryAreaVisible) {
      registry.dispatch(import_preferences4.store).set(scope, "isComplementaryAreaVisible", false);
    }
  };
  var pinItem = (scope, item) => ({ registry }) => {
    if (!item) {
      return;
    }
    scope = normalizeComplementaryAreaScope(scope);
    item = normalizeComplementaryAreaName(scope, item);
    const pinnedItems = registry.select(import_preferences4.store).get(scope, "pinnedItems");
    if (pinnedItems?.[item] === true) {
      return;
    }
    registry.dispatch(import_preferences4.store).set(scope, "pinnedItems", {
      ...pinnedItems,
      [item]: true
    });
  };
  var unpinItem = (scope, item) => ({ registry }) => {
    if (!item) {
      return;
    }
    scope = normalizeComplementaryAreaScope(scope);
    item = normalizeComplementaryAreaName(scope, item);
    const pinnedItems = registry.select(import_preferences4.store).get(scope, "pinnedItems");
    registry.dispatch(import_preferences4.store).set(scope, "pinnedItems", {
      ...pinnedItems,
      [item]: false
    });
  };
  function toggleFeature(scope, featureName) {
    return function({ registry }) {
      (0, import_deprecated5.default)(`dispatch( 'core/interface' ).toggleFeature`, {
        since: "6.0",
        alternative: `dispatch( 'core/preferences' ).toggle`
      });
      registry.dispatch(import_preferences4.store).toggle(scope, featureName);
    };
  }
  function setFeatureValue(scope, featureName, value) {
    return function({ registry }) {
      (0, import_deprecated5.default)(`dispatch( 'core/interface' ).setFeatureValue`, {
        since: "6.0",
        alternative: `dispatch( 'core/preferences' ).set`
      });
      registry.dispatch(import_preferences4.store).set(scope, featureName, !!value);
    };
  }
  function setFeatureDefaults(scope, defaults) {
    return function({ registry }) {
      (0, import_deprecated5.default)(`dispatch( 'core/interface' ).setFeatureDefaults`, {
        since: "6.0",
        alternative: `dispatch( 'core/preferences' ).setDefaults`
      });
      registry.dispatch(import_preferences4.store).setDefaults(scope, defaults);
    };
  }
  function openModal(name) {
    return {
      type: "OPEN_MODAL",
      name
    };
  }
  function closeModal() {
    return {
      type: "CLOSE_MODAL"
    };
  }

  // packages/interface/build-module/store/selectors.js
  var selectors_exports2 = {};
  __export(selectors_exports2, {
    getActiveComplementaryArea: () => getActiveComplementaryArea,
    isComplementaryAreaLoading: () => isComplementaryAreaLoading,
    isFeatureActive: () => isFeatureActive,
    isItemPinned: () => isItemPinned,
    isModalActive: () => isModalActive
  });
  var import_data29 = __toESM(require_data());
  var import_deprecated7 = __toESM(require_deprecated());
  var import_preferences5 = __toESM(require_preferences());
  var getActiveComplementaryArea = (0, import_data29.createRegistrySelector)(
    (select4) => (state, scope) => {
      scope = normalizeComplementaryAreaScope(scope);
      const isComplementaryAreaVisible = select4(import_preferences5.store).get(
        scope,
        "isComplementaryAreaVisible"
      );
      if (isComplementaryAreaVisible === void 0) {
        return void 0;
      }
      if (isComplementaryAreaVisible === false) {
        return null;
      }
      return state?.complementaryAreas?.[scope];
    }
  );
  var isComplementaryAreaLoading = (0, import_data29.createRegistrySelector)(
    (select4) => (state, scope) => {
      scope = normalizeComplementaryAreaScope(scope);
      const isVisible = select4(import_preferences5.store).get(
        scope,
        "isComplementaryAreaVisible"
      );
      const identifier = state?.complementaryAreas?.[scope];
      return isVisible && identifier === void 0;
    }
  );
  var isItemPinned = (0, import_data29.createRegistrySelector)(
    (select4) => (state, scope, item) => {
      scope = normalizeComplementaryAreaScope(scope);
      item = normalizeComplementaryAreaName(scope, item);
      const pinnedItems = select4(import_preferences5.store).get(
        scope,
        "pinnedItems"
      );
      return pinnedItems?.[item] ?? true;
    }
  );
  var isFeatureActive = (0, import_data29.createRegistrySelector)(
    (select4) => (state, scope, featureName) => {
      (0, import_deprecated7.default)(
        `select( 'core/interface' ).isFeatureActive( scope, featureName )`,
        {
          since: "6.0",
          alternative: `select( 'core/preferences' ).get( scope, featureName )`
        }
      );
      return !!select4(import_preferences5.store).get(scope, featureName);
    }
  );
  function isModalActive(state, modalName3) {
    return state.activeModal === modalName3;
  }

  // packages/interface/build-module/store/reducer.js
  var import_data30 = __toESM(require_data());
  function complementaryAreas(state = {}, action) {
    switch (action.type) {
      case "SET_DEFAULT_COMPLEMENTARY_AREA": {
        const { scope, area } = action;
        if (state[scope]) {
          return state;
        }
        return {
          ...state,
          [scope]: area
        };
      }
      case "ENABLE_COMPLEMENTARY_AREA": {
        const { scope, area } = action;
        return {
          ...state,
          [scope]: area
        };
      }
    }
    return state;
  }
  function activeModal(state = null, action) {
    switch (action.type) {
      case "OPEN_MODAL":
        return action.name;
      case "CLOSE_MODAL":
        return null;
    }
    return state;
  }
  var reducer_default3 = (0, import_data30.combineReducers)({
    complementaryAreas,
    activeModal
  });

  // packages/interface/build-module/store/constants.js
  var STORE_NAME2 = "core/interface";

  // packages/interface/build-module/store/index.js
  var store2 = (0, import_data31.createReduxStore)(STORE_NAME2, {
    reducer: reducer_default3,
    actions: actions_exports2,
    selectors: selectors_exports2
  });
  (0, import_data31.register)(store2);

  // packages/interface/build-module/components/complementary-area-toggle/index.js
  function roleSupportsCheckedState(role) {
    return [
      "checkbox",
      "option",
      "radio",
      "switch",
      "menuitemcheckbox",
      "menuitemradio",
      "treeitem"
    ].includes(role);
  }
  function ComplementaryAreaToggle({
    as = import_components20.Button,
    scope,
    identifier: identifierProp,
    icon: iconProp,
    selectedIcon,
    name,
    shortcut,
    ...props
  }) {
    const ComponentToUse = as;
    const context = (0, import_plugins.usePluginContext)();
    const icon = iconProp || context.icon;
    const identifier = identifierProp || `${context.name}/${name}`;
    const isSelected = (0, import_data32.useSelect)(
      (select4) => select4(store2).getActiveComplementaryArea(scope) === identifier,
      [identifier, scope]
    );
    const { enableComplementaryArea: enableComplementaryArea2, disableComplementaryArea: disableComplementaryArea2 } = (0, import_data32.useDispatch)(store2);
    return /* @__PURE__ */ (0, import_jsx_runtime81.jsx)(
      ComponentToUse,
      {
        icon: selectedIcon && isSelected ? selectedIcon : icon,
        "aria-controls": identifier.replace("/", ":"),
        "aria-checked": roleSupportsCheckedState(props.role) ? isSelected : void 0,
        onClick: () => {
          if (isSelected) {
            disableComplementaryArea2(scope);
          } else {
            enableComplementaryArea2(scope, identifier);
          }
        },
        shortcut,
        ...props
      }
    );
  }

  // packages/interface/build-module/components/complementary-area-header/index.js
  var ComplementaryAreaHeader = ({
    children,
    className,
    toggleButtonProps
  }) => {
    const toggleButton = /* @__PURE__ */ (0, import_jsx_runtime82.jsx)(ComplementaryAreaToggle, { icon: close_small_default, ...toggleButtonProps });
    return /* @__PURE__ */ (0, import_jsx_runtime82.jsxs)(
      "div",
      {
        className: clsx_default(
          "components-panel__header",
          "interface-complementary-area-header",
          className
        ),
        tabIndex: -1,
        children: [
          children,
          toggleButton
        ]
      }
    );
  };
  var complementary_area_header_default = ComplementaryAreaHeader;

  // packages/interface/build-module/components/complementary-area-more-menu-item/index.js
  var import_jsx_runtime84 = __toESM(require_jsx_runtime());
  var import_components22 = __toESM(require_components());

  // packages/interface/build-module/components/action-item/index.js
  var import_jsx_runtime83 = __toESM(require_jsx_runtime());
  var import_components21 = __toESM(require_components());
  var import_element27 = __toESM(require_element());
  var noop2 = () => {
  };
  function ActionItemSlot({
    name,
    as: Component5 = import_components21.MenuGroup,
    fillProps = {},
    bubblesVirtually,
    ...props
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
      import_components21.Slot,
      {
        name,
        bubblesVirtually,
        fillProps,
        children: (fills) => {
          if (!import_element27.Children.toArray(fills).length) {
            return null;
          }
          const initializedByPlugins = [];
          import_element27.Children.forEach(
            fills,
            ({
              props: { __unstableExplicitMenuItem, __unstableTarget }
            }) => {
              if (__unstableTarget && __unstableExplicitMenuItem) {
                initializedByPlugins.push(__unstableTarget);
              }
            }
          );
          const children = import_element27.Children.map(fills, (child) => {
            if (!child.props.__unstableExplicitMenuItem && initializedByPlugins.includes(
              child.props.__unstableTarget
            )) {
              return null;
            }
            return child;
          });
          return /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(Component5, { ...props, children });
        }
      }
    );
  }
  function ActionItem({ name, as: Component5 = import_components21.Button, onClick, ...props }) {
    return /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(import_components21.Fill, { name, children: ({ onClick: fpOnClick }) => {
      return /* @__PURE__ */ (0, import_jsx_runtime83.jsx)(
        Component5,
        {
          onClick: onClick || fpOnClick ? (...args) => {
            (onClick || noop2)(...args);
            (fpOnClick || noop2)(...args);
          } : void 0,
          ...props
        }
      );
    } });
  }
  ActionItem.Slot = ActionItemSlot;
  var action_item_default = ActionItem;

  // packages/interface/build-module/components/complementary-area-more-menu-item/index.js
  var PluginsMenuItem = ({
    // Menu item is marked with unstable prop for backward compatibility.
    // They are removed so they don't leak to DOM elements.
    // @see https://github.com/WordPress/gutenberg/issues/14457
    __unstableExplicitMenuItem,
    __unstableTarget,
    ...restProps
  }) => /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(import_components22.MenuItem, { ...restProps });
  function ComplementaryAreaMoreMenuItem({
    scope,
    target,
    __unstableExplicitMenuItem,
    ...props
  }) {
    return /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
      ComplementaryAreaToggle,
      {
        as: (toggleProps) => {
          return /* @__PURE__ */ (0, import_jsx_runtime84.jsx)(
            action_item_default,
            {
              __unstableExplicitMenuItem,
              __unstableTarget: `${scope}/${target}`,
              as: PluginsMenuItem,
              name: `${scope}/plugin-more-menu`,
              ...toggleProps
            }
          );
        },
        role: "menuitemcheckbox",
        selectedIcon: check_default,
        name: target,
        scope,
        ...props
      }
    );
  }

  // packages/interface/build-module/components/pinned-items/index.js
  var import_jsx_runtime85 = __toESM(require_jsx_runtime());
  var import_components23 = __toESM(require_components());
  function PinnedItems({ scope, ...props }) {
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(import_components23.Fill, { name: `PinnedItems/${scope}`, ...props });
  }
  function PinnedItemsSlot({ scope, className, ...props }) {
    return /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(import_components23.Slot, { name: `PinnedItems/${scope}`, ...props, children: (fills) => fills?.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime85.jsx)(
      "div",
      {
        className: clsx_default(
          className,
          "interface-pinned-items"
        ),
        children: fills
      }
    ) });
  }
  PinnedItems.Slot = PinnedItemsSlot;
  var pinned_items_default = PinnedItems;

  // packages/interface/build-module/components/complementary-area/index.js
  var ANIMATION_DURATION = 0.3;
  function ComplementaryAreaSlot({ scope, ...props }) {
    return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(import_components24.Slot, { name: `ComplementaryArea/${scope}`, ...props });
  }
  var SIDEBAR_WIDTH = 280;
  var variants = {
    open: { width: SIDEBAR_WIDTH },
    closed: { width: 0 },
    mobileOpen: { width: "100vw" }
  };
  function ComplementaryAreaFill({
    activeArea,
    isActive,
    scope,
    children,
    className,
    id
  }) {
    const disableMotion = (0, import_compose7.useReducedMotion)();
    const isMobileViewport = (0, import_compose7.useViewportMatch)("medium", "<");
    const previousActiveArea = (0, import_compose7.usePrevious)(activeArea);
    const previousIsActive = (0, import_compose7.usePrevious)(isActive);
    const [, setState] = (0, import_element28.useState)({});
    (0, import_element28.useEffect)(() => {
      setState({});
    }, [isActive]);
    const transition = {
      type: "tween",
      duration: disableMotion || isMobileViewport || !!previousActiveArea && !!activeArea && activeArea !== previousActiveArea ? 0 : ANIMATION_DURATION,
      ease: [0.6, 0, 0.4, 1]
    };
    return /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(import_components24.Fill, { name: `ComplementaryArea/${scope}`, children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(import_components24.__unstableAnimatePresence, { initial: false, children: (previousIsActive || isActive) && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
      import_components24.__unstableMotion.div,
      {
        variants,
        initial: "closed",
        animate: isMobileViewport ? "mobileOpen" : "open",
        exit: "closed",
        transition,
        className: "interface-complementary-area__fill",
        children: /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
          "div",
          {
            id,
            className,
            style: {
              width: isMobileViewport ? "100vw" : SIDEBAR_WIDTH
            },
            children
          }
        )
      }
    ) }) });
  }
  function useAdjustComplementaryListener(scope, identifier, activeArea, isActive, isSmall) {
    const previousIsSmallRef = (0, import_element28.useRef)(false);
    const shouldOpenWhenNotSmallRef = (0, import_element28.useRef)(false);
    const { enableComplementaryArea: enableComplementaryArea2, disableComplementaryArea: disableComplementaryArea2 } = (0, import_data33.useDispatch)(store2);
    (0, import_element28.useEffect)(() => {
      if (isActive && isSmall && !previousIsSmallRef.current) {
        disableComplementaryArea2(scope);
        shouldOpenWhenNotSmallRef.current = true;
      } else if (
        // If there is a flag indicating the complementary area should be
        // enabled when we go from small to big window size and we are going
        // from a small to big window size.
        shouldOpenWhenNotSmallRef.current && !isSmall && previousIsSmallRef.current
      ) {
        shouldOpenWhenNotSmallRef.current = false;
        enableComplementaryArea2(scope, identifier);
      } else if (
        // If the flag is indicating the current complementary should be
        // reopened but another complementary area becomes active, remove
        // the flag.
        shouldOpenWhenNotSmallRef.current && activeArea && activeArea !== identifier
      ) {
        shouldOpenWhenNotSmallRef.current = false;
      }
      if (isSmall !== previousIsSmallRef.current) {
        previousIsSmallRef.current = isSmall;
      }
    }, [
      isActive,
      isSmall,
      scope,
      identifier,
      activeArea,
      disableComplementaryArea2,
      enableComplementaryArea2
    ]);
  }
  function ComplementaryArea({
    children,
    className,
    closeLabel = (0, import_i18n48.__)("Close plugin"),
    identifier: identifierProp,
    header,
    headerClassName,
    icon: iconProp,
    isPinnable = true,
    panelClassName,
    scope,
    name,
    title,
    toggleShortcut,
    isActiveByDefault
  }) {
    const context = (0, import_plugins2.usePluginContext)();
    const icon = iconProp || context.icon;
    const identifier = identifierProp || `${context.name}/${name}`;
    const [isReady2, setIsReady2] = (0, import_element28.useState)(false);
    const {
      isLoading,
      isActive,
      isPinned,
      activeArea,
      isSmall,
      isLarge,
      showIconLabels
    } = (0, import_data33.useSelect)(
      (select4) => {
        const {
          getActiveComplementaryArea: getActiveComplementaryArea2,
          isComplementaryAreaLoading: isComplementaryAreaLoading2,
          isItemPinned: isItemPinned2
        } = select4(store2);
        const { get } = select4(import_preferences6.store);
        const _activeArea = getActiveComplementaryArea2(scope);
        return {
          isLoading: isComplementaryAreaLoading2(scope),
          isActive: _activeArea === identifier,
          isPinned: isItemPinned2(scope, identifier),
          activeArea: _activeArea,
          isSmall: select4(import_viewport.store).isViewportMatch("< medium"),
          isLarge: select4(import_viewport.store).isViewportMatch("large"),
          showIconLabels: get("core", "showIconLabels")
        };
      },
      [identifier, scope]
    );
    const isMobileViewport = (0, import_compose7.useViewportMatch)("medium", "<");
    useAdjustComplementaryListener(
      scope,
      identifier,
      activeArea,
      isActive,
      isSmall
    );
    const {
      enableComplementaryArea: enableComplementaryArea2,
      disableComplementaryArea: disableComplementaryArea2,
      pinItem: pinItem2,
      unpinItem: unpinItem2
    } = (0, import_data33.useDispatch)(store2);
    (0, import_element28.useEffect)(() => {
      if (isActiveByDefault && activeArea === void 0 && !isSmall) {
        enableComplementaryArea2(scope, identifier);
      } else if (activeArea === void 0 && isSmall) {
        disableComplementaryArea2(scope, identifier);
      }
      setIsReady2(true);
    }, [
      activeArea,
      isActiveByDefault,
      scope,
      identifier,
      isSmall,
      enableComplementaryArea2,
      disableComplementaryArea2
    ]);
    if (!isReady2) {
      return;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(import_jsx_runtime86.Fragment, { children: [
      isPinnable && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(pinned_items_default, { scope, children: isPinned && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
        ComplementaryAreaToggle,
        {
          scope,
          identifier,
          isPressed: isActive && (!showIconLabels || isLarge),
          "aria-expanded": isActive,
          "aria-disabled": isLoading,
          label: title,
          icon: showIconLabels ? check_default : icon,
          showTooltip: !showIconLabels,
          variant: showIconLabels ? "tertiary" : void 0,
          size: "compact",
          shortcut: toggleShortcut
        }
      ) }),
      name && isPinnable && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
        ComplementaryAreaMoreMenuItem,
        {
          target: name,
          scope,
          icon,
          children: title
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(
        ComplementaryAreaFill,
        {
          activeArea,
          isActive,
          className: clsx_default("interface-complementary-area", className),
          scope,
          id: identifier.replace("/", ":"),
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
              complementary_area_header_default,
              {
                className: headerClassName,
                closeLabel,
                onClose: () => disableComplementaryArea2(scope),
                toggleButtonProps: {
                  label: closeLabel,
                  size: "compact",
                  shortcut: toggleShortcut,
                  scope,
                  identifier
                },
                children: header || /* @__PURE__ */ (0, import_jsx_runtime86.jsxs)(import_jsx_runtime86.Fragment, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime86.jsx)("h2", { className: "interface-complementary-area-header__title", children: title }),
                  isPinnable && !isMobileViewport && /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(
                    import_components24.Button,
                    {
                      className: "interface-complementary-area__pin-unpin-item",
                      icon: isPinned ? star_filled_default : star_empty_default,
                      label: isPinned ? (0, import_i18n48.__)("Unpin from toolbar") : (0, import_i18n48.__)("Pin to toolbar"),
                      onClick: () => (isPinned ? unpinItem2 : pinItem2)(
                        scope,
                        identifier
                      ),
                      isPressed: isPinned,
                      "aria-expanded": isPinned,
                      size: "compact"
                    }
                  )
                ] })
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime86.jsx)(import_components24.Panel, { className: panelClassName, children })
          ]
        }
      )
    ] });
  }
  ComplementaryArea.Slot = ComplementaryAreaSlot;
  var complementary_area_default = ComplementaryArea;

  // packages/interface/build-module/components/fullscreen-mode/index.js
  var import_element29 = __toESM(require_element());
  var FullscreenMode = ({ isActive }) => {
    (0, import_element29.useEffect)(() => {
      let isSticky = false;
      if (document.body.classList.contains("sticky-menu")) {
        isSticky = true;
        document.body.classList.remove("sticky-menu");
      }
      return () => {
        if (isSticky) {
          document.body.classList.add("sticky-menu");
        }
      };
    }, []);
    (0, import_element29.useEffect)(() => {
      if (isActive) {
        document.body.classList.add("is-fullscreen-mode");
      } else {
        document.body.classList.remove("is-fullscreen-mode");
      }
      return () => {
        if (isActive) {
          document.body.classList.remove("is-fullscreen-mode");
        }
      };
    }, [isActive]);
    return null;
  };
  var fullscreen_mode_default = FullscreenMode;

  // packages/interface/build-module/components/interface-skeleton/index.js
  var import_jsx_runtime88 = __toESM(require_jsx_runtime());

  // packages/admin-ui/build-module/navigable-region/index.js
  var import_jsx_runtime87 = __toESM(require_jsx_runtime());
  var import_element30 = __toESM(require_element());
  var NavigableRegion = (0, import_element30.forwardRef)(
    ({ children, className, ariaLabel, as: Tag = "div", ...props }, ref) => {
      return /* @__PURE__ */ (0, import_jsx_runtime87.jsx)(
        Tag,
        {
          ref,
          className: clsx_default("admin-ui-navigable-region", className),
          "aria-label": ariaLabel,
          role: "region",
          tabIndex: "-1",
          ...props,
          children
        }
      );
    }
  );
  NavigableRegion.displayName = "NavigableRegion";
  var navigable_region_default = NavigableRegion;

  // packages/interface/build-module/components/interface-skeleton/index.js
  var import_element31 = __toESM(require_element());
  var import_components25 = __toESM(require_components());
  var import_i18n49 = __toESM(require_i18n());
  var import_compose8 = __toESM(require_compose());
  var ANIMATION_DURATION2 = 0.25;
  var commonTransition = {
    type: "tween",
    duration: ANIMATION_DURATION2,
    ease: [0.6, 0, 0.4, 1]
  };
  function useHTMLClass(className) {
    (0, import_element31.useEffect)(() => {
      const element = document && document.querySelector(`html:not(.${className})`);
      if (!element) {
        return;
      }
      element.classList.toggle(className);
      return () => {
        element.classList.toggle(className);
      };
    }, [className]);
  }
  var headerVariants = {
    hidden: { opacity: 1, marginTop: -60 },
    visible: { opacity: 1, marginTop: 0 },
    distractionFreeHover: {
      opacity: 1,
      marginTop: 0,
      transition: {
        ...commonTransition,
        delay: 0.2,
        delayChildren: 0.2
      }
    },
    distractionFreeHidden: {
      opacity: 0,
      marginTop: -60
    },
    distractionFreeDisabled: {
      opacity: 0,
      marginTop: 0,
      transition: {
        ...commonTransition,
        delay: 0.8,
        delayChildren: 0.8
      }
    }
  };
  function InterfaceSkeleton({
    isDistractionFree,
    footer,
    header,
    editorNotices,
    sidebar,
    secondarySidebar,
    content,
    actions: actions2,
    labels,
    className
  }, ref) {
    const [secondarySidebarResizeListener, secondarySidebarSize] = (0, import_compose8.useResizeObserver)();
    const isMobileViewport = (0, import_compose8.useViewportMatch)("medium", "<");
    const disableMotion = (0, import_compose8.useReducedMotion)();
    const defaultTransition = {
      type: "tween",
      duration: disableMotion ? 0 : ANIMATION_DURATION2,
      ease: [0.6, 0, 0.4, 1]
    };
    useHTMLClass("interface-interface-skeleton__html-container");
    const defaultLabels = {
      /* translators: accessibility text for the top bar landmark region. */
      header: (0, import_i18n49._x)("Header", "header landmark area"),
      /* translators: accessibility text for the content landmark region. */
      body: (0, import_i18n49.__)("Content"),
      /* translators: accessibility text for the secondary sidebar landmark region. */
      secondarySidebar: (0, import_i18n49.__)("Block Library"),
      /* translators: accessibility text for the settings landmark region. */
      sidebar: (0, import_i18n49._x)("Settings", "settings landmark area"),
      /* translators: accessibility text for the publish landmark region. */
      actions: (0, import_i18n49.__)("Publish"),
      /* translators: accessibility text for the footer landmark region. */
      footer: (0, import_i18n49.__)("Footer")
    };
    const mergedLabels = { ...defaultLabels, ...labels };
    return /* @__PURE__ */ (0, import_jsx_runtime88.jsxs)(
      "div",
      {
        ref,
        className: clsx_default(
          className,
          "interface-interface-skeleton",
          !!footer && "has-footer"
        ),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime88.jsxs)("div", { className: "interface-interface-skeleton__editor", children: [
            /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(import_components25.__unstableAnimatePresence, { initial: false, children: !!header && /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
              navigable_region_default,
              {
                as: import_components25.__unstableMotion.div,
                className: "interface-interface-skeleton__header",
                "aria-label": mergedLabels.header,
                initial: isDistractionFree && !isMobileViewport ? "distractionFreeHidden" : "hidden",
                whileHover: isDistractionFree && !isMobileViewport ? "distractionFreeHover" : "visible",
                animate: isDistractionFree && !isMobileViewport ? "distractionFreeDisabled" : "visible",
                exit: isDistractionFree && !isMobileViewport ? "distractionFreeHidden" : "hidden",
                variants: headerVariants,
                transition: defaultTransition,
                children: header
              }
            ) }),
            isDistractionFree && /* @__PURE__ */ (0, import_jsx_runtime88.jsx)("div", { className: "interface-interface-skeleton__header", children: editorNotices }),
            /* @__PURE__ */ (0, import_jsx_runtime88.jsxs)("div", { className: "interface-interface-skeleton__body", children: [
              /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(import_components25.__unstableAnimatePresence, { initial: false, children: !!secondarySidebar && /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
                navigable_region_default,
                {
                  className: "interface-interface-skeleton__secondary-sidebar",
                  ariaLabel: mergedLabels.secondarySidebar,
                  as: import_components25.__unstableMotion.div,
                  initial: "closed",
                  animate: "open",
                  exit: "closed",
                  variants: {
                    open: { width: secondarySidebarSize.width },
                    closed: { width: 0 }
                  },
                  transition: defaultTransition,
                  children: /* @__PURE__ */ (0, import_jsx_runtime88.jsxs)(
                    import_components25.__unstableMotion.div,
                    {
                      style: {
                        position: "absolute",
                        width: isMobileViewport ? "100vw" : "fit-content",
                        height: "100%",
                        left: 0
                      },
                      variants: {
                        open: { x: 0 },
                        closed: { x: "-100%" }
                      },
                      transition: defaultTransition,
                      children: [
                        secondarySidebarResizeListener,
                        secondarySidebar
                      ]
                    }
                  )
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
                navigable_region_default,
                {
                  className: "interface-interface-skeleton__content",
                  ariaLabel: mergedLabels.body,
                  children: content
                }
              ),
              !!sidebar && /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
                navigable_region_default,
                {
                  className: "interface-interface-skeleton__sidebar",
                  ariaLabel: mergedLabels.sidebar,
                  children: sidebar
                }
              ),
              !!actions2 && /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
                navigable_region_default,
                {
                  className: "interface-interface-skeleton__actions",
                  ariaLabel: mergedLabels.actions,
                  children: actions2
                }
              )
            ] })
          ] }),
          !!footer && /* @__PURE__ */ (0, import_jsx_runtime88.jsx)(
            navigable_region_default,
            {
              className: "interface-interface-skeleton__footer",
              ariaLabel: mergedLabels.footer,
              children: footer
            }
          )
        ]
      }
    );
  }
  var interface_skeleton_default = (0, import_element31.forwardRef)(InterfaceSkeleton);

  // packages/editor/build-module/components/commands/index.js
  var import_html_entities8 = __toESM(require_html_entities());

  // packages/editor/build-module/components/pattern-rename-modal/index.js
  var import_jsx_runtime89 = __toESM(require_jsx_runtime());
  var import_data34 = __toESM(require_data());
  var import_patterns5 = __toESM(require_patterns());
  var import_core_data23 = __toESM(require_core_data());
  var { RenamePatternModal } = unlock(import_patterns5.privateApis);
  var modalName = "editor/pattern-rename";
  function PatternRenameModal() {
    const { record, postType: postType2 } = (0, import_data34.useSelect)((select4) => {
      const { getCurrentPostType: getCurrentPostType2, getCurrentPostId: getCurrentPostId2 } = select4(store);
      const { getEditedEntityRecord } = select4(import_core_data23.store);
      const _postType = getCurrentPostType2();
      return {
        record: getEditedEntityRecord(
          "postType",
          _postType,
          getCurrentPostId2()
        ),
        postType: _postType
      };
    }, []);
    const { closeModal: closeModal2 } = (0, import_data34.useDispatch)(store2);
    const isActive = (0, import_data34.useSelect)(
      (select4) => select4(store2).isModalActive(modalName)
    );
    if (!isActive || postType2 !== PATTERN_POST_TYPE) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime89.jsx)(RenamePatternModal, { onClose: closeModal2, pattern: record });
  }

  // packages/editor/build-module/components/pattern-duplicate-modal/index.js
  var import_jsx_runtime90 = __toESM(require_jsx_runtime());
  var import_data35 = __toESM(require_data());
  var import_patterns6 = __toESM(require_patterns());
  var import_core_data24 = __toESM(require_core_data());
  var { DuplicatePatternModal } = unlock(import_patterns6.privateApis);
  var modalName2 = "editor/pattern-duplicate";
  function PatternDuplicateModal() {
    const { record, postType: postType2 } = (0, import_data35.useSelect)((select4) => {
      const { getCurrentPostType: getCurrentPostType2, getCurrentPostId: getCurrentPostId2 } = select4(store);
      const { getEditedEntityRecord } = select4(import_core_data24.store);
      const _postType = getCurrentPostType2();
      return {
        record: getEditedEntityRecord(
          "postType",
          _postType,
          getCurrentPostId2()
        ),
        postType: _postType
      };
    }, []);
    const { closeModal: closeModal2 } = (0, import_data35.useDispatch)(store2);
    const isActive = (0, import_data35.useSelect)(
      (select4) => select4(store2).isModalActive(modalName2)
    );
    if (!isActive || postType2 !== PATTERN_POST_TYPE) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime90.jsx)(
      DuplicatePatternModal,
      {
        onClose: closeModal2,
        onSuccess: () => closeModal2(),
        pattern: record
      }
    );
  }

  // packages/editor/build-module/components/commands/index.js
  var getEditorCommandLoader = () => function useEditorCommandLoader() {
    const {
      editorMode,
      isListViewOpen,
      showBlockBreadcrumbs,
      isDistractionFree,
      isFocusMode,
      isPreviewMode,
      isViewable,
      isCodeEditingEnabled,
      isRichEditingEnabled,
      isPublishSidebarEnabled: isPublishSidebarEnabled2
    } = (0, import_data36.useSelect)((select4) => {
      const { get } = select4(import_preferences7.store);
      const { isListViewOpened: isListViewOpened2, getCurrentPostType: getCurrentPostType2, getEditorSettings: getEditorSettings2 } = select4(store);
      const { getSettings: getSettings4 } = select4(import_block_editor10.store);
      const { getPostType } = select4(import_core_data25.store);
      return {
        editorMode: get("core", "editorMode") ?? "visual",
        isListViewOpen: isListViewOpened2(),
        showBlockBreadcrumbs: get("core", "showBlockBreadcrumbs"),
        isDistractionFree: get("core", "distractionFree"),
        isFocusMode: get("core", "focusMode"),
        isPreviewMode: getSettings4().isPreviewMode,
        isViewable: getPostType(getCurrentPostType2())?.viewable ?? false,
        isCodeEditingEnabled: getEditorSettings2().codeEditingEnabled,
        isRichEditingEnabled: getEditorSettings2().richEditingEnabled,
        isPublishSidebarEnabled: select4(store).isPublishSidebarEnabled()
      };
    }, []);
    const { getActiveComplementaryArea: getActiveComplementaryArea2 } = (0, import_data36.useSelect)(store2);
    const { toggle } = (0, import_data36.useDispatch)(import_preferences7.store);
    const { createInfoNotice } = (0, import_data36.useDispatch)(import_notices13.store);
    const {
      __unstableSaveForPreview: __unstableSaveForPreview2,
      setIsListViewOpened: setIsListViewOpened2,
      switchEditorMode: switchEditorMode2,
      toggleDistractionFree: toggleDistractionFree2,
      toggleSpotlightMode: toggleSpotlightMode2,
      toggleTopToolbar: toggleTopToolbar2
    } = (0, import_data36.useDispatch)(store);
    const { openModal: openModal2, enableComplementaryArea: enableComplementaryArea2, disableComplementaryArea: disableComplementaryArea2 } = (0, import_data36.useDispatch)(store2);
    const { getCurrentPostId: getCurrentPostId2 } = (0, import_data36.useSelect)(store);
    const allowSwitchEditorMode = isCodeEditingEnabled && isRichEditingEnabled;
    if (isPreviewMode) {
      return { commands: [], isLoading: false };
    }
    const commands = [];
    commands.push({
      name: "core/open-shortcut-help",
      label: (0, import_i18n50.__)("Keyboard shortcuts"),
      icon: keyboard_default,
      callback: ({ close }) => {
        close();
        openModal2("editor/keyboard-shortcut-help");
      }
    });
    commands.push({
      name: "core/toggle-distraction-free",
      label: isDistractionFree ? (0, import_i18n50.__)("Exit Distraction free") : (0, import_i18n50.__)("Enter Distraction free"),
      callback: ({ close }) => {
        toggleDistractionFree2();
        close();
      }
    });
    commands.push({
      name: "core/open-preferences",
      label: (0, import_i18n50.__)("Editor preferences"),
      callback: ({ close }) => {
        close();
        openModal2("editor/preferences");
      }
    });
    commands.push({
      name: "core/toggle-spotlight-mode",
      label: isFocusMode ? (0, import_i18n50.__)("Exit Spotlight mode") : (0, import_i18n50.__)("Enter Spotlight mode"),
      callback: ({ close }) => {
        toggleSpotlightMode2();
        close();
      }
    });
    commands.push({
      name: "core/toggle-list-view",
      label: isListViewOpen ? (0, import_i18n50.__)("Close List View") : (0, import_i18n50.__)("Open List View"),
      icon: list_view_default,
      callback: ({ close }) => {
        setIsListViewOpened2(!isListViewOpen);
        close();
        createInfoNotice(
          isListViewOpen ? (0, import_i18n50.__)("List View off.") : (0, import_i18n50.__)("List View on."),
          {
            id: "core/editor/toggle-list-view/notice",
            type: "snackbar"
          }
        );
      }
    });
    commands.push({
      name: "core/toggle-top-toolbar",
      label: (0, import_i18n50.__)("Top toolbar"),
      callback: ({ close }) => {
        toggleTopToolbar2();
        close();
      }
    });
    if (allowSwitchEditorMode) {
      commands.push({
        name: "core/toggle-code-editor",
        label: editorMode === "visual" ? (0, import_i18n50.__)("Open code editor") : (0, import_i18n50.__)("Exit code editor"),
        icon: code_default,
        callback: ({ close }) => {
          switchEditorMode2(
            editorMode === "visual" ? "text" : "visual"
          );
          close();
        }
      });
    }
    commands.push({
      name: "core/toggle-breadcrumbs",
      label: showBlockBreadcrumbs ? (0, import_i18n50.__)("Hide block breadcrumbs") : (0, import_i18n50.__)("Show block breadcrumbs"),
      callback: ({ close }) => {
        toggle("core", "showBlockBreadcrumbs");
        close();
        createInfoNotice(
          showBlockBreadcrumbs ? (0, import_i18n50.__)("Breadcrumbs hidden.") : (0, import_i18n50.__)("Breadcrumbs visible."),
          {
            id: "core/editor/toggle-breadcrumbs/notice",
            type: "snackbar"
          }
        );
      }
    });
    commands.push({
      name: "core/open-settings-sidebar",
      label: (0, import_i18n50.__)("Show or hide the Settings panel"),
      icon: (0, import_i18n50.isRTL)() ? drawer_left_default : drawer_right_default,
      callback: ({ close }) => {
        const activeSidebar = getActiveComplementaryArea2("core");
        close();
        if (activeSidebar === "edit-post/document") {
          disableComplementaryArea2("core");
        } else {
          enableComplementaryArea2("core", "edit-post/document");
        }
      }
    });
    commands.push({
      name: "core/open-block-inspector",
      label: (0, import_i18n50.__)("Show or hide the Block settings panel"),
      icon: block_default_default,
      callback: ({ close }) => {
        const activeSidebar = getActiveComplementaryArea2("core");
        close();
        if (activeSidebar === "edit-post/block") {
          disableComplementaryArea2("core");
        } else {
          enableComplementaryArea2("core", "edit-post/block");
        }
      }
    });
    commands.push({
      name: "core/toggle-publish-sidebar",
      label: isPublishSidebarEnabled2 ? (0, import_i18n50.__)("Disable pre-publish checks") : (0, import_i18n50.__)("Enable pre-publish checks"),
      icon: format_list_bullets_default,
      callback: ({ close }) => {
        close();
        toggle("core", "isPublishSidebarEnabled");
        createInfoNotice(
          isPublishSidebarEnabled2 ? (0, import_i18n50.__)("Pre-publish checks disabled.") : (0, import_i18n50.__)("Pre-publish checks enabled."),
          {
            id: "core/editor/publish-sidebar/notice",
            type: "snackbar"
          }
        );
      }
    });
    if (isViewable) {
      commands.push({
        name: "core/preview-link",
        label: (0, import_i18n50.__)("Preview in a new tab"),
        icon: external_default,
        callback: async ({ close }) => {
          close();
          const postId2 = getCurrentPostId2();
          const link = await __unstableSaveForPreview2();
          window.open(link, `wp-preview-${postId2}`);
        }
      });
    }
    return {
      commands,
      isLoading: false
    };
  };
  var getEditedEntityContextualCommands = () => function useEditedEntityContextualCommands() {
    const { postType: postType2 } = (0, import_data36.useSelect)((select4) => {
      const { getCurrentPostType: getCurrentPostType2 } = select4(store);
      return {
        postType: getCurrentPostType2()
      };
    }, []);
    const { openModal: openModal2 } = (0, import_data36.useDispatch)(store2);
    const commands = [];
    if (postType2 === PATTERN_POST_TYPE) {
      commands.push({
        name: "core/rename-pattern",
        label: (0, import_i18n50.__)("Rename pattern"),
        icon: pencil_default,
        callback: ({ close }) => {
          openModal2(modalName);
          close();
        }
      });
      commands.push({
        name: "core/duplicate-pattern",
        label: (0, import_i18n50.__)("Duplicate pattern"),
        icon: symbol_default,
        callback: ({ close }) => {
          openModal2(modalName2);
          close();
        }
      });
    }
    return { isLoading: false, commands };
  };
  var getPageContentFocusCommands = () => function usePageContentFocusCommands() {
    const { onNavigateToEntityRecord, goBack, templateId: templateId2, isPreviewMode } = (0, import_data36.useSelect)((select4) => {
      const {
        getRenderingMode: getRenderingMode2,
        getEditorSettings: _getEditorSettings,
        getCurrentTemplateId: getCurrentTemplateId2
      } = unlock(select4(store));
      const editorSettings2 = _getEditorSettings();
      return {
        isTemplateHidden: getRenderingMode2() === "post-only",
        onNavigateToEntityRecord: editorSettings2.onNavigateToEntityRecord,
        getEditorSettings: _getEditorSettings,
        goBack: editorSettings2.onNavigateToPreviousEntityRecord,
        templateId: getCurrentTemplateId2(),
        isPreviewMode: editorSettings2.isPreviewMode
      };
    }, []);
    const { editedRecord: template2, hasResolved } = (0, import_core_data25.useEntityRecord)(
      "postType",
      "wp_template",
      templateId2
    );
    if (isPreviewMode) {
      return { isLoading: false, commands: [] };
    }
    const commands = [];
    if (templateId2 && hasResolved) {
      commands.push({
        name: "core/switch-to-template-focus",
        label: (0, import_i18n50.sprintf)(
          /* translators: %s: template title */
          (0, import_i18n50.__)("Edit template: %s"),
          (0, import_html_entities8.decodeEntities)(template2.title)
        ),
        icon: layout_default,
        callback: ({ close }) => {
          onNavigateToEntityRecord({
            postId: templateId2,
            postType: "wp_template"
          });
          close();
        }
      });
    }
    if (!!goBack) {
      commands.push({
        name: "core/switch-to-previous-entity",
        label: (0, import_i18n50.__)("Go back"),
        icon: page_default,
        callback: ({ close }) => {
          goBack();
          close();
        }
      });
    }
    return { isLoading: false, commands };
  };
  var getManipulateDocumentCommands = () => function useManipulateDocumentCommands() {
    const { postType: postType2, postId: postId2 } = (0, import_data36.useSelect)((select4) => {
      const { getCurrentPostId: getCurrentPostId2, getCurrentPostType: getCurrentPostType2 } = select4(store);
      return {
        postType: getCurrentPostType2(),
        postId: getCurrentPostId2()
      };
    }, []);
    const { editedRecord: template2, hasResolved } = (0, import_core_data25.useEntityRecord)(
      "postType",
      postType2,
      postId2
    );
    const { revertTemplate: revertTemplate3 } = unlock((0, import_data36.useDispatch)(store));
    if (!hasResolved || ![TEMPLATE_PART_POST_TYPE, TEMPLATE_POST_TYPE].includes(
      postType2
    )) {
      return { isLoading: true, commands: [] };
    }
    const commands = [];
    if (isTemplateRevertable(template2)) {
      const label = template2.type === TEMPLATE_POST_TYPE ? (0, import_i18n50.sprintf)(
        /* translators: %s: template title */
        (0, import_i18n50.__)("Reset template: %s"),
        (0, import_html_entities8.decodeEntities)(template2.title)
      ) : (0, import_i18n50.sprintf)(
        /* translators: %s: template part title */
        (0, import_i18n50.__)("Reset template part: %s"),
        (0, import_html_entities8.decodeEntities)(template2.title)
      );
      commands.push({
        name: "core/reset-template",
        label,
        icon: (0, import_i18n50.isRTL)() ? rotate_right_default : rotate_left_default,
        callback: ({ close }) => {
          revertTemplate3(template2);
          close();
        }
      });
    }
    return {
      isLoading: !hasResolved,
      commands
    };
  };
  function useCommands() {
    (0, import_commands.useCommandLoader)({
      name: "core/editor/edit-ui",
      hook: getEditorCommandLoader()
    });
    (0, import_commands.useCommandLoader)({
      name: "core/editor/contextual-commands",
      hook: getEditedEntityContextualCommands(),
      context: "entity-edit"
    });
    (0, import_commands.useCommandLoader)({
      name: "core/editor/page-content-focus",
      hook: getPageContentFocusCommands(),
      context: "entity-edit"
    });
    (0, import_commands.useCommandLoader)({
      name: "core/edit-site/manipulate-document",
      hook: getManipulateDocumentCommands()
    });
  }

  // packages/editor/build-module/components/block-removal-warnings/index.js
  var import_jsx_runtime91 = __toESM(require_jsx_runtime());
  var import_i18n51 = __toESM(require_i18n());
  var import_block_editor11 = __toESM(require_block_editor());
  var import_data37 = __toESM(require_data());
  var import_element32 = __toESM(require_element());
  var { BlockRemovalWarningModal } = unlock(import_block_editor11.privateApis);
  var TEMPLATE_BLOCKS = [
    "core/post-content",
    "core/post-template",
    "core/query"
  ];
  var BLOCK_REMOVAL_RULES = [
    {
      // Template blocks.
      // The warning is only shown when a user manipulates templates or template parts.
      postTypes: ["wp_template", "wp_template_part"],
      callback(removedBlocks) {
        const removedTemplateBlocks = removedBlocks.filter(
          ({ name }) => TEMPLATE_BLOCKS.includes(name)
        );
        if (removedTemplateBlocks.length) {
          return (0, import_i18n51._n)(
            "Deleting this block will stop your post or page content from displaying on this template. It is not recommended.",
            "Some of the deleted blocks will stop your post or page content from displaying on this template. It is not recommended.",
            removedBlocks.length
          );
        }
      }
    },
    {
      // Pattern overrides.
      // The warning is only shown when the user edits a pattern.
      postTypes: ["wp_block"],
      callback(removedBlocks) {
        const removedBlocksWithOverrides = removedBlocks.filter(
          ({ attributes }) => attributes?.metadata?.bindings && Object.values(attributes.metadata.bindings).some(
            (binding) => binding.source === "core/pattern-overrides"
          )
        );
        if (removedBlocksWithOverrides.length) {
          return (0, import_i18n51._n)(
            "The deleted block allows instance overrides. Removing it may result in content not displaying where this pattern is used. Are you sure you want to proceed?",
            "Some of the deleted blocks allow instance overrides. Removing them may result in content not displaying where this pattern is used. Are you sure you want to proceed?",
            removedBlocks.length
          );
        }
      }
    }
  ];
  function BlockRemovalWarnings() {
    const currentPostType = (0, import_data37.useSelect)(
      (select4) => select4(store).getCurrentPostType(),
      []
    );
    const removalRulesForPostType = (0, import_element32.useMemo)(
      () => BLOCK_REMOVAL_RULES.filter(
        (rule) => rule.postTypes.includes(currentPostType)
      ),
      [currentPostType]
    );
    if (!BlockRemovalWarningModal) {
      return null;
    }
    if (!removalRulesForPostType) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime91.jsx)(BlockRemovalWarningModal, { rules: removalRulesForPostType });
  }

  // packages/editor/build-module/components/start-page-options/index.js
  var import_jsx_runtime92 = __toESM(require_jsx_runtime());
  var import_components26 = __toESM(require_components());
  var import_i18n52 = __toESM(require_i18n());
  var import_element33 = __toESM(require_element());
  var import_block_editor12 = __toESM(require_block_editor());
  var import_data38 = __toESM(require_data());
  var import_core_data26 = __toESM(require_core_data());
  var import_blocks8 = __toESM(require_blocks());
  var import_preferences8 = __toESM(require_preferences());
  function useStartPatterns() {
    const { blockPatternsWithPostContentBlockType, postType: postType2 } = (0, import_data38.useSelect)(
      (select4) => {
        const { getPatternsByBlockTypes, getBlocksByName } = select4(import_block_editor12.store);
        const { getCurrentPostType: getCurrentPostType2, getRenderingMode: getRenderingMode2 } = select4(store);
        const rootClientId = getRenderingMode2() === "post-only" ? "" : getBlocksByName("core/post-content")?.[0];
        return {
          blockPatternsWithPostContentBlockType: getPatternsByBlockTypes(
            "core/post-content",
            rootClientId
          ),
          postType: getCurrentPostType2()
        };
      },
      []
    );
    return (0, import_element33.useMemo)(() => {
      if (!blockPatternsWithPostContentBlockType?.length) {
        return [];
      }
      return blockPatternsWithPostContentBlockType.filter((pattern) => {
        return postType2 === "page" && !pattern.postTypes || Array.isArray(pattern.postTypes) && pattern.postTypes.includes(postType2);
      });
    }, [postType2, blockPatternsWithPostContentBlockType]);
  }
  function PatternSelection({ blockPatterns, onChoosePattern }) {
    const { editEntityRecord } = (0, import_data38.useDispatch)(import_core_data26.store);
    const { postType: postType2, postId: postId2 } = (0, import_data38.useSelect)((select4) => {
      const { getCurrentPostType: getCurrentPostType2, getCurrentPostId: getCurrentPostId2 } = select4(store);
      return {
        postType: getCurrentPostType2(),
        postId: getCurrentPostId2()
      };
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(
      import_block_editor12.__experimentalBlockPatternsList,
      {
        blockPatterns,
        onClickPattern: (_pattern, blocks) => {
          editEntityRecord("postType", postType2, postId2, {
            blocks,
            content: ({ blocks: blocksForSerialization = [] }) => (0, import_blocks8.__unstableSerializeAndClean)(blocksForSerialization)
          });
          onChoosePattern();
        }
      }
    );
  }
  function StartPageOptionsModal({ onClose }) {
    const [showStartPatterns, setShowStartPatterns] = (0, import_element33.useState)(true);
    const { set: setPreference } = (0, import_data38.useDispatch)(import_preferences8.store);
    const startPatterns = useStartPatterns();
    const hasStartPattern = startPatterns.length > 0;
    if (!hasStartPattern) {
      return null;
    }
    function handleClose() {
      onClose();
      setPreference("core", "enableChoosePatternModal", showStartPatterns);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime92.jsxs)(
      import_components26.Modal,
      {
        className: "editor-start-page-options__modal",
        title: (0, import_i18n52.__)("Choose a pattern"),
        isFullScreen: true,
        onRequestClose: handleClose,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime92.jsx)("div", { className: "editor-start-page-options__modal-content", children: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(
            PatternSelection,
            {
              blockPatterns: startPatterns,
              onChoosePattern: handleClose
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(
            import_components26.Flex,
            {
              className: "editor-start-page-options__modal__actions",
              justify: "flex-end",
              expanded: false,
              children: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(import_components26.FlexItem, { children: /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(
                import_components26.ToggleControl,
                {
                  __nextHasNoMarginBottom: true,
                  checked: showStartPatterns,
                  label: (0, import_i18n52.__)("Show starter patterns"),
                  help: (0, import_i18n52.__)(
                    "Shows starter patterns when creating a new page."
                  ),
                  onChange: (newValue) => {
                    setShowStartPatterns(newValue);
                  }
                }
              ) })
            }
          )
        ]
      }
    );
  }
  function StartPageOptions() {
    const [isOpen, setIsOpen] = (0, import_element33.useState)(false);
    const { isEditedPostDirty: isEditedPostDirty2, isEditedPostEmpty: isEditedPostEmpty2 } = (0, import_data38.useSelect)(store);
    const { isModalActive: isModalActive2 } = (0, import_data38.useSelect)(store2);
    const { enabled, postId: postId2 } = (0, import_data38.useSelect)((select4) => {
      const { getCurrentPostId: getCurrentPostId2, getCurrentPostType: getCurrentPostType2 } = select4(store);
      const choosePatternModalEnabled = select4(import_preferences8.store).get(
        "core",
        "enableChoosePatternModal"
      );
      return {
        postId: getCurrentPostId2(),
        enabled: choosePatternModalEnabled && TEMPLATE_POST_TYPE !== getCurrentPostType2()
      };
    }, []);
    (0, import_element33.useEffect)(() => {
      const isFreshPage = !isEditedPostDirty2() && isEditedPostEmpty2();
      const isPreferencesModalActive = isModalActive2("editor/preferences");
      if (!enabled || !isFreshPage || isPreferencesModalActive) {
        return;
      }
      setIsOpen(true);
    }, [
      enabled,
      postId2,
      isEditedPostDirty2,
      isEditedPostEmpty2,
      isModalActive2
    ]);
    if (!isOpen) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime92.jsx)(StartPageOptionsModal, { onClose: () => setIsOpen(false) });
  }

  // packages/editor/build-module/components/keyboard-shortcut-help-modal/index.js
  var import_jsx_runtime95 = __toESM(require_jsx_runtime());
  var import_components27 = __toESM(require_components());
  var import_i18n54 = __toESM(require_i18n());
  var import_keyboard_shortcuts2 = __toESM(require_keyboard_shortcuts());
  var import_data40 = __toESM(require_data());

  // packages/editor/build-module/components/keyboard-shortcut-help-modal/config.js
  var import_i18n53 = __toESM(require_i18n());
  var textFormattingShortcuts = [
    {
      keyCombination: { modifier: "primary", character: "b" },
      description: (0, import_i18n53.__)("Make the selected text bold.")
    },
    {
      keyCombination: { modifier: "primary", character: "i" },
      description: (0, import_i18n53.__)("Make the selected text italic.")
    },
    {
      keyCombination: { modifier: "primary", character: "k" },
      description: (0, import_i18n53.__)("Convert the selected text into a link.")
    },
    {
      keyCombination: { modifier: "primaryShift", character: "k" },
      description: (0, import_i18n53.__)("Remove a link.")
    },
    {
      keyCombination: { character: "[[" },
      description: (0, import_i18n53.__)("Insert a link to a post or page.")
    },
    {
      keyCombination: { modifier: "primary", character: "u" },
      description: (0, import_i18n53.__)("Underline the selected text.")
    },
    {
      keyCombination: { modifier: "access", character: "d" },
      description: (0, import_i18n53.__)("Strikethrough the selected text.")
    },
    {
      keyCombination: { modifier: "access", character: "x" },
      description: (0, import_i18n53.__)("Make the selected text inline code.")
    },
    {
      keyCombination: {
        modifier: "access",
        character: "0"
      },
      aliases: [
        {
          modifier: "access",
          character: "7"
        }
      ],
      description: (0, import_i18n53.__)("Convert the current heading to a paragraph.")
    },
    {
      keyCombination: { modifier: "access", character: "1-6" },
      description: (0, import_i18n53.__)(
        "Convert the current paragraph or heading to a heading of level 1 to 6."
      )
    },
    {
      keyCombination: { modifier: "primaryShift", character: "SPACE" },
      description: (0, import_i18n53.__)("Add non breaking space.")
    }
  ];

  // packages/editor/build-module/components/keyboard-shortcut-help-modal/shortcut.js
  var import_jsx_runtime93 = __toESM(require_jsx_runtime());
  var import_element34 = __toESM(require_element());
  var import_keycodes = __toESM(require_keycodes());
  function KeyCombination({ keyCombination, forceAriaLabel }) {
    const shortcut = keyCombination.modifier ? import_keycodes.displayShortcutList[keyCombination.modifier](
      keyCombination.character
    ) : keyCombination.character;
    const ariaLabel = keyCombination.modifier ? import_keycodes.shortcutAriaLabel[keyCombination.modifier](
      keyCombination.character
    ) : keyCombination.character;
    return /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(
      "kbd",
      {
        className: "editor-keyboard-shortcut-help-modal__shortcut-key-combination",
        "aria-label": forceAriaLabel || ariaLabel,
        children: (Array.isArray(shortcut) ? shortcut : [shortcut]).map(
          (character, index2) => {
            if (character === "+") {
              return /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(import_element34.Fragment, { children: character }, index2);
            }
            return /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(
              "kbd",
              {
                className: "editor-keyboard-shortcut-help-modal__shortcut-key",
                children: character
              },
              index2
            );
          }
        )
      }
    );
  }
  function Shortcut({ description, keyCombination, aliases = [], ariaLabel }) {
    return /* @__PURE__ */ (0, import_jsx_runtime93.jsxs)(import_jsx_runtime93.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime93.jsx)("div", { className: "editor-keyboard-shortcut-help-modal__shortcut-description", children: description }),
      /* @__PURE__ */ (0, import_jsx_runtime93.jsxs)("div", { className: "editor-keyboard-shortcut-help-modal__shortcut-term", children: [
        /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(
          KeyCombination,
          {
            keyCombination,
            forceAriaLabel: ariaLabel
          }
        ),
        aliases.map((alias, index2) => /* @__PURE__ */ (0, import_jsx_runtime93.jsx)(
          KeyCombination,
          {
            keyCombination: alias,
            forceAriaLabel: ariaLabel
          },
          index2
        ))
      ] })
    ] });
  }
  var shortcut_default = Shortcut;

  // packages/editor/build-module/components/keyboard-shortcut-help-modal/dynamic-shortcut.js
  var import_jsx_runtime94 = __toESM(require_jsx_runtime());
  var import_data39 = __toESM(require_data());
  var import_keyboard_shortcuts = __toESM(require_keyboard_shortcuts());
  function DynamicShortcut({ name }) {
    const { keyCombination, description, aliases } = (0, import_data39.useSelect)(
      (select4) => {
        const {
          getShortcutKeyCombination,
          getShortcutDescription,
          getShortcutAliases
        } = select4(import_keyboard_shortcuts.store);
        return {
          keyCombination: getShortcutKeyCombination(name),
          aliases: getShortcutAliases(name),
          description: getShortcutDescription(name)
        };
      },
      [name]
    );
    if (!keyCombination) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime94.jsx)(
      shortcut_default,
      {
        keyCombination,
        description,
        aliases
      }
    );
  }
  var dynamic_shortcut_default = DynamicShortcut;

  // packages/editor/build-module/components/keyboard-shortcut-help-modal/index.js
  var KEYBOARD_SHORTCUT_HELP_MODAL_NAME = "editor/keyboard-shortcut-help";
  var ShortcutList = ({ shortcuts }) => (
    /*
     * Disable reason: The `list` ARIA role is redundant but
     * Safari+VoiceOver won't announce the list otherwise.
     */
    /* eslint-disable jsx-a11y/no-redundant-roles */
    /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(
      "ul",
      {
        className: "editor-keyboard-shortcut-help-modal__shortcut-list",
        role: "list",
        children: shortcuts.map((shortcut, index2) => /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(
          "li",
          {
            className: "editor-keyboard-shortcut-help-modal__shortcut",
            children: typeof shortcut === "string" ? /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(dynamic_shortcut_default, { name: shortcut }) : /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(shortcut_default, { ...shortcut })
          },
          index2
        ))
      }
    )
  );
  var ShortcutSection = ({ title, shortcuts, className }) => /* @__PURE__ */ (0, import_jsx_runtime95.jsxs)(
    "section",
    {
      className: clsx_default(
        "editor-keyboard-shortcut-help-modal__section",
        className
      ),
      children: [
        !!title && /* @__PURE__ */ (0, import_jsx_runtime95.jsx)("h2", { className: "editor-keyboard-shortcut-help-modal__section-title", children: title }),
        /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(ShortcutList, { shortcuts })
      ]
    }
  );
  var ShortcutCategorySection = ({
    title,
    categoryName,
    additionalShortcuts = []
  }) => {
    const categoryShortcuts = (0, import_data40.useSelect)(
      (select4) => {
        return select4(import_keyboard_shortcuts2.store).getCategoryShortcuts(
          categoryName
        );
      },
      [categoryName]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(
      ShortcutSection,
      {
        title,
        shortcuts: categoryShortcuts.concat(additionalShortcuts)
      }
    );
  };
  function KeyboardShortcutHelpModal() {
    const isModalActive2 = (0, import_data40.useSelect)(
      (select4) => select4(store2).isModalActive(
        KEYBOARD_SHORTCUT_HELP_MODAL_NAME
      ),
      []
    );
    const { openModal: openModal2, closeModal: closeModal2 } = (0, import_data40.useDispatch)(store2);
    const toggleModal = () => {
      if (isModalActive2) {
        closeModal2();
      } else {
        openModal2(KEYBOARD_SHORTCUT_HELP_MODAL_NAME);
      }
    };
    (0, import_keyboard_shortcuts2.useShortcut)("core/editor/keyboard-shortcuts", toggleModal);
    if (!isModalActive2) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime95.jsxs)(
      import_components27.Modal,
      {
        className: "editor-keyboard-shortcut-help-modal",
        title: (0, import_i18n54.__)("Keyboard shortcuts"),
        closeButtonLabel: (0, import_i18n54.__)("Close"),
        onRequestClose: toggleModal,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(
            ShortcutSection,
            {
              className: "editor-keyboard-shortcut-help-modal__main-shortcuts",
              shortcuts: ["core/editor/keyboard-shortcuts"]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(
            ShortcutCategorySection,
            {
              title: (0, import_i18n54.__)("Global shortcuts"),
              categoryName: "global"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(
            ShortcutCategorySection,
            {
              title: (0, import_i18n54.__)("Selection shortcuts"),
              categoryName: "selection"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(
            ShortcutCategorySection,
            {
              title: (0, import_i18n54.__)("Block shortcuts"),
              categoryName: "block",
              additionalShortcuts: [
                {
                  keyCombination: { character: "/" },
                  description: (0, import_i18n54.__)(
                    "Change the block type after adding a new paragraph."
                  ),
                  /* translators: The forward-slash character. e.g. '/'. */
                  ariaLabel: (0, import_i18n54.__)("Forward-slash")
                }
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(
            ShortcutSection,
            {
              title: (0, import_i18n54.__)("Text formatting"),
              shortcuts: textFormattingShortcuts
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime95.jsx)(
            ShortcutCategorySection,
            {
              title: (0, import_i18n54.__)("List View shortcuts"),
              categoryName: "list-view"
            }
          )
        ]
      }
    );
  }
  var keyboard_shortcut_help_modal_default = KeyboardShortcutHelpModal;

  // packages/editor/build-module/components/block-settings-menu/content-only-settings-menu.js
  var import_jsx_runtime96 = __toESM(require_jsx_runtime());
  var import_block_editor13 = __toESM(require_block_editor());
  var import_core_data27 = __toESM(require_core_data());
  var import_components28 = __toESM(require_components());
  var import_data41 = __toESM(require_data());
  var import_i18n55 = __toESM(require_i18n());
  function ContentOnlySettingsMenuItems({ clientId, onClose }) {
    const postContentBlocks = usePostContentBlocks();
    const { entity, onNavigateToEntityRecord, canEditTemplates } = (0, import_data41.useSelect)(
      (select4) => {
        const {
          getBlockParentsByBlockName,
          getSettings: getSettings4,
          getBlockAttributes: getBlockAttributes2,
          getBlockParents
        } = select4(import_block_editor13.store);
        const { getCurrentTemplateId: getCurrentTemplateId2, getRenderingMode: getRenderingMode2 } = select4(store);
        const patternParent = getBlockParentsByBlockName(
          clientId,
          "core/block",
          true
        )[0];
        let record;
        if (patternParent) {
          record = select4(import_core_data27.store).getEntityRecord(
            "postType",
            "wp_block",
            getBlockAttributes2(patternParent).ref
          );
        } else if (getRenderingMode2() === "template-locked" && !getBlockParents(clientId).some(
          (parent) => postContentBlocks.includes(parent)
        )) {
          record = select4(import_core_data27.store).getEntityRecord(
            "postType",
            "wp_template",
            getCurrentTemplateId2()
          );
        }
        if (!record) {
          return {};
        }
        const _canEditTemplates = select4(import_core_data27.store).canUser("create", {
          kind: "postType",
          name: "wp_template"
        });
        return {
          canEditTemplates: _canEditTemplates,
          entity: record,
          onNavigateToEntityRecord: getSettings4().onNavigateToEntityRecord
        };
      },
      [clientId, postContentBlocks]
    );
    if (!entity) {
      return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(
        TemplateLockContentOnlyMenuItems,
        {
          clientId,
          onClose
        }
      );
    }
    const isPattern = entity.type === "wp_block";
    let helpText = isPattern ? (0, import_i18n55.__)(
      "Edit the pattern to move, delete, or make further changes to this block."
    ) : (0, import_i18n55.__)(
      "Edit the template to move, delete, or make further changes to this block."
    );
    if (!canEditTemplates) {
      helpText = (0, import_i18n55.__)(
        "Only users with permissions to edit the template can move or delete this block"
      );
    }
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsxs)(import_jsx_runtime96.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(import_block_editor13.__unstableBlockSettingsMenuFirstItem, { children: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(
        import_components28.MenuItem,
        {
          onClick: () => {
            onNavigateToEntityRecord({
              postId: entity.id,
              postType: entity.type
            });
          },
          disabled: !canEditTemplates,
          children: isPattern ? (0, import_i18n55.__)("Edit pattern") : (0, import_i18n55.__)("Edit template")
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(
        import_components28.__experimentalText,
        {
          variant: "muted",
          as: "p",
          className: "editor-content-only-settings-menu__description",
          children: helpText
        }
      )
    ] });
  }
  function TemplateLockContentOnlyMenuItems({ clientId, onClose }) {
    const { contentLockingParent } = (0, import_data41.useSelect)(
      (select4) => {
        const { getContentLockingParent } = unlock(
          select4(import_block_editor13.store)
        );
        return {
          contentLockingParent: getContentLockingParent(clientId)
        };
      },
      [clientId]
    );
    const blockDisplayInformation = (0, import_block_editor13.useBlockDisplayInformation)(contentLockingParent);
    const blockEditorActions = (0, import_data41.useDispatch)(import_block_editor13.store);
    if (!blockDisplayInformation?.title) {
      return null;
    }
    const { modifyContentLockBlock } = unlock(blockEditorActions);
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsxs)(import_jsx_runtime96.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(import_block_editor13.__unstableBlockSettingsMenuFirstItem, { children: /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(
        import_components28.MenuItem,
        {
          onClick: () => {
            modifyContentLockBlock(contentLockingParent);
            onClose();
          },
          children: (0, import_i18n55._x)("Unlock", "Unlock content locked blocks")
        }
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(
        import_components28.__experimentalText,
        {
          variant: "muted",
          as: "p",
          className: "editor-content-only-settings-menu__description",
          children: (0, import_i18n55.__)(
            "Temporarily unlock the parent block to edit, delete or make further changes to this block."
          )
        }
      )
    ] });
  }
  function ContentOnlySettingsMenu() {
    return /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(import_block_editor13.BlockSettingsMenuControls, { children: ({ selectedClientIds, onClose }) => selectedClientIds.length === 1 && /* @__PURE__ */ (0, import_jsx_runtime96.jsx)(
      ContentOnlySettingsMenuItems,
      {
        clientId: selectedClientIds[0],
        onClose
      }
    ) });
  }

  // packages/editor/build-module/components/start-template-options/index.js
  var import_jsx_runtime97 = __toESM(require_jsx_runtime());
  var import_components29 = __toESM(require_components());
  var import_i18n56 = __toESM(require_i18n());
  var import_element35 = __toESM(require_element());
  var import_block_editor14 = __toESM(require_block_editor());
  var import_data42 = __toESM(require_data());
  var import_blocks9 = __toESM(require_blocks());
  var import_core_data28 = __toESM(require_core_data());
  function useFallbackTemplateContent(slug, isCustom = false) {
    return (0, import_data42.useSelect)(
      (select4) => {
        const { getEntityRecord, getDefaultTemplateId } = select4(import_core_data28.store);
        const templateId2 = getDefaultTemplateId({
          slug,
          is_custom: isCustom,
          ignore_empty: true
        });
        return templateId2 ? getEntityRecord("postType", TEMPLATE_POST_TYPE, templateId2)?.content?.raw : void 0;
      },
      [slug, isCustom]
    );
  }
  function useStartPatterns2(fallbackContent) {
    const { slug, patterns: patterns2 } = (0, import_data42.useSelect)((select4) => {
      const { getCurrentPostType: getCurrentPostType2, getCurrentPostId: getCurrentPostId2 } = select4(store);
      const { getEntityRecord, getBlockPatterns } = select4(import_core_data28.store);
      const postId2 = getCurrentPostId2();
      const postType2 = getCurrentPostType2();
      const record = getEntityRecord("postType", postType2, postId2);
      return {
        slug: record.slug,
        patterns: getBlockPatterns()
      };
    }, []);
    const currentThemeStylesheet = (0, import_data42.useSelect)(
      (select4) => select4(import_core_data28.store).getCurrentTheme().stylesheet
    );
    function injectThemeAttributeInBlockTemplateContent2(block) {
      if (block.innerBlocks.find(
        (innerBlock) => innerBlock.name === "core/template-part"
      )) {
        block.innerBlocks = block.innerBlocks.map((innerBlock) => {
          if (innerBlock.name === "core/template-part" && innerBlock.attributes.theme === void 0) {
            innerBlock.attributes.theme = currentThemeStylesheet;
          }
          return innerBlock;
        });
      }
      if (block.name === "core/template-part" && block.attributes.theme === void 0) {
        block.attributes.theme = currentThemeStylesheet;
      }
      return block;
    }
    return (0, import_element35.useMemo)(() => {
      return [
        {
          name: "fallback",
          blocks: (0, import_blocks9.parse)(fallbackContent),
          title: (0, import_i18n56.__)("Fallback content")
        },
        ...patterns2.filter((pattern) => {
          return Array.isArray(pattern.templateTypes) && pattern.templateTypes.some(
            (templateType) => slug.startsWith(templateType)
          );
        }).map((pattern) => {
          return {
            ...pattern,
            blocks: (0, import_blocks9.parse)(pattern.content).map(
              (block) => injectThemeAttributeInBlockTemplateContent2(block)
            )
          };
        })
      ];
    }, [fallbackContent, slug, patterns2]);
  }
  function PatternSelection2({ fallbackContent, onChoosePattern, postType: postType2 }) {
    const [, , onChange] = (0, import_core_data28.useEntityBlockEditor)("postType", postType2);
    const blockPatterns = useStartPatterns2(fallbackContent);
    return /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
      import_block_editor14.__experimentalBlockPatternsList,
      {
        blockPatterns,
        onClickPattern: (pattern, blocks) => {
          onChange(blocks, { selection: void 0 });
          onChoosePattern();
        }
      }
    );
  }
  function StartModal({ slug, isCustom, onClose, postType: postType2 }) {
    const fallbackContent = useFallbackTemplateContent(slug, isCustom);
    if (!fallbackContent) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime97.jsxs)(
      import_components29.Modal,
      {
        className: "editor-start-template-options__modal",
        title: (0, import_i18n56.__)("Choose a pattern"),
        closeLabel: (0, import_i18n56.__)("Cancel"),
        focusOnMount: "firstElement",
        onRequestClose: onClose,
        isFullScreen: true,
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime97.jsx)("div", { className: "editor-start-template-options__modal-content", children: /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
            PatternSelection2,
            {
              fallbackContent,
              slug,
              isCustom,
              postType: postType2,
              onChoosePattern: () => {
                onClose();
              }
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
            import_components29.Flex,
            {
              className: "editor-start-template-options__modal__actions",
              justify: "flex-end",
              expanded: false,
              children: /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(import_components29.FlexItem, { children: /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
                import_components29.Button,
                {
                  __next40pxDefaultSize: true,
                  variant: "tertiary",
                  onClick: onClose,
                  children: (0, import_i18n56.__)("Skip")
                }
              ) })
            }
          )
        ]
      }
    );
  }
  function StartTemplateOptions() {
    const [isClosed, setIsClosed] = (0, import_element35.useState)(false);
    const { shouldOpenModal, slug, isCustom, postType: postType2, postId: postId2 } = (0, import_data42.useSelect)(
      (select4) => {
        const { getCurrentPostType: getCurrentPostType2, getCurrentPostId: getCurrentPostId2 } = select4(store);
        const _postType = getCurrentPostType2();
        const _postId = getCurrentPostId2();
        const { getEditedEntityRecord, hasEditsForEntityRecord } = select4(import_core_data28.store);
        const templateRecord = getEditedEntityRecord(
          "postType",
          _postType,
          _postId
        );
        const hasEdits = hasEditsForEntityRecord(
          "postType",
          _postType,
          _postId
        );
        return {
          shouldOpenModal: !hasEdits && "" === templateRecord.content && TEMPLATE_POST_TYPE === _postType,
          slug: templateRecord.slug,
          isCustom: templateRecord.is_custom,
          postType: _postType,
          postId: _postId
        };
      },
      []
    );
    (0, import_element35.useEffect)(() => {
      setIsClosed(false);
    }, [postType2, postId2]);
    if (!shouldOpenModal || isClosed) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime97.jsx)(
      StartModal,
      {
        slug,
        isCustom,
        postType: postType2,
        onClose: () => setIsClosed(true)
      }
    );
  }

  // packages/editor/build-module/components/global-keyboard-shortcuts/index.js
  var import_keyboard_shortcuts3 = __toESM(require_keyboard_shortcuts());
  var import_data43 = __toESM(require_data());
  var import_block_editor15 = __toESM(require_block_editor());
  function EditorKeyboardShortcuts() {
    const isModeToggleDisabled = (0, import_data43.useSelect)((select4) => {
      const { richEditingEnabled, codeEditingEnabled } = select4(store).getEditorSettings();
      return !richEditingEnabled || !codeEditingEnabled;
    }, []);
    const { getBlockSelectionStart: getBlockSelectionStart2 } = (0, import_data43.useSelect)(import_block_editor15.store);
    const { getActiveComplementaryArea: getActiveComplementaryArea2 } = (0, import_data43.useSelect)(store2);
    const { enableComplementaryArea: enableComplementaryArea2, disableComplementaryArea: disableComplementaryArea2 } = (0, import_data43.useDispatch)(store2);
    const {
      redo: redo2,
      undo: undo2,
      savePost: savePost2,
      setIsListViewOpened: setIsListViewOpened2,
      switchEditorMode: switchEditorMode2,
      toggleDistractionFree: toggleDistractionFree2
    } = (0, import_data43.useDispatch)(store);
    const {
      isEditedPostDirty: isEditedPostDirty2,
      isPostSavingLocked: isPostSavingLocked2,
      isListViewOpened: isListViewOpened2,
      getEditorMode: getEditorMode2
    } = (0, import_data43.useSelect)(store);
    (0, import_keyboard_shortcuts3.useShortcut)(
      "core/editor/toggle-mode",
      () => {
        switchEditorMode2(
          getEditorMode2() === "visual" ? "text" : "visual"
        );
      },
      {
        isDisabled: isModeToggleDisabled
      }
    );
    (0, import_keyboard_shortcuts3.useShortcut)("core/editor/toggle-distraction-free", () => {
      toggleDistractionFree2();
    });
    (0, import_keyboard_shortcuts3.useShortcut)("core/editor/undo", (event) => {
      undo2();
      event.preventDefault();
    });
    (0, import_keyboard_shortcuts3.useShortcut)("core/editor/redo", (event) => {
      redo2();
      event.preventDefault();
    });
    (0, import_keyboard_shortcuts3.useShortcut)("core/editor/save", (event) => {
      event.preventDefault();
      if (isPostSavingLocked2()) {
        return;
      }
      if (!isEditedPostDirty2()) {
        return;
      }
      savePost2();
    });
    (0, import_keyboard_shortcuts3.useShortcut)("core/editor/toggle-list-view", (event) => {
      if (!isListViewOpened2()) {
        event.preventDefault();
        setIsListViewOpened2(true);
      }
    });
    (0, import_keyboard_shortcuts3.useShortcut)("core/editor/toggle-sidebar", (event) => {
      event.preventDefault();
      const isEditorSidebarOpened = [
        "edit-post/document",
        "edit-post/block"
      ].includes(getActiveComplementaryArea2("core"));
      if (isEditorSidebarOpened) {
        disableComplementaryArea2("core");
      } else {
        const sidebarToOpen = getBlockSelectionStart2() ? "edit-post/block" : "edit-post/document";
        enableComplementaryArea2("core", sidebarToOpen);
      }
    });
    return null;
  }

  // packages/editor/build-module/components/template-part-menu-items/index.js
  var import_jsx_runtime100 = __toESM(require_jsx_runtime());
  var import_data46 = __toESM(require_data());
  var import_block_editor18 = __toESM(require_block_editor());

  // packages/editor/build-module/components/template-part-menu-items/convert-to-regular.js
  var import_jsx_runtime98 = __toESM(require_jsx_runtime());
  var import_data44 = __toESM(require_data());
  var import_block_editor16 = __toESM(require_block_editor());
  var import_components30 = __toESM(require_components());
  var import_i18n57 = __toESM(require_i18n());
  function ConvertToRegularBlocks({ clientId, onClose }) {
    const { getBlocks: getBlocks2 } = (0, import_data44.useSelect)(import_block_editor16.store);
    const { replaceBlocks: replaceBlocks2 } = (0, import_data44.useDispatch)(import_block_editor16.store);
    const canRemove = (0, import_data44.useSelect)(
      (select4) => select4(import_block_editor16.store).canRemoveBlock(clientId),
      [clientId]
    );
    if (!canRemove) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime98.jsx)(
      import_components30.MenuItem,
      {
        onClick: () => {
          replaceBlocks2(clientId, getBlocks2(clientId));
          onClose();
        },
        children: (0, import_i18n57.__)("Detach")
      }
    );
  }

  // packages/editor/build-module/components/template-part-menu-items/convert-to-template-part.js
  var import_jsx_runtime99 = __toESM(require_jsx_runtime());
  var import_data45 = __toESM(require_data());
  var import_block_editor17 = __toESM(require_block_editor());
  var import_components31 = __toESM(require_components());
  var import_blocks10 = __toESM(require_blocks());
  var import_i18n58 = __toESM(require_i18n());
  var import_element36 = __toESM(require_element());
  var import_notices14 = __toESM(require_notices());
  var import_core_data29 = __toESM(require_core_data());
  function ConvertToTemplatePart({ clientIds, blocks }) {
    const [isModalOpen, setIsModalOpen] = (0, import_element36.useState)(false);
    const { replaceBlocks: replaceBlocks2 } = (0, import_data45.useDispatch)(import_block_editor17.store);
    const { createSuccessNotice } = (0, import_data45.useDispatch)(import_notices14.store);
    const { isBlockBasedTheme, canCreate } = (0, import_data45.useSelect)((select4) => {
      return {
        isBlockBasedTheme: select4(import_core_data29.store).getCurrentTheme()?.is_block_theme,
        canCreate: select4(import_block_editor17.store).canInsertBlockType(
          "core/template-part"
        )
      };
    }, []);
    if (!isBlockBasedTheme || !canCreate) {
      return null;
    }
    const onConvert = async (templatePart) => {
      replaceBlocks2(
        clientIds,
        (0, import_blocks10.createBlock)("core/template-part", {
          slug: templatePart.slug,
          theme: templatePart.theme
        })
      );
      createSuccessNotice((0, import_i18n58.__)("Template part created."), {
        type: "snackbar"
      });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime99.jsxs)(import_jsx_runtime99.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(
        import_components31.MenuItem,
        {
          icon: symbol_filled_default,
          onClick: () => {
            setIsModalOpen(true);
          },
          "aria-expanded": isModalOpen,
          "aria-haspopup": "dialog",
          children: (0, import_i18n58.__)("Create template part")
        }
      ),
      isModalOpen && /* @__PURE__ */ (0, import_jsx_runtime99.jsx)(
        CreateTemplatePartModal,
        {
          closeModal: () => {
            setIsModalOpen(false);
          },
          blocks,
          onCreate: onConvert
        }
      )
    ] });
  }

  // packages/editor/build-module/components/template-part-menu-items/index.js
  function TemplatePartMenuItems() {
    return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(import_block_editor18.BlockSettingsMenuControls, { children: ({ selectedClientIds, onClose }) => /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(
      TemplatePartConverterMenuItem,
      {
        clientIds: selectedClientIds,
        onClose
      }
    ) });
  }
  function TemplatePartConverterMenuItem({ clientIds, onClose }) {
    const { blocks } = (0, import_data46.useSelect)(
      (select4) => {
        const { getBlocksByClientId: getBlocksByClientId2 } = select4(import_block_editor18.store);
        return {
          blocks: getBlocksByClientId2(clientIds)
        };
      },
      [clientIds]
    );
    if (blocks.length === 1 && blocks[0]?.name === "core/template-part") {
      return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(
        ConvertToRegularBlocks,
        {
          clientId: clientIds[0],
          onClose
        }
      );
    }
    return /* @__PURE__ */ (0, import_jsx_runtime100.jsx)(ConvertToTemplatePart, { clientIds, blocks });
  }

  // packages/editor/build-module/components/provider/index.js
  var { ExperimentalBlockEditorProvider } = unlock(import_block_editor19.privateApis);
  var { PatternsMenuItems } = unlock(import_patterns7.privateApis);
  var noop3 = () => {
  };
  var NON_CONTEXTUAL_POST_TYPES = [
    "wp_block",
    "wp_navigation",
    "wp_template_part"
  ];
  function useBlockEditorProps(post, template2, mode) {
    const rootLevelPost = mode === "template-locked" ? "template" : "post";
    const [postBlocks, onInput, onChange] = (0, import_core_data30.useEntityBlockEditor)(
      "postType",
      post.type,
      { id: post.id }
    );
    const [templateBlocks, onInputTemplate, onChangeTemplate] = (0, import_core_data30.useEntityBlockEditor)("postType", template2?.type, {
      id: template2?.id
    });
    const maybeNavigationBlocks = (0, import_element37.useMemo)(() => {
      if (post.type === "wp_navigation") {
        return [
          (0, import_blocks11.createBlock)("core/navigation", {
            ref: post.id,
            // As the parent editor is locked with `templateLock`, the template locking
            // must be explicitly "unset" on the block itself to allow the user to modify
            // the block's content.
            templateLock: false
          })
        ];
      }
    }, [post.type, post.id]);
    const blocks = (0, import_element37.useMemo)(() => {
      if (maybeNavigationBlocks) {
        return maybeNavigationBlocks;
      }
      if (rootLevelPost === "template") {
        return templateBlocks;
      }
      return postBlocks;
    }, [maybeNavigationBlocks, rootLevelPost, templateBlocks, postBlocks]);
    const disableRootLevelChanges = !!template2 && mode === "template-locked" || post.type === "wp_navigation";
    if (disableRootLevelChanges) {
      return [blocks, noop3, noop3];
    }
    return [
      blocks,
      rootLevelPost === "post" ? onInput : onInputTemplate,
      rootLevelPost === "post" ? onChange : onChangeTemplate
    ];
  }
  var ExperimentalEditorProvider = with_registry_provider_default(
    ({
      post,
      settings,
      recovery,
      initialEdits,
      children,
      BlockEditorProviderComponent = ExperimentalBlockEditorProvider,
      __unstableTemplate: template2
    }) => {
      const hasTemplate = !!template2;
      const {
        editorSettings: editorSettings2,
        selection,
        isReady: isReady2,
        mode,
        defaultMode,
        postTypeEntities
      } = (0, import_data47.useSelect)(
        (select4) => {
          const {
            getEditorSettings: getEditorSettings2,
            getEditorSelection: getEditorSelection2,
            getRenderingMode: getRenderingMode2,
            __unstableIsEditorReady: __unstableIsEditorReady2,
            getDefaultRenderingMode: getDefaultRenderingMode2
          } = unlock(select4(store));
          const { getEntitiesConfig } = select4(import_core_data30.store);
          const _mode = getRenderingMode2();
          const _defaultMode = getDefaultRenderingMode2(post.type);
          const hasResolvedDefaultMode = _defaultMode === "template-locked" ? hasTemplate : _defaultMode !== void 0;
          const isRenderingModeReady = _defaultMode !== void 0;
          return {
            editorSettings: getEditorSettings2(),
            isReady: __unstableIsEditorReady2(),
            mode: isRenderingModeReady ? _mode : void 0,
            defaultMode: hasResolvedDefaultMode ? _defaultMode : void 0,
            selection: getEditorSelection2(),
            postTypeEntities: post.type === "wp_template" ? getEntitiesConfig("postType") : null
          };
        },
        [post.type, hasTemplate]
      );
      const shouldRenderTemplate = hasTemplate && mode !== "post-only";
      const rootLevelPost = shouldRenderTemplate ? template2 : post;
      const defaultBlockContext = (0, import_element37.useMemo)(() => {
        const postContext = {};
        if (post.type === "wp_template" || post.type === "wp_registered_template") {
          if (post.slug === "page") {
            postContext.postType = "page";
          } else if (post.slug === "single") {
            postContext.postType = "post";
          } else if (post.slug.split("-")[0] === "single") {
            const postTypeNames = postTypeEntities?.map((entity) => entity.name) || [];
            const match = post.slug.match(
              `^single-(${postTypeNames.join("|")})(?:-.+)?$`
            );
            if (match) {
              postContext.postType = match[1];
            }
          }
        } else if (!NON_CONTEXTUAL_POST_TYPES.includes(rootLevelPost.type) || shouldRenderTemplate) {
          postContext.postId = post.id;
          postContext.postType = post.type;
        }
        return {
          ...postContext,
          templateSlug: rootLevelPost.type === "wp_template" ? rootLevelPost.slug : void 0
        };
      }, [
        shouldRenderTemplate,
        post.id,
        post.type,
        post.slug,
        rootLevelPost.type,
        rootLevelPost.slug,
        postTypeEntities
      ]);
      const { id, type } = rootLevelPost;
      const blockEditorSettings = use_block_editor_settings_default(
        editorSettings2,
        type,
        id,
        mode
      );
      const [blocks, onInput, onChange] = useBlockEditorProps(
        post,
        template2,
        mode
      );
      const {
        updatePostLock: updatePostLock2,
        setupEditor: setupEditor2,
        updateEditorSettings: updateEditorSettings2,
        setCurrentTemplateId: setCurrentTemplateId2,
        setEditedPost: setEditedPost2,
        setRenderingMode: setRenderingMode2
      } = unlock((0, import_data47.useDispatch)(store));
      const { createWarningNotice, removeNotice } = (0, import_data47.useDispatch)(import_notices15.store);
      (0, import_element37.useLayoutEffect)(() => {
        if (recovery) {
          return;
        }
        updatePostLock2(settings.postLock);
        setupEditor2(post, initialEdits, settings.template);
        if (settings.autosave) {
          createWarningNotice(
            (0, import_i18n59.__)(
              "There is an autosave of this post that is more recent than the version below."
            ),
            {
              id: "autosave-exists",
              actions: [
                {
                  label: (0, import_i18n59.__)("View the autosave"),
                  url: settings.autosave.editLink
                }
              ]
            }
          );
        }
      }, []);
      (0, import_element37.useEffect)(() => {
        setEditedPost2(post.type, post.id);
        removeNotice("template-activate-notice");
      }, [post.type, post.id, setEditedPost2, removeNotice]);
      (0, import_element37.useEffect)(() => {
        updateEditorSettings2(settings);
      }, [settings, updateEditorSettings2]);
      (0, import_element37.useEffect)(() => {
        setCurrentTemplateId2(template2?.id);
      }, [template2?.id, setCurrentTemplateId2]);
      (0, import_element37.useEffect)(() => {
        if (defaultMode) {
          setRenderingMode2(defaultMode);
        }
      }, [defaultMode, setRenderingMode2]);
      useHideBlocksFromInserter(post.type, mode);
      useCommands();
      if (!isReady2 || !mode) {
        return null;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(import_core_data30.EntityProvider, { kind: "root", type: "site", children: /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(
        import_core_data30.EntityProvider,
        {
          kind: "postType",
          type: post.type,
          id: post.id,
          children: /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(import_block_editor19.BlockContextProvider, { value: defaultBlockContext, children: /* @__PURE__ */ (0, import_jsx_runtime101.jsxs)(
            BlockEditorProviderComponent,
            {
              value: blocks,
              onChange,
              onInput,
              selection,
              settings: blockEditorSettings,
              useSubRegistry: false,
              children: [
                children,
                !settings.isPreviewMode && /* @__PURE__ */ (0, import_jsx_runtime101.jsxs)(import_jsx_runtime101.Fragment, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(PatternsMenuItems, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(TemplatePartMenuItems, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(ContentOnlySettingsMenu, {}),
                  mode === "template-locked" && /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(DisableNonPageContentBlocks, {}),
                  type === "wp_navigation" && /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(NavigationBlockEditingMode, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(EditorKeyboardShortcuts, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(keyboard_shortcut_help_modal_default, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(BlockRemovalWarnings, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(StartPageOptions, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(StartTemplateOptions, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(PatternRenameModal, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(PatternDuplicateModal, {})
                ] })
              ]
            }
          ) })
        }
      ) });
    }
  );
  function EditorProvider(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime101.jsx)(
      ExperimentalEditorProvider,
      {
        ...props,
        BlockEditorProviderComponent: import_block_editor19.BlockEditorProvider,
        children: props.children
      }
    );
  }
  var provider_default = EditorProvider;

  // packages/editor/build-module/dataviews/fields/content-preview/content-preview-view.js
  var { useGlobalStyle } = unlock(import_block_editor20.privateApis);
  function PostPreviewContainer({
    template: template2,
    post
  }) {
    const [backgroundColor = "white"] = useGlobalStyle("color.background");
    const [postBlocks] = (0, import_core_data31.useEntityBlockEditor)("postType", post.type, {
      id: post.id
    });
    const [templateBlocks] = (0, import_core_data31.useEntityBlockEditor)(
      "postType",
      template2?.type,
      {
        id: template2?.id
      }
    );
    const blocks = template2 && templateBlocks ? templateBlocks : postBlocks;
    const isEmpty = !blocks?.length;
    return /* @__PURE__ */ (0, import_jsx_runtime102.jsxs)(
      "div",
      {
        className: "editor-fields-content-preview",
        style: {
          backgroundColor
        },
        children: [
          isEmpty && /* @__PURE__ */ (0, import_jsx_runtime102.jsx)("span", { className: "editor-fields-content-preview__empty", children: (0, import_i18n60.__)("Empty content") }),
          !isEmpty && /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(import_block_editor20.BlockPreview.Async, { children: /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(import_block_editor20.BlockPreview, { blocks }) })
        ]
      }
    );
  }
  function PostPreviewView({ item }) {
    const { settings, template: template2 } = (0, import_data48.useSelect)(
      (select4) => {
        const { canUser, getPostType, getTemplateId, getEntityRecord } = unlock(select4(import_core_data31.store));
        const canViewTemplate = canUser("read", {
          kind: "postType",
          name: "wp_template"
        });
        const _settings = select4(store).getEditorSettings();
        const supportsTemplateMode = _settings.supportsTemplateMode;
        const isViewable = getPostType(item.type)?.viewable ?? false;
        const templateId2 = supportsTemplateMode && isViewable && canViewTemplate ? getTemplateId(item.type, item.id) : null;
        return {
          settings: _settings,
          template: templateId2 ? getEntityRecord("postType", "wp_template", templateId2) : void 0
        };
      },
      [item.type, item.id]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(
      EditorProvider,
      {
        post: item,
        settings,
        __unstableTemplate: template2,
        children: /* @__PURE__ */ (0, import_jsx_runtime102.jsx)(PostPreviewContainer, { template: template2, post: item })
      }
    );
  }

  // packages/editor/build-module/dataviews/fields/content-preview/index.js
  var postPreviewField = {
    type: "media",
    id: "content-preview",
    label: (0, import_i18n61.__)("Content preview"),
    render: PostPreviewView,
    enableSorting: false
  };
  var content_preview_default = postPreviewField;

  // packages/editor/build-module/dataviews/store/private-actions.js
  function registerEntityAction(kind, name, config) {
    return {
      type: "REGISTER_ENTITY_ACTION",
      kind,
      name,
      config
    };
  }
  function unregisterEntityAction(kind, name, actionId) {
    return {
      type: "UNREGISTER_ENTITY_ACTION",
      kind,
      name,
      actionId
    };
  }
  function registerEntityField(kind, name, config) {
    return {
      type: "REGISTER_ENTITY_FIELD",
      kind,
      name,
      config
    };
  }
  function unregisterEntityField(kind, name, fieldId) {
    return {
      type: "UNREGISTER_ENTITY_FIELD",
      kind,
      name,
      fieldId
    };
  }
  function setIsReady(kind, name) {
    return {
      type: "SET_IS_READY",
      kind,
      name
    };
  }
  var registerPostTypeSchema = (postType2) => async ({ registry }) => {
    const isReady2 = unlock(registry.select(store)).isEntityReady(
      "postType",
      postType2
    );
    if (isReady2) {
      return;
    }
    unlock(registry.dispatch(store)).setIsReady(
      "postType",
      postType2
    );
    const postTypeConfig = await registry.resolveSelect(import_core_data32.store).getPostType(postType2);
    const canCreate = await registry.resolveSelect(import_core_data32.store).canUser("create", {
      kind: "postType",
      name: postType2
    });
    const currentTheme = await registry.resolveSelect(import_core_data32.store).getCurrentTheme();
    let canDuplicate = !["wp_block", "wp_template_part"].includes(
      postTypeConfig.slug
    ) && canCreate && duplicate_post_default;
    if (false) {
      if ("wp_template" !== postTypeConfig.slug) {
        canDuplicate = void 0;
      }
    }
    const actions2 = [
      postTypeConfig.viewable ? view_post_default : void 0,
      !!postTypeConfig.supports?.revisions ? view_post_revisions_default : void 0,
      // @ts-ignore
      canDuplicate,
      postTypeConfig.slug === "wp_template_part" && canCreate && currentTheme?.is_block_theme ? duplicate_template_part_default : void 0,
      canCreate && postTypeConfig.slug === "wp_block" ? duplicate_pattern_default : void 0,
      postTypeConfig.supports?.title ? rename_post_default : void 0,
      postTypeConfig.supports?.["page-attributes"] ? reorder_page_default : void 0,
      postTypeConfig.slug === "wp_block" ? export_pattern_default : void 0,
      restore_post_default,
      reset_post_default,
      delete_post_default,
      trash_post_default,
      permanently_delete_post_default
    ].filter(Boolean);
    const fields2 = [
      postTypeConfig.supports?.thumbnail && currentTheme?.theme_supports?.["post-thumbnails"] && featured_image_default,
      postTypeConfig.supports?.author && author_default,
      status_default,
      date_default,
      slug_default,
      postTypeConfig.supports?.["page-attributes"] && parent_default,
      postTypeConfig.supports?.comments && comment_status_default,
      postTypeConfig.supports?.trackbacks && ping_status_default,
      (postTypeConfig.supports?.comments || postTypeConfig.supports?.trackbacks) && discussion_default,
      template_default,
      password_default,
      postTypeConfig.supports?.editor && postTypeConfig.viewable && content_preview_default
    ].filter(Boolean);
    if (postTypeConfig.supports?.title) {
      let _titleField;
      if (postType2 === "page") {
        _titleField = page_title_default;
      } else if (postType2 === "wp_template") {
        _titleField = template_title_default;
      } else if (postType2 === "wp_block") {
        _titleField = pattern_title_default;
      } else {
        _titleField = title_default;
      }
      fields2.push(_titleField);
    }
    registry.batch(() => {
      actions2.forEach((action) => {
        unlock(registry.dispatch(store)).registerEntityAction(
          "postType",
          postType2,
          action
        );
      });
      fields2.forEach((field) => {
        unlock(registry.dispatch(store)).registerEntityField(
          "postType",
          postType2,
          field
        );
      });
    });
    (0, import_hooks4.doAction)("core.registerPostTypeSchema", postType2);
  };

  // packages/editor/build-module/store/private-actions.js
  function setCurrentTemplateId(id) {
    return {
      type: "SET_CURRENT_TEMPLATE_ID",
      id
    };
  }
  var createTemplate = (template2) => async ({ select: select4, dispatch: dispatch5, registry }) => {
    const savedTemplate = await registry.dispatch(import_core_data33.store).saveEntityRecord("postType", "wp_template", template2);
    registry.dispatch(import_core_data33.store).editEntityRecord(
      "postType",
      select4.getCurrentPostType(),
      select4.getCurrentPostId(),
      {
        template: savedTemplate.slug
      }
    );
    registry.dispatch(import_notices16.store).createSuccessNotice(
      (0, import_i18n62.__)("Custom template created. You're in template mode now."),
      {
        type: "snackbar",
        actions: [
          {
            label: (0, import_i18n62.__)("Go back"),
            onClick: () => dispatch5.setRenderingMode(
              select4.getEditorSettings().defaultRenderingMode
            )
          }
        ]
      }
    );
    return savedTemplate;
  };
  var showBlockTypes = (blockNames) => ({ registry }) => {
    const existingBlockNames = registry.select(import_preferences9.store).get("core", "hiddenBlockTypes") ?? [];
    const newBlockNames = existingBlockNames.filter(
      (type) => !(Array.isArray(blockNames) ? blockNames : [blockNames]).includes(type)
    );
    registry.dispatch(import_preferences9.store).set("core", "hiddenBlockTypes", newBlockNames);
  };
  var hideBlockTypes = (blockNames) => ({ registry }) => {
    const existingBlockNames = registry.select(import_preferences9.store).get("core", "hiddenBlockTypes") ?? [];
    const mergedBlockNames = /* @__PURE__ */ new Set([
      ...existingBlockNames,
      ...Array.isArray(blockNames) ? blockNames : [blockNames]
    ]);
    registry.dispatch(import_preferences9.store).set("core", "hiddenBlockTypes", [...mergedBlockNames]);
  };
  var saveDirtyEntities = ({ onSave, dirtyEntityRecords = [], entitiesToSkip = [], close } = {}) => ({ registry }) => {
    const PUBLISH_ON_SAVE_ENTITIES = [
      { kind: "postType", name: "wp_navigation" }
    ];
    const saveNoticeId = "site-editor-save-success";
    const homeUrl = registry.select(import_core_data33.store).getEntityRecord("root", "__unstableBase")?.home;
    registry.dispatch(import_notices16.store).removeNotice(saveNoticeId);
    const entitiesToSave = dirtyEntityRecords.filter(
      ({ kind, name, key, property }) => {
        return !entitiesToSkip.some(
          (elt) => elt.kind === kind && elt.name === name && elt.key === key && elt.property === property
        );
      }
    );
    close?.(entitiesToSave);
    const siteItemsToSave = [];
    const pendingSavedRecords = [];
    entitiesToSave.forEach(({ kind, name, key, property }) => {
      if ("root" === kind && "site" === name) {
        siteItemsToSave.push(property);
      } else {
        if (PUBLISH_ON_SAVE_ENTITIES.some(
          (typeToPublish) => typeToPublish.kind === kind && typeToPublish.name === name
        )) {
          registry.dispatch(import_core_data33.store).editEntityRecord(kind, name, key, {
            status: "publish"
          });
        }
        pendingSavedRecords.push(
          registry.dispatch(import_core_data33.store).saveEditedEntityRecord(kind, name, key)
        );
      }
    });
    if (siteItemsToSave.length) {
      pendingSavedRecords.push(
        registry.dispatch(import_core_data33.store).__experimentalSaveSpecifiedEntityEdits(
          "root",
          "site",
          void 0,
          siteItemsToSave
        )
      );
    }
    registry.dispatch(import_block_editor21.store).__unstableMarkLastChangeAsPersistent();
    Promise.all(pendingSavedRecords).then((values) => {
      return onSave ? onSave(values) : values;
    }).then((values) => {
      if (values.some((value) => typeof value === "undefined")) {
        registry.dispatch(import_notices16.store).createErrorNotice((0, import_i18n62.__)("Saving failed."));
      } else {
        registry.dispatch(import_notices16.store).createSuccessNotice((0, import_i18n62.__)("Site updated."), {
          type: "snackbar",
          id: saveNoticeId,
          actions: [
            {
              label: (0, import_i18n62.__)("View site"),
              url: homeUrl,
              openInNewTab: true
            }
          ]
        });
      }
    }).catch(
      (error) => registry.dispatch(import_notices16.store).createErrorNotice(
        `${(0, import_i18n62.__)("Saving failed.")} ${error}`
      )
    );
  };
  var revertTemplate2 = (template2, { allowUndo = true } = {}) => async ({ registry }) => {
    const noticeId = "edit-site-template-reverted";
    registry.dispatch(import_notices16.store).removeNotice(noticeId);
    if (!isTemplateRevertable(template2)) {
      registry.dispatch(import_notices16.store).createErrorNotice((0, import_i18n62.__)("This template is not revertable."), {
        type: "snackbar"
      });
      return;
    }
    try {
      const templateEntityConfig = registry.select(import_core_data33.store).getEntityConfig("postType", template2.type);
      if (!templateEntityConfig) {
        registry.dispatch(import_notices16.store).createErrorNotice(
          (0, import_i18n62.__)(
            "The editor has encountered an unexpected error. Please reload."
          ),
          { type: "snackbar" }
        );
        return;
      }
      const fileTemplatePath = (0, import_url9.addQueryArgs)(
        `${templateEntityConfig.baseURL}/${template2.id}`,
        { context: "edit", source: template2.origin }
      );
      const fileTemplate = await (0, import_api_fetch3.default)({ path: fileTemplatePath });
      if (!fileTemplate) {
        registry.dispatch(import_notices16.store).createErrorNotice(
          (0, import_i18n62.__)(
            "The editor has encountered an unexpected error. Please reload."
          ),
          { type: "snackbar" }
        );
        return;
      }
      const serializeBlocks = ({
        blocks: blocksForSerialization = []
      }) => (0, import_blocks12.__unstableSerializeAndClean)(blocksForSerialization);
      const edited = registry.select(import_core_data33.store).getEditedEntityRecord(
        "postType",
        template2.type,
        template2.id
      );
      registry.dispatch(import_core_data33.store).editEntityRecord(
        "postType",
        template2.type,
        template2.id,
        {
          content: serializeBlocks,
          // Required to make the `undo` behave correctly.
          blocks: edited.blocks,
          // Required to revert the blocks in the editor.
          source: "custom"
          // required to avoid turning the editor into a dirty state
        },
        {
          undoIgnore: true
          // Required to merge this edit with the last undo level.
        }
      );
      const blocks = (0, import_blocks12.parse)(fileTemplate?.content?.raw);
      registry.dispatch(import_core_data33.store).editEntityRecord("postType", template2.type, fileTemplate.id, {
        content: serializeBlocks,
        blocks,
        source: "theme"
      });
      if (allowUndo) {
        const undoRevert = () => {
          registry.dispatch(import_core_data33.store).editEntityRecord(
            "postType",
            template2.type,
            edited.id,
            {
              content: serializeBlocks,
              blocks: edited.blocks,
              source: "custom"
            }
          );
        };
        registry.dispatch(import_notices16.store).createSuccessNotice((0, import_i18n62.__)("Template reset."), {
          type: "snackbar",
          id: noticeId,
          actions: [
            {
              label: (0, import_i18n62.__)("Undo"),
              onClick: undoRevert
            }
          ]
        });
      }
    } catch (error) {
      const errorMessage = error.message && error.code !== "unknown_error" ? error.message : (0, import_i18n62.__)("Template revert failed. Please reload.");
      registry.dispatch(import_notices16.store).createErrorNotice(errorMessage, { type: "snackbar" });
    }
  };
  var removeTemplates = (items) => async ({ registry }) => {
    const isResetting = items.every((item) => item?.has_theme_file);
    const promiseResult = await Promise.allSettled(
      items.map((item) => {
        return registry.dispatch(import_core_data33.store).deleteEntityRecord(
          "postType",
          item.type,
          item.id,
          { force: true },
          { throwOnError: true }
        );
      })
    );
    if (promiseResult.every(({ status }) => status === "fulfilled")) {
      let successMessage;
      if (items.length === 1) {
        let title;
        if (typeof items[0].title === "string") {
          title = items[0].title;
        } else if (typeof items[0].title?.rendered === "string") {
          title = items[0].title?.rendered;
        } else if (typeof items[0].title?.raw === "string") {
          title = items[0].title?.raw;
        }
        successMessage = isResetting ? (0, import_i18n62.sprintf)(
          /* translators: %s: The template/part's name. */
          (0, import_i18n62.__)('"%s" reset.'),
          (0, import_html_entities9.decodeEntities)(title)
        ) : (0, import_i18n62.sprintf)(
          /* translators: %s: The template/part's name. */
          (0, import_i18n62._x)('"%s" deleted.', "template part"),
          (0, import_html_entities9.decodeEntities)(title)
        );
      } else {
        successMessage = isResetting ? (0, import_i18n62.__)("Items reset.") : (0, import_i18n62.__)("Items deleted.");
      }
      registry.dispatch(import_notices16.store).createSuccessNotice(successMessage, {
        type: "snackbar",
        id: "editor-template-deleted-success"
      });
    } else {
      let errorMessage;
      if (promiseResult.length === 1) {
        if (promiseResult[0].reason?.message) {
          errorMessage = promiseResult[0].reason.message;
        } else {
          errorMessage = isResetting ? (0, import_i18n62.__)("An error occurred while reverting the item.") : (0, import_i18n62.__)("An error occurred while deleting the item.");
        }
      } else {
        const errorMessages = /* @__PURE__ */ new Set();
        const failedPromises = promiseResult.filter(
          ({ status }) => status === "rejected"
        );
        for (const failedPromise of failedPromises) {
          if (failedPromise.reason?.message) {
            errorMessages.add(failedPromise.reason.message);
          }
        }
        if (errorMessages.size === 0) {
          errorMessage = (0, import_i18n62.__)(
            "An error occurred while deleting the items."
          );
        } else if (errorMessages.size === 1) {
          errorMessage = isResetting ? (0, import_i18n62.sprintf)(
            /* translators: %s: an error message */
            (0, import_i18n62.__)(
              "An error occurred while reverting the items: %s"
            ),
            [...errorMessages][0]
          ) : (0, import_i18n62.sprintf)(
            /* translators: %s: an error message */
            (0, import_i18n62.__)(
              "An error occurred while deleting the items: %s"
            ),
            [...errorMessages][0]
          );
        } else {
          errorMessage = isResetting ? (0, import_i18n62.sprintf)(
            /* translators: %s: a list of comma separated error messages */
            (0, import_i18n62.__)(
              "Some errors occurred while reverting the items: %s"
            ),
            [...errorMessages].join(",")
          ) : (0, import_i18n62.sprintf)(
            /* translators: %s: a list of comma separated error messages */
            (0, import_i18n62.__)(
              "Some errors occurred while deleting the items: %s"
            ),
            [...errorMessages].join(",")
          );
        }
      }
      registry.dispatch(import_notices16.store).createErrorNotice(errorMessage, { type: "snackbar" });
    }
  };
  var setDefaultRenderingMode = (mode) => ({ select: select4, registry }) => {
    const postType2 = select4.getCurrentPostType();
    const theme = registry.select(import_core_data33.store).getCurrentTheme()?.stylesheet;
    const renderingModes = registry.select(import_preferences9.store).get("core", "renderingModes")?.[theme] ?? {};
    if (renderingModes[postType2] === mode) {
      return;
    }
    const newModes = {
      [theme]: {
        ...renderingModes,
        [postType2]: mode
      }
    };
    registry.dispatch(import_preferences9.store).set("core", "renderingModes", newModes);
  };

  // packages/editor/build-module/store/private-selectors.js
  var private_selectors_exports = {};
  __export(private_selectors_exports, {
    getDefaultRenderingMode: () => getDefaultRenderingMode,
    getEntityActions: () => getEntityActions2,
    getEntityFields: () => getEntityFields2,
    getInserter: () => getInserter,
    getInserterSidebarToggleRef: () => getInserterSidebarToggleRef,
    getListViewToggleRef: () => getListViewToggleRef,
    getPostBlocksByName: () => getPostBlocksByName,
    getPostIcon: () => getPostIcon,
    hasPostMetaChanges: () => hasPostMetaChanges,
    isEntityReady: () => isEntityReady2
  });
  var import_fast_deep_equal = __toESM(require_fast_deep_equal());
  var import_block_editor22 = __toESM(require_block_editor());
  var import_data49 = __toESM(require_data());
  var import_core_data34 = __toESM(require_core_data());
  var import_preferences10 = __toESM(require_preferences());

  // packages/editor/build-module/dataviews/store/private-selectors.js
  var EMPTY_ARRAY2 = [];
  function getEntityActions(state, kind, name) {
    return state.actions[kind]?.[name] ?? EMPTY_ARRAY2;
  }
  function getEntityFields(state, kind, name) {
    return state.fields[kind]?.[name] ?? EMPTY_ARRAY2;
  }
  function isEntityReady(state, kind, name) {
    return state.isReady[kind]?.[name];
  }

  // packages/editor/build-module/store/private-selectors.js
  var EMPTY_INSERTION_POINT = {
    rootClientId: void 0,
    insertionIndex: void 0,
    filterValue: void 0
  };
  var RENDERING_MODES = ["post-only", "template-locked"];
  var getInserter = (0, import_data49.createRegistrySelector)(
    (select4) => (0, import_data49.createSelector)(
      (state) => {
        if (typeof state.blockInserterPanel === "object") {
          return state.blockInserterPanel;
        }
        if (getRenderingMode(state) === "template-locked") {
          const [postContentClientId] = select4(import_block_editor22.store).getBlocksByName(
            "core/post-content"
          );
          if (postContentClientId) {
            return {
              rootClientId: postContentClientId,
              insertionIndex: void 0,
              filterValue: void 0
            };
          }
        }
        return EMPTY_INSERTION_POINT;
      },
      (state) => {
        const [postContentClientId] = select4(import_block_editor22.store).getBlocksByName(
          "core/post-content"
        );
        return [
          state.blockInserterPanel,
          getRenderingMode(state),
          postContentClientId
        ];
      }
    )
  );
  function getListViewToggleRef(state) {
    return state.listViewToggleRef;
  }
  function getInserterSidebarToggleRef(state) {
    return state.inserterSidebarToggleRef;
  }
  var CARD_ICONS = {
    wp_block: symbol_default,
    wp_navigation: navigation_default,
    page: page_default,
    post: verse_default
  };
  var getPostIcon = (0, import_data49.createRegistrySelector)(
    (select4) => (state, postType2, options) => {
      {
        if (postType2 === "wp_template_part" || postType2 === "wp_template") {
          const templateAreas = select4(import_core_data34.store).getCurrentTheme()?.default_template_part_areas || [];
          const areaData = templateAreas.find(
            (item) => options.area === item.area
          );
          if (areaData?.icon) {
            return getTemplatePartIcon(areaData.icon);
          }
          return layout_default;
        }
        if (CARD_ICONS[postType2]) {
          return CARD_ICONS[postType2];
        }
        const postTypeEntity = select4(import_core_data34.store).getPostType(postType2);
        if (typeof postTypeEntity?.icon === "string" && postTypeEntity.icon.startsWith("dashicons-")) {
          return postTypeEntity.icon.slice(10);
        }
        return page_default;
      }
    }
  );
  var hasPostMetaChanges = (0, import_data49.createRegistrySelector)(
    (select4) => (state, postType2, postId2) => {
      const { type: currentPostType, id: currentPostId } = getCurrentPost(state);
      const edits = select4(import_core_data34.store).getEntityRecordNonTransientEdits(
        "postType",
        postType2 || currentPostType,
        postId2 || currentPostId
      );
      if (!edits?.meta) {
        return false;
      }
      const originalPostMeta = select4(import_core_data34.store).getEntityRecord(
        "postType",
        postType2 || currentPostType,
        postId2 || currentPostId
      )?.meta;
      return !(0, import_fast_deep_equal.default)(
        { ...originalPostMeta, footnotes: void 0 },
        { ...edits.meta, footnotes: void 0 }
      );
    }
  );
  function getEntityActions2(state, ...args) {
    return getEntityActions(state.dataviews, ...args);
  }
  function isEntityReady2(state, ...args) {
    return isEntityReady(state.dataviews, ...args);
  }
  function getEntityFields2(state, ...args) {
    return getEntityFields(state.dataviews, ...args);
  }
  var getPostBlocksByName = (0, import_data49.createRegistrySelector)(
    (select4) => (0, import_data49.createSelector)(
      (state, blockNames) => {
        blockNames = Array.isArray(blockNames) ? blockNames : [blockNames];
        const { getBlocksByName, getBlockParents, getBlockName: getBlockName2 } = select4(import_block_editor22.store);
        return getBlocksByName(blockNames).filter(
          (clientId) => getBlockParents(clientId).every((parentClientId) => {
            const parentBlockName = getBlockName2(parentClientId);
            return (
              // Ignore descendents of the query block.
              parentBlockName !== "core/query" && // Enable only the top-most block.
              !blockNames.includes(parentBlockName)
            );
          })
        );
      },
      () => [select4(import_block_editor22.store).getBlocks()]
    )
  );
  var getDefaultRenderingMode = (0, import_data49.createRegistrySelector)(
    (select4) => (state, postType2) => {
      const { getPostType, getCurrentTheme, hasFinishedResolution } = select4(import_core_data34.store);
      const currentTheme = getCurrentTheme();
      const postTypeEntity = getPostType(postType2);
      if (!hasFinishedResolution("getPostType", [postType2]) || !hasFinishedResolution("getCurrentTheme")) {
        return void 0;
      }
      const theme = currentTheme?.stylesheet;
      const defaultModePreference = select4(import_preferences10.store).get(
        "core",
        "renderingModes"
      )?.[theme]?.[postType2];
      const postTypeDefaultMode = Array.isArray(
        postTypeEntity?.supports?.editor
      ) ? postTypeEntity.supports.editor.find(
        (features) => "default-mode" in features
      )?.["default-mode"] : void 0;
      const defaultMode = defaultModePreference || postTypeDefaultMode;
      if (!RENDERING_MODES.includes(defaultMode)) {
        return "post-only";
      }
      return defaultMode;
    }
  );

  // packages/editor/build-module/store/index.js
  var storeConfig = {
    reducer: reducer_default2,
    selectors: selectors_exports,
    actions: actions_exports
  };
  var store = (0, import_data50.createReduxStore)(STORE_NAME, {
    ...storeConfig
  });
  (0, import_data50.register)(store);
  unlock(store).registerPrivateActions(private_actions_exports);
  unlock(store).registerPrivateSelectors(private_selectors_exports);

  // packages/editor/build-module/hooks/custom-sources-backwards-compatibility.js
  var createWithMetaAttributeSource = (metaAttributes) => (0, import_compose9.createHigherOrderComponent)(
    (BlockEdit2) => ({ attributes, setAttributes, ...props }) => {
      const postType2 = (0, import_data51.useSelect)(
        (select4) => select4(store).getCurrentPostType(),
        []
      );
      const [meta, setMeta] = (0, import_core_data35.useEntityProp)(
        "postType",
        postType2,
        "meta"
      );
      const mergedAttributes = (0, import_element38.useMemo)(
        () => ({
          ...attributes,
          ...Object.fromEntries(
            Object.entries(metaAttributes).map(
              ([attributeKey, metaKey]) => [
                attributeKey,
                meta[metaKey]
              ]
            )
          )
        }),
        [attributes, meta]
      );
      return /* @__PURE__ */ (0, import_jsx_runtime103.jsx)(
        BlockEdit2,
        {
          attributes: mergedAttributes,
          setAttributes: (nextAttributes) => {
            const nextMeta = Object.fromEntries(
              Object.entries(nextAttributes ?? {}).filter(
                // Filter to intersection of keys between the updated
                // attributes and those with an associated meta key.
                ([key]) => key in metaAttributes
              ).map(([attributeKey, value]) => [
                // Rename the keys to the expected meta key name.
                metaAttributes[attributeKey],
                value
              ])
            );
            if (Object.entries(nextMeta).length) {
              setMeta(nextMeta);
            }
            setAttributes(nextAttributes);
          },
          ...props
        }
      );
    },
    "withMetaAttributeSource"
  );
  function shimAttributeSource(settings) {
    const metaAttributes = Object.fromEntries(
      Object.entries(settings.attributes ?? {}).filter(([, { source }]) => source === "meta").map(([attributeKey, { meta }]) => [attributeKey, meta])
    );
    if (Object.entries(metaAttributes).length) {
      settings.edit = createWithMetaAttributeSource(metaAttributes)(
        settings.edit
      );
    }
    return settings;
  }
  (0, import_hooks5.addFilter)(
    "blocks.registerBlockType",
    "core/editor/custom-sources-backwards-compatibility/shim-attribute-source",
    shimAttributeSource
  );

  // packages/editor/build-module/hooks/default-autocompleters.js
  var import_hooks14 = __toESM(require_hooks());

  // packages/editor/build-module/components/autocompleters/user.js
  var import_jsx_runtime104 = __toESM(require_jsx_runtime());
  var import_element39 = __toESM(require_element());
  var import_data52 = __toESM(require_data());
  var import_core_data36 = __toESM(require_core_data());
  function getUserLabel(user) {
    const avatar = user.avatar_urls && user.avatar_urls[24] ? /* @__PURE__ */ (0, import_jsx_runtime104.jsx)(
      "img",
      {
        className: "editor-autocompleters__user-avatar",
        alt: "",
        src: user.avatar_urls[24]
      }
    ) : /* @__PURE__ */ (0, import_jsx_runtime104.jsx)("span", { className: "editor-autocompleters__no-avatar" });
    return /* @__PURE__ */ (0, import_jsx_runtime104.jsxs)(import_jsx_runtime104.Fragment, { children: [
      avatar,
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)("span", { className: "editor-autocompleters__user-name", children: user.name }),
      /* @__PURE__ */ (0, import_jsx_runtime104.jsx)("span", { className: "editor-autocompleters__user-slug", children: user.slug })
    ] });
  }
  var user_default = {
    name: "users",
    className: "editor-autocompleters__user",
    triggerPrefix: "@",
    useItems(filterValue) {
      const users = (0, import_data52.useSelect)(
        (select4) => {
          const { getUsers } = select4(import_core_data36.store);
          return getUsers({
            context: "view",
            search: encodeURIComponent(filterValue)
          });
        },
        [filterValue]
      );
      const options = (0, import_element39.useMemo)(
        () => users ? users.map((user) => ({
          key: `user-${user.slug}`,
          value: user,
          label: getUserLabel(user)
        })) : [],
        [users]
      );
      return [options];
    },
    getOptionCompletion(user) {
      return `@${user.slug}`;
    }
  };

  // packages/editor/build-module/components/autosave-monitor/index.js
  var import_element40 = __toESM(require_element());
  var import_compose10 = __toESM(require_compose());
  var import_data53 = __toESM(require_data());
  var import_core_data37 = __toESM(require_core_data());
  var AutosaveMonitor = class extends import_element40.Component {
    constructor(props) {
      super(props);
      this.needsAutosave = !!(props.isDirty && props.isAutosaveable);
    }
    componentDidMount() {
      if (!this.props.disableIntervalChecks) {
        this.setAutosaveTimer();
      }
    }
    componentDidUpdate(prevProps) {
      if (this.props.disableIntervalChecks) {
        if (this.props.editsReference !== prevProps.editsReference) {
          this.props.autosave();
        }
        return;
      }
      if (this.props.interval !== prevProps.interval) {
        clearTimeout(this.timerId);
        this.setAutosaveTimer();
      }
      if (!this.props.isDirty) {
        this.needsAutosave = false;
        return;
      }
      if (this.props.isAutosaving && !prevProps.isAutosaving) {
        this.needsAutosave = false;
        return;
      }
      if (this.props.editsReference !== prevProps.editsReference) {
        this.needsAutosave = true;
      }
    }
    componentWillUnmount() {
      clearTimeout(this.timerId);
    }
    setAutosaveTimer(timeout = this.props.interval * 1e3) {
      this.timerId = setTimeout(() => {
        this.autosaveTimerHandler();
      }, timeout);
    }
    autosaveTimerHandler() {
      if (!this.props.isAutosaveable) {
        this.setAutosaveTimer(1e3);
        return;
      }
      if (this.needsAutosave) {
        this.needsAutosave = false;
        this.props.autosave();
      }
      this.setAutosaveTimer();
    }
    render() {
      return null;
    }
  };
  var autosave_monitor_default = (0, import_compose10.compose)([
    (0, import_data53.withSelect)((select4, ownProps) => {
      const { getReferenceByDistinctEdits } = select4(import_core_data37.store);
      const {
        isEditedPostDirty: isEditedPostDirty2,
        isEditedPostAutosaveable: isEditedPostAutosaveable2,
        isAutosavingPost: isAutosavingPost2,
        getEditorSettings: getEditorSettings2
      } = select4(store);
      const { interval = getEditorSettings2().autosaveInterval } = ownProps;
      return {
        editsReference: getReferenceByDistinctEdits(),
        isDirty: isEditedPostDirty2(),
        isAutosaveable: isEditedPostAutosaveable2(),
        isAutosaving: isAutosavingPost2(),
        interval
      };
    }),
    (0, import_data53.withDispatch)((dispatch5, ownProps) => ({
      autosave() {
        const { autosave: autosave2 = dispatch5(store).autosave } = ownProps;
        autosave2();
      }
    }))
  ])(AutosaveMonitor);

  // packages/editor/build-module/components/document-bar/index.js
  var import_jsx_runtime105 = __toESM(require_jsx_runtime());
  var import_i18n64 = __toESM(require_i18n());
  var import_data55 = __toESM(require_data());
  var import_components32 = __toESM(require_components());
  var import_block_editor23 = __toESM(require_block_editor());
  var import_keycodes2 = __toESM(require_keycodes());
  var import_core_data39 = __toESM(require_core_data());
  var import_commands3 = __toESM(require_commands());
  var import_element41 = __toESM(require_element());
  var import_compose11 = __toESM(require_compose());
  var import_html_entities10 = __toESM(require_html_entities());
  var import_dom = __toESM(require_dom());

  // packages/editor/build-module/utils/pageTypeBadge.js
  var import_i18n63 = __toESM(require_i18n());
  var import_data54 = __toESM(require_data());
  var import_core_data38 = __toESM(require_core_data());
  function usePageTypeBadge(postId2) {
    const { isFrontPage, isPostsPage } = (0, import_data54.useSelect)((select4) => {
      const { canUser, getEditedEntityRecord } = select4(import_core_data38.store);
      const siteSettings = canUser("read", {
        kind: "root",
        name: "site"
      }) ? getEditedEntityRecord("root", "site") : void 0;
      const _postId = parseInt(postId2, 10);
      return {
        isFrontPage: siteSettings?.page_on_front === _postId,
        isPostsPage: siteSettings?.page_for_posts === _postId
      };
    });
    if (isFrontPage) {
      return (0, import_i18n63.__)("Homepage");
    } else if (isPostsPage) {
      return (0, import_i18n63.__)("Posts Page");
    }
    return false;
  }

  // packages/editor/build-module/components/document-bar/index.js
  var MotionButton = import_components32.__unstableMotion.create(import_components32.Button);
  function DocumentBar(props) {
    const {
      postId: postId2,
      postType: postType2,
      postTypeLabel,
      documentTitle,
      isNotFound,
      templateTitle,
      onNavigateToPreviousEntityRecord,
      isTemplatePreview
    } = (0, import_data55.useSelect)((select4) => {
      const {
        getCurrentPostType: getCurrentPostType2,
        getCurrentPostId: getCurrentPostId2,
        getEditorSettings: getEditorSettings2,
        getRenderingMode: getRenderingMode2
      } = select4(store);
      const {
        getEditedEntityRecord,
        getPostType,
        getCurrentTheme,
        isResolving: isResolvingSelector
      } = select4(import_core_data39.store);
      const _postType = getCurrentPostType2();
      const _postId = getCurrentPostId2();
      const _document = getEditedEntityRecord(
        "postType",
        _postType,
        _postId
      );
      const { default_template_types: templateTypes = [] } = getCurrentTheme() ?? {};
      const _templateInfo = getTemplateInfo({
        templateTypes,
        template: _document
      });
      const _postTypeLabel = getPostType(_postType)?.labels?.singular_name;
      return {
        postId: _postId,
        postType: _postType,
        postTypeLabel: _postTypeLabel,
        documentTitle: _document.title,
        isNotFound: !_document && !isResolvingSelector(
          "getEditedEntityRecord",
          "postType",
          _postType,
          _postId
        ),
        templateTitle: _templateInfo.title,
        onNavigateToPreviousEntityRecord: getEditorSettings2().onNavigateToPreviousEntityRecord,
        isTemplatePreview: getRenderingMode2() === "template-locked"
      };
    }, []);
    const { open: openCommandCenter } = (0, import_data55.useDispatch)(import_commands3.store);
    const isReducedMotion = (0, import_compose11.useReducedMotion)();
    const isTemplate = TEMPLATE_POST_TYPES.includes(postType2);
    const hasBackButton = !!onNavigateToPreviousEntityRecord;
    const entityTitle = isTemplate ? templateTitle : documentTitle;
    const title = props.title || entityTitle;
    const icon = props.icon;
    const pageTypeBadge = usePageTypeBadge(postId2);
    const mountedRef = (0, import_element41.useRef)(false);
    (0, import_element41.useEffect)(() => {
      mountedRef.current = true;
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(
      "div",
      {
        className: clsx_default("editor-document-bar", {
          "has-back-button": hasBackButton
        }),
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(import_components32.__unstableAnimatePresence, { children: hasBackButton && /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
            MotionButton,
            {
              className: "editor-document-bar__back",
              icon: (0, import_i18n64.isRTL)() ? chevron_right_small_default : chevron_left_small_default,
              onClick: (event) => {
                event.stopPropagation();
                onNavigateToPreviousEntityRecord();
              },
              size: "compact",
              initial: mountedRef.current ? { opacity: 0, transform: "translateX(15%)" } : false,
              animate: { opacity: 1, transform: "translateX(0%)" },
              exit: { opacity: 0, transform: "translateX(15%)" },
              transition: isReducedMotion ? { duration: 0 } : void 0,
              children: (0, import_i18n64.__)("Back")
            }
          ) }),
          !isTemplate && isTemplatePreview && !hasBackButton && /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(
            import_block_editor23.BlockIcon,
            {
              icon: layout_default,
              className: "editor-document-bar__icon-layout"
            }
          ),
          isNotFound ? /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(import_components32.__experimentalText, { children: (0, import_i18n64.__)("Document not found") }) : /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(
            import_components32.Button,
            {
              className: "editor-document-bar__command",
              onClick: () => openCommandCenter(),
              size: "compact",
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(
                  import_components32.__unstableMotion.div,
                  {
                    className: "editor-document-bar__title",
                    initial: mountedRef.current ? {
                      opacity: 0,
                      transform: hasBackButton ? "translateX(15%)" : "translateX(-15%)"
                    } : false,
                    animate: {
                      opacity: 1,
                      transform: "translateX(0%)"
                    },
                    transition: isReducedMotion ? { duration: 0 } : void 0,
                    children: [
                      icon && /* @__PURE__ */ (0, import_jsx_runtime105.jsx)(import_block_editor23.BlockIcon, { icon }),
                      /* @__PURE__ */ (0, import_jsx_runtime105.jsxs)(import_components32.__experimentalText, { size: "body", as: "h1", children: [
                        /* @__PURE__ */ (0, import_jsx_runtime105.jsx)("span", { className: "editor-document-bar__post-title", children: title ? (0, import_dom.__unstableStripHTML)(title) : (0, import_i18n64.__)("No title") }),
                        pageTypeBadge && /* @__PURE__ */ (0, import_jsx_runtime105.jsx)("span", { className: "editor-document-bar__post-type-label", children: `\xB7 ${pageTypeBadge}` }),
                        postTypeLabel && !props.title && !pageTypeBadge && /* @__PURE__ */ (0, import_jsx_runtime105.jsx)("span", { className: "editor-document-bar__post-type-label", children: `\xB7 ${(0, import_html_entities10.decodeEntities)(
                          postTypeLabel
                        )}` })
                      ] })
                    ]
                  },
                  hasBackButton
                ),
                /* @__PURE__ */ (0, import_jsx_runtime105.jsx)("span", { className: "editor-document-bar__shortcut", children: import_keycodes2.displayShortcut.primary("k") })
              ]
            }
          )
        ]
      }
    );
  }

  // packages/editor/build-module/components/document-outline/index.js
  var import_jsx_runtime107 = __toESM(require_jsx_runtime());
  var import_i18n65 = __toESM(require_i18n());
  var import_data56 = __toESM(require_data());
  var import_element42 = __toESM(require_element());
  var import_rich_text = __toESM(require_rich_text());
  var import_block_editor24 = __toESM(require_block_editor());
  var import_core_data40 = __toESM(require_core_data());
  var import_components33 = __toESM(require_components());

  // packages/editor/build-module/components/document-outline/item.js
  var import_jsx_runtime106 = __toESM(require_jsx_runtime());
  var TableOfContentsItem = ({
    children,
    isValid,
    isDisabled,
    level,
    href,
    onSelect
  }) => {
    function handleClick(event) {
      if (isDisabled) {
        event.preventDefault();
        return;
      }
      onSelect();
    }
    return /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(
      "li",
      {
        className: clsx_default(
          "document-outline__item",
          `is-${level.toLowerCase()}`,
          {
            "is-invalid": !isValid,
            "is-disabled": isDisabled
          }
        ),
        children: /* @__PURE__ */ (0, import_jsx_runtime106.jsxs)(
          "a",
          {
            href,
            className: "document-outline__button",
            "aria-disabled": isDisabled,
            onClick: handleClick,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime106.jsx)(
                "span",
                {
                  className: "document-outline__emdash",
                  "aria-hidden": "true"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime106.jsx)("strong", { className: "document-outline__level", children: level }),
              /* @__PURE__ */ (0, import_jsx_runtime106.jsx)("span", { className: "document-outline__item-content", children })
            ]
          }
        )
      }
    );
  };
  var item_default = TableOfContentsItem;

  // packages/editor/build-module/components/document-outline/index.js
  var emptyHeadingContent = /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("em", { children: (0, import_i18n65.__)("(Empty heading)") });
  var incorrectLevelContent = [
    /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("br", {}, "incorrect-break"),
    /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("em", { children: (0, import_i18n65.__)("(Incorrect heading level)") }, "incorrect-message")
  ];
  var singleH1Headings = [
    /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("br", {}, "incorrect-break-h1"),
    /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("em", { children: (0, import_i18n65.__)("(Your theme may already use a H1 for the post title)") }, "incorrect-message-h1")
  ];
  var multipleH1Headings = [
    /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("br", {}, "incorrect-break-multiple-h1"),
    /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("em", { children: (0, import_i18n65.__)("(Multiple H1 headings are not recommended)") }, "incorrect-message-multiple-h1")
  ];
  function EmptyOutlineIllustration() {
    return /* @__PURE__ */ (0, import_jsx_runtime107.jsxs)(
      import_components33.SVG,
      {
        width: "138",
        height: "148",
        viewBox: "0 0 138 148",
        fill: "none",
        xmlns: "http://www.w3.org/2000/svg",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(import_components33.Rect, { width: "138", height: "148", rx: "4", fill: "#F0F6FC" }),
          /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(import_components33.Line, { x1: "44", y1: "28", x2: "24", y2: "28", stroke: "#DDDDDD" }),
          /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(import_components33.Rect, { x: "48", y: "16", width: "27", height: "23", rx: "4", fill: "#DDDDDD" }),
          /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
            import_components33.Path,
            {
              d: "M54.7585 32V23.2727H56.6037V26.8736H60.3494V23.2727H62.1903V32H60.3494V28.3949H56.6037V32H54.7585ZM67.4574 23.2727V32H65.6122V25.0241H65.5611L63.5625 26.277V24.6406L65.723 23.2727H67.4574Z",
              fill: "black"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(import_components33.Line, { x1: "55", y1: "59", x2: "24", y2: "59", stroke: "#DDDDDD" }),
          /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(import_components33.Rect, { x: "59", y: "47", width: "29", height: "23", rx: "4", fill: "#DDDDDD" }),
          /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
            import_components33.Path,
            {
              d: "M65.7585 63V54.2727H67.6037V57.8736H71.3494V54.2727H73.1903V63H71.3494V59.3949H67.6037V63H65.7585ZM74.6605 63V61.6705L77.767 58.794C78.0313 58.5384 78.2528 58.3082 78.4318 58.1037C78.6136 57.8991 78.7514 57.6989 78.8452 57.5028C78.9389 57.304 78.9858 57.0895 78.9858 56.8594C78.9858 56.6037 78.9276 56.3835 78.8111 56.1989C78.6946 56.0114 78.5355 55.8679 78.3338 55.7685C78.1321 55.6662 77.9034 55.6151 77.6477 55.6151C77.3807 55.6151 77.1477 55.669 76.9489 55.777C76.75 55.8849 76.5966 56.0398 76.4886 56.2415C76.3807 56.4432 76.3267 56.6832 76.3267 56.9616H74.5753C74.5753 56.3906 74.7045 55.8949 74.9631 55.4744C75.2216 55.054 75.5838 54.7287 76.0497 54.4986C76.5156 54.2685 77.0526 54.1534 77.6605 54.1534C78.2855 54.1534 78.8295 54.2642 79.2926 54.4858C79.7585 54.7045 80.1207 55.0085 80.3793 55.3977C80.6378 55.7869 80.767 56.233 80.767 56.7358C80.767 57.0653 80.7017 57.3906 80.571 57.7116C80.4432 58.0327 80.2145 58.3892 79.8849 58.7812C79.5554 59.1705 79.0909 59.6378 78.4915 60.1832L77.2173 61.4318V61.4915H80.8821V63H74.6605Z",
              fill: "black"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(import_components33.Line, { x1: "80", y1: "90", x2: "24", y2: "90", stroke: "#DDDDDD" }),
          /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(import_components33.Rect, { x: "84", y: "78", width: "30", height: "23", rx: "4", fill: "#F0B849" }),
          /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
            import_components33.Path,
            {
              d: "M90.7585 94V85.2727H92.6037V88.8736H96.3494V85.2727H98.1903V94H96.3494V90.3949H92.6037V94H90.7585ZM99.5284 92.4659V91.0128L103.172 85.2727H104.425V87.2841H103.683L101.386 90.919V90.9872H106.564V92.4659H99.5284ZM103.717 94V92.0227L103.751 91.3793V85.2727H105.482V94H103.717Z",
              fill: "black"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(import_components33.Line, { x1: "66", y1: "121", x2: "24", y2: "121", stroke: "#DDDDDD" }),
          /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(import_components33.Rect, { x: "70", y: "109", width: "29", height: "23", rx: "4", fill: "#DDDDDD" }),
          /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
            import_components33.Path,
            {
              d: "M76.7585 125V116.273H78.6037V119.874H82.3494V116.273H84.1903V125H82.3494V121.395H78.6037V125H76.7585ZM88.8864 125.119C88.25 125.119 87.6832 125.01 87.1861 124.791C86.6918 124.57 86.3011 124.266 86.0142 123.879C85.7301 123.49 85.5838 123.041 85.5753 122.533H87.4332C87.4446 122.746 87.5142 122.933 87.642 123.095C87.7727 123.254 87.946 123.378 88.1619 123.466C88.3778 123.554 88.6207 123.598 88.8906 123.598C89.1719 123.598 89.4205 123.548 89.6364 123.449C89.8523 123.349 90.0213 123.212 90.1435 123.036C90.2656 122.859 90.3267 122.656 90.3267 122.426C90.3267 122.193 90.2614 121.987 90.1307 121.808C90.0028 121.626 89.8182 121.484 89.5767 121.382C89.3381 121.28 89.054 121.229 88.7244 121.229H87.9105V119.874H88.7244C89.0028 119.874 89.2486 119.825 89.4616 119.729C89.6776 119.632 89.8452 119.499 89.9645 119.328C90.0838 119.155 90.1435 118.953 90.1435 118.723C90.1435 118.504 90.0909 118.312 89.9858 118.148C89.8835 117.98 89.7386 117.849 89.5511 117.756C89.3665 117.662 89.1506 117.615 88.9034 117.615C88.6534 117.615 88.4247 117.661 88.2173 117.751C88.0099 117.839 87.8438 117.966 87.7188 118.131C87.5938 118.295 87.527 118.489 87.5185 118.71H85.75C85.7585 118.207 85.902 117.764 86.1804 117.381C86.4588 116.997 86.8338 116.697 87.3054 116.482C87.7798 116.263 88.3153 116.153 88.9119 116.153C89.5142 116.153 90.0412 116.263 90.4929 116.482C90.9446 116.7 91.2955 116.996 91.5455 117.368C91.7983 117.737 91.9233 118.152 91.9205 118.612C91.9233 119.101 91.7713 119.509 91.4645 119.835C91.1605 120.162 90.7642 120.369 90.2756 120.457V120.526C90.9176 120.608 91.4063 120.831 91.7415 121.195C92.0795 121.555 92.2472 122.007 92.2443 122.55C92.2472 123.047 92.1037 123.489 91.8139 123.875C91.527 124.261 91.1307 124.565 90.625 124.787C90.1193 125.009 89.5398 125.119 88.8864 125.119Z",
              fill: "black"
            }
          )
        ]
      }
    );
  }
  var computeOutlineHeadings = (blocks = []) => {
    return blocks.filter((block) => block.name === "core/heading").map((block) => ({
      ...block,
      level: block.attributes.level,
      isEmpty: isEmptyHeading(block)
    }));
  };
  var isEmptyHeading = (heading) => !heading.attributes.content || heading.attributes.content.trim().length === 0;
  function DocumentOutline({
    onSelect,
    hasOutlineItemsDisabled
  }) {
    const { selectBlock: selectBlock2 } = (0, import_data56.useDispatch)(import_block_editor24.store);
    const { title, isTitleSupported } = (0, import_data56.useSelect)((select4) => {
      const { getEditedPostAttribute: getEditedPostAttribute2 } = select4(store);
      const { getPostType } = select4(import_core_data40.store);
      const postType2 = getPostType(getEditedPostAttribute2("type"));
      return {
        title: getEditedPostAttribute2("title"),
        isTitleSupported: postType2?.supports?.title ?? false
      };
    });
    const blocks = (0, import_data56.useSelect)((select4) => {
      const { getClientIdsWithDescendants: getClientIdsWithDescendants2, getBlock: getBlock2 } = select4(import_block_editor24.store);
      const clientIds = getClientIdsWithDescendants2();
      return clientIds.map((id) => getBlock2(id));
    });
    const contentBlocks = (0, import_data56.useSelect)((select4) => {
      if (select4(store).getRenderingMode() === "post-only") {
        return void 0;
      }
      const { getBlocksByName, getClientIdsOfDescendants: getClientIdsOfDescendants2 } = select4(import_block_editor24.store);
      const [postContentClientId] = getBlocksByName("core/post-content");
      if (!postContentClientId) {
        return void 0;
      }
      return getClientIdsOfDescendants2(postContentClientId);
    }, []);
    const prevHeadingLevelRef = (0, import_element42.useRef)(1);
    const headings = (0, import_element42.useMemo)(
      () => computeOutlineHeadings(blocks),
      [blocks]
    );
    if (headings.length < 1) {
      return /* @__PURE__ */ (0, import_jsx_runtime107.jsxs)("div", { className: "editor-document-outline has-no-headings", children: [
        /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(EmptyOutlineIllustration, {}),
        /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("p", { children: (0, import_i18n65.__)(
          "Navigate the structure of your document and address issues like empty or incorrect heading levels."
        ) })
      ] });
    }
    const titleNode = document.querySelector(".editor-post-title__input");
    const hasTitle = isTitleSupported && title && titleNode;
    const countByLevel = headings.reduce(
      (acc, heading) => ({
        ...acc,
        [heading.level]: (acc[heading.level] || 0) + 1
      }),
      {}
    );
    const hasMultipleH1 = countByLevel[1] > 1;
    function isContentBlock(clientId) {
      return Array.isArray(contentBlocks) ? contentBlocks.includes(clientId) : true;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime107.jsx)("div", { className: "document-outline", children: /* @__PURE__ */ (0, import_jsx_runtime107.jsxs)("ul", { children: [
      hasTitle && /* @__PURE__ */ (0, import_jsx_runtime107.jsx)(
        item_default,
        {
          level: (0, import_i18n65.__)("Title"),
          isValid: true,
          onSelect,
          href: `#${titleNode.id}`,
          isDisabled: hasOutlineItemsDisabled,
          children: title
        }
      ),
      headings.map((item) => {
        const isIncorrectLevel = item.level > prevHeadingLevelRef.current + 1;
        const isValid = !item.isEmpty && !isIncorrectLevel && !!item.level && (item.level !== 1 || !hasMultipleH1 && !hasTitle);
        prevHeadingLevelRef.current = item.level;
        return /* @__PURE__ */ (0, import_jsx_runtime107.jsxs)(
          item_default,
          {
            level: `H${item.level}`,
            isValid,
            isDisabled: hasOutlineItemsDisabled || !isContentBlock(item.clientId),
            href: `#block-${item.clientId}`,
            onSelect: () => {
              selectBlock2(item.clientId);
              onSelect?.();
            },
            children: [
              item.isEmpty ? emptyHeadingContent : (0, import_rich_text.getTextContent)(
                (0, import_rich_text.create)({
                  html: item.attributes.content
                })
              ),
              isIncorrectLevel && incorrectLevelContent,
              item.level === 1 && hasMultipleH1 && multipleH1Headings,
              hasTitle && item.level === 1 && !hasMultipleH1 && singleH1Headings
            ]
          },
          item.clientId
        );
      })
    ] }) });
  }

  // packages/editor/build-module/components/document-outline/check.js
  var import_data57 = __toESM(require_data());
  var import_block_editor25 = __toESM(require_block_editor());
  function DocumentOutlineCheck({ children }) {
    const hasHeadings = (0, import_data57.useSelect)((select4) => {
      const { getGlobalBlockCount: getGlobalBlockCount2 } = select4(import_block_editor25.store);
      return getGlobalBlockCount2("core/heading") > 0;
    });
    if (!hasHeadings) {
      return null;
    }
    return children;
  }

  // packages/editor/build-module/components/global-keyboard-shortcuts/register-shortcuts.js
  var import_jsx_runtime108 = __toESM(require_jsx_runtime());
  var import_element43 = __toESM(require_element());
  var import_data58 = __toESM(require_data());
  var import_i18n66 = __toESM(require_i18n());
  var import_block_editor26 = __toESM(require_block_editor());
  var import_keyboard_shortcuts4 = __toESM(require_keyboard_shortcuts());
  var import_keycodes3 = __toESM(require_keycodes());
  function EditorKeyboardShortcutsRegister() {
    const { registerShortcut } = (0, import_data58.useDispatch)(import_keyboard_shortcuts4.store);
    (0, import_element43.useEffect)(() => {
      registerShortcut({
        name: "core/editor/toggle-mode",
        category: "global",
        description: (0, import_i18n66.__)("Switch between visual editor and code editor."),
        keyCombination: {
          modifier: "secondary",
          character: "m"
        }
      });
      registerShortcut({
        name: "core/editor/save",
        category: "global",
        description: (0, import_i18n66.__)("Save your changes."),
        keyCombination: {
          modifier: "primary",
          character: "s"
        }
      });
      registerShortcut({
        name: "core/editor/undo",
        category: "global",
        description: (0, import_i18n66.__)("Undo your last changes."),
        keyCombination: {
          modifier: "primary",
          character: "z"
        }
      });
      registerShortcut({
        name: "core/editor/redo",
        category: "global",
        description: (0, import_i18n66.__)("Redo your last undo."),
        keyCombination: {
          modifier: "primaryShift",
          character: "z"
        },
        // Disable on Apple OS because it conflicts with the browser's
        // history shortcut. It's a fine alias for both Windows and Linux.
        // Since there's no conflict for Ctrl+Shift+Z on both Windows and
        // Linux, we keep it as the default for consistency.
        aliases: (0, import_keycodes3.isAppleOS)() ? [] : [
          {
            modifier: "primary",
            character: "y"
          }
        ]
      });
      registerShortcut({
        name: "core/editor/toggle-list-view",
        category: "global",
        description: (0, import_i18n66.__)("Show or hide the List View."),
        keyCombination: {
          modifier: "access",
          character: "o"
        }
      });
      registerShortcut({
        name: "core/editor/toggle-distraction-free",
        category: "global",
        description: (0, import_i18n66.__)("Enter or exit distraction free mode."),
        keyCombination: {
          modifier: "primaryShift",
          character: "\\"
        }
      });
      registerShortcut({
        name: "core/editor/toggle-sidebar",
        category: "global",
        description: (0, import_i18n66.__)("Show or hide the Settings panel."),
        keyCombination: {
          modifier: "primaryShift",
          character: ","
        }
      });
      registerShortcut({
        name: "core/editor/keyboard-shortcuts",
        category: "main",
        description: (0, import_i18n66.__)("Display these keyboard shortcuts."),
        keyCombination: {
          modifier: "access",
          character: "h"
        }
      });
      registerShortcut({
        name: "core/editor/next-region",
        category: "global",
        description: (0, import_i18n66.__)("Navigate to the next part of the editor."),
        keyCombination: {
          modifier: "ctrl",
          character: "`"
        },
        aliases: [
          {
            modifier: "access",
            character: "n"
          }
        ]
      });
      registerShortcut({
        name: "core/editor/previous-region",
        category: "global",
        description: (0, import_i18n66.__)("Navigate to the previous part of the editor."),
        keyCombination: {
          modifier: "ctrlShift",
          character: "`"
        },
        aliases: [
          {
            modifier: "access",
            character: "p"
          },
          {
            modifier: "ctrlShift",
            character: "~"
          }
        ]
      });
    }, [registerShortcut]);
    return /* @__PURE__ */ (0, import_jsx_runtime108.jsx)(import_block_editor26.BlockEditorKeyboardShortcuts.Register, {});
  }
  var register_shortcuts_default = EditorKeyboardShortcutsRegister;

  // packages/editor/build-module/components/editor-history/redo.js
  var import_jsx_runtime109 = __toESM(require_jsx_runtime());
  var import_i18n67 = __toESM(require_i18n());
  var import_components34 = __toESM(require_components());
  var import_data59 = __toESM(require_data());
  var import_keycodes4 = __toESM(require_keycodes());
  var import_element44 = __toESM(require_element());
  function EditorHistoryRedo(props, ref) {
    const shortcut = (0, import_keycodes4.isAppleOS)() ? import_keycodes4.displayShortcut.primaryShift("z") : import_keycodes4.displayShortcut.primary("y");
    const hasRedo = (0, import_data59.useSelect)(
      (select4) => select4(store).hasEditorRedo(),
      []
    );
    const { redo: redo2 } = (0, import_data59.useDispatch)(store);
    return /* @__PURE__ */ (0, import_jsx_runtime109.jsx)(
      import_components34.Button,
      {
        __next40pxDefaultSize: true,
        ...props,
        ref,
        icon: !(0, import_i18n67.isRTL)() ? redo_default : undo_default,
        label: (0, import_i18n67.__)("Redo"),
        shortcut,
        "aria-disabled": !hasRedo,
        onClick: hasRedo ? redo2 : void 0,
        className: "editor-history__redo"
      }
    );
  }
  var redo_default2 = (0, import_element44.forwardRef)(EditorHistoryRedo);

  // packages/editor/build-module/components/editor-history/undo.js
  var import_jsx_runtime110 = __toESM(require_jsx_runtime());
  var import_i18n68 = __toESM(require_i18n());
  var import_components35 = __toESM(require_components());
  var import_data60 = __toESM(require_data());
  var import_keycodes5 = __toESM(require_keycodes());
  var import_element45 = __toESM(require_element());
  function EditorHistoryUndo(props, ref) {
    const hasUndo = (0, import_data60.useSelect)(
      (select4) => select4(store).hasEditorUndo(),
      []
    );
    const { undo: undo2 } = (0, import_data60.useDispatch)(store);
    return /* @__PURE__ */ (0, import_jsx_runtime110.jsx)(
      import_components35.Button,
      {
        __next40pxDefaultSize: true,
        ...props,
        ref,
        icon: !(0, import_i18n68.isRTL)() ? undo_default : redo_default,
        label: (0, import_i18n68.__)("Undo"),
        shortcut: import_keycodes5.displayShortcut.primary("z"),
        "aria-disabled": !hasUndo,
        onClick: hasUndo ? undo2 : void 0,
        className: "editor-history__undo"
      }
    );
  }
  var undo_default2 = (0, import_element45.forwardRef)(EditorHistoryUndo);

  // packages/editor/build-module/components/editor-notices/index.js
  var import_jsx_runtime112 = __toESM(require_jsx_runtime());
  var import_components37 = __toESM(require_components());
  var import_data62 = __toESM(require_data());
  var import_notices17 = __toESM(require_notices());

  // packages/editor/build-module/components/template-validation-notice/index.js
  var import_jsx_runtime111 = __toESM(require_jsx_runtime());
  var import_components36 = __toESM(require_components());
  var import_i18n69 = __toESM(require_i18n());
  var import_data61 = __toESM(require_data());
  var import_element46 = __toESM(require_element());
  var import_block_editor27 = __toESM(require_block_editor());
  function TemplateValidationNotice() {
    const [showConfirmDialog, setShowConfirmDialog] = (0, import_element46.useState)(false);
    const isValid = (0, import_data61.useSelect)((select4) => {
      return select4(import_block_editor27.store).isValidTemplate();
    }, []);
    const { setTemplateValidity: setTemplateValidity2, synchronizeTemplate: synchronizeTemplate2 } = (0, import_data61.useDispatch)(import_block_editor27.store);
    if (isValid) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime111.jsxs)(import_jsx_runtime111.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
        import_components36.Notice,
        {
          className: "editor-template-validation-notice",
          isDismissible: false,
          status: "warning",
          actions: [
            {
              label: (0, import_i18n69.__)("Keep it as is"),
              onClick: () => setTemplateValidity2(true)
            },
            {
              label: (0, import_i18n69.__)("Reset the template"),
              onClick: () => setShowConfirmDialog(true)
            }
          ],
          children: (0, import_i18n69.__)(
            "The content of your post doesn\u2019t match the template assigned to your post type."
          )
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime111.jsx)(
        import_components36.__experimentalConfirmDialog,
        {
          isOpen: showConfirmDialog,
          confirmButtonText: (0, import_i18n69.__)("Reset"),
          onConfirm: () => {
            setShowConfirmDialog(false);
            synchronizeTemplate2();
          },
          onCancel: () => setShowConfirmDialog(false),
          size: "medium",
          children: (0, import_i18n69.__)(
            "Resetting the template may result in loss of content, do you want to continue?"
          )
        }
      )
    ] });
  }

  // packages/editor/build-module/components/editor-notices/index.js
  function EditorNotices() {
    const { notices } = (0, import_data62.useSelect)(
      (select4) => ({
        notices: select4(import_notices17.store).getNotices()
      }),
      []
    );
    const { removeNotice } = (0, import_data62.useDispatch)(import_notices17.store);
    const dismissibleNotices = notices.filter(
      ({ isDismissible, type }) => isDismissible && type === "default"
    );
    const nonDismissibleNotices = notices.filter(
      ({ isDismissible, type }) => !isDismissible && type === "default"
    );
    return /* @__PURE__ */ (0, import_jsx_runtime112.jsxs)(import_jsx_runtime112.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(
        import_components37.NoticeList,
        {
          notices: nonDismissibleNotices,
          className: "components-editor-notices__pinned"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(
        import_components37.NoticeList,
        {
          notices: dismissibleNotices,
          className: "components-editor-notices__dismissible",
          onRemove: removeNotice,
          children: /* @__PURE__ */ (0, import_jsx_runtime112.jsx)(TemplateValidationNotice, {})
        }
      )
    ] });
  }
  var editor_notices_default = EditorNotices;

  // packages/editor/build-module/components/editor-snackbars/index.js
  var import_jsx_runtime113 = __toESM(require_jsx_runtime());
  var import_components38 = __toESM(require_components());
  var import_data63 = __toESM(require_data());
  var import_notices18 = __toESM(require_notices());
  var MAX_VISIBLE_NOTICES = -3;
  function EditorSnackbars() {
    const notices = (0, import_data63.useSelect)(
      (select4) => select4(import_notices18.store).getNotices(),
      []
    );
    const { removeNotice } = (0, import_data63.useDispatch)(import_notices18.store);
    const snackbarNotices = notices.filter(({ type }) => type === "snackbar").slice(MAX_VISIBLE_NOTICES);
    return /* @__PURE__ */ (0, import_jsx_runtime113.jsx)(
      import_components38.SnackbarList,
      {
        notices: snackbarNotices,
        className: "components-editor-notices__snackbar",
        onRemove: removeNotice
      }
    );
  }

  // packages/editor/build-module/components/entities-saved-states/index.js
  var import_jsx_runtime116 = __toESM(require_jsx_runtime());
  var import_components41 = __toESM(require_components());
  var import_i18n72 = __toESM(require_i18n());
  var import_element49 = __toESM(require_element());
  var import_compose12 = __toESM(require_compose());
  var import_data67 = __toESM(require_data());

  // packages/editor/build-module/components/entities-saved-states/entity-type-list.js
  var import_jsx_runtime115 = __toESM(require_jsx_runtime());
  var import_i18n71 = __toESM(require_i18n());
  var import_data65 = __toESM(require_data());
  var import_components40 = __toESM(require_components());
  var import_core_data42 = __toESM(require_core_data());
  var import_block_editor28 = __toESM(require_block_editor());
  var import_element47 = __toESM(require_element());

  // packages/editor/build-module/components/entities-saved-states/entity-record-item.js
  var import_jsx_runtime114 = __toESM(require_jsx_runtime());
  var import_components39 = __toESM(require_components());
  var import_i18n70 = __toESM(require_i18n());
  var import_data64 = __toESM(require_data());
  var import_core_data41 = __toESM(require_core_data());
  var import_html_entities11 = __toESM(require_html_entities());
  function EntityRecordItem({ record, checked, onChange }) {
    const { name, kind, title, key } = record;
    const { entityRecordTitle, hasPostMetaChanges: hasPostMetaChanges2 } = (0, import_data64.useSelect)(
      (select4) => {
        if ("postType" !== kind || "wp_template" !== name) {
          return {
            entityRecordTitle: title,
            hasPostMetaChanges: unlock(
              select4(store)
            ).hasPostMetaChanges(name, key)
          };
        }
        const template2 = select4(import_core_data41.store).getEditedEntityRecord(
          kind,
          name,
          key
        );
        const { default_template_types: templateTypes = [] } = select4(import_core_data41.store).getCurrentTheme() ?? {};
        return {
          entityRecordTitle: getTemplateInfo({
            template: template2,
            templateTypes
          }).title,
          hasPostMetaChanges: unlock(
            select4(store)
          ).hasPostMetaChanges(name, key)
        };
      },
      [name, kind, title, key]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime114.jsxs)(import_jsx_runtime114.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(import_components39.PanelRow, { children: /* @__PURE__ */ (0, import_jsx_runtime114.jsx)(
        import_components39.CheckboxControl,
        {
          __nextHasNoMarginBottom: true,
          label: (0, import_html_entities11.decodeEntities)(entityRecordTitle) || (0, import_i18n70.__)("Untitled"),
          checked,
          onChange,
          className: "entities-saved-states__change-control"
        }
      ) }),
      hasPostMetaChanges2 && /* @__PURE__ */ (0, import_jsx_runtime114.jsx)("ul", { className: "entities-saved-states__changes", children: /* @__PURE__ */ (0, import_jsx_runtime114.jsx)("li", { children: (0, import_i18n70.__)("Post Meta.") }) })
    ] });
  }

  // packages/editor/build-module/components/entities-saved-states/entity-type-list.js
  var { getGlobalStylesChanges, GlobalStylesContext: GlobalStylesContext2 } = unlock(
    import_block_editor28.privateApis
  );
  function getEntityDescription(entity, count) {
    switch (entity) {
      case "site":
        return 1 === count ? (0, import_i18n71.__)("This change will affect your whole site.") : (0, import_i18n71.__)("These changes will affect your whole site.");
      case "wp_template":
        return (0, import_i18n71.__)(
          "This change will affect other parts of your site that use this template."
        );
      case "page":
      case "post":
        return (0, import_i18n71.__)("The following has been modified.");
    }
  }
  function GlobalStylesDescription({ record }) {
    const { user: currentEditorGlobalStyles } = (0, import_element47.useContext)(GlobalStylesContext2);
    const savedRecord = (0, import_data65.useSelect)(
      (select4) => select4(import_core_data42.store).getEntityRecord(
        record.kind,
        record.name,
        record.key
      ),
      [record.kind, record.name, record.key]
    );
    const globalStylesChanges = getGlobalStylesChanges(
      currentEditorGlobalStyles,
      savedRecord,
      {
        maxResults: 10
      }
    );
    return globalStylesChanges.length ? /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("ul", { className: "entities-saved-states__changes", children: globalStylesChanges.map((change) => /* @__PURE__ */ (0, import_jsx_runtime115.jsx)("li", { children: change }, change)) }) : null;
  }
  function EntityDescription({ record, count }) {
    if ("globalStyles" === record?.name) {
      return null;
    }
    const description = getEntityDescription(record?.name, count);
    return description ? /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(import_components40.PanelRow, { children: description }) : null;
  }
  function EntityTypeList({
    list,
    unselectedEntities,
    setUnselectedEntities
  }) {
    const count = list.length;
    const firstRecord = list[0];
    const entityConfig = (0, import_data65.useSelect)(
      (select4) => select4(import_core_data42.store).getEntityConfig(
        firstRecord.kind,
        firstRecord.name
      ),
      [firstRecord.kind, firstRecord.name]
    );
    let entityLabel = entityConfig.label;
    if (firstRecord?.name === "wp_template_part") {
      entityLabel = 1 === count ? (0, import_i18n71.__)("Template Part") : (0, import_i18n71.__)("Template Parts");
    }
    return /* @__PURE__ */ (0, import_jsx_runtime115.jsxs)(
      import_components40.PanelBody,
      {
        title: entityLabel,
        initialOpen: true,
        className: "entities-saved-states__panel-body",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(EntityDescription, { record: firstRecord, count }),
          list.map((record) => {
            return /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(
              EntityRecordItem,
              {
                record,
                checked: !unselectedEntities.some(
                  (elt) => elt.kind === record.kind && elt.name === record.name && elt.key === record.key && elt.property === record.property
                ),
                onChange: (value) => setUnselectedEntities(record, value)
              },
              record.key || record.property
            );
          }),
          "globalStyles" === firstRecord?.name && /* @__PURE__ */ (0, import_jsx_runtime115.jsx)(GlobalStylesDescription, { record: firstRecord })
        ]
      }
    );
  }

  // packages/editor/build-module/components/entities-saved-states/hooks/use-is-dirty.js
  var import_data66 = __toESM(require_data());
  var import_core_data43 = __toESM(require_core_data());
  var import_element48 = __toESM(require_element());
  var useIsDirty = () => {
    const { editedEntities, siteEdits, siteEntityConfig } = (0, import_data66.useSelect)(
      (select4) => {
        const {
          __experimentalGetDirtyEntityRecords,
          getEntityRecordEdits,
          getEntityConfig
        } = select4(import_core_data43.store);
        return {
          editedEntities: __experimentalGetDirtyEntityRecords(),
          siteEdits: getEntityRecordEdits("root", "site"),
          siteEntityConfig: getEntityConfig("root", "site")
        };
      },
      []
    );
    const dirtyEntityRecords = (0, import_element48.useMemo)(() => {
      const editedEntitiesWithoutSite = editedEntities.filter(
        (record) => !(record.kind === "root" && record.name === "site")
      );
      const siteEntityLabels = siteEntityConfig?.meta?.labels ?? {};
      const editedSiteEntities = [];
      for (const property in siteEdits) {
        editedSiteEntities.push({
          kind: "root",
          name: "site",
          title: siteEntityLabels[property] || property,
          property
        });
      }
      return [...editedEntitiesWithoutSite, ...editedSiteEntities];
    }, [editedEntities, siteEdits, siteEntityConfig]);
    const [unselectedEntities, _setUnselectedEntities] = (0, import_element48.useState)([]);
    const setUnselectedEntities = ({ kind, name, key, property }, checked) => {
      if (checked) {
        _setUnselectedEntities(
          unselectedEntities.filter(
            (elt) => elt.kind !== kind || elt.name !== name || elt.key !== key || elt.property !== property
          )
        );
      } else {
        _setUnselectedEntities([
          ...unselectedEntities,
          { kind, name, key, property }
        ]);
      }
    };
    const isDirty = dirtyEntityRecords.length - unselectedEntities.length > 0;
    return {
      dirtyEntityRecords,
      isDirty,
      setUnselectedEntities,
      unselectedEntities
    };
  };

  // packages/editor/build-module/components/entities-saved-states/index.js
  function identity(values) {
    return values;
  }
  function EntitiesSavedStates({
    close,
    renderDialog,
    variant
  }) {
    const isDirtyProps = useIsDirty();
    return /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(
      EntitiesSavedStatesExtensible,
      {
        close,
        renderDialog,
        variant,
        ...isDirtyProps
      }
    );
  }
  function EntitiesSavedStatesExtensible({
    additionalPrompt = void 0,
    close,
    onSave = identity,
    saveEnabled: saveEnabledProp = void 0,
    saveLabel = (0, import_i18n72.__)("Save"),
    renderDialog,
    dirtyEntityRecords,
    isDirty,
    setUnselectedEntities,
    unselectedEntities,
    variant = "default"
  }) {
    const saveButtonRef = (0, import_element49.useRef)();
    const { saveDirtyEntities: saveDirtyEntities2 } = unlock((0, import_data67.useDispatch)(store));
    const partitionedSavables = dirtyEntityRecords.reduce((acc, record) => {
      const { name } = record;
      if (!acc[name]) {
        acc[name] = [];
      }
      acc[name].push(record);
      return acc;
    }, {});
    const {
      site: siteSavables,
      wp_template: templateSavables,
      wp_template_part: templatePartSavables,
      ...contentSavables
    } = partitionedSavables;
    const sortedPartitionedSavables = [
      siteSavables,
      templateSavables,
      templatePartSavables,
      ...Object.values(contentSavables)
    ].filter(Array.isArray);
    const saveEnabled = saveEnabledProp ?? isDirty;
    const dismissPanel = (0, import_element49.useCallback)(() => close(), [close]);
    const [saveDialogRef, saveDialogProps] = (0, import_compose12.__experimentalUseDialog)({
      onClose: () => dismissPanel()
    });
    const dialogLabelId = (0, import_compose12.useInstanceId)(
      EntitiesSavedStatesExtensible,
      "entities-saved-states__panel-label"
    );
    const dialogDescriptionId = (0, import_compose12.useInstanceId)(
      EntitiesSavedStatesExtensible,
      "entities-saved-states__panel-description"
    );
    const selectItemsToSaveDescription = !!dirtyEntityRecords.length ? (0, import_i18n72.__)("Select the items you want to save.") : void 0;
    const isInline = variant === "inline";
    const actionButtons = /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)(import_jsx_runtime116.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(
        import_components41.FlexItem,
        {
          isBlock: isInline ? false : true,
          as: import_components41.Button,
          variant: isInline ? "tertiary" : "secondary",
          size: isInline ? void 0 : "compact",
          onClick: dismissPanel,
          children: (0, import_i18n72.__)("Cancel")
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(
        import_components41.FlexItem,
        {
          isBlock: isInline ? false : true,
          as: import_components41.Button,
          ref: saveButtonRef,
          variant: "primary",
          size: isInline ? void 0 : "compact",
          disabled: !saveEnabled,
          accessibleWhenDisabled: true,
          onClick: () => saveDirtyEntities2({
            onSave,
            dirtyEntityRecords,
            entitiesToSkip: unselectedEntities,
            close
          }),
          className: "editor-entities-saved-states__save-button",
          children: saveLabel
        }
      )
    ] });
    return /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)(
      "div",
      {
        ref: renderDialog ? saveDialogRef : void 0,
        ...renderDialog && saveDialogProps,
        className: clsx_default("entities-saved-states__panel", {
          "is-inline": isInline
        }),
        role: renderDialog ? "dialog" : void 0,
        "aria-labelledby": renderDialog ? dialogLabelId : void 0,
        "aria-describedby": renderDialog ? dialogDescriptionId : void 0,
        children: [
          !isInline && /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(import_components41.Flex, { className: "entities-saved-states__panel-header", gap: 2, children: actionButtons }),
          /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)("div", { className: "entities-saved-states__text-prompt", children: [
            /* @__PURE__ */ (0, import_jsx_runtime116.jsx)("div", { className: "entities-saved-states__text-prompt--header-wrapper", children: /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(
              "strong",
              {
                id: renderDialog ? dialogLabelId : void 0,
                className: "entities-saved-states__text-prompt--header",
                children: (0, import_i18n72.__)("Are you ready to save?")
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime116.jsxs)("div", { id: renderDialog ? dialogDescriptionId : void 0, children: [
              additionalPrompt,
              /* @__PURE__ */ (0, import_jsx_runtime116.jsx)("p", { className: "entities-saved-states__text-prompt--changes-count", children: isDirty ? (0, import_element49.createInterpolateElement)(
                (0, import_i18n72.sprintf)(
                  /* translators: %d: number of site changes waiting to be saved. */
                  (0, import_i18n72._n)(
                    "There is <strong>%d site change</strong> waiting to be saved.",
                    "There are <strong>%d site changes</strong> waiting to be saved.",
                    dirtyEntityRecords.length
                  ),
                  dirtyEntityRecords.length
                ),
                { strong: /* @__PURE__ */ (0, import_jsx_runtime116.jsx)("strong", {}) }
              ) : selectItemsToSaveDescription })
            ] })
          ] }),
          sortedPartitionedSavables.map((list) => {
            return /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(
              EntityTypeList,
              {
                list,
                unselectedEntities,
                setUnselectedEntities
              },
              list[0].name
            );
          }),
          isInline && /* @__PURE__ */ (0, import_jsx_runtime116.jsx)(
            import_components41.Flex,
            {
              direction: "row",
              justify: "flex-end",
              className: "entities-saved-states__panel-footer",
              children: actionButtons
            }
          )
        ]
      }
    );
  }

  // packages/editor/build-module/components/error-boundary/index.js
  var import_jsx_runtime117 = __toESM(require_jsx_runtime());
  var import_element50 = __toESM(require_element());
  var import_i18n73 = __toESM(require_i18n());
  var import_components42 = __toESM(require_components());
  var import_data68 = __toESM(require_data());
  var import_compose13 = __toESM(require_compose());
  var import_hooks6 = __toESM(require_hooks());
  function getContent() {
    try {
      return (0, import_data68.select)(store).getEditedPostContent();
    } catch (error) {
    }
  }
  function CopyButton({ text, children, variant = "secondary" }) {
    const ref = (0, import_compose13.useCopyToClipboard)(text);
    return /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(import_components42.Button, { __next40pxDefaultSize: true, variant, ref, children });
  }
  var ErrorBoundary = class extends import_element50.Component {
    constructor() {
      super(...arguments);
      this.state = {
        error: null
      };
    }
    componentDidCatch(error) {
      (0, import_hooks6.doAction)("editor.ErrorBoundary.errorLogged", error);
    }
    static getDerivedStateFromError(error) {
      return { error };
    }
    render() {
      const { error } = this.state;
      const { canCopyContent = false } = this.props;
      if (!error) {
        return this.props.children;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(
        import_components42.__experimentalHStack,
        {
          className: "editor-error-boundary",
          alignment: "baseline",
          spacing: 4,
          justify: "space-between",
          expanded: false,
          wrap: true,
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(import_components42.__experimentalText, { as: "p", children: (0, import_i18n73.__)("The editor has encountered an unexpected error.") }),
            /* @__PURE__ */ (0, import_jsx_runtime117.jsxs)(import_components42.__experimentalHStack, { expanded: false, children: [
              canCopyContent && /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(CopyButton, { text: getContent, children: (0, import_i18n73.__)("Copy contents") }),
              /* @__PURE__ */ (0, import_jsx_runtime117.jsx)(CopyButton, { variant: "primary", text: error?.stack, children: (0, import_i18n73.__)("Copy error") })
            ] })
          ]
        }
      );
    }
  };
  var error_boundary_default = ErrorBoundary;

  // packages/editor/build-module/components/local-autosave-monitor/index.js
  var import_jsx_runtime118 = __toESM(require_jsx_runtime());
  var import_element51 = __toESM(require_element());
  var import_compose14 = __toESM(require_compose());
  var import_data69 = __toESM(require_data());
  var import_i18n74 = __toESM(require_i18n());
  var import_blocks13 = __toESM(require_blocks());
  var import_notices19 = __toESM(require_notices());
  var requestIdleCallback = window.requestIdleCallback ? window.requestIdleCallback : window.requestAnimationFrame;
  var hasStorageSupport;
  var hasSessionStorageSupport = () => {
    if (hasStorageSupport !== void 0) {
      return hasStorageSupport;
    }
    try {
      window.sessionStorage.setItem("__wpEditorTestSessionStorage", "");
      window.sessionStorage.removeItem("__wpEditorTestSessionStorage");
      hasStorageSupport = true;
    } catch {
      hasStorageSupport = false;
    }
    return hasStorageSupport;
  };
  function useAutosaveNotice() {
    const { postId: postId2, isEditedPostNew: isEditedPostNew2, hasRemoteAutosave } = (0, import_data69.useSelect)(
      (select4) => ({
        postId: select4(store).getCurrentPostId(),
        isEditedPostNew: select4(store).isEditedPostNew(),
        hasRemoteAutosave: !!select4(store).getEditorSettings().autosave
      }),
      []
    );
    const { getEditedPostAttribute: getEditedPostAttribute2 } = (0, import_data69.useSelect)(store);
    const { createWarningNotice, removeNotice } = (0, import_data69.useDispatch)(import_notices19.store);
    const { editPost: editPost2, resetEditorBlocks: resetEditorBlocks2 } = (0, import_data69.useDispatch)(store);
    (0, import_element51.useEffect)(() => {
      let localAutosave = localAutosaveGet(postId2, isEditedPostNew2);
      if (!localAutosave) {
        return;
      }
      try {
        localAutosave = JSON.parse(localAutosave);
      } catch {
        return;
      }
      const { post_title: title, content, excerpt } = localAutosave;
      const edits = { title, content, excerpt };
      {
        const hasDifference = Object.keys(edits).some((key) => {
          return edits[key] !== getEditedPostAttribute2(key);
        });
        if (!hasDifference) {
          localAutosaveClear(postId2, isEditedPostNew2);
          return;
        }
      }
      if (hasRemoteAutosave) {
        return;
      }
      const id = "wpEditorAutosaveRestore";
      createWarningNotice(
        (0, import_i18n74.__)(
          "The backup of this post in your browser is different from the version below."
        ),
        {
          id,
          actions: [
            {
              label: (0, import_i18n74.__)("Restore the backup"),
              onClick() {
                const {
                  content: editsContent,
                  ...editsWithoutContent
                } = edits;
                editPost2(editsWithoutContent);
                resetEditorBlocks2((0, import_blocks13.parse)(edits.content));
                removeNotice(id);
              }
            }
          ]
        }
      );
    }, [isEditedPostNew2, postId2]);
  }
  function useAutosavePurge() {
    const { postId: postId2, isEditedPostNew: isEditedPostNew2, isDirty, isAutosaving, didError } = (0, import_data69.useSelect)(
      (select4) => ({
        postId: select4(store).getCurrentPostId(),
        isEditedPostNew: select4(store).isEditedPostNew(),
        isDirty: select4(store).isEditedPostDirty(),
        isAutosaving: select4(store).isAutosavingPost(),
        didError: select4(store).didPostSaveRequestFail()
      }),
      []
    );
    const lastIsDirtyRef = (0, import_element51.useRef)(isDirty);
    const lastIsAutosavingRef = (0, import_element51.useRef)(isAutosaving);
    (0, import_element51.useEffect)(() => {
      if (!didError && (lastIsAutosavingRef.current && !isAutosaving || lastIsDirtyRef.current && !isDirty)) {
        localAutosaveClear(postId2, isEditedPostNew2);
      }
      lastIsDirtyRef.current = isDirty;
      lastIsAutosavingRef.current = isAutosaving;
    }, [isDirty, isAutosaving, didError]);
    const wasEditedPostNew = (0, import_compose14.usePrevious)(isEditedPostNew2);
    const prevPostId = (0, import_compose14.usePrevious)(postId2);
    (0, import_element51.useEffect)(() => {
      if (prevPostId === postId2 && wasEditedPostNew && !isEditedPostNew2) {
        localAutosaveClear(postId2, true);
      }
    }, [isEditedPostNew2, postId2]);
  }
  function LocalAutosaveMonitor() {
    const { autosave: autosave2 } = (0, import_data69.useDispatch)(store);
    const deferredAutosave = (0, import_element51.useCallback)(() => {
      requestIdleCallback(() => autosave2({ local: true }));
    }, []);
    useAutosaveNotice();
    useAutosavePurge();
    const localAutosaveInterval = (0, import_data69.useSelect)(
      (select4) => select4(store).getEditorSettings().localAutosaveInterval,
      []
    );
    return /* @__PURE__ */ (0, import_jsx_runtime118.jsx)(
      autosave_monitor_default,
      {
        interval: localAutosaveInterval,
        autosave: deferredAutosave
      }
    );
  }
  var local_autosave_monitor_default = (0, import_compose14.ifCondition)(hasSessionStorageSupport)(LocalAutosaveMonitor);

  // packages/editor/build-module/components/page-attributes/check.js
  var import_data70 = __toESM(require_data());
  var import_core_data44 = __toESM(require_core_data());
  function PageAttributesCheck({ children }) {
    const supportsPageAttributes = (0, import_data70.useSelect)((select4) => {
      const { getEditedPostAttribute: getEditedPostAttribute2 } = select4(store);
      const { getPostType } = select4(import_core_data44.store);
      const postType2 = getPostType(getEditedPostAttribute2("type"));
      return !!postType2?.supports?.["page-attributes"];
    }, []);
    if (!supportsPageAttributes) {
      return null;
    }
    return children;
  }
  var check_default2 = PageAttributesCheck;

  // packages/editor/build-module/components/page-attributes/order.js
  var import_jsx_runtime119 = __toESM(require_jsx_runtime());
  var import_i18n75 = __toESM(require_i18n());
  var import_components43 = __toESM(require_components());
  var import_data72 = __toESM(require_data());
  var import_element52 = __toESM(require_element());

  // packages/editor/build-module/components/post-type-support-check/index.js
  var import_data71 = __toESM(require_data());
  var import_core_data45 = __toESM(require_core_data());
  function checkSupport(supports = {}, key) {
    if (supports[key] !== void 0) {
      return !!supports[key];
    }
    const [topKey, subKey] = key.split(".");
    const [subProperties] = Array.isArray(supports[topKey]) ? supports[topKey] : [];
    return Array.isArray(subProperties) ? subProperties.includes(subKey) : !!subProperties?.[subKey];
  }
  function PostTypeSupportCheck({ children, supportKeys }) {
    const postType2 = (0, import_data71.useSelect)((select4) => {
      const { getEditedPostAttribute: getEditedPostAttribute2 } = select4(store);
      const { getPostType } = select4(import_core_data45.store);
      return getPostType(getEditedPostAttribute2("type"));
    }, []);
    let isSupported = !!postType2;
    if (postType2) {
      isSupported = (Array.isArray(supportKeys) ? supportKeys : [supportKeys]).some((key) => checkSupport(postType2.supports, key));
    }
    if (!isSupported) {
      return null;
    }
    return children;
  }
  var post_type_support_check_default = PostTypeSupportCheck;

  // packages/editor/build-module/components/page-attributes/order.js
  function PageAttributesOrder() {
    const order = (0, import_data72.useSelect)(
      (select4) => select4(store).getEditedPostAttribute("menu_order") ?? 0,
      []
    );
    const { editPost: editPost2 } = (0, import_data72.useDispatch)(store);
    const [orderInput, setOrderInput] = (0, import_element52.useState)(null);
    const setUpdatedOrder = (value2) => {
      setOrderInput(value2);
      const newOrder = Number(value2);
      if (Number.isInteger(newOrder) && value2.trim?.() !== "") {
        editPost2({ menu_order: newOrder });
      }
    };
    const value = orderInput ?? order;
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(import_components43.Flex, { children: /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(import_components43.FlexBlock, { children: /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(
      import_components43.__experimentalNumberControl,
      {
        __next40pxDefaultSize: true,
        label: (0, import_i18n75.__)("Order"),
        help: (0, import_i18n75.__)("Set the page order."),
        value,
        onChange: setUpdatedOrder,
        hideLabelFromVision: true,
        onBlur: () => {
          setOrderInput(null);
        }
      }
    ) }) });
  }
  function PageAttributesOrderWithChecks() {
    return /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(post_type_support_check_default, { supportKeys: "page-attributes", children: /* @__PURE__ */ (0, import_jsx_runtime119.jsx)(PageAttributesOrder, {}) });
  }

  // packages/editor/build-module/components/page-attributes/panel.js
  var import_jsx_runtime122 = __toESM(require_jsx_runtime());
  var import_data74 = __toESM(require_data());
  var import_core_data47 = __toESM(require_core_data());

  // packages/editor/build-module/components/page-attributes/parent.js
  var import_jsx_runtime121 = __toESM(require_jsx_runtime());
  var import_remove_accents2 = __toESM(require_remove_accents());
  var import_i18n76 = __toESM(require_i18n());
  var import_components45 = __toESM(require_components());
  var import_compose15 = __toESM(require_compose());
  var import_element54 = __toESM(require_element());
  var import_data73 = __toESM(require_data());
  var import_html_entities13 = __toESM(require_html_entities());
  var import_core_data46 = __toESM(require_core_data());
  var import_block_editor29 = __toESM(require_block_editor());
  var import_url10 = __toESM(require_url());

  // packages/editor/build-module/components/post-panel-row/index.js
  var import_jsx_runtime120 = __toESM(require_jsx_runtime());
  var import_components44 = __toESM(require_components());
  var import_element53 = __toESM(require_element());
  var PostPanelRow = (0, import_element53.forwardRef)(({ className, label, children }, ref) => {
    return /* @__PURE__ */ (0, import_jsx_runtime120.jsxs)(
      import_components44.__experimentalHStack,
      {
        className: clsx_default("editor-post-panel__row", className),
        ref,
        children: [
          label && /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("div", { className: "editor-post-panel__row-label", children: label }),
          /* @__PURE__ */ (0, import_jsx_runtime120.jsx)("div", { className: "editor-post-panel__row-control", children })
        ]
      }
    );
  });
  var post_panel_row_default = PostPanelRow;

  // packages/editor/build-module/utils/terms.js
  var import_html_entities12 = __toESM(require_html_entities());
  function buildTermsTree2(flatTerms) {
    const flatTermsWithParentAndChildren = flatTerms.map((term) => {
      return {
        children: [],
        parent: void 0,
        ...term
      };
    });
    if (flatTermsWithParentAndChildren.some(
      ({ parent }) => parent === void 0
    )) {
      return flatTermsWithParentAndChildren;
    }
    const termsByParent = flatTermsWithParentAndChildren.reduce(
      (acc, term) => {
        const { parent } = term;
        if (!acc[parent]) {
          acc[parent] = [];
        }
        acc[parent].push(term);
        return acc;
      },
      {}
    );
    const fillWithChildren = (terms) => {
      return terms.map((term) => {
        const children = termsByParent[term.id];
        return {
          ...term,
          children: children && children.length ? fillWithChildren(children) : []
        };
      });
    };
    return fillWithChildren(termsByParent["0"] || []);
  }
  var unescapeString = (arg) => {
    return (0, import_html_entities12.decodeEntities)(arg);
  };
  var unescapeTerm = (term) => {
    return {
      ...term,
      name: unescapeString(term.name)
    };
  };
  var unescapeTerms = (terms) => {
    return (terms ?? []).map(unescapeTerm);
  };

  // packages/editor/build-module/components/page-attributes/parent.js
  function getTitle(post) {
    return post?.title?.rendered ? (0, import_html_entities13.decodeEntities)(post.title.rendered) : `#${post.id} (${(0, import_i18n76.__)("no title")})`;
  }
  var getItemPriority2 = (name, searchValue) => {
    const normalizedName = (0, import_remove_accents2.default)(name || "").toLowerCase();
    const normalizedSearch = (0, import_remove_accents2.default)(searchValue || "").toLowerCase();
    if (normalizedName === normalizedSearch) {
      return 0;
    }
    if (normalizedName.startsWith(normalizedSearch)) {
      return normalizedName.length;
    }
    return Infinity;
  };
  function PageAttributesParent2() {
    const { editPost: editPost2 } = (0, import_data73.useDispatch)(store);
    const [fieldValue, setFieldValue] = (0, import_element54.useState)(false);
    const {
      isHierarchical,
      parentPostId,
      parentPostTitle,
      pageItems,
      isLoading
    } = (0, import_data73.useSelect)(
      (select4) => {
        const {
          getPostType,
          getEntityRecords,
          getEntityRecord,
          isResolving
        } = select4(import_core_data46.store);
        const { getCurrentPostId: getCurrentPostId2, getEditedPostAttribute: getEditedPostAttribute2 } = select4(store);
        const postTypeSlug = getEditedPostAttribute2("type");
        const pageId = getEditedPostAttribute2("parent");
        const pType = getPostType(postTypeSlug);
        const postId2 = getCurrentPostId2();
        const postIsHierarchical = pType?.hierarchical ?? false;
        const query = {
          per_page: 100,
          exclude: postId2,
          parent_exclude: postId2,
          orderby: "menu_order",
          order: "asc",
          _fields: "id,title,parent"
        };
        if (!!fieldValue) {
          query.search = fieldValue;
        }
        const parentPost = pageId ? getEntityRecord("postType", postTypeSlug, pageId) : null;
        return {
          isHierarchical: postIsHierarchical,
          parentPostId: pageId,
          parentPostTitle: parentPost ? getTitle(parentPost) : "",
          pageItems: postIsHierarchical ? getEntityRecords("postType", postTypeSlug, query) : null,
          isLoading: postIsHierarchical ? isResolving("getEntityRecords", [
            "postType",
            postTypeSlug,
            query
          ]) : false
        };
      },
      [fieldValue]
    );
    const parentOptions = (0, import_element54.useMemo)(() => {
      const getOptionsFromTree = (tree2, level = 0) => {
        const mappedNodes = tree2.map((treeNode) => [
          {
            value: treeNode.id,
            label: "\u2014 ".repeat(level) + (0, import_html_entities13.decodeEntities)(treeNode.name),
            rawName: treeNode.name
          },
          ...getOptionsFromTree(treeNode.children || [], level + 1)
        ]);
        const sortedNodes = mappedNodes.sort(([a2], [b2]) => {
          const priorityA = getItemPriority2(a2.rawName, fieldValue);
          const priorityB = getItemPriority2(b2.rawName, fieldValue);
          return priorityA >= priorityB ? 1 : -1;
        });
        return sortedNodes.flat();
      };
      if (!pageItems) {
        return [];
      }
      let tree = pageItems.map((item) => ({
        id: item.id,
        parent: item.parent,
        name: getTitle(item)
      }));
      if (!fieldValue) {
        tree = buildTermsTree2(tree);
      }
      const opts = getOptionsFromTree(tree);
      const optsHasParent = opts.find(
        (item) => item.value === parentPostId
      );
      if (parentPostTitle && !optsHasParent) {
        opts.unshift({
          value: parentPostId,
          label: parentPostTitle
        });
      }
      return opts;
    }, [pageItems, fieldValue, parentPostTitle, parentPostId]);
    if (!isHierarchical) {
      return null;
    }
    const handleKeydown = (inputValue) => {
      setFieldValue(inputValue);
    };
    const handleChange = (selectedPostId) => {
      editPost2({ parent: selectedPostId });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(
      import_components45.ComboboxControl,
      {
        __nextHasNoMarginBottom: true,
        __next40pxDefaultSize: true,
        className: "editor-page-attributes__parent",
        label: (0, import_i18n76.__)("Parent"),
        help: (0, import_i18n76.__)("Choose a parent page."),
        value: parentPostId,
        options: parentOptions,
        onFilterValueChange: (0, import_compose15.debounce)(handleKeydown, 300),
        onChange: handleChange,
        hideLabelFromVision: true,
        isLoading
      }
    );
  }
  function PostParentToggle({ isOpen, onClick }) {
    const parentPost = (0, import_data73.useSelect)((select4) => {
      const { getEditedPostAttribute: getEditedPostAttribute2 } = select4(store);
      const parentPostId = getEditedPostAttribute2("parent");
      if (!parentPostId) {
        return null;
      }
      const { getEntityRecord } = select4(import_core_data46.store);
      const postTypeSlug = getEditedPostAttribute2("type");
      return getEntityRecord("postType", postTypeSlug, parentPostId);
    }, []);
    const parentTitle = (0, import_element54.useMemo)(
      () => !parentPost ? (0, import_i18n76.__)("None") : getTitle(parentPost),
      [parentPost]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(
      import_components45.Button,
      {
        size: "compact",
        className: "editor-post-parent__panel-toggle",
        variant: "tertiary",
        "aria-expanded": isOpen,
        "aria-label": (
          // translators: %s: Current post parent.
          (0, import_i18n76.sprintf)((0, import_i18n76.__)("Change parent: %s"), parentTitle)
        ),
        onClick,
        children: parentTitle
      }
    );
  }
  function ParentRow() {
    const homeUrl = (0, import_data73.useSelect)((select4) => {
      return select4(import_core_data46.store).getEntityRecord("root", "__unstableBase")?.home;
    }, []);
    const [popoverAnchor, setPopoverAnchor] = (0, import_element54.useState)(null);
    const popoverProps = (0, import_element54.useMemo)(
      () => ({
        // Anchor the popover to the middle of the entire row so that it doesn't
        // move around when the label changes.
        anchor: popoverAnchor,
        placement: "left-start",
        offset: 36,
        shift: true
      }),
      [popoverAnchor]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(post_panel_row_default, { label: (0, import_i18n76.__)("Parent"), ref: setPopoverAnchor, children: /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(
      import_components45.Dropdown,
      {
        popoverProps,
        className: "editor-post-parent__panel-dropdown",
        contentClassName: "editor-post-parent__panel-dialog",
        focusOnMount: true,
        renderToggle: ({ isOpen, onToggle }) => /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(PostParentToggle, { isOpen, onClick: onToggle }),
        renderContent: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime121.jsxs)("div", { className: "editor-post-parent", children: [
          /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(
            import_block_editor29.__experimentalInspectorPopoverHeader,
            {
              title: (0, import_i18n76.__)("Parent"),
              onClose
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime121.jsxs)("div", { children: [
            (0, import_element54.createInterpolateElement)(
              (0, import_i18n76.sprintf)(
                /* translators: %s: The home URL of the WordPress installation without the scheme. */
                (0, import_i18n76.__)(
                  'Child pages inherit characteristics from their parent, such as URL structure. For instance, if "Pricing" is a child of "Services", its URL would be %s<wbr />/services<wbr />/pricing.'
                ),
                (0, import_url10.filterURLForDisplay)(homeUrl).replace(
                  /([/.])/g,
                  "<wbr />$1"
                )
              ),
              {
                wbr: /* @__PURE__ */ (0, import_jsx_runtime121.jsx)("wbr", {})
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime121.jsx)("p", { children: (0, import_element54.createInterpolateElement)(
              (0, import_i18n76.__)(
                "They also show up as sub-items in the default navigation menu. <a>Learn more.</a>"
              ),
              {
                a: /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(
                  import_components45.ExternalLink,
                  {
                    href: (0, import_i18n76.__)(
                      "https://wordpress.org/documentation/article/page-post-settings-sidebar/#page-attributes"
                    )
                  }
                )
              }
            ) })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime121.jsx)(PageAttributesParent2, {})
        ] })
      }
    ) });
  }
  var parent_default2 = PageAttributesParent2;

  // packages/editor/build-module/components/page-attributes/panel.js
  var PANEL_NAME = "page-attributes";
  function AttributesPanel() {
    const { isEnabled, postType: postType2 } = (0, import_data74.useSelect)((select4) => {
      const { getEditedPostAttribute: getEditedPostAttribute2, isEditorPanelEnabled: isEditorPanelEnabled2 } = select4(store);
      const { getPostType } = select4(import_core_data47.store);
      return {
        isEnabled: isEditorPanelEnabled2(PANEL_NAME),
        postType: getPostType(getEditedPostAttribute2("type"))
      };
    }, []);
    if (!isEnabled || !postType2) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(ParentRow, {});
  }
  function PageAttributesPanel() {
    return /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(check_default2, { children: /* @__PURE__ */ (0, import_jsx_runtime122.jsx)(AttributesPanel, {}) });
  }

  // packages/editor/build-module/components/post-template/classic-theme.js
  var import_jsx_runtime124 = __toESM(require_jsx_runtime());
  var import_i18n78 = __toESM(require_i18n());
  var import_components47 = __toESM(require_components());
  var import_data77 = __toESM(require_data());
  var import_core_data49 = __toESM(require_core_data());
  var import_block_editor30 = __toESM(require_block_editor());
  var import_element57 = __toESM(require_element());
  var import_notices20 = __toESM(require_notices());

  // packages/editor/build-module/components/post-template/create-new-template-modal.js
  var import_jsx_runtime123 = __toESM(require_jsx_runtime());
  var import_data75 = __toESM(require_data());
  var import_element55 = __toESM(require_element());
  var import_blocks14 = __toESM(require_blocks());
  var import_components46 = __toESM(require_components());
  var import_i18n77 = __toESM(require_i18n());
  var DEFAULT_TITLE = (0, import_i18n77.__)("Custom Template");
  function CreateNewTemplateModal({ onClose }) {
    const { defaultBlockTemplate, onNavigateToEntityRecord } = (0, import_data75.useSelect)(
      (select4) => {
        const { getEditorSettings: getEditorSettings2, getCurrentTemplateId: getCurrentTemplateId2 } = select4(store);
        return {
          defaultBlockTemplate: getEditorSettings2().defaultBlockTemplate,
          onNavigateToEntityRecord: getEditorSettings2().onNavigateToEntityRecord,
          getTemplateId: getCurrentTemplateId2
        };
      }
    );
    const { createTemplate: createTemplate2 } = unlock((0, import_data75.useDispatch)(store));
    const [title, setTitle] = (0, import_element55.useState)("");
    const [isBusy, setIsBusy] = (0, import_element55.useState)(false);
    const cancel = () => {
      setTitle("");
      onClose();
    };
    const submit = async (event) => {
      event.preventDefault();
      if (isBusy) {
        return;
      }
      setIsBusy(true);
      const newTemplateContent = defaultBlockTemplate ?? (0, import_blocks14.serialize)([
        (0, import_blocks14.createBlock)(
          "core/group",
          {
            tagName: "header",
            layout: { inherit: true }
          },
          [
            (0, import_blocks14.createBlock)("core/site-title"),
            (0, import_blocks14.createBlock)("core/site-tagline")
          ]
        ),
        (0, import_blocks14.createBlock)("core/separator"),
        (0, import_blocks14.createBlock)(
          "core/group",
          {
            tagName: "main"
          },
          [
            (0, import_blocks14.createBlock)(
              "core/group",
              {
                layout: { inherit: true }
              },
              [(0, import_blocks14.createBlock)("core/post-title")]
            ),
            (0, import_blocks14.createBlock)("core/post-content", {
              layout: { inherit: true }
            })
          ]
        )
      ]);
      const newTemplate = await createTemplate2({
        slug: paramCase(title || DEFAULT_TITLE) || "wp-custom-template",
        content: newTemplateContent,
        title: title || DEFAULT_TITLE,
        status: "publish"
      });
      setIsBusy(false);
      onNavigateToEntityRecord({
        postId: newTemplate.id,
        postType: "wp_template"
      });
      cancel();
    };
    return /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(
      import_components46.Modal,
      {
        title: (0, import_i18n77.__)("Create custom template"),
        onRequestClose: cancel,
        focusOnMount: "firstContentElement",
        size: "small",
        overlayClassName: "editor-post-template__create-template-modal",
        children: /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(
          "form",
          {
            className: "editor-post-template__create-form",
            onSubmit: submit,
            children: /* @__PURE__ */ (0, import_jsx_runtime123.jsxs)(import_components46.__experimentalVStack, { spacing: "3", children: [
              /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(
                import_components46.TextControl,
                {
                  __next40pxDefaultSize: true,
                  __nextHasNoMarginBottom: true,
                  label: (0, import_i18n77.__)("Name"),
                  value: title,
                  onChange: setTitle,
                  placeholder: DEFAULT_TITLE,
                  disabled: isBusy,
                  help: (0, import_i18n77.__)(
                    // eslint-disable-next-line no-restricted-syntax -- 'sidebar' is a common web design term for layouts
                    'Describe the template, e.g. "Post with sidebar". A custom template can be manually applied to any post or page.'
                  )
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime123.jsxs)(import_components46.__experimentalHStack, { justify: "right", children: [
                /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(
                  import_components46.Button,
                  {
                    __next40pxDefaultSize: true,
                    variant: "tertiary",
                    onClick: cancel,
                    children: (0, import_i18n77.__)("Cancel")
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime123.jsx)(
                  import_components46.Button,
                  {
                    __next40pxDefaultSize: true,
                    variant: "primary",
                    type: "submit",
                    isBusy,
                    "aria-disabled": isBusy,
                    children: (0, import_i18n77.__)("Create")
                  }
                )
              ] })
            ] })
          }
        )
      }
    );
  }

  // packages/editor/build-module/components/post-template/hooks.js
  var import_data76 = __toESM(require_data());
  var import_element56 = __toESM(require_element());
  var import_core_data48 = __toESM(require_core_data());
  function useEditedPostContext() {
    return (0, import_data76.useSelect)((select4) => {
      const { getCurrentPostId: getCurrentPostId2, getCurrentPostType: getCurrentPostType2 } = select4(store);
      return {
        postId: getCurrentPostId2(),
        postType: getCurrentPostType2()
      };
    }, []);
  }
  function useAllowSwitchingTemplates() {
    const { postType: postType2, postId: postId2 } = useEditedPostContext();
    return (0, import_data76.useSelect)(
      (select4) => {
        const { canUser, getEntityRecord, getEntityRecords } = select4(import_core_data48.store);
        const siteSettings = canUser("read", {
          kind: "root",
          name: "site"
        }) ? getEntityRecord("root", "site") : void 0;
        const isPostsPage = +postId2 === siteSettings?.page_for_posts;
        const isFrontPage = postType2 === "page" && +postId2 === siteSettings?.page_on_front;
        const templates = isFrontPage ? getEntityRecords("postType", "wp_template", {
          per_page: -1
        }) : [];
        const hasFrontPage = isFrontPage && !!templates?.some(({ slug }) => slug === "front-page");
        return !isPostsPage && !hasFrontPage;
      },
      [postId2, postType2]
    );
  }
  function useTemplates(postType2) {
    const { defaultTemplateTypes, registeredTemplates, userTemplates } = (0, import_data76.useSelect)(
      (select4) => {
        return {
          defaultTemplateTypes: select4(import_core_data48.store).getCurrentTheme()?.default_template_types,
          registeredTemplates: select4(import_core_data48.store).getEntityRecords(
            "postType",
            "wp_registered_template",
            {
              per_page: -1,
              post_type: postType2
            }
          ),
          userTemplates: select4(import_core_data48.store).getEntityRecords(
            "postType",
            "wp_template",
            { per_page: -1, combinedTemplates: false }
          )
        };
      },
      [postType2]
    );
    return (0, import_element56.useMemo)(() => {
      if (!defaultTemplateTypes || !registeredTemplates || !userTemplates) {
        return [];
      }
      return [
        ...registeredTemplates,
        ...userTemplates.filter(
          (template2) => (
            // Only give "custom" templates as an option, which
            // means the is_wp_suggestion meta field is not set and
            // the slug is not found in the default template types.
            // https://github.com/WordPress/wordpress-develop/blob/97382397b2bd7c85aef6d4cd1c10bafd397957fc/src/wp-includes/block-template-utils.php#L858-L867
            !template2.meta.is_wp_suggestion && !defaultTemplateTypes.find(
              (type) => type.slug === template2.slug
            )
          )
        )
      ];
    }, [registeredTemplates, userTemplates, defaultTemplateTypes]);
  }
  function useAvailableTemplates(postType2) {
    const currentTemplateSlug = useCurrentTemplateSlug();
    const allowSwitchingTemplate = useAllowSwitchingTemplates();
    const templates = useTemplates(postType2);
    return (0, import_element56.useMemo)(
      () => allowSwitchingTemplate && templates?.filter(
        (template2) => (template2.is_custom || template2.type === "wp_template") && template2.slug !== currentTemplateSlug && !!template2.content.raw
        // Skip empty templates.
      ),
      [templates, currentTemplateSlug, allowSwitchingTemplate]
    );
  }
  function useCurrentTemplateSlug() {
    const { postType: postType2, postId: postId2 } = useEditedPostContext();
    const templates = useTemplates(postType2);
    const entityTemplate = (0, import_data76.useSelect)(
      (select4) => {
        const post = select4(import_core_data48.store).getEditedEntityRecord(
          "postType",
          postType2,
          postId2
        );
        return post?.template;
      },
      [postType2, postId2]
    );
    if (!entityTemplate) {
      return;
    }
    return templates?.find((template2) => template2.slug === entityTemplate)?.slug;
  }

  // packages/editor/build-module/components/post-template/classic-theme.js
  function PostTemplateToggle({ isOpen, onClick }) {
    const templateTitle = (0, import_data77.useSelect)((select4) => {
      const templateSlug = select4(store).getEditedPostAttribute("template");
      const { supportsTemplateMode, availableTemplates } = select4(store).getEditorSettings();
      if (!supportsTemplateMode && availableTemplates[templateSlug]) {
        return availableTemplates[templateSlug];
      }
      const template2 = select4(import_core_data49.store).canUser("create", {
        kind: "postType",
        name: "wp_template"
      }) && select4(store).getCurrentTemplateId();
      return template2?.title || template2?.slug || availableTemplates?.[templateSlug];
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(
      import_components47.Button,
      {
        __next40pxDefaultSize: true,
        variant: "tertiary",
        "aria-expanded": isOpen,
        "aria-label": (0, import_i18n78.__)("Template options"),
        onClick,
        children: templateTitle ?? (0, import_i18n78.__)("Default template")
      }
    );
  }
  function PostTemplateDropdownContent({ onClose }) {
    const allowSwitchingTemplate = useAllowSwitchingTemplates();
    const {
      availableTemplates,
      fetchedTemplates,
      selectedTemplateSlug,
      canCreate,
      canEdit,
      currentTemplateId,
      onNavigateToEntityRecord,
      getEditorSettings: getEditorSettings2
    } = (0, import_data77.useSelect)(
      (select4) => {
        const { canUser, getEntityRecords } = select4(import_core_data49.store);
        const editorSettings2 = select4(store).getEditorSettings();
        const canCreateTemplates = canUser("create", {
          kind: "postType",
          name: "wp_template"
        });
        const _currentTemplateId = select4(store).getCurrentTemplateId();
        return {
          availableTemplates: editorSettings2.availableTemplates,
          fetchedTemplates: canCreateTemplates ? getEntityRecords("postType", "wp_template", {
            post_type: select4(store).getCurrentPostType(),
            per_page: -1
          }) : void 0,
          selectedTemplateSlug: select4(store).getEditedPostAttribute("template"),
          canCreate: allowSwitchingTemplate && canCreateTemplates && editorSettings2.supportsTemplateMode,
          canEdit: allowSwitchingTemplate && canCreateTemplates && editorSettings2.supportsTemplateMode && !!_currentTemplateId,
          currentTemplateId: _currentTemplateId,
          onNavigateToEntityRecord: editorSettings2.onNavigateToEntityRecord,
          getEditorSettings: select4(store).getEditorSettings
        };
      },
      [allowSwitchingTemplate]
    );
    const options = (0, import_element57.useMemo)(
      () => Object.entries({
        ...availableTemplates,
        ...Object.fromEntries(
          (fetchedTemplates ?? []).map(({ slug, title }) => [
            slug,
            title.rendered
          ])
        )
      }).map(([slug, title]) => ({ value: slug, label: title })),
      [availableTemplates, fetchedTemplates]
    );
    const selectedOption = options.find((option) => option.value === selectedTemplateSlug) ?? options.find((option) => !option.value);
    const { editPost: editPost2 } = (0, import_data77.useDispatch)(store);
    const { createSuccessNotice } = (0, import_data77.useDispatch)(import_notices20.store);
    const [isCreateModalOpen, setIsCreateModalOpen] = (0, import_element57.useState)(false);
    return /* @__PURE__ */ (0, import_jsx_runtime124.jsxs)("div", { className: "editor-post-template__classic-theme-dropdown", children: [
      /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(
        import_block_editor30.__experimentalInspectorPopoverHeader,
        {
          title: (0, import_i18n78.__)("Template"),
          help: (0, import_i18n78.__)(
            "Templates define the way content is displayed when viewing your site."
          ),
          actions: canCreate ? [
            {
              icon: add_template_default,
              label: (0, import_i18n78.__)("Add template"),
              onClick: () => setIsCreateModalOpen(true)
            }
          ] : [],
          onClose
        }
      ),
      !allowSwitchingTemplate ? /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(import_components47.Notice, { status: "warning", isDismissible: false, children: (0, import_i18n78.__)("The posts page template cannot be changed.") }) : /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(
        import_components47.SelectControl,
        {
          __next40pxDefaultSize: true,
          __nextHasNoMarginBottom: true,
          hideLabelFromVision: true,
          label: (0, import_i18n78.__)("Template"),
          value: selectedOption?.value ?? "",
          options,
          onChange: (slug) => editPost2({ template: slug || "" })
        }
      ),
      canEdit && onNavigateToEntityRecord && /* @__PURE__ */ (0, import_jsx_runtime124.jsx)("p", { children: /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(
        import_components47.Button,
        {
          __next40pxDefaultSize: true,
          variant: "link",
          onClick: () => {
            onNavigateToEntityRecord({
              postId: currentTemplateId,
              postType: "wp_template"
            });
            onClose();
            createSuccessNotice(
              (0, import_i18n78.__)(
                "Editing template. Changes made here affect all posts and pages that use the template."
              ),
              {
                type: "snackbar",
                actions: [
                  {
                    label: (0, import_i18n78.__)("Go back"),
                    onClick: () => getEditorSettings2().onNavigateToPreviousEntityRecord()
                  }
                ]
              }
            );
          },
          children: (0, import_i18n78.__)("Edit template")
        }
      ) }),
      isCreateModalOpen && /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(
        CreateNewTemplateModal,
        {
          onClose: () => setIsCreateModalOpen(false)
        }
      )
    ] });
  }
  function ClassicThemeControl() {
    const [popoverAnchor, setPopoverAnchor] = (0, import_element57.useState)(null);
    const popoverProps = (0, import_element57.useMemo)(
      () => ({
        // Anchor the popover to the middle of the entire row so that it doesn't
        // move around when the label changes.
        anchor: popoverAnchor,
        className: "editor-post-template__dropdown",
        placement: "left-start",
        offset: 36,
        shift: true
      }),
      [popoverAnchor]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(post_panel_row_default, { label: (0, import_i18n78.__)("Template"), ref: setPopoverAnchor, children: /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(
      import_components47.Dropdown,
      {
        popoverProps,
        focusOnMount: true,
        renderToggle: ({ isOpen, onToggle }) => /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(
          PostTemplateToggle,
          {
            isOpen,
            onClick: onToggle
          }
        ),
        renderContent: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime124.jsx)(PostTemplateDropdownContent, { onClose })
      }
    ) });
  }
  var classic_theme_default = ClassicThemeControl;

  // packages/editor/build-module/components/plugin-document-setting-panel/index.js
  var import_jsx_runtime127 = __toESM(require_jsx_runtime());
  var import_components49 = __toESM(require_components());
  var import_plugins3 = __toESM(require_plugins());
  var import_data79 = __toESM(require_data());
  var import_warning = __toESM(require_warning());

  // packages/editor/build-module/components/preferences-modal/enable-plugin-document-setting-panel.js
  var import_jsx_runtime126 = __toESM(require_jsx_runtime());
  var import_components48 = __toESM(require_components());

  // packages/editor/build-module/components/preferences-modal/enable-panel.js
  var import_jsx_runtime125 = __toESM(require_jsx_runtime());
  var import_data78 = __toESM(require_data());
  var import_preferences11 = __toESM(require_preferences());
  var { PreferenceBaseOption } = unlock(import_preferences11.privateApis);
  function EnablePanelOption(props) {
    const { toggleEditorPanelEnabled: toggleEditorPanelEnabled2 } = (0, import_data78.useDispatch)(store);
    const { isChecked, isRemoved } = (0, import_data78.useSelect)(
      (select4) => {
        const { isEditorPanelEnabled: isEditorPanelEnabled2, isEditorPanelRemoved: isEditorPanelRemoved2 } = select4(store);
        return {
          isChecked: isEditorPanelEnabled2(props.panelName),
          isRemoved: isEditorPanelRemoved2(props.panelName)
        };
      },
      [props.panelName]
    );
    if (isRemoved) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime125.jsx)(
      PreferenceBaseOption,
      {
        isChecked,
        onChange: () => toggleEditorPanelEnabled2(props.panelName),
        ...props
      }
    );
  }

  // packages/editor/build-module/components/preferences-modal/enable-plugin-document-setting-panel.js
  var { Fill: Fill4, Slot: Slot4 } = (0, import_components48.createSlotFill)(
    "EnablePluginDocumentSettingPanelOption"
  );
  var EnablePluginDocumentSettingPanelOption = ({ label, panelName }) => /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(Fill4, { children: /* @__PURE__ */ (0, import_jsx_runtime126.jsx)(EnablePanelOption, { label, panelName }) });
  EnablePluginDocumentSettingPanelOption.Slot = Slot4;
  var enable_plugin_document_setting_panel_default = EnablePluginDocumentSettingPanelOption;

  // packages/editor/build-module/components/plugin-document-setting-panel/index.js
  var { Fill: Fill5, Slot: Slot5 } = (0, import_components49.createSlotFill)("PluginDocumentSettingPanel");
  var PluginDocumentSettingPanel = ({
    name,
    className,
    title,
    icon,
    children
  }) => {
    const { name: pluginName } = (0, import_plugins3.usePluginContext)();
    const panelName = `${pluginName}/${name}`;
    const { opened, isEnabled } = (0, import_data79.useSelect)(
      (select4) => {
        const { isEditorPanelOpened: isEditorPanelOpened2, isEditorPanelEnabled: isEditorPanelEnabled2 } = select4(store);
        return {
          opened: isEditorPanelOpened2(panelName),
          isEnabled: isEditorPanelEnabled2(panelName)
        };
      },
      [panelName]
    );
    const { toggleEditorPanelOpened: toggleEditorPanelOpened2 } = (0, import_data79.useDispatch)(store);
    if (void 0 === name) {
      (0, import_warning.default)("PluginDocumentSettingPanel requires a name property.");
    }
    return /* @__PURE__ */ (0, import_jsx_runtime127.jsxs)(import_jsx_runtime127.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(
        enable_plugin_document_setting_panel_default,
        {
          label: title,
          panelName
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(Fill5, { children: isEnabled && /* @__PURE__ */ (0, import_jsx_runtime127.jsx)(
        import_components49.PanelBody,
        {
          className,
          title,
          icon,
          opened,
          onToggle: () => toggleEditorPanelOpened2(panelName),
          children
        }
      ) })
    ] });
  };
  PluginDocumentSettingPanel.Slot = Slot5;
  var plugin_document_setting_panel_default = PluginDocumentSettingPanel;

  // packages/editor/build-module/components/block-settings-menu/plugin-block-settings-menu-item.js
  var import_jsx_runtime128 = __toESM(require_jsx_runtime());
  var import_block_editor31 = __toESM(require_block_editor());
  var import_components50 = __toESM(require_components());
  var import_compose16 = __toESM(require_compose());
  var isEverySelectedBlockAllowed = (selected, allowed) => selected.filter((id) => !allowed.includes(id)).length === 0;
  var shouldRenderItem = (selectedBlocks, allowedBlocks) => !Array.isArray(allowedBlocks) || isEverySelectedBlockAllowed(selectedBlocks, allowedBlocks);
  var PluginBlockSettingsMenuItem = ({
    allowedBlocks,
    icon,
    label,
    onClick,
    small,
    role
  }) => /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(import_block_editor31.BlockSettingsMenuControls, { children: ({ selectedBlocks, onClose }) => {
    if (!shouldRenderItem(selectedBlocks, allowedBlocks)) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime128.jsx)(
      import_components50.MenuItem,
      {
        onClick: (0, import_compose16.compose)(onClick, onClose),
        icon,
        label: small ? label : void 0,
        role,
        children: !small && label
      }
    );
  } });
  var plugin_block_settings_menu_item_default = PluginBlockSettingsMenuItem;

  // packages/editor/build-module/components/plugin-more-menu-item/index.js
  var import_jsx_runtime129 = __toESM(require_jsx_runtime());
  var import_components51 = __toESM(require_components());
  var import_plugins4 = __toESM(require_plugins());
  function PluginMoreMenuItem(props) {
    const context = (0, import_plugins4.usePluginContext)();
    return /* @__PURE__ */ (0, import_jsx_runtime129.jsx)(
      action_item_default,
      {
        name: "core/plugin-more-menu",
        as: props.as ?? import_components51.MenuItem,
        icon: props.icon || context.icon,
        ...props
      }
    );
  }

  // packages/editor/build-module/components/plugin-post-publish-panel/index.js
  var import_jsx_runtime130 = __toESM(require_jsx_runtime());
  var import_plugins5 = __toESM(require_plugins());
  var import_components52 = __toESM(require_components());
  var { Fill: Fill6, Slot: Slot6 } = (0, import_components52.createSlotFill)("PluginPostPublishPanel");
  var PluginPostPublishPanel = ({
    children,
    className,
    title,
    initialOpen = false,
    icon
  }) => {
    const { icon: pluginIcon } = (0, import_plugins5.usePluginContext)();
    return /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(Fill6, { children: /* @__PURE__ */ (0, import_jsx_runtime130.jsx)(
      import_components52.PanelBody,
      {
        className,
        initialOpen: initialOpen || !title,
        title,
        icon: icon ?? pluginIcon,
        children
      }
    ) });
  };
  PluginPostPublishPanel.Slot = Slot6;
  var plugin_post_publish_panel_default = PluginPostPublishPanel;

  // packages/editor/build-module/components/plugin-post-status-info/index.js
  var import_jsx_runtime131 = __toESM(require_jsx_runtime());
  var import_components53 = __toESM(require_components());
  var { Fill: Fill7, Slot: Slot7 } = (0, import_components53.createSlotFill)("PluginPostStatusInfo");
  var PluginPostStatusInfo = ({ children, className }) => /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(Fill7, { children: /* @__PURE__ */ (0, import_jsx_runtime131.jsx)(import_components53.PanelRow, { className, children }) });
  PluginPostStatusInfo.Slot = Slot7;
  var plugin_post_status_info_default = PluginPostStatusInfo;

  // packages/editor/build-module/components/plugin-pre-publish-panel/index.js
  var import_jsx_runtime132 = __toESM(require_jsx_runtime());
  var import_components54 = __toESM(require_components());
  var import_plugins6 = __toESM(require_plugins());
  var { Fill: Fill8, Slot: Slot8 } = (0, import_components54.createSlotFill)("PluginPrePublishPanel");
  var PluginPrePublishPanel = ({
    children,
    className,
    title,
    initialOpen = false,
    icon
  }) => {
    const { icon: pluginIcon } = (0, import_plugins6.usePluginContext)();
    return /* @__PURE__ */ (0, import_jsx_runtime132.jsx)(Fill8, { children: /* @__PURE__ */ (0, import_jsx_runtime132.jsx)(
      import_components54.PanelBody,
      {
        className,
        initialOpen: initialOpen || !title,
        title,
        icon: icon ?? pluginIcon,
        children
      }
    ) });
  };
  PluginPrePublishPanel.Slot = Slot8;
  var plugin_pre_publish_panel_default = PluginPrePublishPanel;

  // packages/editor/build-module/components/plugin-preview-menu-item/index.js
  var import_jsx_runtime133 = __toESM(require_jsx_runtime());
  var import_components55 = __toESM(require_components());
  var import_plugins7 = __toESM(require_plugins());
  function PluginPreviewMenuItem(props) {
    const context = (0, import_plugins7.usePluginContext)();
    return /* @__PURE__ */ (0, import_jsx_runtime133.jsx)(
      action_item_default,
      {
        name: "core/plugin-preview-menu",
        as: props.as ?? import_components55.MenuItem,
        icon: props.icon || context.icon,
        ...props
      }
    );
  }

  // packages/editor/build-module/components/plugin-sidebar/index.js
  var import_jsx_runtime134 = __toESM(require_jsx_runtime());
  function PluginSidebar({ className, ...props }) {
    return /* @__PURE__ */ (0, import_jsx_runtime134.jsx)(
      complementary_area_default,
      {
        panelClassName: className,
        className: "editor-sidebar",
        scope: "core",
        ...props
      }
    );
  }

  // packages/editor/build-module/components/plugin-sidebar-more-menu-item/index.js
  var import_jsx_runtime135 = __toESM(require_jsx_runtime());
  function PluginSidebarMoreMenuItem(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime135.jsx)(
      ComplementaryAreaMoreMenuItem,
      {
        __unstableExplicitMenuItem: true,
        scope: "core",
        ...props
      }
    );
  }

  // packages/editor/build-module/components/post-template/panel.js
  var import_jsx_runtime140 = __toESM(require_jsx_runtime());
  var import_data84 = __toESM(require_data());
  var import_core_data54 = __toESM(require_core_data());

  // packages/editor/build-module/components/post-template/block-theme.js
  var import_jsx_runtime139 = __toESM(require_jsx_runtime());
  var import_data83 = __toESM(require_data());
  var import_html_entities15 = __toESM(require_html_entities());
  var import_components59 = __toESM(require_components());
  var import_element60 = __toESM(require_element());
  var import_i18n82 = __toESM(require_i18n());
  var import_core_data53 = __toESM(require_core_data());
  var import_notices21 = __toESM(require_notices());
  var import_preferences12 = __toESM(require_preferences());

  // packages/editor/build-module/components/post-template/swap-template-button.js
  var import_jsx_runtime136 = __toESM(require_jsx_runtime());
  var import_element58 = __toESM(require_element());
  var import_html_entities14 = __toESM(require_html_entities());
  var import_block_editor32 = __toESM(require_block_editor());
  var import_components56 = __toESM(require_components());
  var import_i18n79 = __toESM(require_i18n());
  var import_data80 = __toESM(require_data());
  var import_core_data50 = __toESM(require_core_data());
  var import_blocks15 = __toESM(require_blocks());

  // packages/editor/build-module/utils/search-templates.js
  var import_remove_accents3 = __toESM(require_remove_accents());
  function normalizeSearchInput(input = "") {
    input = (0, import_remove_accents3.default)(input);
    input = input.trim().toLowerCase();
    return input;
  }
  function getTemplateSearchRank(template2, searchValue) {
    const normalizedSearchValue = normalizeSearchInput(searchValue);
    const normalizedTitle = normalizeSearchInput(template2.title);
    let rank = 0;
    if (normalizedSearchValue === normalizedTitle) {
      rank += 30;
    } else if (normalizedTitle.startsWith(normalizedSearchValue)) {
      rank += 20;
    } else {
      const searchTerms = normalizedSearchValue.split(" ");
      const hasMatchedTerms = searchTerms.every(
        (searchTerm) => normalizedTitle.includes(searchTerm)
      );
      if (hasMatchedTerms) {
        rank += 10;
      }
    }
    return rank;
  }
  function searchTemplates(templates = [], searchValue = "") {
    if (!searchValue) {
      return templates;
    }
    const rankedTemplates = templates.map((template2) => {
      return [template2, getTemplateSearchRank(template2, searchValue)];
    }).filter(([, rank]) => rank > 0);
    rankedTemplates.sort(([, rank1], [, rank2]) => rank2 - rank1);
    return rankedTemplates.map(([template2]) => template2);
  }

  // packages/editor/build-module/components/post-template/swap-template-button.js
  function SwapTemplateButton({ onClick }) {
    const [showModal, setShowModal] = (0, import_element58.useState)(false);
    const { postType: postType2, postId: postId2 } = useEditedPostContext();
    const availableTemplates = useAvailableTemplates(postType2);
    const { editEntityRecord } = (0, import_data80.useDispatch)(import_core_data50.store);
    const onTemplateSelect = async (template2) => {
      editEntityRecord(
        "postType",
        postType2,
        postId2,
        { template: template2.name },
        { undoIgnore: true }
      );
      setShowModal(false);
      onClick();
    };
    return /* @__PURE__ */ (0, import_jsx_runtime136.jsxs)(import_jsx_runtime136.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(
        import_components56.MenuItem,
        {
          disabled: !availableTemplates?.length,
          accessibleWhenDisabled: true,
          onClick: () => setShowModal(true),
          children: (0, import_i18n79.__)("Change template")
        }
      ),
      showModal && /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(
        import_components56.Modal,
        {
          title: (0, import_i18n79.__)("Choose a template"),
          onRequestClose: () => setShowModal(false),
          overlayClassName: "editor-post-template__swap-template-modal",
          isFullScreen: true,
          children: /* @__PURE__ */ (0, import_jsx_runtime136.jsx)("div", { className: "editor-post-template__swap-template-modal-content", children: /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(
            TemplatesList,
            {
              postType: postType2,
              onSelect: onTemplateSelect
            }
          ) })
        }
      )
    ] });
  }
  function TemplatesList({ postType: postType2, onSelect }) {
    const [searchValue, setSearchValue] = (0, import_element58.useState)("");
    const availableTemplates = useAvailableTemplates(postType2);
    const templatesAsPatterns = (0, import_element58.useMemo)(
      () => availableTemplates.map((template2) => ({
        name: template2.slug,
        blocks: (0, import_blocks15.parse)(template2.content.raw),
        title: (0, import_html_entities14.decodeEntities)(template2.title.rendered),
        id: template2.id
      })),
      [availableTemplates]
    );
    const filteredBlockTemplates = (0, import_element58.useMemo)(() => {
      return searchTemplates(templatesAsPatterns, searchValue);
    }, [templatesAsPatterns, searchValue]);
    return /* @__PURE__ */ (0, import_jsx_runtime136.jsxs)(import_jsx_runtime136.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(
        import_components56.SearchControl,
        {
          __nextHasNoMarginBottom: true,
          onChange: setSearchValue,
          value: searchValue,
          label: (0, import_i18n79.__)("Search"),
          placeholder: (0, import_i18n79.__)("Search"),
          className: "editor-post-template__swap-template-search"
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime136.jsx)(
        import_block_editor32.__experimentalBlockPatternsList,
        {
          label: (0, import_i18n79.__)("Templates"),
          blockPatterns: filteredBlockTemplates,
          onClickPattern: onSelect
        }
      )
    ] });
  }

  // packages/editor/build-module/components/post-template/reset-default-template.js
  var import_jsx_runtime137 = __toESM(require_jsx_runtime());
  var import_components57 = __toESM(require_components());
  var import_i18n80 = __toESM(require_i18n());
  var import_data81 = __toESM(require_data());
  var import_core_data51 = __toESM(require_core_data());
  function ResetDefaultTemplate({ onClick }) {
    const currentTemplateSlug = useCurrentTemplateSlug();
    const allowSwitchingTemplate = useAllowSwitchingTemplates();
    const { postType: postType2, postId: postId2 } = useEditedPostContext();
    const { editEntityRecord } = (0, import_data81.useDispatch)(import_core_data51.store);
    if (!currentTemplateSlug || !allowSwitchingTemplate) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime137.jsx)(
      import_components57.MenuItem,
      {
        onClick: () => {
          editEntityRecord(
            "postType",
            postType2,
            postId2,
            { template: "" },
            { undoIgnore: true }
          );
          onClick();
        },
        children: (0, import_i18n80.__)("Use default template")
      }
    );
  }

  // packages/editor/build-module/components/post-template/create-new-template.js
  var import_jsx_runtime138 = __toESM(require_jsx_runtime());
  var import_components58 = __toESM(require_components());
  var import_i18n81 = __toESM(require_i18n());
  var import_data82 = __toESM(require_data());
  var import_core_data52 = __toESM(require_core_data());
  var import_element59 = __toESM(require_element());
  function CreateNewTemplate() {
    const { canCreateTemplates } = (0, import_data82.useSelect)((select4) => {
      const { canUser } = select4(import_core_data52.store);
      return {
        canCreateTemplates: canUser("create", {
          kind: "postType",
          name: "wp_template"
        })
      };
    }, []);
    const [isCreateModalOpen, setIsCreateModalOpen] = (0, import_element59.useState)(false);
    const allowSwitchingTemplate = useAllowSwitchingTemplates();
    if (!canCreateTemplates || !allowSwitchingTemplate) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime138.jsxs)(import_jsx_runtime138.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(
        import_components58.MenuItem,
        {
          onClick: () => {
            setIsCreateModalOpen(true);
          },
          children: (0, import_i18n81.__)("Create new template")
        }
      ),
      isCreateModalOpen && /* @__PURE__ */ (0, import_jsx_runtime138.jsx)(
        CreateNewTemplateModal,
        {
          onClose: () => {
            setIsCreateModalOpen(false);
          }
        }
      )
    ] });
  }

  // packages/editor/build-module/components/post-template/block-theme.js
  function BlockThemeControl({ id }) {
    const {
      isTemplateHidden,
      onNavigateToEntityRecord,
      getEditorSettings: getEditorSettings2,
      hasGoBack,
      hasSpecificTemplate
    } = (0, import_data83.useSelect)((select4) => {
      const {
        getRenderingMode: getRenderingMode2,
        getEditorSettings: _getEditorSettings,
        getCurrentPost: getCurrentPost2
      } = unlock(select4(store));
      const editorSettings2 = _getEditorSettings();
      const currentPost = getCurrentPost2();
      return {
        isTemplateHidden: getRenderingMode2() === "post-only",
        onNavigateToEntityRecord: editorSettings2.onNavigateToEntityRecord,
        getEditorSettings: _getEditorSettings,
        hasGoBack: editorSettings2.hasOwnProperty(
          "onNavigateToPreviousEntityRecord"
        ),
        hasSpecificTemplate: !!currentPost.template
      };
    }, []);
    const { get: getPreference } = (0, import_data83.useSelect)(import_preferences12.store);
    const { editedRecord: template2, hasResolved } = (0, import_core_data53.useEntityRecord)(
      "postType",
      "wp_template",
      id
    );
    const { getEntityRecord } = (0, import_data83.useSelect)(import_core_data53.store);
    const { editEntityRecord } = (0, import_data83.useDispatch)(import_core_data53.store);
    const { createSuccessNotice } = (0, import_data83.useDispatch)(import_notices21.store);
    const { setRenderingMode: setRenderingMode2, setDefaultRenderingMode: setDefaultRenderingMode2 } = unlock(
      (0, import_data83.useDispatch)(store)
    );
    const canCreateTemplate = (0, import_data83.useSelect)(
      (select4) => !!select4(import_core_data53.store).canUser("create", {
        kind: "postType",
        name: "wp_template"
      }),
      []
    );
    const [popoverAnchor, setPopoverAnchor] = (0, import_element60.useState)(null);
    const popoverProps = (0, import_element60.useMemo)(
      () => ({
        // Anchor the popover to the middle of the entire row so that it doesn't
        // move around when the label changes.
        anchor: popoverAnchor,
        className: "editor-post-template__dropdown",
        placement: "left-start",
        offset: 36,
        shift: true
      }),
      [popoverAnchor]
    );
    if (!hasResolved) {
      return null;
    }
    const notificationAction = hasGoBack ? [
      {
        label: (0, import_i18n82.__)("Go back"),
        onClick: () => getEditorSettings2().onNavigateToPreviousEntityRecord()
      }
    ] : void 0;
    const mayShowTemplateEditNotice = () => {
      if (!getPreference("core/edit-site", "welcomeGuideTemplate")) {
        createSuccessNotice(
          (0, import_i18n82.__)(
            "Editing template. Changes made here affect all posts and pages that use the template."
          ),
          { type: "snackbar", actions: notificationAction }
        );
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(post_panel_row_default, { label: (0, import_i18n82.__)("Template"), ref: setPopoverAnchor, children: /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(
      import_components59.DropdownMenu,
      {
        popoverProps,
        focusOnMount: true,
        toggleProps: {
          size: "compact",
          variant: "tertiary",
          tooltipPosition: "middle left"
        },
        label: (0, import_i18n82.__)("Template options"),
        text: (0, import_html_entities15.decodeEntities)(template2.title),
        icon: null,
        children: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime139.jsxs)(import_jsx_runtime139.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime139.jsxs)(import_components59.MenuGroup, { children: [
            canCreateTemplate && /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(
              import_components59.MenuItem,
              {
                onClick: async () => {
                  onNavigateToEntityRecord({
                    postId: template2.id,
                    postType: "wp_template"
                  });
                  if (!hasSpecificTemplate) {
                    const activeTemplates = await getEntityRecord(
                      "root",
                      "site"
                    ).active_templates;
                    if (activeTemplates[template2.slug] !== template2.id) {
                      editEntityRecord(
                        "root",
                        "site",
                        void 0,
                        {
                          active_templates: {
                            ...activeTemplates,
                            [template2.slug]: template2.id
                          }
                        }
                      );
                    }
                  }
                  onClose();
                  mayShowTemplateEditNotice();
                },
                children: (0, import_i18n82.__)("Edit template")
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(SwapTemplateButton, { onClick: onClose }),
            /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(ResetDefaultTemplate, { onClick: onClose }),
            canCreateTemplate && /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(CreateNewTemplate, {})
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(import_components59.MenuGroup, { children: /* @__PURE__ */ (0, import_jsx_runtime139.jsx)(
            import_components59.MenuItem,
            {
              icon: !isTemplateHidden ? check_default : void 0,
              isSelected: !isTemplateHidden,
              role: "menuitemcheckbox",
              onClick: () => {
                const newRenderingMode = isTemplateHidden ? "template-locked" : "post-only";
                setRenderingMode2(newRenderingMode);
                setDefaultRenderingMode2(newRenderingMode);
              },
              children: (0, import_i18n82.__)("Show template")
            }
          ) })
        ] })
      }
    ) });
  }

  // packages/editor/build-module/components/post-template/panel.js
  function PostTemplatePanel() {
    const { templateId: templateId2, isBlockTheme } = (0, import_data84.useSelect)((select4) => {
      const { getCurrentTemplateId: getCurrentTemplateId2, getEditorSettings: getEditorSettings2 } = select4(store);
      return {
        templateId: getCurrentTemplateId2(),
        isBlockTheme: getEditorSettings2().__unstableIsBlockBasedTheme
      };
    }, []);
    const isVisible = (0, import_data84.useSelect)((select4) => {
      const postTypeSlug = select4(store).getCurrentPostType();
      const postType2 = select4(import_core_data54.store).getPostType(postTypeSlug);
      if (!postType2?.viewable) {
        return false;
      }
      const settings = select4(store).getEditorSettings();
      const hasTemplates = !!settings.availableTemplates && Object.keys(settings.availableTemplates).length > 0;
      if (hasTemplates) {
        return true;
      }
      if (!settings.supportsTemplateMode) {
        return false;
      }
      const canCreateTemplates = select4(import_core_data54.store).canUser("create", {
        kind: "postType",
        name: "wp_template"
      }) ?? false;
      return canCreateTemplates;
    }, []);
    const canViewTemplates = (0, import_data84.useSelect)((select4) => {
      return select4(import_core_data54.store).canUser("read", {
        kind: "postType",
        name: "wp_template"
      }) ?? false;
    }, []);
    if ((!isBlockTheme || !canViewTemplates) && isVisible) {
      return /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(classic_theme_default, {});
    }
    if (isBlockTheme && !!templateId2) {
      return /* @__PURE__ */ (0, import_jsx_runtime140.jsx)(BlockThemeControl, { id: templateId2 });
    }
    return null;
  }

  // packages/editor/build-module/components/post-author/index.js
  var import_jsx_runtime143 = __toESM(require_jsx_runtime());
  var import_data88 = __toESM(require_data());
  var import_core_data56 = __toESM(require_core_data());

  // packages/editor/build-module/components/post-author/combobox.js
  var import_jsx_runtime141 = __toESM(require_jsx_runtime());
  var import_compose17 = __toESM(require_compose());
  var import_element62 = __toESM(require_element());
  var import_data86 = __toESM(require_data());
  var import_i18n84 = __toESM(require_i18n());
  var import_components60 = __toESM(require_components());

  // packages/editor/build-module/components/post-author/hook.js
  var import_i18n83 = __toESM(require_i18n());
  var import_element61 = __toESM(require_element());
  var import_data85 = __toESM(require_data());
  var import_html_entities16 = __toESM(require_html_entities());
  var import_core_data55 = __toESM(require_core_data());

  // packages/editor/build-module/components/post-author/constants.js
  var BASE_QUERY = {
    _fields: "id,name",
    context: "view"
    // Allows non-admins to perform requests.
  };
  var AUTHORS_QUERY = {
    who: "authors",
    per_page: 100,
    ...BASE_QUERY
  };

  // packages/editor/build-module/components/post-author/hook.js
  function useAuthorsQuery(search) {
    const { authorId, authors, postAuthor, isLoading } = (0, import_data85.useSelect)(
      (select4) => {
        const { getUser, getUsers, isResolving } = select4(import_core_data55.store);
        const { getEditedPostAttribute: getEditedPostAttribute2 } = select4(store);
        const _authorId = getEditedPostAttribute2("author");
        const query = { ...AUTHORS_QUERY };
        if (search) {
          query.search = search;
          query.search_columns = ["name"];
        }
        return {
          authorId: _authorId,
          authors: getUsers(query),
          postAuthor: getUser(_authorId, BASE_QUERY),
          isLoading: isResolving("getUsers", [query])
        };
      },
      [search]
    );
    const authorOptions = (0, import_element61.useMemo)(() => {
      const fetchedAuthors = (authors ?? []).map((author) => {
        return {
          value: author.id,
          label: (0, import_html_entities16.decodeEntities)(author.name)
        };
      });
      const foundAuthor = fetchedAuthors.findIndex(
        ({ value }) => postAuthor?.id === value
      );
      let currentAuthor = [];
      if (foundAuthor < 0 && postAuthor) {
        currentAuthor = [
          {
            value: postAuthor.id,
            label: (0, import_html_entities16.decodeEntities)(postAuthor.name)
          }
        ];
      } else if (foundAuthor < 0 && !postAuthor) {
        currentAuthor = [
          {
            value: 0,
            label: (0, import_i18n83.__)("(No author)")
          }
        ];
      }
      return [...currentAuthor, ...fetchedAuthors];
    }, [authors, postAuthor]);
    return { authorId, authorOptions, postAuthor, isLoading };
  }

  // packages/editor/build-module/components/post-author/combobox.js
  function PostAuthorCombobox() {
    const [fieldValue, setFieldValue] = (0, import_element62.useState)();
    const { editPost: editPost2 } = (0, import_data86.useDispatch)(store);
    const { authorId, authorOptions, isLoading } = useAuthorsQuery(fieldValue);
    const handleSelect = (postAuthorId) => {
      if (!postAuthorId) {
        return;
      }
      editPost2({ author: postAuthorId });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime141.jsx)(
      import_components60.ComboboxControl,
      {
        __nextHasNoMarginBottom: true,
        __next40pxDefaultSize: true,
        label: (0, import_i18n84.__)("Author"),
        options: authorOptions,
        value: authorId,
        onFilterValueChange: (0, import_compose17.debounce)(setFieldValue, 300),
        onChange: handleSelect,
        allowReset: false,
        hideLabelFromVision: true,
        isLoading
      }
    );
  }

  // packages/editor/build-module/components/post-author/select.js
  var import_jsx_runtime142 = __toESM(require_jsx_runtime());
  var import_i18n85 = __toESM(require_i18n());
  var import_data87 = __toESM(require_data());
  var import_components61 = __toESM(require_components());
  function PostAuthorSelect() {
    const { editPost: editPost2 } = (0, import_data87.useDispatch)(store);
    const { authorId, authorOptions } = useAuthorsQuery();
    const setAuthorId = (value) => {
      const author = Number(value);
      editPost2({ author });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime142.jsx)(
      import_components61.SelectControl,
      {
        __next40pxDefaultSize: true,
        __nextHasNoMarginBottom: true,
        className: "post-author-selector",
        label: (0, import_i18n85.__)("Author"),
        options: authorOptions,
        onChange: setAuthorId,
        value: authorId,
        hideLabelFromVision: true
      }
    );
  }

  // packages/editor/build-module/components/post-author/index.js
  var minimumUsersForCombobox = 25;
  function PostAuthor() {
    const showCombobox = (0, import_data88.useSelect)((select4) => {
      const authors = select4(import_core_data56.store).getUsers(AUTHORS_QUERY);
      return authors?.length >= minimumUsersForCombobox;
    }, []);
    if (showCombobox) {
      return /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(PostAuthorCombobox, {});
    }
    return /* @__PURE__ */ (0, import_jsx_runtime143.jsx)(PostAuthorSelect, {});
  }
  var post_author_default = PostAuthor;

  // packages/editor/build-module/components/post-author/check.js
  var import_jsx_runtime144 = __toESM(require_jsx_runtime());
  var import_data89 = __toESM(require_data());
  function PostAuthorCheck({ children }) {
    const { hasAssignAuthorAction } = (0, import_data89.useSelect)((select4) => {
      const post = select4(store).getCurrentPost();
      const canAssignAuthor = post?._links?.["wp:action-assign-author"] ? true : false;
      return {
        hasAssignAuthorAction: canAssignAuthor
      };
    }, []);
    if (!hasAssignAuthorAction) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime144.jsx)(post_type_support_check_default, { supportKeys: "author", children });
  }

  // packages/editor/build-module/components/post-author/panel.js
  var import_jsx_runtime145 = __toESM(require_jsx_runtime());
  var import_i18n86 = __toESM(require_i18n());
  var import_components62 = __toESM(require_components());
  var import_element63 = __toESM(require_element());
  var import_html_entities17 = __toESM(require_html_entities());
  var import_block_editor33 = __toESM(require_block_editor());
  var import_data90 = __toESM(require_data());
  var import_core_data57 = __toESM(require_core_data());
  function PostAuthorToggle({ isOpen, onClick }) {
    const { postAuthor } = (0, import_data90.useSelect)((select4) => {
      const id = select4(store).getEditedPostAttribute("author");
      return {
        postAuthor: select4(import_core_data57.store).getUser(id, BASE_QUERY)
      };
    }, []);
    const authorName = (0, import_html_entities17.decodeEntities)(postAuthor?.name) || (0, import_i18n86.__)("(No author)");
    return /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(
      import_components62.Button,
      {
        size: "compact",
        className: "editor-post-author__panel-toggle",
        variant: "tertiary",
        "aria-expanded": isOpen,
        "aria-label": (
          // translators: %s: Author name.
          (0, import_i18n86.sprintf)((0, import_i18n86.__)("Change author: %s"), authorName)
        ),
        onClick,
        children: authorName
      }
    );
  }
  function PostAuthor2() {
    const [popoverAnchor, setPopoverAnchor] = (0, import_element63.useState)(null);
    const popoverProps = (0, import_element63.useMemo)(
      () => ({
        // Anchor the popover to the middle of the entire row so that it doesn't
        // move around when the label changes.
        anchor: popoverAnchor,
        placement: "left-start",
        offset: 36,
        shift: true
      }),
      [popoverAnchor]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(PostAuthorCheck, { children: /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(post_panel_row_default, { label: (0, import_i18n86.__)("Author"), ref: setPopoverAnchor, children: /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(
      import_components62.Dropdown,
      {
        popoverProps,
        contentClassName: "editor-post-author__panel-dialog",
        focusOnMount: true,
        renderToggle: ({ isOpen, onToggle }) => /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(
          PostAuthorToggle,
          {
            isOpen,
            onClick: onToggle
          }
        ),
        renderContent: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime145.jsxs)("div", { className: "editor-post-author", children: [
          /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(
            import_block_editor33.__experimentalInspectorPopoverHeader,
            {
              title: (0, import_i18n86.__)("Author"),
              onClose
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime145.jsx)(post_author_default, { onClose })
        ] })
      }
    ) }) });
  }
  var panel_default = PostAuthor2;

  // packages/editor/build-module/components/post-comments/index.js
  var import_jsx_runtime146 = __toESM(require_jsx_runtime());
  var import_i18n87 = __toESM(require_i18n());
  var import_components63 = __toESM(require_components());
  var import_data91 = __toESM(require_data());
  var COMMENT_OPTIONS = [
    {
      label: (0, import_i18n87._x)("Open", 'Adjective: e.g. "Comments are open"'),
      value: "open",
      description: (0, import_i18n87.__)("Visitors can add new comments and replies.")
    },
    {
      label: (0, import_i18n87.__)("Closed"),
      value: "closed",
      description: [
        (0, import_i18n87.__)("Visitors cannot add new comments or replies."),
        (0, import_i18n87.__)("Existing comments remain visible.")
      ].join(" ")
    }
  ];
  function PostComments() {
    const commentStatus = (0, import_data91.useSelect)(
      (select4) => select4(store).getEditedPostAttribute("comment_status") ?? "open",
      []
    );
    const { editPost: editPost2 } = (0, import_data91.useDispatch)(store);
    const handleStatus = (newCommentStatus) => editPost2({
      comment_status: newCommentStatus
    });
    return /* @__PURE__ */ (0, import_jsx_runtime146.jsx)("form", { children: /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(import_components63.__experimentalVStack, { spacing: 4, children: /* @__PURE__ */ (0, import_jsx_runtime146.jsx)(
      import_components63.RadioControl,
      {
        className: "editor-change-status__options",
        hideLabelFromVision: true,
        label: (0, import_i18n87.__)("Comment status"),
        options: COMMENT_OPTIONS,
        onChange: handleStatus,
        selected: commentStatus
      }
    ) }) });
  }
  var post_comments_default = PostComments;

  // packages/editor/build-module/components/post-discussion/panel.js
  var import_jsx_runtime148 = __toESM(require_jsx_runtime());
  var import_i18n89 = __toESM(require_i18n());
  var import_components65 = __toESM(require_components());
  var import_data93 = __toESM(require_data());
  var import_element64 = __toESM(require_element());
  var import_block_editor34 = __toESM(require_block_editor());
  var import_core_data58 = __toESM(require_core_data());

  // packages/editor/build-module/components/post-pingbacks/index.js
  var import_jsx_runtime147 = __toESM(require_jsx_runtime());
  var import_i18n88 = __toESM(require_i18n());
  var import_components64 = __toESM(require_components());
  var import_data92 = __toESM(require_data());
  function PostPingbacks() {
    const pingStatus = (0, import_data92.useSelect)(
      (select4) => select4(store).getEditedPostAttribute("ping_status") ?? "open",
      []
    );
    const { editPost: editPost2 } = (0, import_data92.useDispatch)(store);
    const onTogglePingback = () => editPost2({
      ping_status: pingStatus === "open" ? "closed" : "open"
    });
    return /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(
      import_components64.CheckboxControl,
      {
        __nextHasNoMarginBottom: true,
        label: (0, import_i18n88.__)("Enable pingbacks & trackbacks"),
        checked: pingStatus === "open",
        onChange: onTogglePingback,
        help: /* @__PURE__ */ (0, import_jsx_runtime147.jsx)(
          import_components64.ExternalLink,
          {
            href: (0, import_i18n88.__)(
              "https://wordpress.org/documentation/article/trackbacks-and-pingbacks/"
            ),
            children: (0, import_i18n88.__)("Learn more about pingbacks & trackbacks")
          }
        )
      }
    );
  }
  var post_pingbacks_default = PostPingbacks;

  // packages/editor/build-module/components/post-discussion/panel.js
  var PANEL_NAME2 = "discussion-panel";
  function ModalContents({ onClose }) {
    return /* @__PURE__ */ (0, import_jsx_runtime148.jsxs)("div", { className: "editor-post-discussion", children: [
      /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(
        import_block_editor34.__experimentalInspectorPopoverHeader,
        {
          title: (0, import_i18n89.__)("Discussion"),
          onClose
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime148.jsxs)(import_components65.__experimentalVStack, { spacing: 4, children: [
        /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(post_type_support_check_default, { supportKeys: "comments", children: /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(post_comments_default, {}) }),
        /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(post_type_support_check_default, { supportKeys: "trackbacks", children: /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(post_pingbacks_default, {}) })
      ] })
    ] });
  }
  function PostDiscussionToggle({ isOpen, onClick }) {
    const {
      commentStatus,
      pingStatus,
      commentsSupported,
      trackbacksSupported
    } = (0, import_data93.useSelect)((select4) => {
      const { getEditedPostAttribute: getEditedPostAttribute2 } = select4(store);
      const { getPostType } = select4(import_core_data58.store);
      const postType2 = getPostType(getEditedPostAttribute2("type"));
      return {
        commentStatus: getEditedPostAttribute2("comment_status") ?? "open",
        pingStatus: getEditedPostAttribute2("ping_status") ?? "open",
        commentsSupported: !!postType2.supports.comments,
        trackbacksSupported: !!postType2.supports.trackbacks
      };
    }, []);
    let label;
    if (commentStatus === "open") {
      if (pingStatus === "open") {
        label = (0, import_i18n89._x)("Open", 'Adjective: e.g. "Comments are open"');
      } else {
        label = trackbacksSupported ? (0, import_i18n89.__)("Comments only") : (0, import_i18n89._x)("Open", 'Adjective: e.g. "Comments are open"');
      }
    } else if (pingStatus === "open") {
      label = commentsSupported ? (0, import_i18n89.__)("Pings only") : (0, import_i18n89.__)("Pings enabled");
    } else {
      label = (0, import_i18n89.__)("Closed");
    }
    return /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(
      import_components65.Button,
      {
        size: "compact",
        className: "editor-post-discussion__panel-toggle",
        variant: "tertiary",
        "aria-label": (0, import_i18n89.__)("Change discussion options"),
        "aria-expanded": isOpen,
        onClick,
        children: label
      }
    );
  }
  function PostDiscussionPanel() {
    const { isEnabled } = (0, import_data93.useSelect)((select4) => {
      const { isEditorPanelEnabled: isEditorPanelEnabled2 } = select4(store);
      return {
        isEnabled: isEditorPanelEnabled2(PANEL_NAME2)
      };
    }, []);
    const [popoverAnchor, setPopoverAnchor] = (0, import_element64.useState)(null);
    const popoverProps = (0, import_element64.useMemo)(
      () => ({
        // Anchor the popover to the middle of the entire row so that it doesn't
        // move around when the label changes.
        anchor: popoverAnchor,
        placement: "left-start",
        offset: 36,
        shift: true
      }),
      [popoverAnchor]
    );
    if (!isEnabled) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(post_type_support_check_default, { supportKeys: ["comments", "trackbacks"], children: /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(post_panel_row_default, { label: (0, import_i18n89.__)("Discussion"), ref: setPopoverAnchor, children: /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(
      import_components65.Dropdown,
      {
        popoverProps,
        className: "editor-post-discussion__panel-dropdown",
        contentClassName: "editor-post-discussion__panel-dialog",
        focusOnMount: true,
        renderToggle: ({ isOpen, onToggle }) => /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(
          PostDiscussionToggle,
          {
            isOpen,
            onClick: onToggle
          }
        ),
        renderContent: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime148.jsx)(ModalContents, { onClose })
      }
    ) }) });
  }

  // packages/editor/build-module/components/post-excerpt/index.js
  var import_jsx_runtime149 = __toESM(require_jsx_runtime());
  var import_i18n90 = __toESM(require_i18n());
  var import_components66 = __toESM(require_components());
  var import_data94 = __toESM(require_data());
  var import_element65 = __toESM(require_element());
  var import_html_entities18 = __toESM(require_html_entities());
  function PostExcerpt({
    hideLabelFromVision = false,
    updateOnBlur = false
  }) {
    const { excerpt, shouldUseDescriptionLabel, usedAttribute } = (0, import_data94.useSelect)(
      (select4) => {
        const { getCurrentPostType: getCurrentPostType2, getEditedPostAttribute: getEditedPostAttribute2 } = select4(store);
        const postType2 = getCurrentPostType2();
        const _usedAttribute = [
          "wp_template",
          "wp_template_part"
        ].includes(postType2) ? "description" : "excerpt";
        return {
          excerpt: getEditedPostAttribute2(_usedAttribute),
          // There are special cases where we want to label the excerpt as a description.
          shouldUseDescriptionLabel: [
            "wp_template",
            "wp_template_part",
            "wp_block"
          ].includes(postType2),
          usedAttribute: _usedAttribute
        };
      },
      []
    );
    const { editPost: editPost2 } = (0, import_data94.useDispatch)(store);
    const [localExcerpt, setLocalExcerpt] = (0, import_element65.useState)(
      (0, import_html_entities18.decodeEntities)(excerpt)
    );
    const updatePost2 = (value) => {
      editPost2({ [usedAttribute]: value });
    };
    const label = shouldUseDescriptionLabel ? (0, import_i18n90.__)("Write a description (optional)") : (0, import_i18n90.__)("Write an excerpt (optional)");
    return /* @__PURE__ */ (0, import_jsx_runtime149.jsx)("div", { className: "editor-post-excerpt", children: /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
      import_components66.TextareaControl,
      {
        __nextHasNoMarginBottom: true,
        label,
        hideLabelFromVision,
        className: "editor-post-excerpt__textarea",
        onChange: updateOnBlur ? setLocalExcerpt : updatePost2,
        onBlur: updateOnBlur ? () => updatePost2(localExcerpt) : void 0,
        value: updateOnBlur ? localExcerpt : excerpt,
        help: !shouldUseDescriptionLabel ? /* @__PURE__ */ (0, import_jsx_runtime149.jsx)(
          import_components66.ExternalLink,
          {
            href: (0, import_i18n90.__)(
              "https://wordpress.org/documentation/article/page-post-settings-sidebar/#excerpt"
            ),
            children: (0, import_i18n90.__)("Learn more about manual excerpts")
          }
        ) : (0, import_i18n90.__)("Write a description")
      }
    ) });
  }

  // packages/editor/build-module/components/post-excerpt/check.js
  var import_jsx_runtime150 = __toESM(require_jsx_runtime());
  function PostExcerptCheck({ children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime150.jsx)(post_type_support_check_default, { supportKeys: "excerpt", children });
  }
  var check_default3 = PostExcerptCheck;

  // packages/editor/build-module/components/post-excerpt/panel.js
  var import_jsx_runtime152 = __toESM(require_jsx_runtime());
  var import_i18n91 = __toESM(require_i18n());
  var import_components68 = __toESM(require_components());
  var import_data95 = __toESM(require_data());
  var import_element66 = __toESM(require_element());
  var import_block_editor35 = __toESM(require_block_editor());
  var import_core_data59 = __toESM(require_core_data());
  var import_html_entities19 = __toESM(require_html_entities());

  // packages/editor/build-module/components/post-excerpt/plugin.js
  var import_jsx_runtime151 = __toESM(require_jsx_runtime());
  var import_components67 = __toESM(require_components());
  var { Fill: Fill9, Slot: Slot9 } = (0, import_components67.createSlotFill)("PluginPostExcerpt");
  var PluginPostExcerpt = ({ children, className }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(Fill9, { children: /* @__PURE__ */ (0, import_jsx_runtime151.jsx)(import_components67.PanelRow, { className, children }) });
  };
  PluginPostExcerpt.Slot = Slot9;
  var plugin_default = PluginPostExcerpt;

  // packages/editor/build-module/components/post-excerpt/panel.js
  var PANEL_NAME3 = "post-excerpt";
  function ExcerptPanel() {
    const { isOpened, isEnabled, postType: postType2 } = (0, import_data95.useSelect)((select4) => {
      const {
        isEditorPanelOpened: isEditorPanelOpened2,
        isEditorPanelEnabled: isEditorPanelEnabled2,
        getCurrentPostType: getCurrentPostType2
      } = select4(store);
      return {
        isOpened: isEditorPanelOpened2(PANEL_NAME3),
        isEnabled: isEditorPanelEnabled2(PANEL_NAME3),
        postType: getCurrentPostType2()
      };
    }, []);
    const { toggleEditorPanelOpened: toggleEditorPanelOpened2 } = (0, import_data95.useDispatch)(store);
    const toggleExcerptPanel = () => toggleEditorPanelOpened2(PANEL_NAME3);
    if (!isEnabled) {
      return null;
    }
    const shouldUseDescriptionLabel = [
      "wp_template",
      "wp_template_part",
      "wp_block"
    ].includes(postType2);
    return /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
      import_components68.PanelBody,
      {
        title: shouldUseDescriptionLabel ? (0, import_i18n91.__)("Description") : (0, import_i18n91.__)("Excerpt"),
        opened: isOpened,
        onToggle: toggleExcerptPanel,
        children: /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(plugin_default.Slot, { children: (fills) => /* @__PURE__ */ (0, import_jsx_runtime152.jsxs)(import_jsx_runtime152.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(PostExcerpt, {}),
          fills
        ] }) })
      }
    );
  }
  function PostExcerptPanel() {
    return /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(check_default3, { children: /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(ExcerptPanel, {}) });
  }
  function PrivatePostExcerptPanel() {
    return /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(check_default3, { children: /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(PrivateExcerpt, {}) });
  }
  function PrivateExcerpt() {
    const { shouldRender, excerpt, shouldBeUsedAsDescription, allowEditing } = (0, import_data95.useSelect)((select4) => {
      const {
        getCurrentPostType: getCurrentPostType2,
        getCurrentPostId: getCurrentPostId2,
        getEditedPostAttribute: getEditedPostAttribute2,
        isEditorPanelEnabled: isEditorPanelEnabled2
      } = select4(store);
      const postType2 = getCurrentPostType2();
      const isTemplateOrTemplatePart2 = [
        "wp_template",
        "wp_template_part"
      ].includes(postType2);
      const isPattern = postType2 === "wp_block";
      const _shouldBeUsedAsDescription = isTemplateOrTemplatePart2 || isPattern;
      const _usedAttribute = isTemplateOrTemplatePart2 ? "description" : "excerpt";
      const _excerpt = getEditedPostAttribute2(_usedAttribute);
      const template2 = isTemplateOrTemplatePart2 && select4(import_core_data59.store).getEntityRecord(
        "postType",
        postType2,
        getCurrentPostId2()
      );
      const fallback = !_excerpt && isTemplateOrTemplatePart2 ? getTemplateInfo({
        template: template2,
        templateTypes: select4(import_core_data59.store).getCurrentTheme()?.default_template_types
      })?.description : void 0;
      const _shouldRender = isEditorPanelEnabled2(PANEL_NAME3) || _shouldBeUsedAsDescription;
      return {
        excerpt: _excerpt ?? fallback,
        shouldRender: _shouldRender,
        shouldBeUsedAsDescription: _shouldBeUsedAsDescription,
        // If we should render, allow editing for all post types that are not used as description.
        // For the rest allow editing only for user generated entities.
        allowEditing: _shouldRender && (!_shouldBeUsedAsDescription || isPattern || template2 && template2.source === TEMPLATE_ORIGINS.custom && !template2.has_theme_file && template2.is_custom)
      };
    }, []);
    const [popoverAnchor, setPopoverAnchor] = (0, import_element66.useState)(null);
    const label = shouldBeUsedAsDescription ? (0, import_i18n91.__)("Description") : (0, import_i18n91.__)("Excerpt");
    const popoverProps = (0, import_element66.useMemo)(
      () => ({
        // Anchor the popover to the middle of the entire row so that it doesn't
        // move around when the label changes.
        anchor: popoverAnchor,
        "aria-label": label,
        headerTitle: label,
        placement: "left-start",
        offset: 36,
        shift: true
      }),
      [popoverAnchor, label]
    );
    if (!shouldRender) {
      return false;
    }
    const excerptText = !!excerpt && /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(import_components68.__experimentalText, { align: "left", numberOfLines: 4, truncate: allowEditing, children: (0, import_html_entities19.decodeEntities)(excerpt) });
    if (!allowEditing) {
      return excerptText;
    }
    const excerptPlaceholder = shouldBeUsedAsDescription ? (0, import_i18n91.__)("Add a description\u2026") : (0, import_i18n91.__)("Add an excerpt\u2026");
    const triggerEditLabel = shouldBeUsedAsDescription ? (0, import_i18n91.__)("Edit description") : (0, import_i18n91.__)("Edit excerpt");
    return /* @__PURE__ */ (0, import_jsx_runtime152.jsxs)(import_components68.__experimentalVStack, { children: [
      excerptText,
      /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
        import_components68.Dropdown,
        {
          className: "editor-post-excerpt__dropdown",
          contentClassName: "editor-post-excerpt__dropdown__content",
          popoverProps,
          focusOnMount: true,
          ref: setPopoverAnchor,
          renderToggle: ({ onToggle }) => /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
            import_components68.Button,
            {
              __next40pxDefaultSize: true,
              onClick: onToggle,
              variant: "link",
              children: excerptText ? triggerEditLabel : excerptPlaceholder
            }
          ),
          renderContent: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime152.jsxs)(import_jsx_runtime152.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
              import_block_editor35.__experimentalInspectorPopoverHeader,
              {
                title: label,
                onClose
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(import_components68.__experimentalVStack, { spacing: 4, children: /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(plugin_default.Slot, { children: (fills) => /* @__PURE__ */ (0, import_jsx_runtime152.jsxs)(import_jsx_runtime152.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime152.jsx)(
                PostExcerpt,
                {
                  hideLabelFromVision: true,
                  updateOnBlur: true
                }
              ),
              fills
            ] }) }) })
          ] })
        }
      )
    ] });
  }

  // packages/editor/build-module/components/post-featured-image/index.js
  var import_jsx_runtime154 = __toESM(require_jsx_runtime());
  var import_i18n92 = __toESM(require_i18n());
  var import_hooks11 = __toESM(require_hooks());
  var import_components69 = __toESM(require_components());
  var import_blob2 = __toESM(require_blob());
  var import_element67 = __toESM(require_element());
  var import_compose18 = __toESM(require_compose());
  var import_data97 = __toESM(require_data());
  var import_block_editor36 = __toESM(require_block_editor());
  var import_core_data61 = __toESM(require_core_data());

  // packages/editor/build-module/components/post-featured-image/check.js
  var import_jsx_runtime153 = __toESM(require_jsx_runtime());

  // packages/editor/build-module/components/theme-support-check/index.js
  var import_data96 = __toESM(require_data());
  var import_core_data60 = __toESM(require_core_data());
  function ThemeSupportCheck({ children, supportKeys }) {
    const { postType: postType2, themeSupports } = (0, import_data96.useSelect)((select4) => {
      return {
        postType: select4(store).getEditedPostAttribute("type"),
        themeSupports: select4(import_core_data60.store).getThemeSupports()
      };
    }, []);
    const isSupported = (Array.isArray(supportKeys) ? supportKeys : [supportKeys]).some((key) => {
      const supported = themeSupports?.[key] ?? false;
      if ("post-thumbnails" === key && Array.isArray(supported)) {
        return supported.includes(postType2);
      }
      return supported;
    });
    if (!isSupported) {
      return null;
    }
    return children;
  }

  // packages/editor/build-module/components/post-featured-image/check.js
  function PostFeaturedImageCheck({ children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(ThemeSupportCheck, { supportKeys: "post-thumbnails", children: /* @__PURE__ */ (0, import_jsx_runtime153.jsx)(post_type_support_check_default, { supportKeys: "thumbnail", children }) });
  }
  var check_default4 = PostFeaturedImageCheck;

  // packages/editor/build-module/components/post-featured-image/index.js
  var ALLOWED_MEDIA_TYPES = ["image"];
  var DEFAULT_FEATURE_IMAGE_LABEL = (0, import_i18n92.__)("Featured image");
  var DEFAULT_SET_FEATURE_IMAGE_LABEL = (0, import_i18n92.__)("Add a featured image");
  var instructions = /* @__PURE__ */ (0, import_jsx_runtime154.jsx)("p", { children: (0, import_i18n92.__)(
    "To edit the featured image, you need permission to upload media."
  ) });
  function getMediaDetails(media, postId2) {
    if (!media) {
      return {};
    }
    const defaultSize = (0, import_hooks11.applyFilters)(
      "editor.PostFeaturedImage.imageSize",
      "large",
      media.id,
      postId2
    );
    if (defaultSize in (media?.media_details?.sizes ?? {})) {
      return {
        mediaWidth: media.media_details.sizes[defaultSize].width,
        mediaHeight: media.media_details.sizes[defaultSize].height,
        mediaSourceUrl: media.media_details.sizes[defaultSize].source_url
      };
    }
    const fallbackSize = (0, import_hooks11.applyFilters)(
      "editor.PostFeaturedImage.imageSize",
      "thumbnail",
      media.id,
      postId2
    );
    if (fallbackSize in (media?.media_details?.sizes ?? {})) {
      return {
        mediaWidth: media.media_details.sizes[fallbackSize].width,
        mediaHeight: media.media_details.sizes[fallbackSize].height,
        mediaSourceUrl: media.media_details.sizes[fallbackSize].source_url
      };
    }
    return {
      mediaWidth: media.media_details.width,
      mediaHeight: media.media_details.height,
      mediaSourceUrl: media.source_url
    };
  }
  function PostFeaturedImage({
    currentPostId,
    featuredImageId,
    onUpdateImage,
    onRemoveImage,
    media,
    postType: postType2,
    noticeUI,
    noticeOperations,
    isRequestingFeaturedImageMedia
  }) {
    const returnsFocusRef = (0, import_element67.useRef)(false);
    const [isLoading, setIsLoading] = (0, import_element67.useState)(false);
    const { getSettings: getSettings4 } = (0, import_data97.useSelect)(import_block_editor36.store);
    const { mediaSourceUrl } = getMediaDetails(media, currentPostId);
    function onDropFiles(filesList) {
      getSettings4().mediaUpload({
        allowedTypes: ALLOWED_MEDIA_TYPES,
        filesList,
        onFileChange([image]) {
          if ((0, import_blob2.isBlobURL)(image?.url)) {
            setIsLoading(true);
            return;
          }
          if (image) {
            onUpdateImage(image);
          }
          setIsLoading(false);
        },
        onError(message) {
          noticeOperations.removeAllNotices();
          noticeOperations.createErrorNotice(message);
        },
        multiple: false
      });
    }
    function getImageDescription(imageMedia) {
      if (imageMedia.alt_text) {
        return (0, import_i18n92.sprintf)(
          // Translators: %s: The selected image alt text.
          (0, import_i18n92.__)("Current image: %s"),
          imageMedia.alt_text
        );
      }
      return (0, import_i18n92.sprintf)(
        // Translators: %s: The selected image filename.
        (0, import_i18n92.__)(
          "The current image has no alternative text. The file name is: %s"
        ),
        imageMedia.media_details.sizes?.full?.file || imageMedia.slug
      );
    }
    function returnFocus(node) {
      if (returnsFocusRef.current && node) {
        node.focus();
        returnsFocusRef.current = false;
      }
    }
    const isMissingMedia = !isRequestingFeaturedImageMedia && !!featuredImageId && !media;
    return /* @__PURE__ */ (0, import_jsx_runtime154.jsxs)(check_default4, { children: [
      noticeUI,
      /* @__PURE__ */ (0, import_jsx_runtime154.jsxs)("div", { className: "editor-post-featured-image", children: [
        media && /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(
          "div",
          {
            id: `editor-post-featured-image-${featuredImageId}-describedby`,
            className: "hidden",
            children: getImageDescription(media)
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(import_block_editor36.MediaUploadCheck, { fallback: instructions, children: /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(
          import_block_editor36.MediaUpload,
          {
            title: postType2?.labels?.featured_image || DEFAULT_FEATURE_IMAGE_LABEL,
            onSelect: onUpdateImage,
            unstableFeaturedImageFlow: true,
            allowedTypes: ALLOWED_MEDIA_TYPES,
            modalClass: "editor-post-featured-image__media-modal",
            render: ({ open }) => /* @__PURE__ */ (0, import_jsx_runtime154.jsxs)("div", { className: "editor-post-featured-image__container", children: [
              isMissingMedia ? /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(
                import_components69.Notice,
                {
                  status: "warning",
                  isDismissible: false,
                  children: (0, import_i18n92.__)(
                    "Could not retrieve the featured image data."
                  )
                }
              ) : /* @__PURE__ */ (0, import_jsx_runtime154.jsxs)(
                import_components69.Button,
                {
                  __next40pxDefaultSize: true,
                  ref: returnFocus,
                  className: !featuredImageId ? "editor-post-featured-image__toggle" : "editor-post-featured-image__preview",
                  onClick: open,
                  "aria-label": !featuredImageId ? null : (0, import_i18n92.__)(
                    "Edit or replace the featured image"
                  ),
                  "aria-describedby": !featuredImageId ? null : `editor-post-featured-image-${featuredImageId}-describedby`,
                  "aria-haspopup": "dialog",
                  disabled: isLoading,
                  accessibleWhenDisabled: true,
                  children: [
                    !!featuredImageId && media && /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(
                      "img",
                      {
                        className: "editor-post-featured-image__preview-image",
                        src: mediaSourceUrl,
                        alt: getImageDescription(
                          media
                        )
                      }
                    ),
                    (isLoading || isRequestingFeaturedImageMedia) && /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(import_components69.Spinner, {}),
                    !featuredImageId && !isLoading && (postType2?.labels?.set_featured_image || DEFAULT_SET_FEATURE_IMAGE_LABEL)
                  ]
                }
              ),
              !!featuredImageId && /* @__PURE__ */ (0, import_jsx_runtime154.jsxs)(
                import_components69.__experimentalHStack,
                {
                  className: clsx_default(
                    "editor-post-featured-image__actions",
                    {
                      "editor-post-featured-image__actions-missing-image": isMissingMedia,
                      "editor-post-featured-image__actions-is-requesting-image": isRequestingFeaturedImageMedia
                    }
                  ),
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(
                      import_components69.Button,
                      {
                        __next40pxDefaultSize: true,
                        className: "editor-post-featured-image__action",
                        onClick: open,
                        "aria-haspopup": "dialog",
                        variant: isMissingMedia ? "secondary" : void 0,
                        children: (0, import_i18n92.__)("Replace")
                      }
                    ),
                    /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(
                      import_components69.Button,
                      {
                        __next40pxDefaultSize: true,
                        className: "editor-post-featured-image__action",
                        onClick: () => {
                          onRemoveImage();
                          returnsFocusRef.current = true;
                        },
                        variant: isMissingMedia ? "secondary" : void 0,
                        isDestructive: isMissingMedia,
                        children: (0, import_i18n92.__)("Remove")
                      }
                    )
                  ]
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime154.jsx)(import_components69.DropZone, { onFilesDrop: onDropFiles })
            ] }),
            value: featuredImageId
          }
        ) })
      ] })
    ] });
  }
  var applyWithSelect = (0, import_data97.withSelect)((select4) => {
    const { getEntityRecord, getPostType, hasFinishedResolution } = select4(import_core_data61.store);
    const { getCurrentPostId: getCurrentPostId2, getEditedPostAttribute: getEditedPostAttribute2 } = select4(store);
    const featuredImageId = getEditedPostAttribute2("featured_media");
    return {
      media: featuredImageId ? getEntityRecord("postType", "attachment", featuredImageId, {
        context: "view"
      }) : null,
      currentPostId: getCurrentPostId2(),
      postType: getPostType(getEditedPostAttribute2("type")),
      featuredImageId,
      isRequestingFeaturedImageMedia: !!featuredImageId && !hasFinishedResolution("getEntityRecord", [
        "postType",
        "attachment",
        featuredImageId,
        { context: "view" }
      ])
    };
  });
  var applyWithDispatch = (0, import_data97.withDispatch)(
    (dispatch5, { noticeOperations }, { select: select4 }) => {
      const { editPost: editPost2 } = dispatch5(store);
      return {
        onUpdateImage(image) {
          editPost2({ featured_media: image.id });
        },
        onDropImage(filesList) {
          select4(import_block_editor36.store).getSettings().mediaUpload({
            allowedTypes: ["image"],
            filesList,
            onFileChange([image]) {
              editPost2({ featured_media: image.id });
            },
            onError(message) {
              noticeOperations.removeAllNotices();
              noticeOperations.createErrorNotice(message);
            },
            multiple: false
          });
        },
        onRemoveImage() {
          editPost2({ featured_media: 0 });
        }
      };
    }
  );
  var post_featured_image_default = (0, import_compose18.compose)(
    import_components69.withNotices,
    applyWithSelect,
    applyWithDispatch,
    (0, import_components69.withFilters)("editor.PostFeaturedImage")
  )(PostFeaturedImage);

  // packages/editor/build-module/components/post-featured-image/panel.js
  var import_jsx_runtime155 = __toESM(require_jsx_runtime());
  var import_i18n93 = __toESM(require_i18n());
  var import_components70 = __toESM(require_components());
  var import_data98 = __toESM(require_data());
  var import_core_data62 = __toESM(require_core_data());
  var PANEL_NAME4 = "featured-image";
  function PostFeaturedImagePanel({ withPanelBody = true }) {
    const { postType: postType2, isEnabled, isOpened } = (0, import_data98.useSelect)((select4) => {
      const {
        getEditedPostAttribute: getEditedPostAttribute2,
        isEditorPanelEnabled: isEditorPanelEnabled2,
        isEditorPanelOpened: isEditorPanelOpened2
      } = select4(store);
      const { getPostType } = select4(import_core_data62.store);
      return {
        postType: getPostType(getEditedPostAttribute2("type")),
        isEnabled: isEditorPanelEnabled2(PANEL_NAME4),
        isOpened: isEditorPanelOpened2(PANEL_NAME4)
      };
    }, []);
    const { toggleEditorPanelOpened: toggleEditorPanelOpened2 } = (0, import_data98.useDispatch)(store);
    if (!isEnabled) {
      return null;
    }
    if (!withPanelBody) {
      return /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(check_default4, { children: /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(post_featured_image_default, {}) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(check_default4, { children: /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(
      import_components70.PanelBody,
      {
        title: postType2?.labels?.featured_image ?? (0, import_i18n93.__)("Featured image"),
        opened: isOpened,
        onToggle: () => toggleEditorPanelOpened2(PANEL_NAME4),
        children: /* @__PURE__ */ (0, import_jsx_runtime155.jsx)(post_featured_image_default, {})
      }
    ) });
  }

  // packages/editor/build-module/components/post-format/index.js
  var import_jsx_runtime157 = __toESM(require_jsx_runtime());
  var import_i18n94 = __toESM(require_i18n());
  var import_components71 = __toESM(require_components());
  var import_data100 = __toESM(require_data());
  var import_compose19 = __toESM(require_compose());
  var import_core_data63 = __toESM(require_core_data());

  // packages/editor/build-module/components/post-format/check.js
  var import_jsx_runtime156 = __toESM(require_jsx_runtime());
  var import_data99 = __toESM(require_data());
  function PostFormatCheck({ children }) {
    const disablePostFormats = (0, import_data99.useSelect)(
      (select4) => select4(store).getEditorSettings().disablePostFormats,
      []
    );
    if (disablePostFormats) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime156.jsx)(post_type_support_check_default, { supportKeys: "post-formats", children });
  }

  // packages/editor/build-module/components/post-format/index.js
  var POST_FORMATS = [
    { id: "aside", caption: (0, import_i18n94.__)("Aside") },
    { id: "audio", caption: (0, import_i18n94.__)("Audio") },
    { id: "chat", caption: (0, import_i18n94.__)("Chat") },
    { id: "gallery", caption: (0, import_i18n94.__)("Gallery") },
    { id: "image", caption: (0, import_i18n94.__)("Image") },
    { id: "link", caption: (0, import_i18n94.__)("Link") },
    { id: "quote", caption: (0, import_i18n94.__)("Quote") },
    { id: "standard", caption: (0, import_i18n94.__)("Standard") },
    { id: "status", caption: (0, import_i18n94.__)("Status") },
    { id: "video", caption: (0, import_i18n94.__)("Video") }
  ].sort((a2, b2) => {
    const normalizedA = a2.caption.toUpperCase();
    const normalizedB = b2.caption.toUpperCase();
    if (normalizedA < normalizedB) {
      return -1;
    }
    if (normalizedA > normalizedB) {
      return 1;
    }
    return 0;
  });
  function PostFormat() {
    const instanceId = (0, import_compose19.useInstanceId)(PostFormat);
    const postFormatSelectorId = `post-format-selector-${instanceId}`;
    const { postFormat, suggestedFormat, supportedFormats } = (0, import_data100.useSelect)(
      (select4) => {
        const { getEditedPostAttribute: getEditedPostAttribute2, getSuggestedPostFormat: getSuggestedPostFormat2 } = select4(store);
        const _postFormat = getEditedPostAttribute2("format");
        const themeSupports = select4(import_core_data63.store).getThemeSupports();
        return {
          postFormat: _postFormat ?? "standard",
          suggestedFormat: getSuggestedPostFormat2(),
          supportedFormats: themeSupports.formats
        };
      },
      []
    );
    const formats = POST_FORMATS.filter((format) => {
      return supportedFormats?.includes(format.id) || postFormat === format.id;
    });
    const suggestion = formats.find(
      (format) => format.id === suggestedFormat
    );
    const { editPost: editPost2 } = (0, import_data100.useDispatch)(store);
    const onUpdatePostFormat = (format) => editPost2({ format });
    return /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(PostFormatCheck, { children: /* @__PURE__ */ (0, import_jsx_runtime157.jsxs)("div", { className: "editor-post-format", children: [
      /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
        import_components71.RadioControl,
        {
          className: "editor-post-format__options",
          label: (0, import_i18n94.__)("Post Format"),
          selected: postFormat,
          onChange: (format) => onUpdatePostFormat(format),
          id: postFormatSelectorId,
          options: formats.map((format) => ({
            label: format.caption,
            value: format.id
          })),
          hideLabelFromVision: true
        }
      ),
      suggestion && suggestion.id !== postFormat && /* @__PURE__ */ (0, import_jsx_runtime157.jsx)("p", { className: "editor-post-format__suggestion", children: /* @__PURE__ */ (0, import_jsx_runtime157.jsx)(
        import_components71.Button,
        {
          __next40pxDefaultSize: true,
          variant: "link",
          onClick: () => onUpdatePostFormat(suggestion.id),
          children: (0, import_i18n94.sprintf)(
            /* translators: %s: post format */
            (0, import_i18n94.__)("Apply suggested format: %s"),
            suggestion.caption
          )
        }
      ) })
    ] }) });
  }

  // packages/editor/build-module/components/post-last-revision/index.js
  var import_jsx_runtime159 = __toESM(require_jsx_runtime());
  var import_i18n95 = __toESM(require_i18n());
  var import_components72 = __toESM(require_components());
  var import_data102 = __toESM(require_data());
  var import_url11 = __toESM(require_url());

  // packages/editor/build-module/components/post-last-revision/check.js
  var import_jsx_runtime158 = __toESM(require_jsx_runtime());
  var import_data101 = __toESM(require_data());
  function PostLastRevisionCheck({ children }) {
    const { lastRevisionId, revisionsCount } = (0, import_data101.useSelect)((select4) => {
      const { getCurrentPostLastRevisionId: getCurrentPostLastRevisionId2, getCurrentPostRevisionsCount: getCurrentPostRevisionsCount2 } = select4(store);
      return {
        lastRevisionId: getCurrentPostLastRevisionId2(),
        revisionsCount: getCurrentPostRevisionsCount2()
      };
    }, []);
    if (!lastRevisionId || revisionsCount < 2) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime158.jsx)(post_type_support_check_default, { supportKeys: "revisions", children });
  }
  var check_default5 = PostLastRevisionCheck;

  // packages/editor/build-module/components/post-last-revision/index.js
  function usePostLastRevisionInfo() {
    return (0, import_data102.useSelect)((select4) => {
      const { getCurrentPostLastRevisionId: getCurrentPostLastRevisionId2, getCurrentPostRevisionsCount: getCurrentPostRevisionsCount2 } = select4(store);
      return {
        lastRevisionId: getCurrentPostLastRevisionId2(),
        revisionsCount: getCurrentPostRevisionsCount2()
      };
    }, []);
  }
  function PostLastRevision() {
    const { lastRevisionId, revisionsCount } = usePostLastRevisionInfo();
    return /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(check_default5, { children: /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(
      import_components72.Button,
      {
        __next40pxDefaultSize: true,
        href: (0, import_url11.addQueryArgs)("revision.php", {
          revision: lastRevisionId
        }),
        className: "editor-post-last-revision__title",
        icon: backup_default,
        iconPosition: "right",
        text: (0, import_i18n95.sprintf)(
          /* translators: %s: number of revisions. */
          (0, import_i18n95.__)("Revisions (%s)"),
          revisionsCount
        )
      }
    ) });
  }
  function PrivatePostLastRevision() {
    const { lastRevisionId, revisionsCount } = usePostLastRevisionInfo();
    return /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(check_default5, { children: /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(post_panel_row_default, { label: (0, import_i18n95.__)("Revisions"), children: /* @__PURE__ */ (0, import_jsx_runtime159.jsx)(
      import_components72.Button,
      {
        href: (0, import_url11.addQueryArgs)("revision.php", {
          revision: lastRevisionId
        }),
        className: "editor-private-post-last-revision__button",
        text: revisionsCount,
        variant: "tertiary",
        size: "compact"
      }
    ) }) });
  }
  var post_last_revision_default = PostLastRevision;

  // packages/editor/build-module/components/post-last-revision/panel.js
  var import_jsx_runtime160 = __toESM(require_jsx_runtime());
  var import_components73 = __toESM(require_components());
  function PostLastRevisionPanel() {
    return /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(check_default5, { children: /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(import_components73.PanelBody, { className: "editor-post-last-revision__panel", children: /* @__PURE__ */ (0, import_jsx_runtime160.jsx)(post_last_revision_default, {}) }) });
  }
  var panel_default2 = PostLastRevisionPanel;

  // packages/editor/build-module/components/post-locked-modal/index.js
  var import_jsx_runtime161 = __toESM(require_jsx_runtime());
  var import_i18n96 = __toESM(require_i18n());
  var import_components74 = __toESM(require_components());
  var import_data103 = __toESM(require_data());
  var import_url12 = __toESM(require_url());
  var import_element68 = __toESM(require_element());
  var import_hooks12 = __toESM(require_hooks());
  var import_compose20 = __toESM(require_compose());
  var import_core_data64 = __toESM(require_core_data());
  function PostLockedModal() {
    const instanceId = (0, import_compose20.useInstanceId)(PostLockedModal);
    const hookName = "core/editor/post-locked-modal-" + instanceId;
    const { autosave: autosave2, updatePostLock: updatePostLock2 } = (0, import_data103.useDispatch)(store);
    const {
      isLocked,
      isTakeover,
      user,
      postId: postId2,
      postLockUtils,
      activePostLock,
      postType: postType2,
      previewLink
    } = (0, import_data103.useSelect)((select4) => {
      const {
        isPostLocked: isPostLocked2,
        isPostLockTakeover: isPostLockTakeover2,
        getPostLockUser: getPostLockUser2,
        getCurrentPostId: getCurrentPostId2,
        getActivePostLock: getActivePostLock2,
        getEditedPostAttribute: getEditedPostAttribute2,
        getEditedPostPreviewLink: getEditedPostPreviewLink2,
        getEditorSettings: getEditorSettings2
      } = select4(store);
      const { getPostType } = select4(import_core_data64.store);
      return {
        isLocked: isPostLocked2(),
        isTakeover: isPostLockTakeover2(),
        user: getPostLockUser2(),
        postId: getCurrentPostId2(),
        postLockUtils: getEditorSettings2().postLockUtils,
        activePostLock: getActivePostLock2(),
        postType: getPostType(getEditedPostAttribute2("type")),
        previewLink: getEditedPostPreviewLink2()
      };
    }, []);
    (0, import_element68.useEffect)(() => {
      function sendPostLock(data) {
        if (isLocked) {
          return;
        }
        data["wp-refresh-post-lock"] = {
          lock: activePostLock,
          post_id: postId2
        };
      }
      function receivePostLock(data) {
        if (!data["wp-refresh-post-lock"]) {
          return;
        }
        const received = data["wp-refresh-post-lock"];
        if (received.lock_error) {
          autosave2();
          updatePostLock2({
            isLocked: true,
            isTakeover: true,
            user: {
              name: received.lock_error.name,
              avatar: received.lock_error.avatar_src_2x
            }
          });
        } else if (received.new_lock) {
          updatePostLock2({
            isLocked: false,
            activePostLock: received.new_lock
          });
        }
      }
      function releasePostLock() {
        if (isLocked || !activePostLock) {
          return;
        }
        const data = new window.FormData();
        data.append("action", "wp-remove-post-lock");
        data.append("_wpnonce", postLockUtils.unlockNonce);
        data.append("post_ID", postId2);
        data.append("active_post_lock", activePostLock);
        if (window.navigator.sendBeacon) {
          window.navigator.sendBeacon(postLockUtils.ajaxUrl, data);
        } else {
          const xhr = new window.XMLHttpRequest();
          xhr.open("POST", postLockUtils.ajaxUrl, false);
          xhr.send(data);
        }
      }
      (0, import_hooks12.addAction)("heartbeat.send", hookName, sendPostLock);
      (0, import_hooks12.addAction)("heartbeat.tick", hookName, receivePostLock);
      window.addEventListener("beforeunload", releasePostLock);
      return () => {
        (0, import_hooks12.removeAction)("heartbeat.send", hookName);
        (0, import_hooks12.removeAction)("heartbeat.tick", hookName);
        window.removeEventListener("beforeunload", releasePostLock);
      };
    }, []);
    if (!isLocked) {
      return null;
    }
    const userDisplayName = user.name;
    const userAvatar = user.avatar;
    const unlockUrl = (0, import_url12.addQueryArgs)("post.php", {
      "get-post-lock": "1",
      lockKey: true,
      post: postId2,
      action: "edit",
      _wpnonce: postLockUtils.nonce
    });
    const allPostsUrl = (0, import_url12.addQueryArgs)("edit.php", {
      post_type: postType2?.slug
    });
    const allPostsLabel = (0, import_i18n96.__)("Exit editor");
    return /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(
      import_components74.Modal,
      {
        title: isTakeover ? (0, import_i18n96.__)("Someone else has taken over this post") : (0, import_i18n96.__)("This post is already being edited"),
        focusOnMount: true,
        shouldCloseOnClickOutside: false,
        shouldCloseOnEsc: false,
        isDismissible: false,
        className: "editor-post-locked-modal",
        size: "medium",
        children: /* @__PURE__ */ (0, import_jsx_runtime161.jsxs)(import_components74.__experimentalHStack, { alignment: "top", spacing: 6, children: [
          !!userAvatar && /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(
            "img",
            {
              src: userAvatar,
              alt: (0, import_i18n96.__)("Avatar"),
              className: "editor-post-locked-modal__avatar",
              width: 64,
              height: 64
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime161.jsxs)("div", { children: [
            !!isTakeover && /* @__PURE__ */ (0, import_jsx_runtime161.jsx)("p", { children: (0, import_element68.createInterpolateElement)(
              userDisplayName ? (0, import_i18n96.sprintf)(
                /* translators: %s: user's display name */
                (0, import_i18n96.__)(
                  "<strong>%s</strong> now has editing control of this post (<PreviewLink />). Don\u2019t worry, your changes up to this moment have been saved."
                ),
                userDisplayName
              ) : (0, import_i18n96.__)(
                "Another user now has editing control of this post (<PreviewLink />). Don\u2019t worry, your changes up to this moment have been saved."
              ),
              {
                strong: /* @__PURE__ */ (0, import_jsx_runtime161.jsx)("strong", {}),
                PreviewLink: /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(import_components74.ExternalLink, { href: previewLink, children: (0, import_i18n96.__)("preview") })
              }
            ) }),
            !isTakeover && /* @__PURE__ */ (0, import_jsx_runtime161.jsxs)(import_jsx_runtime161.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime161.jsx)("p", { children: (0, import_element68.createInterpolateElement)(
                userDisplayName ? (0, import_i18n96.sprintf)(
                  /* translators: %s: user's display name */
                  (0, import_i18n96.__)(
                    "<strong>%s</strong> is currently working on this post (<PreviewLink />), which means you cannot make changes, unless you take over."
                  ),
                  userDisplayName
                ) : (0, import_i18n96.__)(
                  "Another user is currently working on this post (<PreviewLink />), which means you cannot make changes, unless you take over."
                ),
                {
                  strong: /* @__PURE__ */ (0, import_jsx_runtime161.jsx)("strong", {}),
                  PreviewLink: /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(import_components74.ExternalLink, { href: previewLink, children: (0, import_i18n96.__)("preview") })
                }
              ) }),
              /* @__PURE__ */ (0, import_jsx_runtime161.jsx)("p", { children: (0, import_i18n96.__)(
                "If you take over, the other user will lose editing control to the post, but their changes will be saved."
              ) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime161.jsxs)(
              import_components74.__experimentalHStack,
              {
                className: "editor-post-locked-modal__buttons",
                justify: "flex-end",
                children: [
                  !isTakeover && /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(
                    import_components74.Button,
                    {
                      __next40pxDefaultSize: true,
                      variant: "tertiary",
                      href: unlockUrl,
                      children: (0, import_i18n96.__)("Take over")
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime161.jsx)(
                    import_components74.Button,
                    {
                      __next40pxDefaultSize: true,
                      variant: "primary",
                      href: allPostsUrl,
                      children: allPostsLabel
                    }
                  )
                ]
              }
            )
          ] })
        ] })
      }
    );
  }
  var post_locked_modal_default = true ? (0, import_components74.withFilters)("editor.PostLockedModal")(PostLockedModal) : PostLockedModal;

  // packages/editor/build-module/components/post-pending-status/index.js
  var import_jsx_runtime162 = __toESM(require_jsx_runtime());
  var import_i18n97 = __toESM(require_i18n());
  var import_components75 = __toESM(require_components());
  var import_data105 = __toESM(require_data());

  // packages/editor/build-module/components/post-pending-status/check.js
  var import_data104 = __toESM(require_data());
  function PostPendingStatusCheck({ children }) {
    const { hasPublishAction, isPublished } = (0, import_data104.useSelect)((select4) => {
      const { isCurrentPostPublished: isCurrentPostPublished2, getCurrentPost: getCurrentPost2 } = select4(store);
      return {
        hasPublishAction: getCurrentPost2()._links?.["wp:action-publish"] ?? false,
        isPublished: isCurrentPostPublished2()
      };
    }, []);
    if (isPublished || !hasPublishAction) {
      return null;
    }
    return children;
  }
  var check_default6 = PostPendingStatusCheck;

  // packages/editor/build-module/components/post-pending-status/index.js
  function PostPendingStatus() {
    const status = (0, import_data105.useSelect)(
      (select4) => select4(store).getEditedPostAttribute("status"),
      []
    );
    const { editPost: editPost2 } = (0, import_data105.useDispatch)(store);
    const togglePendingStatus = () => {
      const updatedStatus = status === "pending" ? "draft" : "pending";
      editPost2({ status: updatedStatus });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(check_default6, { children: /* @__PURE__ */ (0, import_jsx_runtime162.jsx)(
      import_components75.CheckboxControl,
      {
        __nextHasNoMarginBottom: true,
        label: (0, import_i18n97.__)("Pending review"),
        checked: status === "pending",
        onChange: togglePendingStatus
      }
    ) });
  }
  var post_pending_status_default = PostPendingStatus;

  // packages/editor/build-module/components/post-preview-button/index.js
  var import_jsx_runtime163 = __toESM(require_jsx_runtime());
  var import_element69 = __toESM(require_element());
  var import_components76 = __toESM(require_components());
  var import_i18n98 = __toESM(require_i18n());
  var import_data106 = __toESM(require_data());
  var import_hooks13 = __toESM(require_hooks());
  var import_core_data65 = __toESM(require_core_data());
  function writeInterstitialMessage(targetDocument) {
    let markup = (0, import_element69.renderToString)(
      /* @__PURE__ */ (0, import_jsx_runtime163.jsxs)("div", { className: "editor-post-preview-button__interstitial-message", children: [
        /* @__PURE__ */ (0, import_jsx_runtime163.jsxs)(import_components76.SVG, { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 96 96", children: [
          /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(
            import_components76.Path,
            {
              className: "outer",
              d: "M48 12c19.9 0 36 16.1 36 36S67.9 84 48 84 12 67.9 12 48s16.1-36 36-36",
              fill: "none"
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(
            import_components76.Path,
            {
              className: "inner",
              d: "M69.5 46.4c0-3.9-1.4-6.7-2.6-8.8-1.6-2.6-3.1-4.9-3.1-7.5 0-2.9 2.2-5.7 5.4-5.7h.4C63.9 19.2 56.4 16 48 16c-11.2 0-21 5.7-26.7 14.4h2.1c3.3 0 8.5-.4 8.5-.4 1.7-.1 1.9 2.4.2 2.6 0 0-1.7.2-3.7.3L40 67.5l7-20.9L42 33c-1.7-.1-3.3-.3-3.3-.3-1.7-.1-1.5-2.7.2-2.6 0 0 5.3.4 8.4.4 3.3 0 8.5-.4 8.5-.4 1.7-.1 1.9 2.4.2 2.6 0 0-1.7.2-3.7.3l11.5 34.3 3.3-10.4c1.6-4.5 2.4-7.8 2.4-10.5zM16.1 48c0 12.6 7.3 23.5 18 28.7L18.8 35c-1.7 4-2.7 8.4-2.7 13zm32.5 2.8L39 78.6c2.9.8 5.9 1.3 9 1.3 3.7 0 7.3-.6 10.6-1.8-.1-.1-.2-.3-.2-.4l-9.8-26.9zM76.2 36c0 3.2-.6 6.9-2.4 11.4L64 75.6c9.5-5.5 15.9-15.8 15.9-27.6 0-5.5-1.4-10.8-3.9-15.3.1 1 .2 2.1.2 3.3z",
              fill: "none"
            }
          )
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime163.jsx)("p", { children: (0, import_i18n98.__)("Generating preview\u2026") })
      ] })
    );
    markup += `
		<style>
			body {
				margin: 0;
			}
			.editor-post-preview-button__interstitial-message {
				display: flex;
				flex-direction: column;
				align-items: center;
				justify-content: center;
				height: 100vh;
				width: 100vw;
			}
			@-webkit-keyframes paint {
				0% {
					stroke-dashoffset: 0;
				}
			}
			@-moz-keyframes paint {
				0% {
					stroke-dashoffset: 0;
				}
			}
			@-o-keyframes paint {
				0% {
					stroke-dashoffset: 0;
				}
			}
			@keyframes paint {
				0% {
					stroke-dashoffset: 0;
				}
			}
			.editor-post-preview-button__interstitial-message svg {
				width: 192px;
				height: 192px;
				stroke: #555d66;
				stroke-width: 0.75;
			}
			.editor-post-preview-button__interstitial-message svg .outer,
			.editor-post-preview-button__interstitial-message svg .inner {
				stroke-dasharray: 280;
				stroke-dashoffset: 280;
				-webkit-animation: paint 1.5s ease infinite alternate;
				-moz-animation: paint 1.5s ease infinite alternate;
				-o-animation: paint 1.5s ease infinite alternate;
				animation: paint 1.5s ease infinite alternate;
			}
			p {
				text-align: center;
				font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Oxygen-Sans, Ubuntu, Cantarell, "Helvetica Neue", sans-serif;
			}
		</style>
	`;
    markup = (0, import_hooks13.applyFilters)("editor.PostPreview.interstitialMarkup", markup);
    targetDocument.write(markup);
    targetDocument.title = (0, import_i18n98.__)("Generating preview\u2026");
    targetDocument.close();
  }
  function PostPreviewButton({
    className,
    textContent,
    forceIsAutosaveable,
    role,
    onPreview
  }) {
    const { postId: postId2, currentPostLink, previewLink, isSaveable, isViewable } = (0, import_data106.useSelect)((select4) => {
      const editor = select4(store);
      const core = select4(import_core_data65.store);
      const postType2 = core.getPostType(
        editor.getCurrentPostType("type")
      );
      const canView = postType2?.viewable ?? false;
      if (!canView) {
        return { isViewable: canView };
      }
      return {
        postId: editor.getCurrentPostId(),
        currentPostLink: editor.getCurrentPostAttribute("link"),
        previewLink: editor.getEditedPostPreviewLink(),
        isSaveable: editor.isEditedPostSaveable(),
        isViewable: canView
      };
    }, []);
    const { __unstableSaveForPreview: __unstableSaveForPreview2 } = (0, import_data106.useDispatch)(store);
    if (!isViewable) {
      return null;
    }
    const targetId = `wp-preview-${postId2}`;
    const openPreviewWindow = async (event) => {
      event.preventDefault();
      const previewWindow = window.open("", targetId);
      previewWindow.focus();
      writeInterstitialMessage(previewWindow.document);
      const link = await __unstableSaveForPreview2({ forceIsAutosaveable });
      previewWindow.location = link;
      onPreview?.();
    };
    const href = previewLink || currentPostLink;
    return /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(
      import_components76.Button,
      {
        variant: !className ? "tertiary" : void 0,
        className: className || "editor-post-preview",
        href,
        target: targetId,
        accessibleWhenDisabled: true,
        disabled: !isSaveable,
        onClick: openPreviewWindow,
        role,
        size: "compact",
        children: textContent || /* @__PURE__ */ (0, import_jsx_runtime163.jsxs)(import_jsx_runtime163.Fragment, { children: [
          (0, import_i18n98._x)("Preview", "imperative verb"),
          /* @__PURE__ */ (0, import_jsx_runtime163.jsx)(import_components76.VisuallyHidden, {
            as: "span",
            /* translators: accessibility text */
            children: (0, import_i18n98.__)("(opens in a new tab)")
          })
        ] })
      }
    );
  }

  // packages/editor/build-module/components/post-publish-button/index.js
  var import_jsx_runtime164 = __toESM(require_jsx_runtime());
  var import_components77 = __toESM(require_components());
  var import_element70 = __toESM(require_element());
  var import_data108 = __toESM(require_data());
  var import_compose22 = __toESM(require_compose());

  // packages/editor/build-module/components/post-publish-button/label.js
  var import_i18n99 = __toESM(require_i18n());
  var import_data107 = __toESM(require_data());
  var import_compose21 = __toESM(require_compose());
  function PublishButtonLabel() {
    const isSmallerThanMediumViewport = (0, import_compose21.useViewportMatch)("medium", "<");
    const {
      isPublished,
      isBeingScheduled,
      isSaving,
      isPublishing,
      hasPublishAction,
      isAutosaving,
      hasNonPostEntityChanges: hasNonPostEntityChanges2,
      postStatusHasChanged,
      postStatus
    } = (0, import_data107.useSelect)((select4) => {
      const {
        isCurrentPostPublished: isCurrentPostPublished2,
        isEditedPostBeingScheduled: isEditedPostBeingScheduled2,
        isSavingPost: isSavingPost2,
        isPublishingPost: isPublishingPost2,
        getCurrentPost: getCurrentPost2,
        getCurrentPostType: getCurrentPostType2,
        isAutosavingPost: isAutosavingPost2,
        getPostEdits: getPostEdits2,
        getEditedPostAttribute: getEditedPostAttribute2
      } = select4(store);
      return {
        isPublished: isCurrentPostPublished2(),
        isBeingScheduled: isEditedPostBeingScheduled2(),
        isSaving: isSavingPost2(),
        isPublishing: isPublishingPost2(),
        hasPublishAction: getCurrentPost2()._links?.["wp:action-publish"] ?? false,
        postType: getCurrentPostType2(),
        isAutosaving: isAutosavingPost2(),
        hasNonPostEntityChanges: select4(store).hasNonPostEntityChanges(),
        postStatusHasChanged: !!getPostEdits2()?.status,
        postStatus: getEditedPostAttribute2("status")
      };
    }, []);
    if (isPublishing) {
      return (0, import_i18n99.__)("Publishing\u2026");
    } else if ((isPublished || isBeingScheduled) && isSaving && !isAutosaving) {
      return (0, import_i18n99.__)("Saving\u2026");
    }
    if (!hasPublishAction) {
      return isSmallerThanMediumViewport ? (0, import_i18n99.__)("Publish") : (0, import_i18n99.__)("Submit for Review");
    }
    if (hasNonPostEntityChanges2 || isPublished || postStatusHasChanged && !["future", "publish"].includes(postStatus) || !postStatusHasChanged && postStatus === "future") {
      return (0, import_i18n99.__)("Save");
    }
    if (isBeingScheduled) {
      return (0, import_i18n99.__)("Schedule");
    }
    return (0, import_i18n99.__)("Publish");
  }

  // packages/editor/build-module/components/post-publish-button/index.js
  var noop4 = () => {
  };
  var PostPublishButton = class extends import_element70.Component {
    constructor(props) {
      super(props);
      this.createOnClick = this.createOnClick.bind(this);
      this.closeEntitiesSavedStates = this.closeEntitiesSavedStates.bind(this);
      this.state = {
        entitiesSavedStatesCallback: false
      };
    }
    createOnClick(callback) {
      return (...args) => {
        const { hasNonPostEntityChanges: hasNonPostEntityChanges2, setEntitiesSavedStatesCallback } = this.props;
        if (hasNonPostEntityChanges2 && setEntitiesSavedStatesCallback) {
          this.setState({
            entitiesSavedStatesCallback: () => callback(...args)
          });
          setEntitiesSavedStatesCallback(
            () => this.closeEntitiesSavedStates
          );
          return noop4;
        }
        return callback(...args);
      };
    }
    closeEntitiesSavedStates(savedEntities) {
      const { postType: postType2, postId: postId2 } = this.props;
      const { entitiesSavedStatesCallback } = this.state;
      this.setState({ entitiesSavedStatesCallback: false }, () => {
        if (savedEntities && savedEntities.some(
          (elt) => elt.kind === "postType" && elt.name === postType2 && elt.key === postId2
        )) {
          entitiesSavedStatesCallback();
        }
      });
    }
    render() {
      const {
        forceIsDirty,
        hasPublishAction,
        isBeingScheduled,
        isOpen,
        isPostSavingLocked: isPostSavingLocked2,
        isPublishable,
        isPublished,
        isSaveable,
        isSaving,
        isAutoSaving,
        isToggle,
        savePostStatus,
        onSubmit = noop4,
        onToggle,
        visibility,
        hasNonPostEntityChanges: hasNonPostEntityChanges2,
        isSavingNonPostEntityChanges: isSavingNonPostEntityChanges2,
        postStatus,
        postStatusHasChanged
      } = this.props;
      const isButtonDisabled = (isSaving || !isSaveable || isPostSavingLocked2 || !isPublishable && !forceIsDirty) && (!hasNonPostEntityChanges2 || isSavingNonPostEntityChanges2);
      const isToggleDisabled = (isPublished || isSaving || !isSaveable || !isPublishable && !forceIsDirty) && (!hasNonPostEntityChanges2 || isSavingNonPostEntityChanges2);
      let publishStatus = "publish";
      if (postStatusHasChanged) {
        publishStatus = postStatus;
      } else if (!hasPublishAction) {
        publishStatus = "pending";
      } else if (visibility === "private") {
        publishStatus = "private";
      } else if (isBeingScheduled) {
        publishStatus = "future";
      }
      const onClickButton = () => {
        if (isButtonDisabled) {
          return;
        }
        onSubmit();
        savePostStatus(publishStatus);
      };
      const onClickToggle = () => {
        if (isToggleDisabled) {
          return;
        }
        onToggle();
      };
      const buttonProps = {
        "aria-disabled": isButtonDisabled,
        className: "editor-post-publish-button",
        isBusy: !isAutoSaving && isSaving,
        variant: "primary",
        onClick: this.createOnClick(onClickButton),
        "aria-haspopup": hasNonPostEntityChanges2 ? "dialog" : void 0
      };
      const toggleProps = {
        "aria-disabled": isToggleDisabled,
        "aria-expanded": isOpen,
        className: "editor-post-publish-panel__toggle",
        isBusy: isSaving && isPublished,
        variant: "primary",
        size: "compact",
        onClick: this.createOnClick(onClickToggle),
        "aria-haspopup": hasNonPostEntityChanges2 ? "dialog" : void 0
      };
      const componentProps = isToggle ? toggleProps : buttonProps;
      return /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(import_jsx_runtime164.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(
        import_components77.Button,
        {
          ...componentProps,
          className: `${componentProps.className} editor-post-publish-button__button`,
          size: "compact",
          children: /* @__PURE__ */ (0, import_jsx_runtime164.jsx)(PublishButtonLabel, {})
        }
      ) });
    }
  };
  var post_publish_button_default = (0, import_compose22.compose)([
    (0, import_data108.withSelect)((select4) => {
      const {
        isSavingPost: isSavingPost2,
        isAutosavingPost: isAutosavingPost2,
        isEditedPostBeingScheduled: isEditedPostBeingScheduled2,
        getEditedPostVisibility: getEditedPostVisibility2,
        isCurrentPostPublished: isCurrentPostPublished2,
        isEditedPostSaveable: isEditedPostSaveable2,
        isEditedPostPublishable: isEditedPostPublishable2,
        isPostSavingLocked: isPostSavingLocked2,
        getCurrentPost: getCurrentPost2,
        getCurrentPostType: getCurrentPostType2,
        getCurrentPostId: getCurrentPostId2,
        hasNonPostEntityChanges: hasNonPostEntityChanges2,
        isSavingNonPostEntityChanges: isSavingNonPostEntityChanges2,
        getEditedPostAttribute: getEditedPostAttribute2,
        getPostEdits: getPostEdits2
      } = select4(store);
      return {
        isSaving: isSavingPost2(),
        isAutoSaving: isAutosavingPost2(),
        isBeingScheduled: isEditedPostBeingScheduled2(),
        visibility: getEditedPostVisibility2(),
        isSaveable: isEditedPostSaveable2(),
        isPostSavingLocked: isPostSavingLocked2(),
        isPublishable: isEditedPostPublishable2(),
        isPublished: isCurrentPostPublished2(),
        hasPublishAction: getCurrentPost2()._links?.["wp:action-publish"] ?? false,
        postType: getCurrentPostType2(),
        postId: getCurrentPostId2(),
        postStatus: getEditedPostAttribute2("status"),
        postStatusHasChanged: getPostEdits2()?.status,
        hasNonPostEntityChanges: hasNonPostEntityChanges2(),
        isSavingNonPostEntityChanges: isSavingNonPostEntityChanges2()
      };
    }),
    (0, import_data108.withDispatch)((dispatch5) => {
      const { editPost: editPost2, savePost: savePost2 } = dispatch5(store);
      return {
        savePostStatus: (status) => {
          editPost2({ status }, { undoIgnore: true });
          savePost2();
        }
      };
    })
  ])(PostPublishButton);

  // packages/editor/build-module/components/post-publish-panel/index.js
  var import_jsx_runtime176 = __toESM(require_jsx_runtime());
  var import_i18n112 = __toESM(require_i18n());
  var import_element79 = __toESM(require_element());
  var import_components88 = __toESM(require_components());
  var import_data122 = __toESM(require_data());
  var import_compose27 = __toESM(require_compose());
  var import_core_data75 = __toESM(require_core_data());

  // packages/editor/build-module/components/post-publish-panel/prepublish.js
  var import_jsx_runtime174 = __toESM(require_jsx_runtime());
  var import_i18n110 = __toESM(require_i18n());
  var import_components86 = __toESM(require_components());
  var import_data120 = __toESM(require_data());
  var import_url14 = __toESM(require_url());
  var import_core_data73 = __toESM(require_core_data());
  var import_html_entities21 = __toESM(require_html_entities());

  // packages/editor/build-module/components/post-visibility/index.js
  var import_jsx_runtime165 = __toESM(require_jsx_runtime());
  var import_i18n101 = __toESM(require_i18n());
  var import_element71 = __toESM(require_element());
  var import_components78 = __toESM(require_components());
  var import_compose23 = __toESM(require_compose());
  var import_data109 = __toESM(require_data());
  var import_block_editor37 = __toESM(require_block_editor());

  // packages/editor/build-module/components/post-visibility/utils.js
  var import_i18n100 = __toESM(require_i18n());
  var VISIBILITY_OPTIONS = [
    {
      label: (0, import_i18n100.__)("Public"),
      value: "public",
      description: (0, import_i18n100.__)("Visible to everyone.")
    },
    {
      label: (0, import_i18n100.__)("Private"),
      value: "private",
      description: (0, import_i18n100.__)("Only visible to site admins and editors.")
    },
    {
      label: (0, import_i18n100.__)("Password protected"),
      value: "password",
      description: (0, import_i18n100.__)("Only visible to those who know the password.")
    }
  ];

  // packages/editor/build-module/components/post-visibility/index.js
  function PostVisibility({ onClose }) {
    const instanceId = (0, import_compose23.useInstanceId)(PostVisibility);
    const { status, visibility, password } = (0, import_data109.useSelect)((select4) => ({
      status: select4(store).getEditedPostAttribute("status"),
      visibility: select4(store).getEditedPostVisibility(),
      password: select4(store).getEditedPostAttribute("password")
    }));
    const { editPost: editPost2 } = (0, import_data109.useDispatch)(store);
    const [hasPassword, setHasPassword] = (0, import_element71.useState)(!!password);
    function updateVisibility(value) {
      const nextValues = {
        public: {
          status: visibility === "private" ? "draft" : status,
          password: ""
        },
        private: { status: "private", password: "" },
        password: {
          status: visibility === "private" ? "draft" : status,
          password: password || ""
        }
      };
      editPost2(nextValues[value]);
      setHasPassword(value === "password");
    }
    const updatePassword = (value) => {
      editPost2({ password: value });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime165.jsxs)("div", { className: "editor-post-visibility", children: [
      /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(
        import_block_editor37.__experimentalInspectorPopoverHeader,
        {
          title: (0, import_i18n101.__)("Visibility"),
          help: (0, import_i18n101.__)("Control how this post is viewed."),
          onClose
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime165.jsxs)(import_components78.__experimentalVStack, { spacing: 4, children: [
        /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(
          import_components78.RadioControl,
          {
            label: (0, import_i18n101.__)("Visibility"),
            hideLabelFromVision: true,
            options: VISIBILITY_OPTIONS,
            selected: hasPassword ? "password" : visibility,
            onChange: updateVisibility
          }
        ),
        hasPassword && /* @__PURE__ */ (0, import_jsx_runtime165.jsx)(
          import_components78.TextControl,
          {
            label: (0, import_i18n101.__)("Password"),
            onChange: updatePassword,
            value: password,
            placeholder: (0, import_i18n101.__)("Use a secure password"),
            type: "text",
            id: `editor-post-visibility__password-input-${instanceId}`,
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true,
            maxLength: 255
          }
        )
      ] })
    ] });
  }

  // packages/editor/build-module/components/post-visibility/label.js
  var import_data110 = __toESM(require_data());
  function PostVisibilityLabel() {
    return usePostVisibilityLabel();
  }
  function usePostVisibilityLabel() {
    const visibility = (0, import_data110.useSelect)(
      (select4) => select4(store).getEditedPostVisibility(),
      []
    );
    return VISIBILITY_OPTIONS.find((option) => option.value === visibility)?.label;
  }

  // packages/editor/build-module/components/post-schedule/index.js
  var import_jsx_runtime166 = __toESM(require_jsx_runtime());

  // node_modules/date-fns/toDate.mjs
  function toDate(argument) {
    const argStr = Object.prototype.toString.call(argument);
    if (argument instanceof Date || typeof argument === "object" && argStr === "[object Date]") {
      return new argument.constructor(+argument);
    } else if (typeof argument === "number" || argStr === "[object Number]" || typeof argument === "string" || argStr === "[object String]") {
      return new Date(argument);
    } else {
      return /* @__PURE__ */ new Date(NaN);
    }
  }

  // node_modules/date-fns/constants.mjs
  var daysInYear = 365.2425;
  var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
  var minTime = -maxTime;
  var millisecondsInMinute = 6e4;
  var millisecondsInHour = 36e5;
  var secondsInHour = 3600;
  var secondsInDay = secondsInHour * 24;
  var secondsInWeek = secondsInDay * 7;
  var secondsInYear = secondsInDay * daysInYear;
  var secondsInMonth = secondsInYear / 12;
  var secondsInQuarter = secondsInMonth * 3;

  // node_modules/date-fns/endOfMonth.mjs
  function endOfMonth(date) {
    const _date = toDate(date);
    const month = _date.getMonth();
    _date.setFullYear(_date.getFullYear(), month + 1, 0);
    _date.setHours(23, 59, 59, 999);
    return _date;
  }

  // node_modules/date-fns/startOfMonth.mjs
  function startOfMonth(date) {
    const _date = toDate(date);
    _date.setDate(1);
    _date.setHours(0, 0, 0, 0);
    return _date;
  }

  // node_modules/date-fns/parseISO.mjs
  function parseISO(argument, options) {
    const additionalDigits = options?.additionalDigits ?? 2;
    const dateStrings = splitDateString(argument);
    let date;
    if (dateStrings.date) {
      const parseYearResult = parseYear(dateStrings.date, additionalDigits);
      date = parseDate(parseYearResult.restDateString, parseYearResult.year);
    }
    if (!date || isNaN(date.getTime())) {
      return /* @__PURE__ */ new Date(NaN);
    }
    const timestamp = date.getTime();
    let time = 0;
    let offset3;
    if (dateStrings.time) {
      time = parseTime(dateStrings.time);
      if (isNaN(time)) {
        return /* @__PURE__ */ new Date(NaN);
      }
    }
    if (dateStrings.timezone) {
      offset3 = parseTimezone(dateStrings.timezone);
      if (isNaN(offset3)) {
        return /* @__PURE__ */ new Date(NaN);
      }
    } else {
      const dirtyDate = new Date(timestamp + time);
      const result = /* @__PURE__ */ new Date(0);
      result.setFullYear(
        dirtyDate.getUTCFullYear(),
        dirtyDate.getUTCMonth(),
        dirtyDate.getUTCDate()
      );
      result.setHours(
        dirtyDate.getUTCHours(),
        dirtyDate.getUTCMinutes(),
        dirtyDate.getUTCSeconds(),
        dirtyDate.getUTCMilliseconds()
      );
      return result;
    }
    return new Date(timestamp + time + offset3);
  }
  var patterns = {
    dateTimeDelimiter: /[T ]/,
    timeZoneDelimiter: /[Z ]/i,
    timezone: /([Z+-].*)$/
  };
  var dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
  var timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
  var timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
  function splitDateString(dateString) {
    const dateStrings = {};
    const array = dateString.split(patterns.dateTimeDelimiter);
    let timeString;
    if (array.length > 2) {
      return dateStrings;
    }
    if (/:/.test(array[0])) {
      timeString = array[0];
    } else {
      dateStrings.date = array[0];
      timeString = array[1];
      if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
        dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
        timeString = dateString.substr(
          dateStrings.date.length,
          dateString.length
        );
      }
    }
    if (timeString) {
      const token = patterns.timezone.exec(timeString);
      if (token) {
        dateStrings.time = timeString.replace(token[1], "");
        dateStrings.timezone = token[1];
      } else {
        dateStrings.time = timeString;
      }
    }
    return dateStrings;
  }
  function parseYear(dateString, additionalDigits) {
    const regex = new RegExp(
      "^(?:(\\d{4}|[+-]\\d{" + (4 + additionalDigits) + "})|(\\d{2}|[+-]\\d{" + (2 + additionalDigits) + "})$)"
    );
    const captures = dateString.match(regex);
    if (!captures) return { year: NaN, restDateString: "" };
    const year = captures[1] ? parseInt(captures[1]) : null;
    const century = captures[2] ? parseInt(captures[2]) : null;
    return {
      year: century === null ? year : century * 100,
      restDateString: dateString.slice((captures[1] || captures[2]).length)
    };
  }
  function parseDate(dateString, year) {
    if (year === null) return /* @__PURE__ */ new Date(NaN);
    const captures = dateString.match(dateRegex);
    if (!captures) return /* @__PURE__ */ new Date(NaN);
    const isWeekDate = !!captures[4];
    const dayOfYear = parseDateUnit(captures[1]);
    const month = parseDateUnit(captures[2]) - 1;
    const day = parseDateUnit(captures[3]);
    const week = parseDateUnit(captures[4]);
    const dayOfWeek = parseDateUnit(captures[5]) - 1;
    if (isWeekDate) {
      if (!validateWeekDate(year, week, dayOfWeek)) {
        return /* @__PURE__ */ new Date(NaN);
      }
      return dayOfISOWeekYear(year, week, dayOfWeek);
    } else {
      const date = /* @__PURE__ */ new Date(0);
      if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) {
        return /* @__PURE__ */ new Date(NaN);
      }
      date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
      return date;
    }
  }
  function parseDateUnit(value) {
    return value ? parseInt(value) : 1;
  }
  function parseTime(timeString) {
    const captures = timeString.match(timeRegex);
    if (!captures) return NaN;
    const hours = parseTimeUnit(captures[1]);
    const minutes = parseTimeUnit(captures[2]);
    const seconds = parseTimeUnit(captures[3]);
    if (!validateTime(hours, minutes, seconds)) {
      return NaN;
    }
    return hours * millisecondsInHour + minutes * millisecondsInMinute + seconds * 1e3;
  }
  function parseTimeUnit(value) {
    return value && parseFloat(value.replace(",", ".")) || 0;
  }
  function parseTimezone(timezoneString) {
    if (timezoneString === "Z") return 0;
    const captures = timezoneString.match(timezoneRegex);
    if (!captures) return 0;
    const sign = captures[1] === "+" ? -1 : 1;
    const hours = parseInt(captures[2]);
    const minutes = captures[3] && parseInt(captures[3]) || 0;
    if (!validateTimezone(hours, minutes)) {
      return NaN;
    }
    return sign * (hours * millisecondsInHour + minutes * millisecondsInMinute);
  }
  function dayOfISOWeekYear(isoWeekYear, week, day) {
    const date = /* @__PURE__ */ new Date(0);
    date.setUTCFullYear(isoWeekYear, 0, 4);
    const fourthOfJanuaryDay = date.getUTCDay() || 7;
    const diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
    date.setUTCDate(date.getUTCDate() + diff);
    return date;
  }
  var daysInMonths = [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
  function isLeapYearIndex(year) {
    return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
  }
  function validateDate(year, month, date) {
    return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
  }
  function validateDayOfYearDate(year, dayOfYear) {
    return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
  }
  function validateWeekDate(_year, week, day) {
    return week >= 1 && week <= 53 && day >= 0 && day <= 6;
  }
  function validateTime(hours, minutes, seconds) {
    if (hours === 24) {
      return minutes === 0 && seconds === 0;
    }
    return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
  }
  function validateTimezone(_hours, minutes) {
    return minutes >= 0 && minutes <= 59;
  }

  // packages/editor/build-module/components/post-schedule/index.js
  var import_date4 = __toESM(require_date());
  var import_i18n102 = __toESM(require_i18n());
  var import_data111 = __toESM(require_data());
  var import_block_editor38 = __toESM(require_block_editor());
  var import_element72 = __toESM(require_element());
  var import_core_data66 = __toESM(require_core_data());
  var { PrivatePublishDateTimePicker } = unlock(import_block_editor38.privateApis);
  function PostSchedule(props) {
    return /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(
      PrivatePostSchedule,
      {
        ...props,
        showPopoverHeaderActions: true,
        isCompact: false
      }
    );
  }
  function PrivatePostSchedule({
    onClose,
    showPopoverHeaderActions,
    isCompact
  }) {
    const { postDate, postType: postType2 } = (0, import_data111.useSelect)(
      (select4) => ({
        postDate: select4(store).getEditedPostAttribute("date"),
        postType: select4(store).getCurrentPostType()
      }),
      []
    );
    const { editPost: editPost2 } = (0, import_data111.useDispatch)(store);
    const onUpdateDate = (date) => editPost2({ date });
    const [previewedMonth, setPreviewedMonth] = (0, import_element72.useState)(
      startOfMonth(new Date(postDate))
    );
    const eventsByPostType = (0, import_data111.useSelect)(
      (select4) => select4(import_core_data66.store).getEntityRecords("postType", postType2, {
        status: "publish,future",
        after: startOfMonth(previewedMonth).toISOString(),
        before: endOfMonth(previewedMonth).toISOString(),
        exclude: [select4(store).getCurrentPostId()],
        per_page: 100,
        _fields: "id,date"
      }),
      [previewedMonth, postType2]
    );
    const events = (0, import_element72.useMemo)(
      () => (eventsByPostType || []).map(({ date: eventDate }) => ({
        date: new Date(eventDate)
      })),
      [eventsByPostType]
    );
    const settings = (0, import_date4.getSettings)();
    const is12HourTime = /a(?!\\)/i.test(
      settings.formats.time.toLowerCase().replace(/\\\\/g, "").split("").reverse().join("")
      // Reverse the string and test for "a" not followed by a slash.
    );
    return /* @__PURE__ */ (0, import_jsx_runtime166.jsx)(
      PrivatePublishDateTimePicker,
      {
        currentDate: postDate,
        onChange: onUpdateDate,
        is12Hour: is12HourTime,
        dateOrder: (
          /* translators: Order of day, month, and year. Available formats are 'dmy', 'mdy', and 'ymd'. */
          (0, import_i18n102._x)("dmy", "date order")
        ),
        events,
        onMonthPreviewed: (date) => setPreviewedMonth(parseISO(date)),
        onClose,
        isCompact,
        showPopoverHeaderActions
      }
    );
  }

  // packages/editor/build-module/components/post-schedule/label.js
  var import_i18n103 = __toESM(require_i18n());
  var import_date5 = __toESM(require_date());
  var import_data112 = __toESM(require_data());
  function PostScheduleLabel(props) {
    return usePostScheduleLabel(props);
  }
  function usePostScheduleLabel({ full = false } = {}) {
    const { date, isFloating } = (0, import_data112.useSelect)(
      (select4) => ({
        date: select4(store).getEditedPostAttribute("date"),
        isFloating: select4(store).isEditedPostDateFloating()
      }),
      []
    );
    return full ? getFullPostScheduleLabel(date) : getPostScheduleLabel(date, { isFloating });
  }
  function getFullPostScheduleLabel(dateAttribute) {
    const date = (0, import_date5.getDate)(dateAttribute);
    const timezoneAbbreviation = getTimezoneAbbreviation();
    const formattedDate = (0, import_date5.dateI18n)(
      // translators: Use a non-breaking space between 'g:i' and 'a' if appropriate.
      (0, import_i18n103._x)("F j, Y g:i\xA0a", "post schedule full date format"),
      date
    );
    return (0, import_i18n103.isRTL)() ? `${timezoneAbbreviation} ${formattedDate}` : `${formattedDate} ${timezoneAbbreviation}`;
  }
  function getPostScheduleLabel(dateAttribute, { isFloating = false, now = /* @__PURE__ */ new Date() } = {}) {
    if (!dateAttribute || isFloating) {
      return (0, import_i18n103.__)("Immediately");
    }
    if (!isTimezoneSameAsSiteTimezone(now)) {
      return getFullPostScheduleLabel(dateAttribute);
    }
    const date = (0, import_date5.getDate)(dateAttribute);
    if (isSameDay(date, now)) {
      return (0, import_i18n103.sprintf)(
        // translators: %s: Time of day the post is scheduled for.
        (0, import_i18n103.__)("Today at %s"),
        // translators: If using a space between 'g:i' and 'a', use a non-breaking space.
        (0, import_date5.dateI18n)((0, import_i18n103._x)("g:i\xA0a", "post schedule time format"), date)
      );
    }
    const tomorrow = new Date(now);
    tomorrow.setDate(tomorrow.getDate() + 1);
    if (isSameDay(date, tomorrow)) {
      return (0, import_i18n103.sprintf)(
        // translators: %s: Time of day the post is scheduled for.
        (0, import_i18n103.__)("Tomorrow at %s"),
        // translators: If using a space between 'g:i' and 'a', use a non-breaking space.
        (0, import_date5.dateI18n)((0, import_i18n103._x)("g:i\xA0a", "post schedule time format"), date)
      );
    }
    if (date.getFullYear() === now.getFullYear()) {
      return (0, import_date5.dateI18n)(
        // translators: If using a space between 'g:i' and 'a', use a non-breaking space.
        (0, import_i18n103._x)("F j g:i\xA0a", "post schedule date format without year"),
        date
      );
    }
    return (0, import_date5.dateI18n)(
      // translators: Use a non-breaking space between 'g:i' and 'a' if appropriate.
      (0, import_i18n103._x)("F j, Y g:i\xA0a", "post schedule full date format"),
      date
    );
  }
  function getTimezoneAbbreviation() {
    const { timezone } = (0, import_date5.getSettings)();
    if (timezone.abbr && isNaN(Number(timezone.abbr))) {
      return timezone.abbr;
    }
    const symbol = timezone.offset < 0 ? "" : "+";
    return `UTC${symbol}${timezone.offsetFormatted}`;
  }
  function isTimezoneSameAsSiteTimezone(date) {
    const { timezone } = (0, import_date5.getSettings)();
    const siteOffset = Number(timezone.offset);
    const dateOffset = -1 * (date.getTimezoneOffset() / 60);
    return siteOffset === dateOffset;
  }
  function isSameDay(left, right) {
    return left.getDate() === right.getDate() && left.getMonth() === right.getMonth() && left.getFullYear() === right.getFullYear();
  }

  // packages/editor/build-module/components/post-publish-panel/maybe-tags-panel.js
  var import_jsx_runtime169 = __toESM(require_jsx_runtime());
  var import_i18n105 = __toESM(require_i18n());
  var import_element74 = __toESM(require_element());
  var import_data115 = __toESM(require_data());
  var import_components81 = __toESM(require_components());
  var import_core_data69 = __toESM(require_core_data());

  // packages/editor/build-module/components/post-taxonomies/flat-term-selector.js
  var import_jsx_runtime168 = __toESM(require_jsx_runtime());
  var import_i18n104 = __toESM(require_i18n());
  var import_element73 = __toESM(require_element());
  var import_components80 = __toESM(require_components());
  var import_data114 = __toESM(require_data());
  var import_deprecated9 = __toESM(require_deprecated());
  var import_core_data68 = __toESM(require_core_data());
  var import_compose24 = __toESM(require_compose());
  var import_a11y2 = __toESM(require_a11y());
  var import_notices22 = __toESM(require_notices());

  // packages/editor/build-module/components/post-taxonomies/most-used-terms.js
  var import_jsx_runtime167 = __toESM(require_jsx_runtime());
  var import_components79 = __toESM(require_components());
  var import_data113 = __toESM(require_data());
  var import_core_data67 = __toESM(require_core_data());
  var MIN_MOST_USED_TERMS = 3;
  var DEFAULT_QUERY = {
    per_page: 10,
    orderby: "count",
    order: "desc",
    hide_empty: true,
    _fields: "id,name,count",
    context: "view"
  };
  function MostUsedTerms({ onSelect, taxonomy }) {
    const { _terms, showTerms } = (0, import_data113.useSelect)(
      (select4) => {
        const mostUsedTerms = select4(import_core_data67.store).getEntityRecords(
          "taxonomy",
          taxonomy.slug,
          DEFAULT_QUERY
        );
        return {
          _terms: mostUsedTerms,
          showTerms: mostUsedTerms?.length >= MIN_MOST_USED_TERMS
        };
      },
      [taxonomy.slug]
    );
    if (!showTerms) {
      return null;
    }
    const terms = unescapeTerms(_terms);
    return /* @__PURE__ */ (0, import_jsx_runtime167.jsxs)("div", { className: "editor-post-taxonomies__flat-term-most-used", children: [
      /* @__PURE__ */ (0, import_jsx_runtime167.jsx)(
        import_components79.BaseControl.VisualLabel,
        {
          as: "h3",
          className: "editor-post-taxonomies__flat-term-most-used-label",
          children: taxonomy.labels.most_used
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime167.jsx)(
        "ul",
        {
          role: "list",
          className: "editor-post-taxonomies__flat-term-most-used-list",
          children: terms.map((term) => /* @__PURE__ */ (0, import_jsx_runtime167.jsx)("li", { children: /* @__PURE__ */ (0, import_jsx_runtime167.jsx)(
            import_components79.Button,
            {
              __next40pxDefaultSize: true,
              variant: "link",
              onClick: () => onSelect(term),
              children: term.name
            }
          ) }, term.id))
        }
      )
    ] });
  }

  // packages/editor/build-module/components/post-taxonomies/flat-term-selector.js
  var EMPTY_ARRAY3 = [];
  var MAX_TERMS_SUGGESTIONS = 100;
  var DEFAULT_QUERY2 = {
    per_page: MAX_TERMS_SUGGESTIONS,
    _fields: "id,name",
    context: "view"
  };
  var isSameTermName = (termA, termB) => unescapeString(termA).toLowerCase() === unescapeString(termB).toLowerCase();
  var termNamesToIds = (names, terms) => {
    return names.map(
      (termName) => terms.find((term) => isSameTermName(term.name, termName))?.id
    ).filter((id) => id !== void 0);
  };
  var Wrapper = ({ children, __nextHasNoMarginBottom }) => __nextHasNoMarginBottom ? /* @__PURE__ */ (0, import_jsx_runtime168.jsx)(import_components80.__experimentalVStack, { spacing: 4, children }) : /* @__PURE__ */ (0, import_jsx_runtime168.jsx)(import_element73.Fragment, { children });
  function FlatTermSelector({ slug, __nextHasNoMarginBottom }) {
    const [values, setValues] = (0, import_element73.useState)([]);
    const [search, setSearch] = (0, import_element73.useState)("");
    const debouncedSearch = (0, import_compose24.useDebounce)(setSearch, 500);
    if (!__nextHasNoMarginBottom) {
      (0, import_deprecated9.default)(
        "Bottom margin styles for wp.editor.PostTaxonomiesFlatTermSelector",
        {
          since: "6.7",
          version: "7.0",
          hint: "Set the `__nextHasNoMarginBottom` prop to true to start opting into the new styles, which will become the default in a future version."
        }
      );
    }
    const {
      terms,
      termIds,
      taxonomy,
      hasAssignAction,
      hasCreateAction,
      hasResolvedTerms
    } = (0, import_data114.useSelect)(
      (select4) => {
        const { getCurrentPost: getCurrentPost2, getEditedPostAttribute: getEditedPostAttribute2 } = select4(store);
        const { getEntityRecords, getEntityRecord, hasFinishedResolution } = select4(import_core_data68.store);
        const post = getCurrentPost2();
        const _taxonomy = getEntityRecord("root", "taxonomy", slug);
        const _termIds = _taxonomy ? getEditedPostAttribute2(_taxonomy.rest_base) : EMPTY_ARRAY3;
        const query = {
          ...DEFAULT_QUERY2,
          include: _termIds?.join(","),
          per_page: -1
        };
        return {
          hasCreateAction: _taxonomy ? post._links?.["wp:action-create-" + _taxonomy.rest_base] ?? false : false,
          hasAssignAction: _taxonomy ? post._links?.["wp:action-assign-" + _taxonomy.rest_base] ?? false : false,
          taxonomy: _taxonomy,
          termIds: _termIds,
          terms: _termIds?.length ? getEntityRecords("taxonomy", slug, query) : EMPTY_ARRAY3,
          hasResolvedTerms: hasFinishedResolution("getEntityRecords", [
            "taxonomy",
            slug,
            query
          ])
        };
      },
      [slug]
    );
    const { searchResults } = (0, import_data114.useSelect)(
      (select4) => {
        const { getEntityRecords } = select4(import_core_data68.store);
        return {
          searchResults: !!search ? getEntityRecords("taxonomy", slug, {
            ...DEFAULT_QUERY2,
            search
          }) : EMPTY_ARRAY3
        };
      },
      [search, slug]
    );
    (0, import_element73.useEffect)(() => {
      if (hasResolvedTerms) {
        const newValues = (terms ?? []).map(
          (term) => unescapeString(term.name)
        );
        setValues(newValues);
      }
    }, [terms, hasResolvedTerms]);
    const suggestions = (0, import_element73.useMemo)(() => {
      return (searchResults ?? []).map(
        (term) => unescapeString(term.name)
      );
    }, [searchResults]);
    const { editPost: editPost2 } = (0, import_data114.useDispatch)(store);
    const { saveEntityRecord } = (0, import_data114.useDispatch)(import_core_data68.store);
    const { createErrorNotice } = (0, import_data114.useDispatch)(import_notices22.store);
    if (!hasAssignAction) {
      return null;
    }
    async function findOrCreateTerm(term) {
      try {
        const newTerm = await saveEntityRecord("taxonomy", slug, term, {
          throwOnError: true
        });
        return unescapeTerm(newTerm);
      } catch (error) {
        if (error.code !== "term_exists") {
          throw error;
        }
        return {
          id: error.data.term_id,
          name: term.name
        };
      }
    }
    function onUpdateTerms(newTermIds) {
      editPost2({ [taxonomy.rest_base]: newTermIds });
    }
    function onChange(termNames) {
      const availableTerms = [
        ...terms ?? [],
        ...searchResults ?? []
      ];
      const uniqueTerms = termNames.reduce((acc, name) => {
        if (!acc.some((n2) => n2.toLowerCase() === name.toLowerCase())) {
          acc.push(name);
        }
        return acc;
      }, []);
      const newTermNames = uniqueTerms.filter(
        (termName) => !availableTerms.find(
          (term) => isSameTermName(term.name, termName)
        )
      );
      setValues(uniqueTerms);
      if (newTermNames.length === 0) {
        onUpdateTerms(termNamesToIds(uniqueTerms, availableTerms));
        return;
      }
      if (!hasCreateAction) {
        return;
      }
      Promise.all(
        newTermNames.map(
          (termName) => findOrCreateTerm({ name: termName })
        )
      ).then((newTerms) => {
        const newAvailableTerms = availableTerms.concat(newTerms);
        onUpdateTerms(
          termNamesToIds(uniqueTerms, newAvailableTerms)
        );
      }).catch((error) => {
        createErrorNotice(error.message, {
          type: "snackbar"
        });
        onUpdateTerms(termNamesToIds(uniqueTerms, availableTerms));
      });
    }
    function appendTerm(newTerm) {
      if (termIds.includes(newTerm.id)) {
        return;
      }
      const newTermIds = [...termIds, newTerm.id];
      const defaultName = slug === "post_tag" ? (0, import_i18n104.__)("Tag") : (0, import_i18n104.__)("Term");
      const termAddedMessage = (0, import_i18n104.sprintf)(
        /* translators: %s: term name. */
        (0, import_i18n104._x)("%s added", "term"),
        taxonomy?.labels?.singular_name ?? defaultName
      );
      (0, import_a11y2.speak)(termAddedMessage, "assertive");
      onUpdateTerms(newTermIds);
    }
    const newTermLabel = taxonomy?.labels?.add_new_item ?? (slug === "post_tag" ? (0, import_i18n104.__)("Add Tag") : (0, import_i18n104.__)("Add Term"));
    const singularName = taxonomy?.labels?.singular_name ?? (slug === "post_tag" ? (0, import_i18n104.__)("Tag") : (0, import_i18n104.__)("Term"));
    const termAddedLabel = (0, import_i18n104.sprintf)(
      /* translators: %s: term name. */
      (0, import_i18n104._x)("%s added", "term"),
      singularName
    );
    const termRemovedLabel = (0, import_i18n104.sprintf)(
      /* translators: %s: term name. */
      (0, import_i18n104._x)("%s removed", "term"),
      singularName
    );
    const removeTermLabel = (0, import_i18n104.sprintf)(
      /* translators: %s: term name. */
      (0, import_i18n104._x)("Remove %s", "term"),
      singularName
    );
    return /* @__PURE__ */ (0, import_jsx_runtime168.jsxs)(Wrapper, { __nextHasNoMarginBottom, children: [
      /* @__PURE__ */ (0, import_jsx_runtime168.jsx)(
        import_components80.FormTokenField,
        {
          __next40pxDefaultSize: true,
          value: values,
          suggestions,
          onChange,
          onInputChange: debouncedSearch,
          maxSuggestions: MAX_TERMS_SUGGESTIONS,
          label: newTermLabel,
          messages: {
            added: termAddedLabel,
            removed: termRemovedLabel,
            remove: removeTermLabel
          },
          __nextHasNoMarginBottom
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime168.jsx)(MostUsedTerms, { taxonomy, onSelect: appendTerm })
    ] });
  }
  var flat_term_selector_default = (0, import_components80.withFilters)("editor.PostTaxonomyType")(FlatTermSelector);

  // packages/editor/build-module/components/post-publish-panel/maybe-tags-panel.js
  var TagsPanel = () => {
    const tagLabels = (0, import_data115.useSelect)((select4) => {
      const taxonomy = select4(import_core_data69.store).getTaxonomy("post_tag");
      return taxonomy?.labels;
    }, []);
    const addNewItem = tagLabels?.add_new_item ?? (0, import_i18n105.__)("Add tag");
    const tagLabel = tagLabels?.name ?? (0, import_i18n105.__)("Tags");
    const panelBodyTitle = [
      (0, import_i18n105.__)("Suggestion:"),
      /* @__PURE__ */ (0, import_jsx_runtime169.jsx)("span", { className: "editor-post-publish-panel__link", children: addNewItem }, "label")
    ];
    return /* @__PURE__ */ (0, import_jsx_runtime169.jsxs)(import_components81.PanelBody, { initialOpen: false, title: panelBodyTitle, children: [
      /* @__PURE__ */ (0, import_jsx_runtime169.jsx)("p", { children: (0, import_i18n105.sprintf)(
        // translators: %s is the taxonomy name (e.g., "Tags").
        (0, import_i18n105.__)(
          "%s help users and search engines navigate your site and find your content. Add a few keywords to describe your post."
        ),
        tagLabel
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(flat_term_selector_default, { slug: "post_tag", __nextHasNoMarginBottom: true })
    ] });
  };
  var MaybeTagsPanel = () => {
    const { postHasTags, siteHasTags, isPostTypeSupported } = (0, import_data115.useSelect)(
      (select4) => {
        const postType2 = select4(store).getCurrentPostType();
        const tagsTaxonomy = select4(import_core_data69.store).getEntityRecord(
          "root",
          "taxonomy",
          "post_tag"
        );
        const _isPostTypeSupported = tagsTaxonomy?.types?.includes(postType2);
        const areTagsFetched = tagsTaxonomy !== void 0;
        const tags = tagsTaxonomy && select4(store).getEditedPostAttribute(
          tagsTaxonomy.rest_base
        );
        const siteTags = _isPostTypeSupported ? !!select4(import_core_data69.store).getEntityRecords(
          "taxonomy",
          "post_tag",
          { per_page: 1 }
        )?.length : false;
        return {
          postHasTags: !!tags?.length,
          siteHasTags: siteTags,
          isPostTypeSupported: areTagsFetched && _isPostTypeSupported
        };
      },
      []
    );
    const [hadTagsWhenOpeningThePanel] = (0, import_element74.useState)(postHasTags);
    if (!isPostTypeSupported || !siteHasTags) {
      return null;
    }
    if (!hadTagsWhenOpeningThePanel) {
      return /* @__PURE__ */ (0, import_jsx_runtime169.jsx)(TagsPanel, {});
    }
    return null;
  };
  var maybe_tags_panel_default = MaybeTagsPanel;

  // packages/editor/build-module/components/post-publish-panel/maybe-post-format-panel.js
  var import_jsx_runtime170 = __toESM(require_jsx_runtime());
  var import_components82 = __toESM(require_components());
  var import_data116 = __toESM(require_data());
  var import_i18n106 = __toESM(require_i18n());
  var import_core_data70 = __toESM(require_core_data());
  var getSuggestion = (supportedFormats, suggestedPostFormat) => {
    const formats = POST_FORMATS.filter(
      (format) => supportedFormats?.includes(format.id)
    );
    return formats.find((format) => format.id === suggestedPostFormat);
  };
  var PostFormatSuggestion = ({
    suggestedPostFormat,
    suggestionText,
    onUpdatePostFormat
  }) => /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(
    import_components82.Button,
    {
      __next40pxDefaultSize: true,
      variant: "link",
      onClick: () => onUpdatePostFormat(suggestedPostFormat),
      children: suggestionText
    }
  );
  function PostFormatPanel() {
    const { currentPostFormat, suggestion } = (0, import_data116.useSelect)((select4) => {
      const { getEditedPostAttribute: getEditedPostAttribute2, getSuggestedPostFormat: getSuggestedPostFormat2 } = select4(store);
      const supportedFormats = select4(import_core_data70.store).getThemeSupports().formats ?? [];
      return {
        currentPostFormat: getEditedPostAttribute2("format"),
        suggestion: getSuggestion(
          supportedFormats,
          getSuggestedPostFormat2()
        )
      };
    }, []);
    const { editPost: editPost2 } = (0, import_data116.useDispatch)(store);
    const onUpdatePostFormat = (format) => editPost2({ format });
    const panelBodyTitle = [
      (0, import_i18n106.__)("Suggestion:"),
      /* @__PURE__ */ (0, import_jsx_runtime170.jsx)("span", { className: "editor-post-publish-panel__link", children: (0, import_i18n106.__)("Use a post format") }, "label")
    ];
    if (!suggestion || suggestion.id === currentPostFormat) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime170.jsxs)(import_components82.PanelBody, { initialOpen: false, title: panelBodyTitle, children: [
      /* @__PURE__ */ (0, import_jsx_runtime170.jsx)("p", { children: (0, import_i18n106.__)(
        "Your theme uses post formats to highlight different kinds of content, like images or videos. Apply a post format to see this special styling."
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime170.jsx)("p", { children: /* @__PURE__ */ (0, import_jsx_runtime170.jsx)(
        PostFormatSuggestion,
        {
          onUpdatePostFormat,
          suggestedPostFormat: suggestion.id,
          suggestionText: (0, import_i18n106.sprintf)(
            /* translators: %1s: post format */
            (0, import_i18n106.__)('Apply the "%1$s" format.'),
            suggestion.caption
          )
        }
      ) })
    ] });
  }

  // packages/editor/build-module/components/post-publish-panel/maybe-category-panel.js
  var import_jsx_runtime172 = __toESM(require_jsx_runtime());
  var import_i18n108 = __toESM(require_i18n());
  var import_data118 = __toESM(require_data());
  var import_components84 = __toESM(require_components());
  var import_core_data72 = __toESM(require_core_data());
  var import_element76 = __toESM(require_element());

  // packages/editor/build-module/components/post-taxonomies/hierarchical-term-selector.js
  var import_jsx_runtime171 = __toESM(require_jsx_runtime());
  var import_i18n107 = __toESM(require_i18n());
  var import_element75 = __toESM(require_element());
  var import_notices23 = __toESM(require_notices());
  var import_components83 = __toESM(require_components());
  var import_data117 = __toESM(require_data());
  var import_compose25 = __toESM(require_compose());
  var import_core_data71 = __toESM(require_core_data());
  var import_a11y3 = __toESM(require_a11y());
  var import_html_entities20 = __toESM(require_html_entities());
  var { normalizeTextString } = unlock(import_components83.privateApis);
  var { RECEIVE_INTERMEDIATE_RESULTS } = unlock(import_core_data71.privateApis);
  var DEFAULT_QUERY3 = {
    per_page: -1,
    orderby: "name",
    order: "asc",
    _fields: "id,name,parent",
    context: "view",
    [RECEIVE_INTERMEDIATE_RESULTS]: true
  };
  var MIN_TERMS_COUNT_FOR_FILTER = 8;
  var EMPTY_ARRAY4 = [];
  function sortBySelected(termsTree, terms) {
    const treeHasSelection = (termTree) => {
      if (terms.indexOf(termTree.id) !== -1) {
        return true;
      }
      if (void 0 === termTree.children) {
        return false;
      }
      return termTree.children.map(treeHasSelection).filter((child) => child).length > 0;
    };
    const termOrChildIsSelected = (termA, termB) => {
      const termASelected = treeHasSelection(termA);
      const termBSelected = treeHasSelection(termB);
      if (termASelected === termBSelected) {
        return 0;
      }
      if (termASelected && !termBSelected) {
        return -1;
      }
      if (!termASelected && termBSelected) {
        return 1;
      }
      return 0;
    };
    const newTermTree = [...termsTree];
    newTermTree.sort(termOrChildIsSelected);
    return newTermTree;
  }
  function findTerm(terms, parent, name) {
    return terms.find((term) => {
      return (!term.parent && !parent || parseInt(term.parent) === parseInt(parent)) && term.name.toLowerCase() === name.toLowerCase();
    });
  }
  function getFilterMatcher(filterValue) {
    const matchTermsForFilter = (originalTerm) => {
      if ("" === filterValue) {
        return originalTerm;
      }
      const term = { ...originalTerm };
      if (term.children.length > 0) {
        term.children = term.children.map(matchTermsForFilter).filter((child) => child);
      }
      if (-1 !== normalizeTextString(term.name).indexOf(
        normalizeTextString(filterValue)
      ) || term.children.length > 0) {
        return term;
      }
      return false;
    };
    return matchTermsForFilter;
  }
  function HierarchicalTermSelector({ slug }) {
    const [adding, setAdding] = (0, import_element75.useState)(false);
    const [formName, setFormName] = (0, import_element75.useState)("");
    const [formParent, setFormParent] = (0, import_element75.useState)("");
    const [showForm, setShowForm] = (0, import_element75.useState)(false);
    const [filterValue, setFilterValue] = (0, import_element75.useState)("");
    const [filteredTermsTree, setFilteredTermsTree] = (0, import_element75.useState)([]);
    const debouncedSpeak = (0, import_compose25.useDebounce)(import_a11y3.speak, 500);
    const {
      hasCreateAction,
      hasAssignAction,
      terms,
      loading,
      availableTerms,
      taxonomy
    } = (0, import_data117.useSelect)(
      (select4) => {
        const { getCurrentPost: getCurrentPost2, getEditedPostAttribute: getEditedPostAttribute2 } = select4(store);
        const { getEntityRecord, getEntityRecords, isResolving } = select4(import_core_data71.store);
        const _taxonomy = getEntityRecord("root", "taxonomy", slug);
        const post = getCurrentPost2();
        return {
          hasCreateAction: _taxonomy ? !!post._links?.["wp:action-create-" + _taxonomy.rest_base] : false,
          hasAssignAction: _taxonomy ? !!post._links?.["wp:action-assign-" + _taxonomy.rest_base] : false,
          terms: _taxonomy ? getEditedPostAttribute2(_taxonomy.rest_base) : EMPTY_ARRAY4,
          loading: isResolving("getEntityRecords", [
            "taxonomy",
            slug,
            DEFAULT_QUERY3
          ]),
          availableTerms: getEntityRecords("taxonomy", slug, DEFAULT_QUERY3) || EMPTY_ARRAY4,
          taxonomy: _taxonomy
        };
      },
      [slug]
    );
    const { editPost: editPost2 } = (0, import_data117.useDispatch)(store);
    const { saveEntityRecord } = (0, import_data117.useDispatch)(import_core_data71.store);
    const availableTermsTree = (0, import_element75.useMemo)(
      () => sortBySelected(buildTermsTree2(availableTerms), terms),
      // Remove `terms` from the dependency list to avoid reordering every time
      // checking or unchecking a term.
      [availableTerms]
    );
    const { createErrorNotice } = (0, import_data117.useDispatch)(import_notices23.store);
    if (!hasAssignAction) {
      return null;
    }
    const addTerm = (term) => {
      return saveEntityRecord("taxonomy", slug, term, {
        throwOnError: true
      });
    };
    const onUpdateTerms = (termIds) => {
      editPost2({ [taxonomy.rest_base]: termIds });
    };
    const onChange = (termId) => {
      const hasTerm = terms.includes(termId);
      const newTerms = hasTerm ? terms.filter((id) => id !== termId) : [...terms, termId];
      onUpdateTerms(newTerms);
    };
    const onChangeFormName = (value) => {
      setFormName(value);
    };
    const onChangeFormParent = (parentId) => {
      setFormParent(parentId);
    };
    const onToggleForm = () => {
      setShowForm(!showForm);
    };
    const onAddTerm = async (event) => {
      event.preventDefault();
      if (formName === "" || adding) {
        return;
      }
      const existingTerm = findTerm(availableTerms, formParent, formName);
      if (existingTerm) {
        if (!terms.some((term) => term === existingTerm.id)) {
          onUpdateTerms([...terms, existingTerm.id]);
        }
        setFormName("");
        setFormParent("");
        return;
      }
      setAdding(true);
      let newTerm;
      try {
        newTerm = await addTerm({
          name: formName,
          parent: formParent ? formParent : void 0
        });
      } catch (error) {
        createErrorNotice(error.message, {
          type: "snackbar"
        });
        return;
      }
      const defaultName = slug === "category" ? (0, import_i18n107.__)("Category") : (0, import_i18n107.__)("Term");
      const termAddedMessage = (0, import_i18n107.sprintf)(
        /* translators: %s: term name. */
        (0, import_i18n107._x)("%s added", "term"),
        taxonomy?.labels?.singular_name ?? defaultName
      );
      (0, import_a11y3.speak)(termAddedMessage, "assertive");
      setAdding(false);
      setFormName("");
      setFormParent("");
      onUpdateTerms([...terms, newTerm.id]);
    };
    const setFilter = (value) => {
      const newFilteredTermsTree = availableTermsTree.map(getFilterMatcher(value)).filter((term) => term);
      const getResultCount = (termsTree) => {
        let count = 0;
        for (let i2 = 0; i2 < termsTree.length; i2++) {
          count++;
          if (void 0 !== termsTree[i2].children) {
            count += getResultCount(termsTree[i2].children);
          }
        }
        return count;
      };
      setFilterValue(value);
      setFilteredTermsTree(newFilteredTermsTree);
      const resultCount = getResultCount(newFilteredTermsTree);
      const resultsFoundMessage = (0, import_i18n107.sprintf)(
        /* translators: %d: number of results. */
        (0, import_i18n107._n)("%d result found.", "%d results found.", resultCount),
        resultCount
      );
      debouncedSpeak(resultsFoundMessage, "assertive");
    };
    const renderTerms = (renderedTerms) => {
      return renderedTerms.map((term) => {
        return /* @__PURE__ */ (0, import_jsx_runtime171.jsxs)(
          "div",
          {
            className: "editor-post-taxonomies__hierarchical-terms-choice",
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(
                import_components83.CheckboxControl,
                {
                  __nextHasNoMarginBottom: true,
                  checked: terms.indexOf(term.id) !== -1,
                  onChange: () => {
                    const termId = parseInt(term.id, 10);
                    onChange(termId);
                  },
                  label: (0, import_html_entities20.decodeEntities)(term.name)
                }
              ),
              !!term.children.length && /* @__PURE__ */ (0, import_jsx_runtime171.jsx)("div", { className: "editor-post-taxonomies__hierarchical-terms-subchoices", children: renderTerms(term.children) })
            ]
          },
          term.id
        );
      });
    };
    const labelWithFallback = (labelProperty, fallbackIsCategory, fallbackIsNotCategory) => taxonomy?.labels?.[labelProperty] ?? (slug === "category" ? fallbackIsCategory : fallbackIsNotCategory);
    const newTermButtonLabel = labelWithFallback(
      "add_new_item",
      (0, import_i18n107.__)("Add Category"),
      (0, import_i18n107.__)("Add Term")
    );
    const newTermLabel = labelWithFallback(
      "new_item_name",
      (0, import_i18n107.__)("Add Category"),
      (0, import_i18n107.__)("Add Term")
    );
    const parentSelectLabel = labelWithFallback(
      "parent_item",
      (0, import_i18n107.__)("Parent Category"),
      (0, import_i18n107.__)("Parent Term")
    );
    const noParentOption = `\u2014 ${parentSelectLabel} \u2014`;
    const newTermSubmitLabel = newTermButtonLabel;
    const filterLabel = taxonomy?.labels?.search_items ?? (0, import_i18n107.__)("Search Terms");
    const groupLabel = taxonomy?.name ?? (0, import_i18n107.__)("Terms");
    const showFilter = availableTerms.length >= MIN_TERMS_COUNT_FOR_FILTER;
    return /* @__PURE__ */ (0, import_jsx_runtime171.jsxs)(import_components83.Flex, { direction: "column", gap: "4", children: [
      showFilter && !loading && /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(
        import_components83.SearchControl,
        {
          __next40pxDefaultSize: true,
          __nextHasNoMarginBottom: true,
          label: filterLabel,
          placeholder: filterLabel,
          value: filterValue,
          onChange: setFilter
        }
      ),
      loading && /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(
        import_components83.Flex,
        {
          justify: "center",
          style: {
            // Match SearchControl height to prevent layout shift.
            height: "40px"
          },
          children: /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(import_components83.Spinner, {})
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(
        "div",
        {
          className: "editor-post-taxonomies__hierarchical-terms-list",
          tabIndex: "0",
          role: "group",
          "aria-label": groupLabel,
          children: renderTerms(
            "" !== filterValue ? filteredTermsTree : availableTermsTree
          )
        }
      ),
      !loading && hasCreateAction && /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(import_components83.FlexItem, { children: /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(
        import_components83.Button,
        {
          __next40pxDefaultSize: true,
          onClick: onToggleForm,
          className: "editor-post-taxonomies__hierarchical-terms-add",
          "aria-expanded": showForm,
          variant: "link",
          children: newTermButtonLabel
        }
      ) }),
      showForm && /* @__PURE__ */ (0, import_jsx_runtime171.jsx)("form", { onSubmit: onAddTerm, children: /* @__PURE__ */ (0, import_jsx_runtime171.jsxs)(import_components83.Flex, { direction: "column", gap: "4", children: [
        /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(
          import_components83.TextControl,
          {
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true,
            className: "editor-post-taxonomies__hierarchical-terms-input",
            label: newTermLabel,
            value: formName,
            onChange: onChangeFormName,
            required: true
          }
        ),
        !!availableTerms.length && /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(
          import_components83.TreeSelect,
          {
            __next40pxDefaultSize: true,
            __nextHasNoMarginBottom: true,
            label: parentSelectLabel,
            noOptionLabel: noParentOption,
            onChange: onChangeFormParent,
            selectedId: formParent,
            tree: availableTermsTree
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(import_components83.FlexItem, { children: /* @__PURE__ */ (0, import_jsx_runtime171.jsx)(
          import_components83.Button,
          {
            __next40pxDefaultSize: true,
            variant: "secondary",
            type: "submit",
            className: "editor-post-taxonomies__hierarchical-terms-submit",
            children: newTermSubmitLabel
          }
        ) })
      ] }) })
    ] });
  }
  var hierarchical_term_selector_default = (0, import_components83.withFilters)("editor.PostTaxonomyType")(
    HierarchicalTermSelector
  );

  // packages/editor/build-module/components/post-publish-panel/maybe-category-panel.js
  function MaybeCategoryPanel() {
    const { hasNoCategory, hasSiteCategories } = (0, import_data118.useSelect)((select4) => {
      const postType2 = select4(store).getCurrentPostType();
      const { canUser, getEntityRecord } = select4(import_core_data72.store);
      const categoriesTaxonomy = getEntityRecord(
        "root",
        "taxonomy",
        "category"
      );
      const defaultCategoryId = canUser("read", {
        kind: "root",
        name: "site"
      }) ? getEntityRecord("root", "site")?.default_category : void 0;
      const defaultCategory = defaultCategoryId ? getEntityRecord("taxonomy", "category", defaultCategoryId) : void 0;
      const postTypeSupportsCategories = categoriesTaxonomy && categoriesTaxonomy.types.some((type) => type === postType2);
      const categories = categoriesTaxonomy && select4(store).getEditedPostAttribute(
        categoriesTaxonomy.rest_base
      );
      const siteCategories = postTypeSupportsCategories ? !!select4(import_core_data72.store).getEntityRecords("taxonomy", "category", {
        exclude: [defaultCategoryId],
        per_page: 1
      })?.length : false;
      const noCategory = !!categoriesTaxonomy && !!defaultCategory && postTypeSupportsCategories && (categories?.length === 0 || categories?.length === 1 && defaultCategory?.id === categories[0]);
      return {
        hasNoCategory: noCategory,
        hasSiteCategories: siteCategories
      };
    }, []);
    const [shouldShowPanel, setShouldShowPanel] = (0, import_element76.useState)(false);
    (0, import_element76.useEffect)(() => {
      if (hasNoCategory) {
        setShouldShowPanel(true);
      }
    }, [hasNoCategory]);
    if (!shouldShowPanel || !hasSiteCategories) {
      return null;
    }
    const panelBodyTitle = [
      (0, import_i18n108.__)("Suggestion:"),
      /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("span", { className: "editor-post-publish-panel__link", children: (0, import_i18n108.__)("Assign a category") }, "label")
    ];
    return /* @__PURE__ */ (0, import_jsx_runtime172.jsxs)(import_components84.PanelBody, { initialOpen: false, title: panelBodyTitle, children: [
      /* @__PURE__ */ (0, import_jsx_runtime172.jsx)("p", { children: (0, import_i18n108.__)(
        "Categories provide a helpful way to group related posts together and to quickly tell readers what a post is about."
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime172.jsx)(hierarchical_term_selector_default, { slug: "category" })
    ] });
  }
  var maybe_category_panel_default = MaybeCategoryPanel;

  // packages/editor/build-module/components/post-publish-panel/maybe-upload-media.js
  var import_jsx_runtime173 = __toESM(require_jsx_runtime());
  var import_components85 = __toESM(require_components());
  var import_data119 = __toESM(require_data());
  var import_i18n109 = __toESM(require_i18n());
  var import_block_editor39 = __toESM(require_block_editor());
  var import_element77 = __toESM(require_element());
  var import_blob3 = __toESM(require_blob());

  // packages/editor/build-module/components/post-publish-panel/media-util.js
  var import_url13 = __toESM(require_url());
  function generateUniqueBasenames(urls) {
    const basenames = /* @__PURE__ */ new Set();
    return Object.fromEntries(
      urls.map((url) => {
        const filename = (0, import_url13.getFilename)(url);
        let basename = "";
        if (filename) {
          const parts = filename.split(".");
          if (parts.length > 1) {
            parts.pop();
          }
          basename = parts.join(".");
        }
        if (!basename) {
          basename = v4_default();
        }
        if (basenames.has(basename)) {
          basename = `${basename}-${v4_default()}`;
        }
        basenames.add(basename);
        return [url, basename];
      })
    );
  }
  function fetchMedia(urls) {
    return Object.fromEntries(
      Object.entries(generateUniqueBasenames(urls)).map(
        ([url, basename]) => {
          const filePromise = window.fetch(url.includes("?") ? url : url + "?").then((response) => response.blob()).then((blob) => {
            return new File([blob], `${basename}.png`, {
              type: blob.type
            });
          });
          return [url, filePromise];
        }
      )
    );
  }

  // packages/editor/build-module/components/post-publish-panel/maybe-upload-media.js
  function flattenBlocks(blocks) {
    const result = [];
    blocks.forEach((block) => {
      result.push(block);
      result.push(...flattenBlocks(block.innerBlocks));
    });
    return result;
  }
  function hasExternalMedia(block) {
    if (block.name === "core/image" || block.name === "core/cover") {
      return block.attributes.url && !block.attributes.id;
    }
    if (block.name === "core/media-text") {
      return block.attributes.mediaUrl && !block.attributes.mediaId;
    }
    return void 0;
  }
  function getMediaInfo(block) {
    if (block.name === "core/image" || block.name === "core/cover") {
      const { url, alt, id } = block.attributes;
      return { url, alt, id };
    }
    if (block.name === "core/media-text") {
      const { mediaUrl: url, mediaAlt: alt, mediaId: id } = block.attributes;
      return { url, alt, id };
    }
    return {};
  }
  function Image({ clientId, alt, url }) {
    const { selectBlock: selectBlock2 } = (0, import_data119.useDispatch)(import_block_editor39.store);
    return /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(
      import_components85.__unstableMotion.img,
      {
        tabIndex: 0,
        role: "button",
        "aria-label": (0, import_i18n109.__)("Select image block."),
        onClick: () => {
          selectBlock2(clientId);
        },
        onKeyDown: (event) => {
          if (event.key === "Enter" || event.key === " ") {
            selectBlock2(clientId);
            event.preventDefault();
          }
        },
        alt,
        src: url,
        animate: { opacity: 1 },
        exit: { opacity: 0, scale: 0 },
        style: {
          width: "32px",
          height: "32px",
          objectFit: "cover",
          borderRadius: "2px",
          cursor: "pointer"
        },
        whileHover: { scale: 1.08 }
      },
      clientId
    );
  }
  function MaybeUploadMediaPanel() {
    const [isUploading, setIsUploading] = (0, import_element77.useState)(false);
    const [isAnimating, setIsAnimating] = (0, import_element77.useState)(false);
    const [hadUploadError, setHadUploadError] = (0, import_element77.useState)(false);
    const { editorBlocks, mediaUpload: mediaUpload2 } = (0, import_data119.useSelect)(
      (select4) => ({
        editorBlocks: select4(import_block_editor39.store).getBlocks(),
        mediaUpload: select4(import_block_editor39.store).getSettings().mediaUpload
      }),
      []
    );
    const blocksWithExternalMedia = flattenBlocks(editorBlocks).filter(
      (block) => hasExternalMedia(block)
    );
    const { updateBlockAttributes: updateBlockAttributes2 } = (0, import_data119.useDispatch)(import_block_editor39.store);
    if (!mediaUpload2 || !blocksWithExternalMedia.length) {
      return null;
    }
    const panelBodyTitle = [
      (0, import_i18n109.__)("Suggestion:"),
      /* @__PURE__ */ (0, import_jsx_runtime173.jsx)("span", { className: "editor-post-publish-panel__link", children: (0, import_i18n109.__)("External media") }, "label")
    ];
    function updateBlockWithUploadedMedia(block, media) {
      if (block.name === "core/image" || block.name === "core/cover") {
        updateBlockAttributes2(block.clientId, {
          id: media.id,
          url: media.url
        });
      }
      if (block.name === "core/media-text") {
        updateBlockAttributes2(block.clientId, {
          mediaId: media.id,
          mediaUrl: media.url
        });
      }
    }
    function uploadImages() {
      setIsUploading(true);
      setHadUploadError(false);
      const mediaUrls = new Set(
        blocksWithExternalMedia.map((block) => {
          const { url } = getMediaInfo(block);
          return url;
        })
      );
      const uploadPromises = Object.fromEntries(
        Object.entries(fetchMedia([...mediaUrls])).map(
          ([url, filePromise]) => {
            const uploadPromise = filePromise.then(
              (blob) => new Promise((resolve, reject) => {
                mediaUpload2({
                  filesList: [blob],
                  onFileChange: ([media]) => {
                    if ((0, import_blob3.isBlobURL)(media.url)) {
                      return;
                    }
                    resolve(media);
                  },
                  onError() {
                    reject();
                  }
                });
              })
            );
            return [url, uploadPromise];
          }
        )
      );
      Promise.allSettled(
        blocksWithExternalMedia.map((block) => {
          const { url } = getMediaInfo(block);
          return uploadPromises[url].then(
            (media) => updateBlockWithUploadedMedia(block, media)
          ).then(() => setIsAnimating(true)).catch(() => setHadUploadError(true));
        })
      ).finally(() => {
        setIsUploading(false);
      });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime173.jsxs)(import_components85.PanelBody, { initialOpen: true, title: panelBodyTitle, children: [
      /* @__PURE__ */ (0, import_jsx_runtime173.jsx)("p", { children: (0, import_i18n109.__)(
        "Upload external images to the Media Library. Images from different domains may load slowly, display incorrectly, or be removed unexpectedly."
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime173.jsxs)(
        "div",
        {
          style: {
            display: "inline-flex",
            flexWrap: "wrap",
            gap: "8px"
          },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(
              import_components85.__unstableAnimatePresence,
              {
                onExitComplete: () => setIsAnimating(false),
                children: blocksWithExternalMedia.map((block) => {
                  const { url, alt } = getMediaInfo(block);
                  return /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(
                    Image,
                    {
                      clientId: block.clientId,
                      url,
                      alt
                    },
                    block.clientId
                  );
                })
              }
            ),
            isUploading || isAnimating ? /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(import_components85.Spinner, {}) : /* @__PURE__ */ (0, import_jsx_runtime173.jsx)(
              import_components85.Button,
              {
                size: "compact",
                variant: "primary",
                onClick: uploadImages,
                children: (0, import_i18n109._x)("Upload", "verb")
              }
            )
          ]
        }
      ),
      hadUploadError && /* @__PURE__ */ (0, import_jsx_runtime173.jsx)("p", { children: (0, import_i18n109.__)("Upload failed, try again.") })
    ] });
  }

  // packages/editor/build-module/components/post-publish-panel/prepublish.js
  function PostPublishPanelPrepublish({ children }) {
    const {
      isBeingScheduled,
      isRequestingSiteIcon,
      hasPublishAction,
      siteIconUrl,
      siteTitle,
      siteHome
    } = (0, import_data120.useSelect)((select4) => {
      const { getCurrentPost: getCurrentPost2, isEditedPostBeingScheduled: isEditedPostBeingScheduled2 } = select4(store);
      const { getEntityRecord, isResolving } = select4(import_core_data73.store);
      const siteData = getEntityRecord("root", "__unstableBase", void 0) || {};
      return {
        hasPublishAction: getCurrentPost2()._links?.["wp:action-publish"] ?? false,
        isBeingScheduled: isEditedPostBeingScheduled2(),
        isRequestingSiteIcon: isResolving("getEntityRecord", [
          "root",
          "__unstableBase",
          void 0
        ]),
        siteIconUrl: siteData.site_icon_url,
        siteTitle: siteData.name,
        siteHome: siteData.home && (0, import_url14.filterURLForDisplay)(siteData.home)
      };
    }, []);
    let siteIcon = /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(import_components86.Icon, { className: "components-site-icon", size: "36px", icon: wordpress_default });
    if (siteIconUrl) {
      siteIcon = /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(
        "img",
        {
          alt: (0, import_i18n110.__)("Site Icon"),
          className: "components-site-icon",
          src: siteIconUrl
        }
      );
    }
    if (isRequestingSiteIcon) {
      siteIcon = null;
    }
    let prePublishTitle, prePublishBodyText;
    if (!hasPublishAction) {
      prePublishTitle = (0, import_i18n110.__)("Are you ready to submit for review?");
      prePublishBodyText = (0, import_i18n110.__)(
        "Your work will be reviewed and then approved."
      );
    } else if (isBeingScheduled) {
      prePublishTitle = (0, import_i18n110.__)("Are you ready to schedule?");
      prePublishBodyText = (0, import_i18n110.__)(
        "Your work will be published at the specified date and time."
      );
    } else {
      prePublishTitle = (0, import_i18n110.__)("Are you ready to publish?");
      prePublishBodyText = (0, import_i18n110.__)(
        "Double-check your settings before publishing."
      );
    }
    return /* @__PURE__ */ (0, import_jsx_runtime174.jsxs)("div", { className: "editor-post-publish-panel__prepublish", children: [
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)("div", { children: /* @__PURE__ */ (0, import_jsx_runtime174.jsx)("strong", { children: prePublishTitle }) }),
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)("p", { children: prePublishBodyText }),
      /* @__PURE__ */ (0, import_jsx_runtime174.jsxs)("div", { className: "components-site-card", children: [
        siteIcon,
        /* @__PURE__ */ (0, import_jsx_runtime174.jsxs)("div", { className: "components-site-info", children: [
          /* @__PURE__ */ (0, import_jsx_runtime174.jsx)("span", { className: "components-site-name", children: (0, import_html_entities21.decodeEntities)(siteTitle) || (0, import_i18n110.__)("(Untitled)") }),
          /* @__PURE__ */ (0, import_jsx_runtime174.jsx)("span", { className: "components-site-home", children: siteHome })
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(MaybeUploadMediaPanel, {}),
      hasPublishAction && /* @__PURE__ */ (0, import_jsx_runtime174.jsxs)(import_jsx_runtime174.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(
          import_components86.PanelBody,
          {
            initialOpen: false,
            title: [
              (0, import_i18n110.__)("Visibility:"),
              /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(
                "span",
                {
                  className: "editor-post-publish-panel__link",
                  children: /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(PostVisibilityLabel, {})
                },
                "label"
              )
            ],
            children: /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(PostVisibility, {})
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(
          import_components86.PanelBody,
          {
            initialOpen: false,
            title: [
              (0, import_i18n110.__)("Publish:"),
              /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(
                "span",
                {
                  className: "editor-post-publish-panel__link",
                  children: /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(PostScheduleLabel, {})
                },
                "label"
              )
            ],
            children: /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(PostSchedule, {})
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(PostFormatPanel, {}),
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(maybe_tags_panel_default, {}),
      /* @__PURE__ */ (0, import_jsx_runtime174.jsx)(maybe_category_panel_default, {}),
      children
    ] });
  }
  var prepublish_default = PostPublishPanelPrepublish;

  // packages/editor/build-module/components/post-publish-panel/postpublish.js
  var import_jsx_runtime175 = __toESM(require_jsx_runtime());
  var import_components87 = __toESM(require_components());
  var import_i18n111 = __toESM(require_i18n());
  var import_element78 = __toESM(require_element());
  var import_data121 = __toESM(require_data());
  var import_url15 = __toESM(require_url());
  var import_html_entities22 = __toESM(require_html_entities());
  var import_compose26 = __toESM(require_compose());
  var import_core_data74 = __toESM(require_core_data());
  var POSTNAME = "%postname%";
  var PAGENAME = "%pagename%";
  var getFuturePostUrl = (post) => {
    const { slug } = post;
    if (post.permalink_template.includes(POSTNAME)) {
      return post.permalink_template.replace(POSTNAME, slug);
    }
    if (post.permalink_template.includes(PAGENAME)) {
      return post.permalink_template.replace(PAGENAME, slug);
    }
    return post.permalink_template;
  };
  function CopyButton2({ text }) {
    const [showCopyConfirmation, setShowCopyConfirmation] = (0, import_element78.useState)(false);
    const timeoutIdRef = (0, import_element78.useRef)();
    const ref = (0, import_compose26.useCopyToClipboard)(text, () => {
      setShowCopyConfirmation(true);
      if (timeoutIdRef.current) {
        clearTimeout(timeoutIdRef.current);
      }
      timeoutIdRef.current = setTimeout(() => {
        setShowCopyConfirmation(false);
      }, 4e3);
    });
    (0, import_element78.useEffect)(() => {
      return () => {
        if (timeoutIdRef.current) {
          clearTimeout(timeoutIdRef.current);
        }
      };
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(import_components87.Button, { __next40pxDefaultSize: true, variant: "secondary", ref, children: showCopyConfirmation ? (0, import_i18n111.__)("Copied!") : (0, import_i18n111.__)("Copy") });
  }
  function PostPublishPanelPostpublish({
    focusOnMount,
    children
  }) {
    const { post, postType: postType2, isScheduled } = (0, import_data121.useSelect)((select4) => {
      const {
        getEditedPostAttribute: getEditedPostAttribute2,
        getCurrentPost: getCurrentPost2,
        isCurrentPostScheduled: isCurrentPostScheduled2
      } = select4(store);
      const { getPostType } = select4(import_core_data74.store);
      return {
        post: getCurrentPost2(),
        postType: getPostType(getEditedPostAttribute2("type")),
        isScheduled: isCurrentPostScheduled2()
      };
    }, []);
    const postLabel = postType2?.labels?.singular_name;
    const viewPostLabel = postType2?.labels?.view_item;
    const addNewPostLabel = postType2?.labels?.add_new_item;
    const link = post.status === "future" ? getFuturePostUrl(post) : post.link;
    const addLink = (0, import_url15.addQueryArgs)("post-new.php", {
      post_type: post.type
    });
    const postLinkRef = (0, import_element78.useCallback)(
      (node) => {
        if (focusOnMount && node) {
          node.focus();
        }
      },
      [focusOnMount]
    );
    const postPublishNonLinkHeader = isScheduled ? /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)(import_jsx_runtime175.Fragment, { children: [
      (0, import_i18n111.__)("is now scheduled. It will go live on"),
      " ",
      /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(PostScheduleLabel, {}),
      "."
    ] }) : (0, import_i18n111.__)("is now live.");
    return /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)("div", { className: "post-publish-panel__postpublish", children: [
      /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)(import_components87.PanelBody, { className: "post-publish-panel__postpublish-header", children: [
        /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(import_components87.ExternalLink, { ref: postLinkRef, href: link, children: (0, import_html_entities22.decodeEntities)(post.title) || (0, import_i18n111.__)("(no title)") }),
        " ",
        postPublishNonLinkHeader
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)(import_components87.PanelBody, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime175.jsx)("p", { className: "post-publish-panel__postpublish-subheader", children: /* @__PURE__ */ (0, import_jsx_runtime175.jsx)("strong", { children: (0, import_i18n111.__)("What\u2019s next?") }) }),
        /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)("div", { className: "post-publish-panel__postpublish-post-address-container", children: [
          /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(
            import_components87.TextControl,
            {
              __next40pxDefaultSize: true,
              __nextHasNoMarginBottom: true,
              className: "post-publish-panel__postpublish-post-address",
              readOnly: true,
              label: (0, import_i18n111.sprintf)(
                /* translators: %s: post type singular name */
                (0, import_i18n111.__)("%s address"),
                postLabel
              ),
              value: (0, import_url15.safeDecodeURIComponent)(link),
              onFocus: (event) => event.target.select()
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime175.jsx)("div", { className: "post-publish-panel__postpublish-post-address__copy-button-wrap", children: /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(CopyButton2, { text: link }) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)("div", { className: "post-publish-panel__postpublish-buttons", children: [
          !isScheduled && /* @__PURE__ */ (0, import_jsx_runtime175.jsxs)(
            import_components87.Button,
            {
              variant: "primary",
              href: link,
              __next40pxDefaultSize: true,
              icon: external_default,
              iconPosition: "right",
              target: "_blank",
              children: [
                viewPostLabel,
                /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(import_components87.VisuallyHidden, {
                  as: "span",
                  /* translators: accessibility text */
                  children: (0, import_i18n111.__)("(opens in a new tab)")
                })
              ]
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime175.jsx)(
            import_components87.Button,
            {
              variant: isScheduled ? "primary" : "secondary",
              __next40pxDefaultSize: true,
              href: addLink,
              children: addNewPostLabel
            }
          )
        ] })
      ] }),
      children
    ] });
  }

  // packages/editor/build-module/components/post-publish-panel/index.js
  var PostPublishPanel = class extends import_element79.Component {
    constructor() {
      super(...arguments);
      this.onSubmit = this.onSubmit.bind(this);
      this.cancelButtonNode = (0, import_element79.createRef)();
    }
    componentDidMount() {
      this.timeoutID = setTimeout(() => {
        this.cancelButtonNode.current.focus();
      }, 0);
    }
    componentWillUnmount() {
      clearTimeout(this.timeoutID);
    }
    componentDidUpdate(prevProps) {
      if (prevProps.isPublished && !this.props.isSaving && this.props.isDirty || this.props.currentPostId !== prevProps.currentPostId) {
        this.props.onClose();
      }
    }
    onSubmit() {
      const { onClose, hasPublishAction, isPostTypeViewable } = this.props;
      if (!hasPublishAction || !isPostTypeViewable) {
        onClose();
      }
    }
    render() {
      const {
        forceIsDirty,
        isBeingScheduled,
        isPublished,
        isPublishSidebarEnabled: isPublishSidebarEnabled2,
        isScheduled,
        isSaving,
        isSavingNonPostEntityChanges: isSavingNonPostEntityChanges2,
        onClose,
        onTogglePublishSidebar,
        PostPublishExtension,
        PrePublishExtension,
        currentPostId,
        ...additionalProps
      } = this.props;
      const {
        hasPublishAction,
        isDirty,
        isPostTypeViewable,
        ...propsForPanel
      } = additionalProps;
      const isPublishedOrScheduled = isPublished || isScheduled && isBeingScheduled;
      const isPrePublish = !isPublishedOrScheduled && !isSaving;
      const isPostPublish = isPublishedOrScheduled && !isSaving;
      return /* @__PURE__ */ (0, import_jsx_runtime176.jsxs)("div", { className: "editor-post-publish-panel", ...propsForPanel, children: [
        /* @__PURE__ */ (0, import_jsx_runtime176.jsx)("div", { className: "editor-post-publish-panel__header", children: isPostPublish ? /* @__PURE__ */ (0, import_jsx_runtime176.jsx)(
          import_components88.Button,
          {
            size: "compact",
            onClick: onClose,
            icon: close_small_default,
            label: (0, import_i18n112.__)("Close panel")
          }
        ) : /* @__PURE__ */ (0, import_jsx_runtime176.jsxs)(import_jsx_runtime176.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime176.jsx)("div", { className: "editor-post-publish-panel__header-cancel-button", children: /* @__PURE__ */ (0, import_jsx_runtime176.jsx)(
            import_components88.Button,
            {
              ref: this.cancelButtonNode,
              accessibleWhenDisabled: true,
              disabled: isSavingNonPostEntityChanges2,
              onClick: onClose,
              variant: "secondary",
              size: "compact",
              children: (0, import_i18n112.__)("Cancel")
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime176.jsx)("div", { className: "editor-post-publish-panel__header-publish-button", children: /* @__PURE__ */ (0, import_jsx_runtime176.jsx)(
            post_publish_button_default,
            {
              onSubmit: this.onSubmit,
              forceIsDirty
            }
          ) })
        ] }) }),
        /* @__PURE__ */ (0, import_jsx_runtime176.jsxs)("div", { className: "editor-post-publish-panel__content", children: [
          isPrePublish && /* @__PURE__ */ (0, import_jsx_runtime176.jsx)(prepublish_default, { children: PrePublishExtension && /* @__PURE__ */ (0, import_jsx_runtime176.jsx)(PrePublishExtension, {}) }),
          isPostPublish && /* @__PURE__ */ (0, import_jsx_runtime176.jsx)(PostPublishPanelPostpublish, { focusOnMount: true, children: PostPublishExtension && /* @__PURE__ */ (0, import_jsx_runtime176.jsx)(PostPublishExtension, {}) }),
          isSaving && /* @__PURE__ */ (0, import_jsx_runtime176.jsx)(import_components88.Spinner, {})
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime176.jsx)("div", { className: "editor-post-publish-panel__footer", children: /* @__PURE__ */ (0, import_jsx_runtime176.jsx)(
          import_components88.CheckboxControl,
          {
            __nextHasNoMarginBottom: true,
            label: (0, import_i18n112.__)("Always show pre-publish checks."),
            checked: isPublishSidebarEnabled2,
            onChange: onTogglePublishSidebar
          }
        ) })
      ] });
    }
  };
  var post_publish_panel_default = (0, import_compose27.compose)([
    (0, import_data122.withSelect)((select4) => {
      const { getPostType } = select4(import_core_data75.store);
      const {
        getCurrentPost: getCurrentPost2,
        getCurrentPostId: getCurrentPostId2,
        getEditedPostAttribute: getEditedPostAttribute2,
        isCurrentPostPublished: isCurrentPostPublished2,
        isCurrentPostScheduled: isCurrentPostScheduled2,
        isEditedPostBeingScheduled: isEditedPostBeingScheduled2,
        isEditedPostDirty: isEditedPostDirty2,
        isAutosavingPost: isAutosavingPost2,
        isSavingPost: isSavingPost2,
        isSavingNonPostEntityChanges: isSavingNonPostEntityChanges2
      } = select4(store);
      const { isPublishSidebarEnabled: isPublishSidebarEnabled2 } = select4(store);
      const postType2 = getPostType(getEditedPostAttribute2("type"));
      return {
        hasPublishAction: getCurrentPost2()._links?.["wp:action-publish"] ?? false,
        isPostTypeViewable: postType2?.viewable,
        isBeingScheduled: isEditedPostBeingScheduled2(),
        isDirty: isEditedPostDirty2(),
        isPublished: isCurrentPostPublished2(),
        isPublishSidebarEnabled: isPublishSidebarEnabled2(),
        isSaving: isSavingPost2() && !isAutosavingPost2(),
        isSavingNonPostEntityChanges: isSavingNonPostEntityChanges2(),
        isScheduled: isCurrentPostScheduled2(),
        currentPostId: getCurrentPostId2()
      };
    }),
    (0, import_data122.withDispatch)((dispatch5, { isPublishSidebarEnabled: isPublishSidebarEnabled2 }) => {
      const { disablePublishSidebar: disablePublishSidebar2, enablePublishSidebar: enablePublishSidebar2 } = dispatch5(store);
      return {
        onTogglePublishSidebar: () => {
          if (isPublishSidebarEnabled2) {
            disablePublishSidebar2();
          } else {
            enablePublishSidebar2();
          }
        }
      };
    }),
    import_components88.withFocusReturn,
    import_components88.withConstrainedTabbing
  ])(PostPublishPanel);

  // packages/editor/build-module/components/post-saved-state/index.js
  var import_jsx_runtime179 = __toESM(require_jsx_runtime());
  var import_components91 = __toESM(require_components());
  var import_compose29 = __toESM(require_compose());
  var import_data126 = __toESM(require_data());
  var import_element81 = __toESM(require_element());
  var import_i18n115 = __toESM(require_i18n());
  var import_keycodes6 = __toESM(require_keycodes());
  var import_preferences13 = __toESM(require_preferences());

  // packages/editor/build-module/components/post-status/index.js
  var import_jsx_runtime178 = __toESM(require_jsx_runtime());
  var import_components90 = __toESM(require_components());
  var import_i18n114 = __toESM(require_i18n());
  var import_data125 = __toESM(require_data());
  var import_element80 = __toESM(require_element());
  var import_core_data76 = __toESM(require_core_data());
  var import_block_editor40 = __toESM(require_block_editor());
  var import_compose28 = __toESM(require_compose());

  // packages/editor/build-module/components/post-sticky/index.js
  var import_jsx_runtime177 = __toESM(require_jsx_runtime());
  var import_i18n113 = __toESM(require_i18n());
  var import_components89 = __toESM(require_components());
  var import_data124 = __toESM(require_data());

  // packages/editor/build-module/components/post-sticky/check.js
  var import_data123 = __toESM(require_data());
  function PostStickyCheck({ children }) {
    const { hasStickyAction, postType: postType2 } = (0, import_data123.useSelect)((select4) => {
      const post = select4(store).getCurrentPost();
      return {
        hasStickyAction: post._links?.["wp:action-sticky"] ?? false,
        postType: select4(store).getCurrentPostType()
      };
    }, []);
    if (postType2 !== "post" || !hasStickyAction) {
      return null;
    }
    return children;
  }

  // packages/editor/build-module/components/post-sticky/index.js
  function PostSticky() {
    const postSticky = (0, import_data124.useSelect)((select4) => {
      return select4(store).getEditedPostAttribute("sticky") ?? false;
    }, []);
    const { editPost: editPost2 } = (0, import_data124.useDispatch)(store);
    return /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(PostStickyCheck, { children: /* @__PURE__ */ (0, import_jsx_runtime177.jsx)(
      import_components89.CheckboxControl,
      {
        className: "editor-post-sticky__checkbox-control",
        label: (0, import_i18n113.__)("Sticky"),
        help: (0, import_i18n113.__)("Pin this post to the top of the blog."),
        checked: postSticky,
        onChange: () => editPost2({ sticky: !postSticky }),
        __nextHasNoMarginBottom: true
      }
    ) });
  }

  // packages/editor/build-module/components/post-status/index.js
  var postStatusesInfo = {
    "auto-draft": { label: (0, import_i18n114.__)("Draft"), icon: drafts_default },
    draft: { label: (0, import_i18n114.__)("Draft"), icon: drafts_default },
    pending: { label: (0, import_i18n114.__)("Pending"), icon: pending_default },
    private: { label: (0, import_i18n114.__)("Private"), icon: not_allowed_default },
    future: { label: (0, import_i18n114.__)("Scheduled"), icon: scheduled_default },
    publish: { label: (0, import_i18n114.__)("Published"), icon: published_default }
  };
  var STATUS_OPTIONS = [
    {
      label: (0, import_i18n114.__)("Draft"),
      value: "draft",
      description: (0, import_i18n114.__)("Not ready to publish.")
    },
    {
      label: (0, import_i18n114.__)("Pending"),
      value: "pending",
      description: (0, import_i18n114.__)("Waiting for review before publishing.")
    },
    {
      label: (0, import_i18n114.__)("Private"),
      value: "private",
      description: (0, import_i18n114.__)("Only visible to site admins and editors.")
    },
    {
      label: (0, import_i18n114.__)("Scheduled"),
      value: "future",
      description: (0, import_i18n114.__)("Publish automatically on a chosen date.")
    },
    {
      label: (0, import_i18n114.__)("Published"),
      value: "publish",
      description: (0, import_i18n114.__)("Visible to everyone.")
    }
  ];
  var DESIGN_POST_TYPES = [
    TEMPLATE_POST_TYPE,
    TEMPLATE_PART_POST_TYPE,
    PATTERN_POST_TYPE,
    NAVIGATION_POST_TYPE
  ];
  function PostStatus() {
    const { status, date, password, postId: postId2, postType: postType2, canEdit } = (0, import_data125.useSelect)(
      (select4) => {
        const {
          getEditedPostAttribute: getEditedPostAttribute2,
          getCurrentPostId: getCurrentPostId2,
          getCurrentPostType: getCurrentPostType2,
          getCurrentPost: getCurrentPost2
        } = select4(store);
        return {
          status: getEditedPostAttribute2("status"),
          date: getEditedPostAttribute2("date"),
          password: getEditedPostAttribute2("password"),
          postId: getCurrentPostId2(),
          postType: getCurrentPostType2(),
          canEdit: getCurrentPost2()._links?.["wp:action-publish"] ?? false
        };
      },
      []
    );
    const [showPassword, setShowPassword] = (0, import_element80.useState)(!!password);
    const passwordInputId = (0, import_compose28.useInstanceId)(
      PostStatus,
      "editor-change-status__password-input"
    );
    const { editEntityRecord } = (0, import_data125.useDispatch)(import_core_data76.store);
    const [popoverAnchor, setPopoverAnchor] = (0, import_element80.useState)(null);
    const popoverProps = (0, import_element80.useMemo)(
      () => ({
        // Anchor the popover to the middle of the entire row so that it doesn't
        // move around when the label changes.
        anchor: popoverAnchor,
        "aria-label": (0, import_i18n114.__)("Status & visibility"),
        headerTitle: (0, import_i18n114.__)("Status & visibility"),
        placement: "left-start",
        offset: 36,
        shift: true
      }),
      [popoverAnchor]
    );
    if (DESIGN_POST_TYPES.includes(postType2)) {
      return null;
    }
    const updatePost2 = ({
      status: newStatus = status,
      password: newPassword = password,
      date: newDate = date
    }) => {
      editEntityRecord("postType", postType2, postId2, {
        status: newStatus,
        date: newDate,
        password: newPassword
      });
    };
    const handleTogglePassword = (value) => {
      setShowPassword(value);
      if (!value) {
        updatePost2({ password: "" });
      }
    };
    const handleStatus = (value) => {
      let newDate = date;
      let newPassword = password;
      if (status === "future" && new Date(date) > /* @__PURE__ */ new Date()) {
        newDate = null;
      }
      if (value === "private" && password) {
        newPassword = "";
      }
      updatePost2({
        status: value,
        date: newDate,
        password: newPassword
      });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(post_panel_row_default, { label: (0, import_i18n114.__)("Status"), ref: setPopoverAnchor, children: canEdit ? /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(
      import_components90.Dropdown,
      {
        className: "editor-post-status",
        contentClassName: "editor-change-status__content",
        popoverProps,
        focusOnMount: true,
        renderToggle: ({ onToggle, isOpen }) => /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(
          import_components90.Button,
          {
            className: "editor-post-status__toggle",
            variant: "tertiary",
            size: "compact",
            onClick: onToggle,
            icon: postStatusesInfo[status]?.icon,
            "aria-label": (0, import_i18n114.sprintf)(
              // translators: %s: Current post status.
              (0, import_i18n114.__)("Change status: %s"),
              postStatusesInfo[status]?.label
            ),
            "aria-expanded": isOpen,
            children: postStatusesInfo[status]?.label
          }
        ),
        renderContent: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime178.jsxs)(import_jsx_runtime178.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(
            import_block_editor40.__experimentalInspectorPopoverHeader,
            {
              title: (0, import_i18n114.__)("Status & visibility"),
              onClose
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(
            "form",
            {
              onSubmit: (event) => {
                event.preventDefault();
                onClose();
              },
              children: /* @__PURE__ */ (0, import_jsx_runtime178.jsxs)(import_components90.__experimentalVStack, { spacing: 4, children: [
                /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(
                  import_components90.RadioControl,
                  {
                    className: "editor-change-status__options",
                    hideLabelFromVision: true,
                    label: (0, import_i18n114.__)("Status"),
                    options: STATUS_OPTIONS,
                    onChange: handleStatus,
                    selected: status === "auto-draft" ? "draft" : status
                  }
                ),
                status === "future" && /* @__PURE__ */ (0, import_jsx_runtime178.jsx)("div", { className: "editor-change-status__publish-date-wrapper", children: /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(
                  PrivatePostSchedule,
                  {
                    showPopoverHeaderActions: false,
                    isCompact: true
                  }
                ) }),
                status !== "private" && /* @__PURE__ */ (0, import_jsx_runtime178.jsxs)(
                  import_components90.__experimentalVStack,
                  {
                    as: "fieldset",
                    spacing: 4,
                    className: "editor-change-status__password-fieldset",
                    children: [
                      /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(
                        import_components90.CheckboxControl,
                        {
                          __nextHasNoMarginBottom: true,
                          label: (0, import_i18n114.__)(
                            "Password protected"
                          ),
                          help: (0, import_i18n114.__)(
                            "Only visible to those who know the password."
                          ),
                          checked: showPassword,
                          onChange: handleTogglePassword
                        }
                      ),
                      showPassword && /* @__PURE__ */ (0, import_jsx_runtime178.jsx)("div", { className: "editor-change-status__password-input", children: /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(
                        import_components90.TextControl,
                        {
                          label: (0, import_i18n114.__)(
                            "Password"
                          ),
                          onChange: (value) => updatePost2({
                            password: value
                          }),
                          value: password,
                          placeholder: (0, import_i18n114.__)(
                            "Use a secure password"
                          ),
                          type: "text",
                          id: passwordInputId,
                          __next40pxDefaultSize: true,
                          __nextHasNoMarginBottom: true,
                          maxLength: 255
                        }
                      ) })
                    ]
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime178.jsx)(PostSticky, {})
              ] })
            }
          )
        ] })
      }
    ) : /* @__PURE__ */ (0, import_jsx_runtime178.jsx)("div", { className: "editor-post-status is-read-only", children: postStatusesInfo[status]?.label }) });
  }

  // packages/editor/build-module/components/post-saved-state/index.js
  function PostSavedState({ forceIsDirty }) {
    const [forceSavedMessage, setForceSavedMessage] = (0, import_element81.useState)(false);
    const isLargeViewport = (0, import_compose29.useViewportMatch)("small");
    const {
      isAutosaving,
      isDirty,
      isNew,
      isPublished,
      isSaveable,
      isSaving,
      isScheduled,
      hasPublishAction,
      showIconLabels,
      postStatus,
      postStatusHasChanged
    } = (0, import_data126.useSelect)(
      (select4) => {
        const {
          isEditedPostNew: isEditedPostNew2,
          isCurrentPostPublished: isCurrentPostPublished2,
          isCurrentPostScheduled: isCurrentPostScheduled2,
          isEditedPostDirty: isEditedPostDirty2,
          isSavingPost: isSavingPost2,
          isEditedPostSaveable: isEditedPostSaveable2,
          getCurrentPost: getCurrentPost2,
          isAutosavingPost: isAutosavingPost2,
          getEditedPostAttribute: getEditedPostAttribute2,
          getPostEdits: getPostEdits2
        } = select4(store);
        const { get } = select4(import_preferences13.store);
        return {
          isAutosaving: isAutosavingPost2(),
          isDirty: forceIsDirty || isEditedPostDirty2(),
          isNew: isEditedPostNew2(),
          isPublished: isCurrentPostPublished2(),
          isSaving: isSavingPost2(),
          isSaveable: isEditedPostSaveable2(),
          isScheduled: isCurrentPostScheduled2(),
          hasPublishAction: getCurrentPost2()?._links?.["wp:action-publish"] ?? false,
          showIconLabels: get("core", "showIconLabels"),
          postStatus: getEditedPostAttribute2("status"),
          postStatusHasChanged: !!getPostEdits2()?.status
        };
      },
      [forceIsDirty]
    );
    const isPending = postStatus === "pending";
    const { savePost: savePost2 } = (0, import_data126.useDispatch)(store);
    const wasSaving = (0, import_compose29.usePrevious)(isSaving);
    (0, import_element81.useEffect)(() => {
      let timeoutId;
      if (wasSaving && !isSaving) {
        setForceSavedMessage(true);
        timeoutId = setTimeout(() => {
          setForceSavedMessage(false);
        }, 1e3);
      }
      return () => clearTimeout(timeoutId);
    }, [isSaving]);
    if (!hasPublishAction && isPending) {
      return null;
    }
    const isIneligibleStatus = !["pending", "draft", "auto-draft"].includes(postStatus) && STATUS_OPTIONS.map(({ value }) => value).includes(postStatus);
    if (isPublished || isScheduled || isIneligibleStatus || postStatusHasChanged && ["pending", "draft"].includes(postStatus)) {
      return null;
    }
    const label = isPending ? (0, import_i18n115.__)("Save as pending") : (0, import_i18n115.__)("Save draft");
    const shortLabel = (0, import_i18n115.__)("Save");
    const isSaved = forceSavedMessage || !isNew && !isDirty;
    const isSavedState = isSaving || isSaved;
    const isDisabled = isSaving || isSaved || !isSaveable;
    let text;
    if (isSaving) {
      text = isAutosaving ? (0, import_i18n115.__)("Autosaving") : (0, import_i18n115.__)("Saving");
    } else if (isSaved) {
      text = (0, import_i18n115.__)("Saved");
    } else if (isLargeViewport) {
      text = label;
    } else if (showIconLabels) {
      text = shortLabel;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime179.jsxs)(
      import_components91.Button,
      {
        className: isSaveable || isSaving ? clsx_default({
          "editor-post-save-draft": !isSavedState,
          "editor-post-saved-state": isSavedState,
          "is-saving": isSaving,
          "is-autosaving": isAutosaving,
          "is-saved": isSaved,
          [(0, import_components91.__unstableGetAnimateClassName)({
            type: "loading"
          })]: isSaving
        }) : void 0,
        onClick: isDisabled ? void 0 : () => savePost2(),
        shortcut: isDisabled ? void 0 : import_keycodes6.displayShortcut.primary("s"),
        variant: "tertiary",
        size: "compact",
        icon: isLargeViewport ? void 0 : cloud_upload_default,
        label: text || label,
        "aria-disabled": isDisabled,
        children: [
          isSavedState && /* @__PURE__ */ (0, import_jsx_runtime179.jsx)(icon_default, { icon: isSaved ? check_default : cloud_default }),
          text
        ]
      }
    );
  }

  // packages/editor/build-module/components/post-schedule/check.js
  var import_data127 = __toESM(require_data());
  function PostScheduleCheck({ children }) {
    const hasPublishAction = (0, import_data127.useSelect)((select4) => {
      return select4(store).getCurrentPost()._links?.["wp:action-publish"] ?? false;
    }, []);
    if (!hasPublishAction) {
      return null;
    }
    return children;
  }

  // packages/editor/build-module/components/post-schedule/panel.js
  var import_jsx_runtime180 = __toESM(require_jsx_runtime());
  var import_components92 = __toESM(require_components());
  var import_i18n116 = __toESM(require_i18n());
  var import_element82 = __toESM(require_element());
  var import_data128 = __toESM(require_data());
  var DESIGN_POST_TYPES2 = [
    TEMPLATE_POST_TYPE,
    TEMPLATE_PART_POST_TYPE,
    PATTERN_POST_TYPE,
    NAVIGATION_POST_TYPE
  ];
  function PostSchedulePanel() {
    const [popoverAnchor, setPopoverAnchor] = (0, import_element82.useState)(null);
    const postType2 = (0, import_data128.useSelect)(
      (select4) => select4(store).getCurrentPostType(),
      []
    );
    const popoverProps = (0, import_element82.useMemo)(
      () => ({
        // Anchor the popover to the middle of the entire row so that it doesn't
        // move around when the label changes.
        anchor: popoverAnchor,
        "aria-label": (0, import_i18n116.__)("Change publish date"),
        placement: "left-start",
        offset: 36,
        shift: true
      }),
      [popoverAnchor]
    );
    const label = usePostScheduleLabel();
    const fullLabel = usePostScheduleLabel({ full: true });
    if (DESIGN_POST_TYPES2.includes(postType2)) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(PostScheduleCheck, { children: /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(post_panel_row_default, { label: (0, import_i18n116.__)("Publish"), ref: setPopoverAnchor, children: /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(
      import_components92.Dropdown,
      {
        popoverProps,
        focusOnMount: true,
        className: "editor-post-schedule__panel-dropdown",
        contentClassName: "editor-post-schedule__dialog",
        renderToggle: ({ onToggle, isOpen }) => /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(
          import_components92.Button,
          {
            size: "compact",
            className: "editor-post-schedule__dialog-toggle",
            variant: "tertiary",
            tooltipPosition: "middle left",
            onClick: onToggle,
            "aria-label": (0, import_i18n116.sprintf)(
              // translators: %s: Current post date.
              (0, import_i18n116.__)("Change date: %s"),
              label
            ),
            label: fullLabel,
            showTooltip: label !== fullLabel,
            "aria-expanded": isOpen,
            children: label
          }
        ),
        renderContent: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime180.jsx)(PostSchedule, { onClose })
      }
    ) }) });
  }

  // packages/editor/build-module/components/post-switch-to-draft-button/index.js
  var import_jsx_runtime181 = __toESM(require_jsx_runtime());
  var import_components93 = __toESM(require_components());
  var import_i18n117 = __toESM(require_i18n());
  var import_data129 = __toESM(require_data());
  var import_element83 = __toESM(require_element());
  var import_deprecated10 = __toESM(require_deprecated());
  function PostSwitchToDraftButton() {
    (0, import_deprecated10.default)("wp.editor.PostSwitchToDraftButton", {
      since: "6.7",
      version: "6.9"
    });
    const [showConfirmDialog, setShowConfirmDialog] = (0, import_element83.useState)(false);
    const { editPost: editPost2, savePost: savePost2 } = (0, import_data129.useDispatch)(store);
    const { isSaving, isPublished, isScheduled } = (0, import_data129.useSelect)((select4) => {
      const { isSavingPost: isSavingPost2, isCurrentPostPublished: isCurrentPostPublished2, isCurrentPostScheduled: isCurrentPostScheduled2 } = select4(store);
      return {
        isSaving: isSavingPost2(),
        isPublished: isCurrentPostPublished2(),
        isScheduled: isCurrentPostScheduled2()
      };
    }, []);
    const isDisabled = isSaving || !isPublished && !isScheduled;
    let alertMessage;
    let confirmButtonText;
    if (isPublished) {
      alertMessage = (0, import_i18n117.__)("Are you sure you want to unpublish this post?");
      confirmButtonText = (0, import_i18n117.__)("Unpublish");
    } else if (isScheduled) {
      alertMessage = (0, import_i18n117.__)("Are you sure you want to unschedule this post?");
      confirmButtonText = (0, import_i18n117.__)("Unschedule");
    }
    const handleConfirm = () => {
      setShowConfirmDialog(false);
      editPost2({ status: "draft" });
      savePost2();
    };
    return /* @__PURE__ */ (0, import_jsx_runtime181.jsxs)(import_jsx_runtime181.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime181.jsx)(
        import_components93.Button,
        {
          __next40pxDefaultSize: true,
          className: "editor-post-switch-to-draft",
          onClick: () => {
            if (!isDisabled) {
              setShowConfirmDialog(true);
            }
          },
          "aria-disabled": isDisabled,
          variant: "secondary",
          style: { flexGrow: "1", justifyContent: "center" },
          children: (0, import_i18n117.__)("Switch to draft")
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime181.jsx)(
        import_components93.__experimentalConfirmDialog,
        {
          isOpen: showConfirmDialog,
          onConfirm: handleConfirm,
          onCancel: () => setShowConfirmDialog(false),
          confirmButtonText,
          children: alertMessage
        }
      )
    ] });
  }

  // packages/editor/build-module/components/post-sync-status/index.js
  var import_jsx_runtime182 = __toESM(require_jsx_runtime());
  var import_data130 = __toESM(require_data());
  var import_i18n118 = __toESM(require_i18n());
  function PostSyncStatus() {
    const { syncStatus, postType: postType2 } = (0, import_data130.useSelect)((select4) => {
      const { getEditedPostAttribute: getEditedPostAttribute2 } = select4(store);
      const meta = getEditedPostAttribute2("meta");
      const currentSyncStatus = meta?.wp_pattern_sync_status === "unsynced" ? "unsynced" : getEditedPostAttribute2("wp_pattern_sync_status");
      return {
        syncStatus: currentSyncStatus,
        postType: getEditedPostAttribute2("type")
      };
    });
    if (postType2 !== "wp_block") {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime182.jsx)(post_panel_row_default, { label: (0, import_i18n118.__)("Sync status"), children: /* @__PURE__ */ (0, import_jsx_runtime182.jsx)("div", { className: "editor-post-sync-status__value", children: syncStatus === "unsynced" ? (0, import_i18n118._x)("Not synced", "pattern (singular)") : (0, import_i18n118._x)("Synced", "pattern (singular)") }) });
  }

  // packages/editor/build-module/components/post-taxonomies/index.js
  var import_jsx_runtime183 = __toESM(require_jsx_runtime());
  var import_element84 = __toESM(require_element());
  var import_data131 = __toESM(require_data());
  var import_core_data77 = __toESM(require_core_data());
  var identity2 = (x) => x;
  function PostTaxonomies({ taxonomyWrapper = identity2 }) {
    const { postType: postType2, taxonomies } = (0, import_data131.useSelect)((select4) => {
      return {
        postType: select4(store).getCurrentPostType(),
        taxonomies: select4(import_core_data77.store).getEntityRecords(
          "root",
          "taxonomy",
          { per_page: -1 }
        )
      };
    }, []);
    const visibleTaxonomies = (taxonomies ?? []).filter(
      (taxonomy) => (
        // In some circumstances .visibility can end up as undefined so optional chaining operator required.
        // https://github.com/WordPress/gutenberg/issues/40326
        taxonomy.types.includes(postType2) && taxonomy.visibility?.show_ui
      )
    );
    return visibleTaxonomies.map((taxonomy) => {
      const TaxonomyComponent = taxonomy.hierarchical ? hierarchical_term_selector_default : flat_term_selector_default;
      const taxonomyComponentProps = {
        slug: taxonomy.slug,
        ...taxonomy.hierarchical ? {} : { __nextHasNoMarginBottom: true }
      };
      return /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(import_element84.Fragment, { children: taxonomyWrapper(
        /* @__PURE__ */ (0, import_jsx_runtime183.jsx)(TaxonomyComponent, { ...taxonomyComponentProps }),
        taxonomy
      ) }, `taxonomy-${taxonomy.slug}`);
    });
  }
  var post_taxonomies_default = PostTaxonomies;

  // packages/editor/build-module/components/post-taxonomies/check.js
  var import_data132 = __toESM(require_data());
  var import_core_data78 = __toESM(require_core_data());
  function PostTaxonomiesCheck({ children }) {
    const hasTaxonomies = (0, import_data132.useSelect)((select4) => {
      const postType2 = select4(store).getCurrentPostType();
      const taxonomies = select4(import_core_data78.store).getEntityRecords(
        "root",
        "taxonomy",
        { per_page: -1 }
      );
      return taxonomies?.some(
        (taxonomy) => taxonomy.types.includes(postType2)
      );
    }, []);
    if (!hasTaxonomies) {
      return null;
    }
    return children;
  }

  // packages/editor/build-module/components/post-taxonomies/panel.js
  var import_jsx_runtime184 = __toESM(require_jsx_runtime());
  var import_components94 = __toESM(require_components());
  var import_data133 = __toESM(require_data());
  function TaxonomyPanel({ taxonomy, children }) {
    const slug = taxonomy?.slug;
    const panelName = slug ? `taxonomy-panel-${slug}` : "";
    const { isEnabled, isOpened } = (0, import_data133.useSelect)(
      (select4) => {
        const { isEditorPanelEnabled: isEditorPanelEnabled2, isEditorPanelOpened: isEditorPanelOpened2 } = select4(store);
        return {
          isEnabled: slug ? isEditorPanelEnabled2(panelName) : false,
          isOpened: slug ? isEditorPanelOpened2(panelName) : false
        };
      },
      [panelName, slug]
    );
    const { toggleEditorPanelOpened: toggleEditorPanelOpened2 } = (0, import_data133.useDispatch)(store);
    if (!isEnabled) {
      return null;
    }
    const taxonomyMenuName = taxonomy?.labels?.menu_name;
    if (!taxonomyMenuName) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(
      import_components94.PanelBody,
      {
        title: taxonomyMenuName,
        opened: isOpened,
        onToggle: () => toggleEditorPanelOpened2(panelName),
        children
      }
    );
  }
  function PostTaxonomies2() {
    return /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(PostTaxonomiesCheck, { children: /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(
      post_taxonomies_default,
      {
        taxonomyWrapper: (content, taxonomy) => {
          return /* @__PURE__ */ (0, import_jsx_runtime184.jsx)(TaxonomyPanel, { taxonomy, children: content });
        }
      }
    ) });
  }

  // packages/editor/build-module/components/post-text-editor/index.js
  var import_jsx_runtime185 = __toESM(require_jsx_runtime());
  var import_react_autosize_textarea = __toESM(require_lib());
  var import_i18n119 = __toESM(require_i18n());
  var import_core_data79 = __toESM(require_core_data());
  var import_element85 = __toESM(require_element());
  var import_blocks16 = __toESM(require_blocks());
  var import_data134 = __toESM(require_data());
  var import_compose30 = __toESM(require_compose());
  var import_components95 = __toESM(require_components());
  function PostTextEditor() {
    const instanceId = (0, import_compose30.useInstanceId)(PostTextEditor);
    const { content, blocks, type, id } = (0, import_data134.useSelect)((select4) => {
      const { getEditedEntityRecord } = select4(import_core_data79.store);
      const { getCurrentPostType: getCurrentPostType2, getCurrentPostId: getCurrentPostId2 } = select4(store);
      const _type = getCurrentPostType2();
      const _id = getCurrentPostId2();
      const editedRecord = getEditedEntityRecord("postType", _type, _id);
      return {
        content: editedRecord?.content,
        blocks: editedRecord?.blocks,
        type: _type,
        id: _id
      };
    }, []);
    const { editEntityRecord } = (0, import_data134.useDispatch)(import_core_data79.store);
    const value = (0, import_element85.useMemo)(() => {
      if (content instanceof Function) {
        return content({ blocks });
      } else if (blocks) {
        return (0, import_blocks16.__unstableSerializeAndClean)(blocks);
      }
      return content;
    }, [content, blocks]);
    return /* @__PURE__ */ (0, import_jsx_runtime185.jsxs)(import_jsx_runtime185.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime185.jsx)(
        import_components95.VisuallyHidden,
        {
          as: "label",
          htmlFor: `post-content-${instanceId}`,
          children: (0, import_i18n119.__)("Type text or HTML")
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime185.jsx)(
        import_react_autosize_textarea.default,
        {
          autoComplete: "off",
          dir: "auto",
          value,
          onChange: (event) => {
            editEntityRecord("postType", type, id, {
              content: event.target.value,
              blocks: void 0,
              selection: void 0
            });
          },
          className: "editor-post-text-editor",
          id: `post-content-${instanceId}`,
          placeholder: (0, import_i18n119.__)("Start writing with text or HTML")
        }
      )
    ] });
  }

  // packages/editor/build-module/components/post-title/index.js
  var import_jsx_runtime186 = __toESM(require_jsx_runtime());
  var import_i18n120 = __toESM(require_i18n());
  var import_element87 = __toESM(require_element());
  var import_html_entities23 = __toESM(require_html_entities());
  var import_data137 = __toESM(require_data());
  var import_block_editor41 = __toESM(require_block_editor());
  var import_keycodes7 = __toESM(require_keycodes());
  var import_blocks17 = __toESM(require_blocks());
  var import_rich_text2 = __toESM(require_rich_text());
  var import_compose31 = __toESM(require_compose());
  var import_dom2 = __toESM(require_dom());

  // packages/editor/build-module/components/post-title/constants.js
  var DEFAULT_CLASSNAMES = "wp-block wp-block-post-title block-editor-block-list__block editor-post-title editor-post-title__input rich-text";
  var REGEXP_NEWLINES = /[\r\n]+/g;

  // packages/editor/build-module/components/post-title/use-post-title-focus.js
  var import_element86 = __toESM(require_element());
  var import_data135 = __toESM(require_data());
  function usePostTitleFocus(forwardedRef) {
    const ref = (0, import_element86.useRef)();
    const { isCleanNewPost: isCleanNewPost2 } = (0, import_data135.useSelect)((select4) => {
      const { isCleanNewPost: _isCleanNewPost } = select4(store);
      return {
        isCleanNewPost: _isCleanNewPost()
      };
    }, []);
    (0, import_element86.useImperativeHandle)(forwardedRef, () => ({
      focus: () => {
        ref?.current?.focus();
      }
    }));
    (0, import_element86.useEffect)(() => {
      if (!ref.current) {
        return;
      }
      const { defaultView } = ref.current.ownerDocument;
      const { name, parent } = defaultView;
      const ownerDocument = name === "editor-canvas" ? parent.document : defaultView.document;
      const { activeElement, body } = ownerDocument;
      if (isCleanNewPost2 && (!activeElement || body === activeElement)) {
        ref.current.focus();
      }
    }, [isCleanNewPost2]);
    return { ref };
  }

  // packages/editor/build-module/components/post-title/use-post-title.js
  var import_data136 = __toESM(require_data());
  function usePostTitle() {
    const { editPost: editPost2 } = (0, import_data136.useDispatch)(store);
    const { title } = (0, import_data136.useSelect)((select4) => {
      const { getEditedPostAttribute: getEditedPostAttribute2 } = select4(store);
      return {
        title: getEditedPostAttribute2("title")
      };
    }, []);
    function updateTitle(newTitle) {
      editPost2({ title: newTitle });
    }
    return { title, setTitle: updateTitle };
  }

  // packages/editor/build-module/components/post-title/index.js
  var PostTitle = (0, import_element87.forwardRef)((_, forwardedRef) => {
    const { placeholder } = (0, import_data137.useSelect)((select4) => {
      const { getSettings: getSettings4 } = select4(import_block_editor41.store);
      const { titlePlaceholder } = getSettings4();
      return {
        placeholder: titlePlaceholder
      };
    }, []);
    const [isSelected, setIsSelected] = (0, import_element87.useState)(false);
    const { ref: focusRef } = usePostTitleFocus(forwardedRef);
    const { title, setTitle: onUpdate } = usePostTitle();
    const [selection, setSelection] = (0, import_element87.useState)({});
    const { clearSelectedBlock: clearSelectedBlock2, insertBlocks: insertBlocks2, insertDefaultBlock: insertDefaultBlock2 } = (0, import_data137.useDispatch)(import_block_editor41.store);
    const decodedPlaceholder = (0, import_html_entities23.decodeEntities)(placeholder) || (0, import_i18n120.__)("Add title");
    const {
      value,
      onChange,
      ref: richTextRef
    } = (0, import_rich_text2.__unstableUseRichText)({
      value: title,
      onChange(newValue) {
        onUpdate(newValue.replace(REGEXP_NEWLINES, " "));
      },
      placeholder: decodedPlaceholder,
      selectionStart: selection.start,
      selectionEnd: selection.end,
      onSelectionChange(newStart, newEnd) {
        setSelection((sel) => {
          const { start, end } = sel;
          if (start === newStart && end === newEnd) {
            return sel;
          }
          return {
            start: newStart,
            end: newEnd
          };
        });
      },
      __unstableDisableFormats: false
    });
    function onInsertBlockAfter(blocks) {
      insertBlocks2(blocks, 0);
    }
    function onSelect() {
      setIsSelected(true);
      clearSelectedBlock2();
    }
    function onUnselect() {
      setIsSelected(false);
      setSelection({});
    }
    function onEnterPress() {
      insertDefaultBlock2(void 0, void 0, 0);
    }
    function onKeyDown(event) {
      if (event.keyCode === import_keycodes7.ENTER) {
        event.preventDefault();
        onEnterPress();
      }
    }
    function onPaste(event) {
      const clipboardData = event.clipboardData;
      let plainText = "";
      let html = "";
      try {
        plainText = clipboardData.getData("text/plain");
        html = clipboardData.getData("text/html");
      } catch (error) {
        return;
      }
      window.console.log("Received HTML:\n\n", html);
      window.console.log("Received plain text:\n\n", plainText);
      const content = (0, import_blocks17.pasteHandler)({
        HTML: html,
        plainText
      });
      event.preventDefault();
      if (!content.length) {
        return;
      }
      if (typeof content !== "string") {
        const [firstBlock] = content;
        if (!title && (firstBlock.name === "core/heading" || firstBlock.name === "core/paragraph")) {
          const contentNoHTML = (0, import_dom2.__unstableStripHTML)(
            firstBlock.attributes.content
          );
          onUpdate(contentNoHTML);
          onInsertBlockAfter(content.slice(1));
        } else {
          onInsertBlockAfter(content);
        }
      } else {
        const contentNoHTML = (0, import_dom2.__unstableStripHTML)(content);
        onChange((0, import_rich_text2.insert)(value, (0, import_rich_text2.create)({ html: contentNoHTML })));
      }
    }
    const className = clsx_default(DEFAULT_CLASSNAMES, {
      "is-selected": isSelected
    });
    return (
      /* eslint-disable jsx-a11y/heading-has-content, jsx-a11y/no-noninteractive-element-to-interactive-role */
      /* @__PURE__ */ (0, import_jsx_runtime186.jsx)(
        "h1",
        {
          ref: (0, import_compose31.useMergeRefs)([richTextRef, focusRef]),
          contentEditable: true,
          className,
          "aria-label": decodedPlaceholder,
          role: "textbox",
          "aria-multiline": "true",
          onFocus: onSelect,
          onBlur: onUnselect,
          onKeyDown,
          onPaste
        }
      )
    );
  });
  var post_title_default = (0, import_element87.forwardRef)((_, forwardedRef) => /* @__PURE__ */ (0, import_jsx_runtime186.jsx)(post_type_support_check_default, { supportKeys: "title", children: /* @__PURE__ */ (0, import_jsx_runtime186.jsx)(PostTitle, { ref: forwardedRef }) }));

  // packages/editor/build-module/components/post-title/post-title-raw.js
  var import_jsx_runtime187 = __toESM(require_jsx_runtime());
  var import_components96 = __toESM(require_components());
  var import_i18n121 = __toESM(require_i18n());
  var import_html_entities24 = __toESM(require_html_entities());
  var import_data138 = __toESM(require_data());
  var import_block_editor42 = __toESM(require_block_editor());
  var import_element88 = __toESM(require_element());
  function PostTitleRaw(_, forwardedRef) {
    const { placeholder } = (0, import_data138.useSelect)((select4) => {
      const { getSettings: getSettings4 } = select4(import_block_editor42.store);
      const { titlePlaceholder } = getSettings4();
      return {
        placeholder: titlePlaceholder
      };
    }, []);
    const [isSelected, setIsSelected] = (0, import_element88.useState)(false);
    const { title, setTitle: onUpdate } = usePostTitle();
    const { ref: focusRef } = usePostTitleFocus(forwardedRef);
    function onChange(value) {
      onUpdate(value.replace(REGEXP_NEWLINES, " "));
    }
    function onSelect() {
      setIsSelected(true);
    }
    function onUnselect() {
      setIsSelected(false);
    }
    const className = clsx_default(DEFAULT_CLASSNAMES, {
      "is-selected": isSelected,
      "is-raw-text": true
    });
    const decodedPlaceholder = (0, import_html_entities24.decodeEntities)(placeholder) || (0, import_i18n121.__)("Add title");
    return /* @__PURE__ */ (0, import_jsx_runtime187.jsx)(
      import_components96.TextareaControl,
      {
        ref: focusRef,
        value: title,
        onChange,
        onFocus: onSelect,
        onBlur: onUnselect,
        label: placeholder,
        className,
        placeholder: decodedPlaceholder,
        hideLabelFromVision: true,
        autoComplete: "off",
        dir: "auto",
        rows: 1,
        __nextHasNoMarginBottom: true
      }
    );
  }
  var post_title_raw_default = (0, import_element88.forwardRef)(PostTitleRaw);

  // packages/editor/build-module/components/post-trash/index.js
  var import_jsx_runtime188 = __toESM(require_jsx_runtime());
  var import_i18n122 = __toESM(require_i18n());
  var import_components97 = __toESM(require_components());
  var import_data140 = __toESM(require_data());
  var import_element89 = __toESM(require_element());

  // packages/editor/build-module/components/post-trash/check.js
  var import_data139 = __toESM(require_data());
  var import_core_data80 = __toESM(require_core_data());
  function PostTrashCheck({ children }) {
    const { canTrashPost } = (0, import_data139.useSelect)((select4) => {
      const { isEditedPostNew: isEditedPostNew2, getCurrentPostId: getCurrentPostId2, getCurrentPostType: getCurrentPostType2 } = select4(store);
      const { canUser } = select4(import_core_data80.store);
      const postType2 = getCurrentPostType2();
      const postId2 = getCurrentPostId2();
      const isNew = isEditedPostNew2();
      const canUserDelete = !!postId2 ? canUser("delete", {
        kind: "postType",
        name: postType2,
        id: postId2
      }) : false;
      return {
        canTrashPost: (!isNew || postId2) && canUserDelete && !GLOBAL_POST_TYPES.includes(postType2)
      };
    }, []);
    if (!canTrashPost) {
      return null;
    }
    return children;
  }

  // packages/editor/build-module/components/post-trash/index.js
  function PostTrash({ onActionPerformed }) {
    const registry = (0, import_data140.useRegistry)();
    const { isNew, isDeleting, postId: postId2, title } = (0, import_data140.useSelect)((select4) => {
      const store3 = select4(store);
      return {
        isNew: store3.isEditedPostNew(),
        isDeleting: store3.isDeletingPost(),
        postId: store3.getCurrentPostId(),
        title: store3.getCurrentPostAttribute("title")
      };
    }, []);
    const { trashPost: trashPost3 } = (0, import_data140.useDispatch)(store);
    const [showConfirmDialog, setShowConfirmDialog] = (0, import_element89.useState)(false);
    if (isNew || !postId2) {
      return null;
    }
    const handleConfirm = async () => {
      setShowConfirmDialog(false);
      await trashPost3();
      const item = await registry.resolveSelect(store).getCurrentPost();
      onActionPerformed?.("move-to-trash", [item]);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime188.jsxs)(PostTrashCheck, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
        import_components97.Button,
        {
          __next40pxDefaultSize: true,
          className: "editor-post-trash",
          isDestructive: true,
          variant: "secondary",
          isBusy: isDeleting,
          "aria-disabled": isDeleting,
          onClick: isDeleting ? void 0 : () => setShowConfirmDialog(true),
          children: (0, import_i18n122.__)("Move to trash")
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime188.jsx)(
        import_components97.__experimentalConfirmDialog,
        {
          isOpen: showConfirmDialog,
          onConfirm: handleConfirm,
          onCancel: () => setShowConfirmDialog(false),
          confirmButtonText: (0, import_i18n122.__)("Move to trash"),
          size: "small",
          children: (0, import_i18n122.sprintf)(
            // translators: %s: The item's title.
            (0, import_i18n122.__)('Are you sure you want to move "%s" to the trash?'),
            title
          )
        }
      )
    ] });
  }

  // packages/editor/build-module/components/post-url/index.js
  var import_jsx_runtime189 = __toESM(require_jsx_runtime());
  var import_data141 = __toESM(require_data());
  var import_url16 = __toESM(require_url());
  var import_element90 = __toESM(require_element());
  var import_block_editor43 = __toESM(require_block_editor());
  var import_i18n123 = __toESM(require_i18n());
  var import_components98 = __toESM(require_components());
  var import_notices24 = __toESM(require_notices());
  var import_core_data81 = __toESM(require_core_data());
  var import_compose32 = __toESM(require_compose());
  function PostURL({ onClose }) {
    const {
      isEditable,
      postSlug,
      postLink,
      permalinkPrefix,
      permalinkSuffix,
      permalink
    } = (0, import_data141.useSelect)((select4) => {
      const post = select4(store).getCurrentPost();
      const postTypeSlug = select4(store).getCurrentPostType();
      const postType2 = select4(import_core_data81.store).getPostType(postTypeSlug);
      const permalinkParts = select4(store).getPermalinkParts();
      const hasPublishAction = post?._links?.["wp:action-publish"] ?? false;
      return {
        isEditable: select4(store).isPermalinkEditable() && hasPublishAction,
        postSlug: (0, import_url16.safeDecodeURIComponent)(
          select4(store).getEditedPostSlug()
        ),
        viewPostLabel: postType2?.labels.view_item,
        postLink: post.link,
        permalinkPrefix: permalinkParts?.prefix,
        permalinkSuffix: permalinkParts?.suffix,
        permalink: (0, import_url16.safeDecodeURIComponent)(
          select4(store).getPermalink()
        )
      };
    }, []);
    const { editPost: editPost2 } = (0, import_data141.useDispatch)(store);
    const { createNotice } = (0, import_data141.useDispatch)(import_notices24.store);
    const [forceEmptyField, setForceEmptyField] = (0, import_element90.useState)(false);
    const copyButtonRef = (0, import_compose32.useCopyToClipboard)(permalink, () => {
      createNotice("info", (0, import_i18n123.__)("Copied Permalink to clipboard."), {
        isDismissible: true,
        type: "snackbar"
      });
    });
    const postUrlSlugDescriptionId = "editor-post-url__slug-description-" + (0, import_compose32.useInstanceId)(PostURL);
    return /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)("div", { className: "editor-post-url", children: [
      /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
        import_block_editor43.__experimentalInspectorPopoverHeader,
        {
          title: (0, import_i18n123.__)("Slug"),
          onClose
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(import_components98.__experimentalVStack, { spacing: 3, children: [
        isEditable && /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("p", { className: "editor-post-url__intro", children: (0, import_element90.createInterpolateElement)(
          (0, import_i18n123.__)(
            "<span>Customize the last part of the Permalink.</span> <a>Learn more.</a>"
          ),
          {
            span: /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("span", { id: postUrlSlugDescriptionId }),
            a: /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
              import_components98.ExternalLink,
              {
                href: (0, import_i18n123.__)(
                  "https://wordpress.org/documentation/article/page-post-settings-sidebar/#permalink"
                )
              }
            )
          }
        ) }),
        /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)("div", { children: [
          isEditable && /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(import_jsx_runtime189.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
              import_components98.__experimentalInputControl,
              {
                __next40pxDefaultSize: true,
                prefix: /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(import_components98.__experimentalInputControlPrefixWrapper, { children: "/" }),
                suffix: /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(import_components98.__experimentalInputControlSuffixWrapper, { variant: "control", children: /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
                  import_components98.Button,
                  {
                    icon: copy_small_default,
                    ref: copyButtonRef,
                    size: "small",
                    label: "Copy"
                  }
                ) }),
                label: (0, import_i18n123.__)("Slug"),
                hideLabelFromVision: true,
                value: forceEmptyField ? "" : postSlug,
                autoComplete: "off",
                spellCheck: "false",
                type: "text",
                className: "editor-post-url__input",
                onChange: (newValue) => {
                  editPost2({ slug: newValue });
                  if (!newValue) {
                    if (!forceEmptyField) {
                      setForceEmptyField(true);
                    }
                    return;
                  }
                  if (forceEmptyField) {
                    setForceEmptyField(false);
                  }
                },
                onBlur: (event) => {
                  editPost2({
                    slug: (0, import_url16.cleanForSlug)(
                      event.target.value
                    )
                  });
                  if (forceEmptyField) {
                    setForceEmptyField(false);
                  }
                },
                "aria-describedby": postUrlSlugDescriptionId
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)("p", { className: "editor-post-url__permalink", children: [
              /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("span", { className: "editor-post-url__permalink-visual-label", children: (0, import_i18n123.__)("Permalink:") }),
              /* @__PURE__ */ (0, import_jsx_runtime189.jsxs)(
                import_components98.ExternalLink,
                {
                  className: "editor-post-url__link",
                  href: postLink,
                  target: "_blank",
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("span", { className: "editor-post-url__link-prefix", children: permalinkPrefix }),
                    /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("span", { className: "editor-post-url__link-slug", children: postSlug }),
                    /* @__PURE__ */ (0, import_jsx_runtime189.jsx)("span", { className: "editor-post-url__link-suffix", children: permalinkSuffix })
                  ]
                }
              )
            ] })
          ] }),
          !isEditable && /* @__PURE__ */ (0, import_jsx_runtime189.jsx)(
            import_components98.ExternalLink,
            {
              className: "editor-post-url__link",
              href: postLink,
              target: "_blank",
              children: postLink
            }
          )
        ] })
      ] })
    ] });
  }

  // packages/editor/build-module/components/post-url/check.js
  var import_data142 = __toESM(require_data());
  var import_core_data82 = __toESM(require_core_data());
  function PostURLCheck({ children }) {
    const isVisible = (0, import_data142.useSelect)((select4) => {
      const postTypeSlug = select4(store).getCurrentPostType();
      const postType2 = select4(import_core_data82.store).getPostType(postTypeSlug);
      if (!postType2?.viewable) {
        return false;
      }
      const post = select4(store).getCurrentPost();
      if (!post.link) {
        return false;
      }
      const permalinkParts = select4(store).getPermalinkParts();
      if (!permalinkParts) {
        return false;
      }
      return true;
    }, []);
    if (!isVisible) {
      return null;
    }
    return children;
  }

  // packages/editor/build-module/components/post-url/label.js
  var import_data143 = __toESM(require_data());
  var import_url17 = __toESM(require_url());
  function PostURLLabel() {
    return usePostURLLabel();
  }
  function usePostURLLabel() {
    const postLink = (0, import_data143.useSelect)(
      (select4) => select4(store).getPermalink(),
      []
    );
    return (0, import_url17.filterURLForDisplay)((0, import_url17.safeDecodeURIComponent)(postLink));
  }

  // packages/editor/build-module/components/post-url/panel.js
  var import_jsx_runtime190 = __toESM(require_jsx_runtime());
  var import_element91 = __toESM(require_element());
  var import_data144 = __toESM(require_data());
  var import_components99 = __toESM(require_components());
  var import_i18n124 = __toESM(require_i18n());
  var import_url18 = __toESM(require_url());
  var import_core_data83 = __toESM(require_core_data());
  function PostURLPanel() {
    const { isFrontPage } = (0, import_data144.useSelect)((select4) => {
      const { getCurrentPostId: getCurrentPostId2 } = select4(store);
      const { getEditedEntityRecord, canUser } = select4(import_core_data83.store);
      const siteSettings = canUser("read", {
        kind: "root",
        name: "site"
      }) ? getEditedEntityRecord("root", "site") : void 0;
      const _id = getCurrentPostId2();
      return {
        isFrontPage: siteSettings?.page_on_front === _id
      };
    }, []);
    const [popoverAnchor, setPopoverAnchor] = (0, import_element91.useState)(null);
    const popoverProps = (0, import_element91.useMemo)(
      () => ({
        // Anchor the popover to the middle of the entire row so that it doesn't
        // move around when the label changes.
        anchor: popoverAnchor,
        placement: "left-start",
        offset: 36,
        shift: true
      }),
      [popoverAnchor]
    );
    const label = isFrontPage ? (0, import_i18n124.__)("Link") : (0, import_i18n124.__)("Slug");
    return /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(PostURLCheck, { children: /* @__PURE__ */ (0, import_jsx_runtime190.jsxs)(post_panel_row_default, { label, ref: setPopoverAnchor, children: [
      !isFrontPage && /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(
        import_components99.Dropdown,
        {
          popoverProps,
          className: "editor-post-url__panel-dropdown",
          contentClassName: "editor-post-url__panel-dialog",
          focusOnMount: true,
          renderToggle: ({ isOpen, onToggle }) => /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(
            PostURLToggle,
            {
              isOpen,
              onClick: onToggle
            }
          ),
          renderContent: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(PostURL, { onClose })
        }
      ),
      isFrontPage && /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(FrontPageLink, {})
    ] }) });
  }
  function PostURLToggle({ isOpen, onClick }) {
    const { slug } = (0, import_data144.useSelect)((select4) => {
      return {
        slug: select4(store).getEditedPostSlug()
      };
    }, []);
    const decodedSlug = (0, import_url18.safeDecodeURIComponent)(slug);
    return /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(
      import_components99.Button,
      {
        size: "compact",
        className: "editor-post-url__panel-toggle",
        variant: "tertiary",
        "aria-expanded": isOpen,
        "aria-label": (
          // translators: %s: Current post link.
          (0, import_i18n124.sprintf)((0, import_i18n124.__)("Change link: %s"), decodedSlug)
        ),
        onClick,
        children: /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(import_jsx_runtime190.Fragment, { children: decodedSlug })
      }
    );
  }
  function FrontPageLink() {
    const { postLink } = (0, import_data144.useSelect)((select4) => {
      const { getCurrentPost: getCurrentPost2 } = select4(store);
      return {
        postLink: getCurrentPost2()?.link
      };
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime190.jsx)(
      import_components99.ExternalLink,
      {
        className: "editor-post-url__front-page-link",
        href: postLink,
        target: "_blank",
        children: postLink
      }
    );
  }

  // packages/editor/build-module/components/post-visibility/check.js
  var import_data145 = __toESM(require_data());
  function PostVisibilityCheck({ render }) {
    const canEdit = (0, import_data145.useSelect)((select4) => {
      return select4(store).getCurrentPost()._links?.["wp:action-publish"] ?? false;
    });
    return render({ canEdit });
  }

  // packages/editor/build-module/components/table-of-contents/index.js
  var import_jsx_runtime194 = __toESM(require_jsx_runtime());
  var import_i18n128 = __toESM(require_i18n());
  var import_components100 = __toESM(require_components());
  var import_data150 = __toESM(require_data());
  var import_element93 = __toESM(require_element());
  var import_block_editor45 = __toESM(require_block_editor());

  // packages/editor/build-module/components/table-of-contents/panel.js
  var import_jsx_runtime193 = __toESM(require_jsx_runtime());
  var import_i18n127 = __toESM(require_i18n());
  var import_data149 = __toESM(require_data());
  var import_block_editor44 = __toESM(require_block_editor());

  // packages/editor/build-module/components/word-count/index.js
  var import_jsx_runtime191 = __toESM(require_jsx_runtime());
  var import_data146 = __toESM(require_data());
  var import_i18n125 = __toESM(require_i18n());
  var import_wordcount = __toESM(require_wordcount());
  function WordCount() {
    const content = (0, import_data146.useSelect)(
      (select4) => select4(store).getEditedPostAttribute("content"),
      []
    );
    const wordCountType = (0, import_i18n125._x)("words", "Word count type. Do not translate!");
    return /* @__PURE__ */ (0, import_jsx_runtime191.jsx)("span", { className: "word-count", children: (0, import_wordcount.count)(content, wordCountType) });
  }

  // packages/editor/build-module/components/time-to-read/index.js
  var import_jsx_runtime192 = __toESM(require_jsx_runtime());
  var import_data147 = __toESM(require_data());
  var import_i18n126 = __toESM(require_i18n());
  var import_wordcount2 = __toESM(require_wordcount());
  var import_element92 = __toESM(require_element());
  var AVERAGE_READING_RATE = 189;
  function TimeToRead() {
    const content = (0, import_data147.useSelect)(
      (select4) => select4(store).getEditedPostAttribute("content"),
      []
    );
    const wordCountType = (0, import_i18n126._x)("words", "Word count type. Do not translate!");
    const minutesToRead = Math.round(
      (0, import_wordcount2.count)(content, wordCountType) / AVERAGE_READING_RATE
    );
    const minutesToReadString = minutesToRead === 0 ? (0, import_element92.createInterpolateElement)((0, import_i18n126.__)("<span>< 1</span> minute"), {
      span: /* @__PURE__ */ (0, import_jsx_runtime192.jsx)("span", {})
    }) : (0, import_element92.createInterpolateElement)(
      (0, import_i18n126.sprintf)(
        /* translators: %s: the number of minutes to read the post. */
        (0, import_i18n126._n)(
          "<span>%s</span> minute",
          "<span>%s</span> minutes",
          minutesToRead
        ),
        minutesToRead
      ),
      {
        span: /* @__PURE__ */ (0, import_jsx_runtime192.jsx)("span", {})
      }
    );
    return /* @__PURE__ */ (0, import_jsx_runtime192.jsx)("span", { className: "time-to-read", children: minutesToReadString });
  }

  // packages/editor/build-module/components/character-count/index.js
  var import_data148 = __toESM(require_data());
  var import_wordcount3 = __toESM(require_wordcount());
  function CharacterCount() {
    const content = (0, import_data148.useSelect)(
      (select4) => select4(store).getEditedPostAttribute("content"),
      []
    );
    return (0, import_wordcount3.count)(content, "characters_including_spaces");
  }

  // packages/editor/build-module/components/table-of-contents/panel.js
  function TableOfContentsPanel({ hasOutlineItemsDisabled, onRequestClose }) {
    const { headingCount, paragraphCount, numberOfBlocks } = (0, import_data149.useSelect)(
      (select4) => {
        const { getGlobalBlockCount: getGlobalBlockCount2 } = select4(import_block_editor44.store);
        return {
          headingCount: getGlobalBlockCount2("core/heading"),
          paragraphCount: getGlobalBlockCount2("core/paragraph"),
          numberOfBlocks: getGlobalBlockCount2()
        };
      },
      []
    );
    return (
      /*
       * Disable reason: The `list` ARIA role is redundant but
       * Safari+VoiceOver won't announce the list otherwise.
       */
      /* eslint-disable jsx-a11y/no-redundant-roles */
      /* @__PURE__ */ (0, import_jsx_runtime193.jsxs)(import_jsx_runtime193.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime193.jsx)(
          "div",
          {
            className: "table-of-contents__wrapper",
            role: "note",
            "aria-label": (0, import_i18n127.__)("Document Statistics"),
            tabIndex: "0",
            children: /* @__PURE__ */ (0, import_jsx_runtime193.jsxs)("ul", { role: "list", className: "table-of-contents__counts", children: [
              /* @__PURE__ */ (0, import_jsx_runtime193.jsxs)("li", { className: "table-of-contents__count", children: [
                (0, import_i18n127.__)("Words"),
                /* @__PURE__ */ (0, import_jsx_runtime193.jsx)(WordCount, {})
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime193.jsxs)("li", { className: "table-of-contents__count", children: [
                (0, import_i18n127.__)("Characters"),
                /* @__PURE__ */ (0, import_jsx_runtime193.jsx)("span", { className: "table-of-contents__number", children: /* @__PURE__ */ (0, import_jsx_runtime193.jsx)(CharacterCount, {}) })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime193.jsxs)("li", { className: "table-of-contents__count", children: [
                (0, import_i18n127.__)("Time to read"),
                /* @__PURE__ */ (0, import_jsx_runtime193.jsx)(TimeToRead, {})
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime193.jsxs)("li", { className: "table-of-contents__count", children: [
                (0, import_i18n127.__)("Headings"),
                /* @__PURE__ */ (0, import_jsx_runtime193.jsx)("span", { className: "table-of-contents__number", children: headingCount })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime193.jsxs)("li", { className: "table-of-contents__count", children: [
                (0, import_i18n127.__)("Paragraphs"),
                /* @__PURE__ */ (0, import_jsx_runtime193.jsx)("span", { className: "table-of-contents__number", children: paragraphCount })
              ] }),
              /* @__PURE__ */ (0, import_jsx_runtime193.jsxs)("li", { className: "table-of-contents__count", children: [
                (0, import_i18n127.__)("Blocks"),
                /* @__PURE__ */ (0, import_jsx_runtime193.jsx)("span", { className: "table-of-contents__number", children: numberOfBlocks })
              ] })
            ] })
          }
        ),
        headingCount > 0 && /* @__PURE__ */ (0, import_jsx_runtime193.jsxs)(import_jsx_runtime193.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime193.jsx)("hr", {}),
          /* @__PURE__ */ (0, import_jsx_runtime193.jsx)("h2", { className: "table-of-contents__title", children: (0, import_i18n127.__)("Document Outline") }),
          /* @__PURE__ */ (0, import_jsx_runtime193.jsx)(
            DocumentOutline,
            {
              onSelect: onRequestClose,
              hasOutlineItemsDisabled
            }
          )
        ] })
      ] })
    );
  }
  var panel_default3 = TableOfContentsPanel;

  // packages/editor/build-module/components/table-of-contents/index.js
  function TableOfContents({ hasOutlineItemsDisabled, repositionDropdown, ...props }, ref) {
    const hasBlocks = (0, import_data150.useSelect)(
      (select4) => !!select4(import_block_editor45.store).getBlockCount(),
      []
    );
    return /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(
      import_components100.Dropdown,
      {
        popoverProps: {
          placement: repositionDropdown ? "right" : "bottom"
        },
        className: "table-of-contents",
        contentClassName: "table-of-contents__popover",
        renderToggle: ({ isOpen, onToggle }) => /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(
          import_components100.Button,
          {
            __next40pxDefaultSize: true,
            ...props,
            ref,
            onClick: hasBlocks ? onToggle : void 0,
            icon: info_default,
            "aria-expanded": isOpen,
            "aria-haspopup": "true",
            label: (0, import_i18n128.__)("Details"),
            tooltipPosition: "bottom",
            "aria-disabled": !hasBlocks
          }
        ),
        renderContent: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime194.jsx)(
          panel_default3,
          {
            onRequestClose: onClose,
            hasOutlineItemsDisabled
          }
        )
      }
    );
  }
  var table_of_contents_default = (0, import_element93.forwardRef)(TableOfContents);

  // packages/editor/build-module/components/unsaved-changes-warning/index.js
  var import_i18n129 = __toESM(require_i18n());
  var import_element94 = __toESM(require_element());
  var import_data151 = __toESM(require_data());
  var import_core_data84 = __toESM(require_core_data());
  function UnsavedChangesWarning() {
    const { __experimentalGetDirtyEntityRecords } = (0, import_data151.useSelect)(import_core_data84.store);
    (0, import_element94.useEffect)(() => {
      const warnIfUnsavedChanges = (event) => {
        const dirtyEntityRecords = __experimentalGetDirtyEntityRecords();
        if (dirtyEntityRecords.length > 0) {
          event.returnValue = (0, import_i18n129.__)(
            "You have unsaved changes. If you proceed, they will be lost."
          );
          return event.returnValue;
        }
      };
      window.addEventListener("beforeunload", warnIfUnsavedChanges);
      return () => {
        window.removeEventListener("beforeunload", warnIfUnsavedChanges);
      };
    }, [__experimentalGetDirtyEntityRecords]);
    return null;
  }

  // packages/editor/build-module/components/deprecated.js
  var import_jsx_runtime195 = __toESM(require_jsx_runtime());
  var import_deprecated11 = __toESM(require_deprecated());
  var import_element95 = __toESM(require_element());
  var import_block_editor46 = __toESM(require_block_editor());
  var import_server_side_render = __toESM(require_server_side_render());
  function deprecateComponent(name, Wrapped, staticsToHoist = []) {
    const Component5 = (0, import_element95.forwardRef)((props, ref) => {
      (0, import_deprecated11.default)("wp.editor." + name, {
        since: "5.3",
        alternative: "wp.blockEditor." + name,
        version: "6.2"
      });
      return /* @__PURE__ */ (0, import_jsx_runtime195.jsx)(Wrapped, { ref, ...props });
    });
    staticsToHoist.forEach((staticName) => {
      Component5[staticName] = deprecateComponent(
        name + "." + staticName,
        Wrapped[staticName]
      );
    });
    return Component5;
  }
  function deprecateFunction(name, func) {
    return (...args) => {
      (0, import_deprecated11.default)("wp.editor." + name, {
        since: "5.3",
        alternative: "wp.blockEditor." + name,
        version: "6.2"
      });
      return func(...args);
    };
  }
  var RichText = deprecateComponent("RichText", import_block_editor46.RichText, ["Content"]);
  RichText.isEmpty = deprecateFunction(
    "RichText.isEmpty",
    import_block_editor46.RichText.isEmpty
  );
  var Autocomplete = deprecateComponent(
    "Autocomplete",
    import_block_editor46.Autocomplete
  );
  var AlignmentToolbar = deprecateComponent(
    "AlignmentToolbar",
    import_block_editor46.AlignmentToolbar
  );
  var BlockAlignmentToolbar = deprecateComponent(
    "BlockAlignmentToolbar",
    import_block_editor46.BlockAlignmentToolbar
  );
  var BlockControls = deprecateComponent(
    "BlockControls",
    import_block_editor46.BlockControls,
    ["Slot"]
  );
  var BlockEdit = deprecateComponent("BlockEdit", import_block_editor46.BlockEdit);
  var BlockEditorKeyboardShortcuts2 = deprecateComponent(
    "BlockEditorKeyboardShortcuts",
    import_block_editor46.BlockEditorKeyboardShortcuts
  );
  var BlockFormatControls = deprecateComponent(
    "BlockFormatControls",
    import_block_editor46.BlockFormatControls,
    ["Slot"]
  );
  var BlockIcon2 = deprecateComponent("BlockIcon", import_block_editor46.BlockIcon);
  var BlockInspector = deprecateComponent(
    "BlockInspector",
    import_block_editor46.BlockInspector
  );
  var BlockList = deprecateComponent("BlockList", import_block_editor46.BlockList);
  var BlockMover = deprecateComponent("BlockMover", import_block_editor46.BlockMover);
  var BlockNavigationDropdown = deprecateComponent(
    "BlockNavigationDropdown",
    import_block_editor46.BlockNavigationDropdown
  );
  var BlockSelectionClearer = deprecateComponent(
    "BlockSelectionClearer",
    import_block_editor46.BlockSelectionClearer
  );
  var BlockSettingsMenu = deprecateComponent(
    "BlockSettingsMenu",
    import_block_editor46.BlockSettingsMenu
  );
  var BlockTitle = deprecateComponent("BlockTitle", import_block_editor46.BlockTitle);
  var BlockToolbar = deprecateComponent(
    "BlockToolbar",
    import_block_editor46.BlockToolbar
  );
  var ColorPalette = deprecateComponent(
    "ColorPalette",
    import_block_editor46.ColorPalette
  );
  var ContrastChecker = deprecateComponent(
    "ContrastChecker",
    import_block_editor46.ContrastChecker
  );
  var CopyHandler = deprecateComponent("CopyHandler", import_block_editor46.CopyHandler);
  var DefaultBlockAppender = deprecateComponent(
    "DefaultBlockAppender",
    import_block_editor46.DefaultBlockAppender
  );
  var FontSizePicker = deprecateComponent(
    "FontSizePicker",
    import_block_editor46.FontSizePicker
  );
  var Inserter = deprecateComponent("Inserter", import_block_editor46.Inserter);
  var InnerBlocks = deprecateComponent("InnerBlocks", import_block_editor46.InnerBlocks, [
    "ButtonBlockAppender",
    "DefaultBlockAppender",
    "Content"
  ]);
  var InspectorAdvancedControls = deprecateComponent(
    "InspectorAdvancedControls",
    import_block_editor46.InspectorAdvancedControls,
    ["Slot"]
  );
  var InspectorControls = deprecateComponent(
    "InspectorControls",
    import_block_editor46.InspectorControls,
    ["Slot"]
  );
  var PanelColorSettings = deprecateComponent(
    "PanelColorSettings",
    import_block_editor46.PanelColorSettings
  );
  var PlainText = deprecateComponent("PlainText", import_block_editor46.PlainText);
  var RichTextShortcut = deprecateComponent(
    "RichTextShortcut",
    import_block_editor46.RichTextShortcut
  );
  var RichTextToolbarButton = deprecateComponent(
    "RichTextToolbarButton",
    import_block_editor46.RichTextToolbarButton
  );
  var __unstableRichTextInputEvent = deprecateComponent(
    "__unstableRichTextInputEvent",
    import_block_editor46.__unstableRichTextInputEvent
  );
  var MediaPlaceholder = deprecateComponent(
    "MediaPlaceholder",
    import_block_editor46.MediaPlaceholder
  );
  var MediaUpload3 = deprecateComponent("MediaUpload", import_block_editor46.MediaUpload);
  var MediaUploadCheck2 = deprecateComponent(
    "MediaUploadCheck",
    import_block_editor46.MediaUploadCheck
  );
  var MultiSelectScrollIntoView = deprecateComponent(
    "MultiSelectScrollIntoView",
    import_block_editor46.MultiSelectScrollIntoView
  );
  var NavigableToolbar = deprecateComponent(
    "NavigableToolbar",
    import_block_editor46.NavigableToolbar
  );
  var ObserveTyping = deprecateComponent(
    "ObserveTyping",
    import_block_editor46.ObserveTyping
  );
  var SkipToSelectedBlock = deprecateComponent(
    "SkipToSelectedBlock",
    import_block_editor46.SkipToSelectedBlock
  );
  var URLInput = deprecateComponent("URLInput", import_block_editor46.URLInput);
  var URLInputButton = deprecateComponent(
    "URLInputButton",
    import_block_editor46.URLInputButton
  );
  var URLPopover = deprecateComponent("URLPopover", import_block_editor46.URLPopover);
  var Warning = deprecateComponent("Warning", import_block_editor46.Warning);
  var WritingFlow = deprecateComponent("WritingFlow", import_block_editor46.WritingFlow);
  var createCustomColorsHOC = deprecateFunction(
    "createCustomColorsHOC",
    import_block_editor46.createCustomColorsHOC
  );
  var getColorClassName = deprecateFunction(
    "getColorClassName",
    import_block_editor46.getColorClassName
  );
  var getColorObjectByAttributeValues = deprecateFunction(
    "getColorObjectByAttributeValues",
    import_block_editor46.getColorObjectByAttributeValues
  );
  var getColorObjectByColorValue = deprecateFunction(
    "getColorObjectByColorValue",
    import_block_editor46.getColorObjectByColorValue
  );
  var getFontSize = deprecateFunction("getFontSize", import_block_editor46.getFontSize);
  var getFontSizeClass = deprecateFunction(
    "getFontSizeClass",
    import_block_editor46.getFontSizeClass
  );
  var withColorContext = deprecateFunction(
    "withColorContext",
    import_block_editor46.withColorContext
  );
  var withColors = deprecateFunction("withColors", import_block_editor46.withColors);
  var withFontSizes = deprecateFunction(
    "withFontSizes",
    import_block_editor46.withFontSizes
  );

  // packages/editor/build-module/components/index.js
  var VisualEditorGlobalKeyboardShortcuts = EditorKeyboardShortcuts;
  var TextEditorGlobalKeyboardShortcuts = EditorKeyboardShortcuts;

  // packages/editor/build-module/hooks/default-autocompleters.js
  function setDefaultCompleters(completers = []) {
    completers.push({ ...user_default });
    return completers;
  }
  (0, import_hooks14.addFilter)(
    "editor.Autocomplete.completers",
    "editor/autocompleters/set-default-completers",
    setDefaultCompleters
  );

  // packages/editor/build-module/hooks/media-upload.js
  var import_hooks15 = __toESM(require_hooks());
  var import_media_utils4 = __toESM(require_media_utils());
  (0, import_hooks15.addFilter)(
    "editor.MediaUpload",
    "core/editor/components/media-upload",
    () => import_media_utils4.MediaUpload
  );

  // packages/editor/build-module/hooks/pattern-overrides.js
  var import_jsx_runtime196 = __toESM(require_jsx_runtime());
  var import_hooks16 = __toESM(require_hooks());
  var import_patterns8 = __toESM(require_patterns());
  var import_compose33 = __toESM(require_compose());
  var import_block_editor47 = __toESM(require_block_editor());
  var import_data152 = __toESM(require_data());
  var import_blocks18 = __toESM(require_blocks());
  var {
    PatternOverridesControls,
    ResetOverridesControl,
    PatternOverridesBlockControls,
    PATTERN_TYPES: PATTERN_TYPES4,
    PARTIAL_SYNCING_SUPPORTED_BLOCKS,
    PATTERN_SYNC_TYPES
  } = unlock(import_patterns8.privateApis);
  var withPatternOverrideControls = (0, import_compose33.createHigherOrderComponent)(
    (BlockEdit2) => (props) => {
      const isSupportedBlock = !!PARTIAL_SYNCING_SUPPORTED_BLOCKS[props.name];
      return /* @__PURE__ */ (0, import_jsx_runtime196.jsxs)(import_jsx_runtime196.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime196.jsx)(BlockEdit2, { ...props }, "edit"),
        props.isSelected && isSupportedBlock && /* @__PURE__ */ (0, import_jsx_runtime196.jsx)(ControlsWithStoreSubscription, { ...props }),
        isSupportedBlock && /* @__PURE__ */ (0, import_jsx_runtime196.jsx)(PatternOverridesBlockControls, {})
      ] });
    },
    "withPatternOverrideControls"
  );
  function ControlsWithStoreSubscription(props) {
    const blockEditingMode = (0, import_block_editor47.useBlockEditingMode)();
    const { hasPatternOverridesSource, isEditingSyncedPattern } = (0, import_data152.useSelect)(
      (select4) => {
        const { getCurrentPostType: getCurrentPostType2, getEditedPostAttribute: getEditedPostAttribute2 } = select4(store);
        return {
          // For editing link to the site editor if the theme and user permissions support it.
          hasPatternOverridesSource: !!(0, import_blocks18.getBlockBindingsSource)(
            "core/pattern-overrides"
          ),
          isEditingSyncedPattern: getCurrentPostType2() === PATTERN_TYPES4.user && getEditedPostAttribute2("meta")?.wp_pattern_sync_status !== PATTERN_SYNC_TYPES.unsynced && getEditedPostAttribute2("wp_pattern_sync_status") !== PATTERN_SYNC_TYPES.unsynced
        };
      },
      []
    );
    const bindings = props.attributes.metadata?.bindings;
    const hasPatternBindings = !!bindings && Object.values(bindings).some(
      (binding) => binding.source === "core/pattern-overrides"
    );
    const shouldShowPatternOverridesControls = isEditingSyncedPattern && blockEditingMode === "default";
    const shouldShowResetOverridesControl = !isEditingSyncedPattern && !!props.attributes.metadata?.name && blockEditingMode !== "disabled" && hasPatternBindings;
    if (!hasPatternOverridesSource) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime196.jsxs)(import_jsx_runtime196.Fragment, { children: [
      shouldShowPatternOverridesControls && /* @__PURE__ */ (0, import_jsx_runtime196.jsx)(PatternOverridesControls, { ...props }),
      shouldShowResetOverridesControl && /* @__PURE__ */ (0, import_jsx_runtime196.jsx)(ResetOverridesControl, { ...props })
    ] });
  }
  (0, import_hooks16.addFilter)(
    "editor.BlockEdit",
    "core/editor/with-pattern-override-controls",
    withPatternOverrideControls
  );

  // packages/editor/build-module/hooks/navigation-link-view-button.js
  var import_jsx_runtime197 = __toESM(require_jsx_runtime());
  var import_hooks17 = __toESM(require_hooks());
  var import_compose34 = __toESM(require_compose());
  var import_element96 = __toESM(require_element());
  var import_i18n130 = __toESM(require_i18n());
  var import_block_editor48 = __toESM(require_block_editor());
  var import_components102 = __toESM(require_components());
  var import_data153 = __toESM(require_data());
  var SUPPORTED_BLOCKS = ["core/navigation-link", "core/navigation-submenu"];
  function NavigationViewButton({ attributes }) {
    const { kind, id, type } = attributes;
    const blockEditingMode = (0, import_block_editor48.useBlockEditingMode)();
    const onNavigateToEntityRecord = (0, import_data153.useSelect)(
      (select4) => select4(import_block_editor48.store).getSettings().onNavigateToEntityRecord,
      []
    );
    const onViewPage = (0, import_element96.useCallback)(() => {
      if (kind === "post-type" && type === "page" && id && onNavigateToEntityRecord) {
        onNavigateToEntityRecord({
          postId: id,
          postType: type
        });
      }
    }, [kind, id, type, onNavigateToEntityRecord]);
    if (kind !== "post-type" || type !== "page" || !id || !onNavigateToEntityRecord || blockEditingMode !== "contentOnly") {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime197.jsx)(import_block_editor48.__unstableBlockToolbarLastItem, { children: /* @__PURE__ */ (0, import_jsx_runtime197.jsx)(import_components102.ToolbarGroup, { children: /* @__PURE__ */ (0, import_jsx_runtime197.jsx)(
      import_components102.ToolbarButton,
      {
        name: "view",
        title: (0, import_i18n130.__)("View"),
        onClick: onViewPage,
        children: (0, import_i18n130.__)("View")
      }
    ) }) });
  }
  var withNavigationViewButton = (0, import_compose34.createHigherOrderComponent)(
    (BlockEdit2) => (props) => {
      const isSupportedBlock = SUPPORTED_BLOCKS.includes(props.name);
      return /* @__PURE__ */ (0, import_jsx_runtime197.jsxs)(import_jsx_runtime197.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime197.jsx)(BlockEdit2, { ...props }, "edit"),
        props.isSelected && isSupportedBlock && /* @__PURE__ */ (0, import_jsx_runtime197.jsx)(NavigationViewButton, { ...props })
      ] });
    },
    "withNavigationViewButton"
  );
  (0, import_hooks17.addFilter)(
    "editor.BlockEdit",
    "core/editor/with-navigation-view-button",
    withNavigationViewButton
  );

  // packages/editor/build-module/hooks/template-part-navigation-edit-button.js
  var import_jsx_runtime198 = __toESM(require_jsx_runtime());
  var import_hooks18 = __toESM(require_hooks());
  var import_compose35 = __toESM(require_compose());
  var import_element97 = __toESM(require_element());
  var import_i18n131 = __toESM(require_i18n());
  var import_block_editor49 = __toESM(require_block_editor());
  var import_components103 = __toESM(require_components());
  var import_data154 = __toESM(require_data());
  var NAVIGATION_BLOCK_NAME = "core/navigation";
  var TEMPLATE_PART_BLOCK_NAME = "core/template-part";
  var BLOCK_INSPECTOR_AREA = "edit-post/block";
  function TemplatePartNavigationEditButton({ clientId }) {
    const { selectBlock: selectBlock2, flashBlock } = (0, import_data154.useDispatch)(import_block_editor49.store);
    const { enableComplementaryArea: enableComplementaryArea2 } = (0, import_data154.useDispatch)(store2);
    const {
      hasNavigationBlocks,
      firstNavigationBlockId,
      isNavigationEditable
    } = (0, import_data154.useSelect)(
      (select4) => {
        const {
          getClientIdsOfDescendants: getClientIdsOfDescendants2,
          getBlockName: getBlockName2,
          getBlockEditingMode
        } = select4(import_block_editor49.store);
        const descendants = getClientIdsOfDescendants2(clientId);
        const navigationBlocksInTemplatePart = descendants.filter(
          (blockId) => getBlockName2(blockId) === NAVIGATION_BLOCK_NAME
        );
        const _hasNavigationBlocks = navigationBlocksInTemplatePart.length > 0;
        const _firstNavigationBlockId = _hasNavigationBlocks ? navigationBlocksInTemplatePart[0] : null;
        return {
          hasNavigationBlocks: _hasNavigationBlocks,
          firstNavigationBlockId: _firstNavigationBlockId,
          // We can't use the useBlockEditingMode hook here because the current
          // context is the template part, not the navigation block.
          isNavigationEditable: getBlockEditingMode(_firstNavigationBlockId) !== "disabled"
        };
      },
      [clientId]
    );
    const onEditNavigation = (0, import_element97.useCallback)(() => {
      if (firstNavigationBlockId) {
        selectBlock2(firstNavigationBlockId);
        flashBlock(firstNavigationBlockId, 500);
        enableComplementaryArea2("core", BLOCK_INSPECTOR_AREA);
      }
    }, [
      firstNavigationBlockId,
      selectBlock2,
      flashBlock,
      enableComplementaryArea2
    ]);
    if (!hasNavigationBlocks || !isNavigationEditable) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime198.jsx)(import_block_editor49.BlockControls, { group: "other", children: /* @__PURE__ */ (0, import_jsx_runtime198.jsxs)(import_components103.ToolbarGroup, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime198.jsx)(import_components103.__experimentalDivider, { orientation: "vertical", marginEnd: 3 }),
      /* @__PURE__ */ (0, import_jsx_runtime198.jsx)(
        import_components103.ToolbarButton,
        {
          label: (0, import_i18n131.__)("Edit navigation"),
          onClick: onEditNavigation,
          children: (0, import_i18n131.__)("Edit navigation")
        }
      )
    ] }) });
  }
  var withTemplatePartNavigationEditButton = (0, import_compose35.createHigherOrderComponent)(
    (BlockEdit2) => (props) => {
      const isTemplatePart2 = props.name === TEMPLATE_PART_BLOCK_NAME;
      return /* @__PURE__ */ (0, import_jsx_runtime198.jsxs)(import_jsx_runtime198.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime198.jsx)(BlockEdit2, { ...props }, "edit"),
        props.isSelected && isTemplatePart2 && /* @__PURE__ */ (0, import_jsx_runtime198.jsx)(
          TemplatePartNavigationEditButton,
          {
            clientId: props.clientId
          }
        )
      ] });
    },
    "withTemplatePartNavigationEditButton"
  );
  (0, import_hooks18.addFilter)(
    "editor.BlockEdit",
    "core/editor/with-template-part-navigation-edit-button",
    withTemplatePartNavigationEditButton
  );

  // packages/editor/build-module/components/editor-interface/content-slot-fill.js
  var import_components104 = __toESM(require_components());
  var EditorContentSlotFill = (0, import_components104.createSlotFill)(
    Symbol("EditCanvasContainerSlot")
  );
  var content_slot_fill_default = EditorContentSlotFill;

  // packages/editor/build-module/components/header/back-button.js
  var import_jsx_runtime199 = __toESM(require_jsx_runtime());
  var import_components105 = __toESM(require_components());
  var slotName = "__experimentalMainDashboardButton";
  var useHasBackButton = () => {
    const fills = (0, import_components105.__experimentalUseSlotFills)(slotName);
    return Boolean(fills && fills.length);
  };
  var { Fill: Fill10, Slot: Slot10 } = (0, import_components105.createSlotFill)(slotName);
  var BackButton = Fill10;
  var BackButtonSlot = () => {
    const fills = (0, import_components105.__experimentalUseSlotFills)(slotName);
    return /* @__PURE__ */ (0, import_jsx_runtime199.jsx)(
      Slot10,
      {
        bubblesVirtually: true,
        fillProps: { length: !fills ? 0 : fills.length }
      }
    );
  };
  BackButton.Slot = BackButtonSlot;
  var back_button_default = BackButton;

  // packages/editor/build-module/components/editor/index.js
  var import_jsx_runtime248 = __toESM(require_jsx_runtime());
  var import_data199 = __toESM(require_data());
  var import_core_data103 = __toESM(require_core_data());
  var import_components147 = __toESM(require_components());
  var import_i18n171 = __toESM(require_i18n());

  // packages/editor/build-module/components/editor-interface/index.js
  var import_jsx_runtime228 = __toESM(require_jsx_runtime());
  var import_data178 = __toESM(require_data());
  var import_i18n155 = __toESM(require_i18n());
  var import_preferences21 = __toESM(require_preferences());
  var import_block_editor67 = __toESM(require_block_editor());
  var import_compose49 = __toESM(require_compose());
  var import_element115 = __toESM(require_element());

  // packages/editor/build-module/components/header/index.js
  var import_jsx_runtime218 = __toESM(require_jsx_runtime());
  var import_block_editor61 = __toESM(require_block_editor());
  var import_data169 = __toESM(require_data());
  var import_compose43 = __toESM(require_compose());
  var import_components123 = __toESM(require_components());
  var import_preferences19 = __toESM(require_preferences());
  var import_element107 = __toESM(require_element());

  // packages/editor/build-module/components/collab-sidebar/index.js
  var import_jsx_runtime206 = __toESM(require_jsx_runtime());
  var import_i18n140 = __toESM(require_i18n());
  var import_data159 = __toESM(require_data());
  var import_components112 = __toESM(require_components());
  var import_element102 = __toESM(require_element());
  var import_compose38 = __toESM(require_compose());
  var import_block_editor56 = __toESM(require_block_editor());

  // packages/editor/build-module/components/collab-sidebar/constants.js
  var collabHistorySidebarName = "edit-post/collab-history-sidebar";
  var collabSidebarName = "edit-post/collab-sidebar";
  var SIDEBARS = [collabHistorySidebarName, collabSidebarName];

  // packages/editor/build-module/components/collab-sidebar/comments.js
  var import_jsx_runtime202 = __toESM(require_jsx_runtime());
  var import_element100 = __toESM(require_element());
  var import_components108 = __toESM(require_components());
  var import_compose37 = __toESM(require_compose());
  var import_i18n136 = __toESM(require_i18n());
  var import_data157 = __toESM(require_data());
  var import_dom6 = __toESM(require_dom());
  var import_block_editor52 = __toESM(require_block_editor());

  // packages/editor/build-module/components/collab-sidebar/comment-author-info.js
  var import_jsx_runtime200 = __toESM(require_jsx_runtime());
  var import_components106 = __toESM(require_components());
  var import_i18n133 = __toESM(require_i18n());
  var import_date6 = __toESM(require_date());
  var import_core_data85 = __toESM(require_core_data());
  var import_data155 = __toESM(require_data());
  var import_block_editor50 = __toESM(require_block_editor());

  // packages/editor/build-module/components/collab-sidebar/utils.js
  var import_i18n132 = __toESM(require_i18n());
  function sanitizeCommentString(str) {
    return str.trim();
  }
  function noop5() {
  }
  var AVATAR_BORDER_COLORS = [
    "#3858E9",
    // Blueberry
    "#9fB1FF",
    // Blueberry 2
    "#1D35B4",
    // Dark Blueberry
    "#1A1919",
    // Charcoal 0
    "#E26F56",
    // Pomegranate
    "#33F078",
    // Acid Green
    "#FFF972",
    // Lemon
    "#7A00DF"
    // Purple
  ];
  function getAvatarBorderColor(userId) {
    return AVATAR_BORDER_COLORS[userId % AVATAR_BORDER_COLORS.length];
  }
  function getCommentExcerpt(text, excerptLength = 10) {
    if (!text) {
      return "";
    }
    const wordCountType = (0, import_i18n132._x)("words", "Word count type. Do not translate!");
    const rawText = text.trim();
    let trimmedExcerpt = "";
    if (wordCountType === "words") {
      trimmedExcerpt = rawText.split(" ", excerptLength).join(" ");
    } else if (wordCountType === "characters_excluding_spaces") {
      const textWithSpaces = rawText.split("", excerptLength).join("");
      const numberOfSpaces = textWithSpaces.length - textWithSpaces.replaceAll(" ", "").length;
      trimmedExcerpt = rawText.split("", excerptLength + numberOfSpaces).join("");
    } else if (wordCountType === "characters_including_spaces") {
      trimmedExcerpt = rawText.split("", excerptLength).join("");
    }
    const isTrimmed = trimmedExcerpt !== rawText;
    return isTrimmed ? trimmedExcerpt + "\u2026" : trimmedExcerpt;
  }
  function focusCommentThread(commentId, container, additionalSelector) {
    if (!container) {
      return;
    }
    const threadSelector = commentId ? `[role=listitem][id="comment-thread-${commentId}"]` : "[role=listitem]:not([id])";
    const selector = additionalSelector ? `${threadSelector} ${additionalSelector}` : threadSelector;
    return new Promise((resolve) => {
      if (container.querySelector(selector)) {
        return resolve(container.querySelector(selector));
      }
      let timer = null;
      const observer = new window.MutationObserver(() => {
        if (container.querySelector(selector)) {
          clearTimeout(timer);
          observer.disconnect();
          resolve(container.querySelector(selector));
        }
      });
      observer.observe(container, {
        childList: true,
        subtree: true
      });
      timer = setTimeout(() => {
        observer.disconnect();
        resolve(null);
      }, 3e3);
    }).then((element) => element?.focus());
  }

  // packages/editor/build-module/components/collab-sidebar/comment-author-info.js
  function CommentAuthorInfo({ avatar, name, date, userId }) {
    const dateSettings = (0, import_date6.getSettings)();
    const {
      currentUserAvatar,
      currentUserName,
      currentUserId,
      dateFormat = dateSettings.formats.date
    } = (0, import_data155.useSelect)((select4) => {
      const { getCurrentUser, getEntityRecord } = select4(import_core_data85.store);
      const { getSettings: getSettings4 } = select4(import_block_editor50.store);
      const userData = getCurrentUser();
      const { __experimentalDiscussionSettings } = getSettings4();
      const defaultAvatar = __experimentalDiscussionSettings?.avatarURL;
      const siteSettings = getEntityRecord("root", "site");
      return {
        currentUserAvatar: userData?.avatar_urls?.[48] ?? defaultAvatar,
        currentUserName: userData?.name,
        currentUserId: userData?.id,
        dateFormat: siteSettings?.date_format
      };
    }, []);
    const commentDate = (0, import_date6.getDate)(date);
    const commentDateTime = (0, import_date6.dateI18n)("c", commentDate);
    const shouldShowHumanTimeDiff = Math.floor((/* @__PURE__ */ new Date() - commentDate) / (1e3 * 60 * 60 * 24)) < 30;
    const commentDateText = shouldShowHumanTimeDiff ? (0, import_date6.humanTimeDiff)(commentDate) : (0, import_date6.dateI18n)(dateFormat, commentDate);
    const tooltipText = (0, import_date6.dateI18n)(
      // translators: Use a non-breaking space between 'g:i' and 'a' if appropriate.
      (0, import_i18n133._x)("F j, Y g:i\xA0a", "Note date full date format"),
      date
    );
    return /* @__PURE__ */ (0, import_jsx_runtime200.jsxs)(import_jsx_runtime200.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime200.jsx)(
        "img",
        {
          src: avatar || currentUserAvatar,
          className: "editor-collab-sidebar-panel__user-avatar",
          alt: (0, import_i18n133.__)("User avatar"),
          width: 32,
          height: 32,
          style: {
            borderColor: getAvatarBorderColor(
              userId ?? currentUserId
            )
          }
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime200.jsxs)(import_components106.__experimentalVStack, { spacing: "0", children: [
        /* @__PURE__ */ (0, import_jsx_runtime200.jsx)("span", { className: "editor-collab-sidebar-panel__user-name", children: name ?? currentUserName }),
        date && /* @__PURE__ */ (0, import_jsx_runtime200.jsx)(import_components106.Tooltip, { placement: "top", text: tooltipText, children: /* @__PURE__ */ (0, import_jsx_runtime200.jsx)(
          "time",
          {
            dateTime: commentDateTime,
            className: "editor-collab-sidebar-panel__user-time",
            children: commentDateText
          }
        ) })
      ] })
    ] });
  }
  var comment_author_info_default = CommentAuthorInfo;

  // packages/editor/build-module/components/collab-sidebar/comment-form.js
  var import_jsx_runtime201 = __toESM(require_jsx_runtime());
  var import_react_autosize_textarea2 = __toESM(require_lib());
  var import_element98 = __toESM(require_element());
  var import_components107 = __toESM(require_components());
  var import_i18n134 = __toESM(require_i18n());
  var import_compose36 = __toESM(require_compose());
  function CommentForm({
    onSubmit,
    onCancel,
    thread,
    submitButtonText,
    labelText,
    reflowComments = noop5
  }) {
    const [inputComment, setInputComment] = (0, import_element98.useState)(
      thread?.content?.raw ?? ""
    );
    const debouncedCommentUpdated = (0, import_compose36.useDebounce)(reflowComments, 100);
    const updateComment = (value) => {
      setInputComment(value);
    };
    const inputId = (0, import_compose36.useInstanceId)(CommentForm, "comment-input");
    const isDisabled = inputComment === thread?.content?.raw || !sanitizeCommentString(inputComment).length;
    return /* @__PURE__ */ (0, import_jsx_runtime201.jsxs)(
      import_components107.__experimentalVStack,
      {
        className: "editor-collab-sidebar-panel__comment-form",
        spacing: "4",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(import_components107.VisuallyHidden, { as: "label", htmlFor: inputId, children: labelText ?? (0, import_i18n134.__)("Note") }),
          /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(
            import_react_autosize_textarea2.default,
            {
              id: inputId,
              value: inputComment ?? "",
              onChange: (comment) => {
                updateComment(comment.target.value);
                debouncedCommentUpdated();
              },
              rows: 1,
              maxRows: 20
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime201.jsxs)(import_components107.__experimentalHStack, { spacing: "2", justify: "flex-end", wrap: true, children: [
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(import_components107.Button, { size: "compact", variant: "tertiary", onClick: onCancel, children: /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(import_components107.__experimentalTruncate, { children: (0, import_i18n134.__)("Cancel") }) }),
            /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(
              import_components107.Button,
              {
                size: "compact",
                accessibleWhenDisabled: true,
                variant: "primary",
                onClick: () => {
                  onSubmit(inputComment);
                  setInputComment("");
                },
                disabled: isDisabled,
                children: /* @__PURE__ */ (0, import_jsx_runtime201.jsx)(import_components107.__experimentalTruncate, { children: submitButtonText })
              }
            )
          ] })
        ]
      }
    );
  }
  var comment_form_default = CommentForm;

  // node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
  var min = Math.min;
  var max = Math.max;
  var round = Math.round;
  var floor = Math.floor;
  var createCoords = (v2) => ({
    x: v2,
    y: v2
  });
  function evaluate(value, param) {
    return typeof value === "function" ? value(param) : value;
  }
  function getSide(placement) {
    return placement.split("-")[0];
  }
  function getAlignment(placement) {
    return placement.split("-")[1];
  }
  function getOppositeAxis(axis) {
    return axis === "x" ? "y" : "x";
  }
  function getAxisLength(axis) {
    return axis === "y" ? "height" : "width";
  }
  var yAxisSides = /* @__PURE__ */ new Set(["top", "bottom"]);
  function getSideAxis(placement) {
    return yAxisSides.has(getSide(placement)) ? "y" : "x";
  }
  function getAlignmentAxis(placement) {
    return getOppositeAxis(getSideAxis(placement));
  }
  function rectToClientRect(rect) {
    const {
      x,
      y: y2,
      width,
      height
    } = rect;
    return {
      width,
      height,
      top: y2,
      left: x,
      right: x + width,
      bottom: y2 + height,
      x,
      y: y2
    };
  }

  // node_modules/@floating-ui/core/dist/floating-ui.core.mjs
  function computeCoordsFromPlacement(_ref, placement, rtl) {
    let {
      reference,
      floating
    } = _ref;
    const sideAxis = getSideAxis(placement);
    const alignmentAxis = getAlignmentAxis(placement);
    const alignLength = getAxisLength(alignmentAxis);
    const side = getSide(placement);
    const isVertical = sideAxis === "y";
    const commonX = reference.x + reference.width / 2 - floating.width / 2;
    const commonY = reference.y + reference.height / 2 - floating.height / 2;
    const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
    let coords;
    switch (side) {
      case "top":
        coords = {
          x: commonX,
          y: reference.y - floating.height
        };
        break;
      case "bottom":
        coords = {
          x: commonX,
          y: reference.y + reference.height
        };
        break;
      case "right":
        coords = {
          x: reference.x + reference.width,
          y: commonY
        };
        break;
      case "left":
        coords = {
          x: reference.x - floating.width,
          y: commonY
        };
        break;
      default:
        coords = {
          x: reference.x,
          y: reference.y
        };
    }
    switch (getAlignment(placement)) {
      case "start":
        coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
        break;
      case "end":
        coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
        break;
    }
    return coords;
  }
  var computePosition = async (reference, floating, config) => {
    const {
      placement = "bottom",
      strategy = "absolute",
      middleware = [],
      platform: platform2
    } = config;
    const validMiddleware = middleware.filter(Boolean);
    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
    let rects = await platform2.getElementRects({
      reference,
      floating,
      strategy
    });
    let {
      x,
      y: y2
    } = computeCoordsFromPlacement(rects, placement, rtl);
    let statefulPlacement = placement;
    let middlewareData = {};
    let resetCount = 0;
    for (let i2 = 0; i2 < validMiddleware.length; i2++) {
      const {
        name,
        fn
      } = validMiddleware[i2];
      const {
        x: nextX,
        y: nextY,
        data,
        reset
      } = await fn({
        x,
        y: y2,
        initialPlacement: placement,
        placement: statefulPlacement,
        strategy,
        middlewareData,
        rects,
        platform: platform2,
        elements: {
          reference,
          floating
        }
      });
      x = nextX != null ? nextX : x;
      y2 = nextY != null ? nextY : y2;
      middlewareData = {
        ...middlewareData,
        [name]: {
          ...middlewareData[name],
          ...data
        }
      };
      if (reset && resetCount <= 50) {
        resetCount++;
        if (typeof reset === "object") {
          if (reset.placement) {
            statefulPlacement = reset.placement;
          }
          if (reset.rects) {
            rects = reset.rects === true ? await platform2.getElementRects({
              reference,
              floating,
              strategy
            }) : reset.rects;
          }
          ({
            x,
            y: y2
          } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
        }
        i2 = -1;
      }
    }
    return {
      x,
      y: y2,
      placement: statefulPlacement,
      strategy,
      middlewareData
    };
  };
  var originSides = /* @__PURE__ */ new Set(["left", "top"]);
  async function convertValueToCoords(state, options) {
    const {
      placement,
      platform: platform2,
      elements
    } = state;
    const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
    const side = getSide(placement);
    const alignment = getAlignment(placement);
    const isVertical = getSideAxis(placement) === "y";
    const mainAxisMulti = originSides.has(side) ? -1 : 1;
    const crossAxisMulti = rtl && isVertical ? -1 : 1;
    const rawValue = evaluate(options, state);
    let {
      mainAxis,
      crossAxis,
      alignmentAxis
    } = typeof rawValue === "number" ? {
      mainAxis: rawValue,
      crossAxis: 0,
      alignmentAxis: null
    } : {
      mainAxis: rawValue.mainAxis || 0,
      crossAxis: rawValue.crossAxis || 0,
      alignmentAxis: rawValue.alignmentAxis
    };
    if (alignment && typeof alignmentAxis === "number") {
      crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
    }
    return isVertical ? {
      x: crossAxis * crossAxisMulti,
      y: mainAxis * mainAxisMulti
    } : {
      x: mainAxis * mainAxisMulti,
      y: crossAxis * crossAxisMulti
    };
  }
  var offset = function(options) {
    if (options === void 0) {
      options = 0;
    }
    return {
      name: "offset",
      options,
      async fn(state) {
        var _middlewareData$offse, _middlewareData$arrow;
        const {
          x,
          y: y2,
          placement,
          middlewareData
        } = state;
        const diffCoords = await convertValueToCoords(state, options);
        if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
          return {};
        }
        return {
          x: x + diffCoords.x,
          y: y2 + diffCoords.y,
          data: {
            ...diffCoords,
            placement
          }
        };
      }
    };
  };

  // node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
  function hasWindow() {
    return typeof window !== "undefined";
  }
  function getNodeName(node) {
    if (isNode(node)) {
      return (node.nodeName || "").toLowerCase();
    }
    return "#document";
  }
  function getWindow(node) {
    var _node$ownerDocument;
    return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
  }
  function getDocumentElement(node) {
    var _ref;
    return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
  }
  function isNode(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof Node || value instanceof getWindow(value).Node;
  }
  function isElement(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof Element || value instanceof getWindow(value).Element;
  }
  function isHTMLElement(value) {
    if (!hasWindow()) {
      return false;
    }
    return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
  }
  function isShadowRoot(value) {
    if (!hasWindow() || typeof ShadowRoot === "undefined") {
      return false;
    }
    return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
  }
  var invalidOverflowDisplayValues = /* @__PURE__ */ new Set(["inline", "contents"]);
  function isOverflowElement(element) {
    const {
      overflow,
      overflowX,
      overflowY,
      display
    } = getComputedStyle(element);
    return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !invalidOverflowDisplayValues.has(display);
  }
  var tableElements = /* @__PURE__ */ new Set(["table", "td", "th"]);
  function isTableElement(element) {
    return tableElements.has(getNodeName(element));
  }
  var topLayerSelectors = [":popover-open", ":modal"];
  function isTopLayer(element) {
    return topLayerSelectors.some((selector) => {
      try {
        return element.matches(selector);
      } catch (_e) {
        return false;
      }
    });
  }
  var transformProperties = ["transform", "translate", "scale", "rotate", "perspective"];
  var willChangeValues = ["transform", "translate", "scale", "rotate", "perspective", "filter"];
  var containValues = ["paint", "layout", "strict", "content"];
  function isContainingBlock(elementOrCss) {
    const webkit = isWebKit();
    const css = isElement(elementOrCss) ? getComputedStyle(elementOrCss) : elementOrCss;
    return transformProperties.some((value) => css[value] ? css[value] !== "none" : false) || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || willChangeValues.some((value) => (css.willChange || "").includes(value)) || containValues.some((value) => (css.contain || "").includes(value));
  }
  function getContainingBlock(element) {
    let currentNode = getParentNode(element);
    while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
      if (isContainingBlock(currentNode)) {
        return currentNode;
      } else if (isTopLayer(currentNode)) {
        return null;
      }
      currentNode = getParentNode(currentNode);
    }
    return null;
  }
  function isWebKit() {
    if (typeof CSS === "undefined" || !CSS.supports) return false;
    return CSS.supports("-webkit-backdrop-filter", "none");
  }
  var lastTraversableNodeNames = /* @__PURE__ */ new Set(["html", "body", "#document"]);
  function isLastTraversableNode(node) {
    return lastTraversableNodeNames.has(getNodeName(node));
  }
  function getComputedStyle(element) {
    return getWindow(element).getComputedStyle(element);
  }
  function getNodeScroll(element) {
    if (isElement(element)) {
      return {
        scrollLeft: element.scrollLeft,
        scrollTop: element.scrollTop
      };
    }
    return {
      scrollLeft: element.scrollX,
      scrollTop: element.scrollY
    };
  }
  function getParentNode(node) {
    if (getNodeName(node) === "html") {
      return node;
    }
    const result = (
      // Step into the shadow DOM of the parent of a slotted node.
      node.assignedSlot || // DOM Element detected.
      node.parentNode || // ShadowRoot detected.
      isShadowRoot(node) && node.host || // Fallback.
      getDocumentElement(node)
    );
    return isShadowRoot(result) ? result.host : result;
  }
  function getNearestOverflowAncestor(node) {
    const parentNode = getParentNode(node);
    if (isLastTraversableNode(parentNode)) {
      return node.ownerDocument ? node.ownerDocument.body : node.body;
    }
    if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
      return parentNode;
    }
    return getNearestOverflowAncestor(parentNode);
  }
  function getOverflowAncestors(node, list, traverseIframes) {
    var _node$ownerDocument2;
    if (list === void 0) {
      list = [];
    }
    if (traverseIframes === void 0) {
      traverseIframes = true;
    }
    const scrollableAncestor = getNearestOverflowAncestor(node);
    const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
    const win = getWindow(scrollableAncestor);
    if (isBody) {
      const frameElement = getFrameElement(win);
      return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);
    }
    return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
  }
  function getFrameElement(win) {
    return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;
  }

  // node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
  function getCssDimensions(element) {
    const css = getComputedStyle(element);
    let width = parseFloat(css.width) || 0;
    let height = parseFloat(css.height) || 0;
    const hasOffset = isHTMLElement(element);
    const offsetWidth = hasOffset ? element.offsetWidth : width;
    const offsetHeight = hasOffset ? element.offsetHeight : height;
    const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
    if (shouldFallback) {
      width = offsetWidth;
      height = offsetHeight;
    }
    return {
      width,
      height,
      $: shouldFallback
    };
  }
  function unwrapElement(element) {
    return !isElement(element) ? element.contextElement : element;
  }
  function getScale(element) {
    const domElement = unwrapElement(element);
    if (!isHTMLElement(domElement)) {
      return createCoords(1);
    }
    const rect = domElement.getBoundingClientRect();
    const {
      width,
      height,
      $
    } = getCssDimensions(domElement);
    let x = ($ ? round(rect.width) : rect.width) / width;
    let y2 = ($ ? round(rect.height) : rect.height) / height;
    if (!x || !Number.isFinite(x)) {
      x = 1;
    }
    if (!y2 || !Number.isFinite(y2)) {
      y2 = 1;
    }
    return {
      x,
      y: y2
    };
  }
  var noOffsets = /* @__PURE__ */ createCoords(0);
  function getVisualOffsets(element) {
    const win = getWindow(element);
    if (!isWebKit() || !win.visualViewport) {
      return noOffsets;
    }
    return {
      x: win.visualViewport.offsetLeft,
      y: win.visualViewport.offsetTop
    };
  }
  function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
    if (isFixed === void 0) {
      isFixed = false;
    }
    if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
      return false;
    }
    return isFixed;
  }
  function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
    if (includeScale === void 0) {
      includeScale = false;
    }
    if (isFixedStrategy === void 0) {
      isFixedStrategy = false;
    }
    const clientRect = element.getBoundingClientRect();
    const domElement = unwrapElement(element);
    let scale = createCoords(1);
    if (includeScale) {
      if (offsetParent) {
        if (isElement(offsetParent)) {
          scale = getScale(offsetParent);
        }
      } else {
        scale = getScale(element);
      }
    }
    const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
    let x = (clientRect.left + visualOffsets.x) / scale.x;
    let y2 = (clientRect.top + visualOffsets.y) / scale.y;
    let width = clientRect.width / scale.x;
    let height = clientRect.height / scale.y;
    if (domElement) {
      const win = getWindow(domElement);
      const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
      let currentWin = win;
      let currentIFrame = getFrameElement(currentWin);
      while (currentIFrame && offsetParent && offsetWin !== currentWin) {
        const iframeScale = getScale(currentIFrame);
        const iframeRect = currentIFrame.getBoundingClientRect();
        const css = getComputedStyle(currentIFrame);
        const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
        const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
        x *= iframeScale.x;
        y2 *= iframeScale.y;
        width *= iframeScale.x;
        height *= iframeScale.y;
        x += left;
        y2 += top;
        currentWin = getWindow(currentIFrame);
        currentIFrame = getFrameElement(currentWin);
      }
    }
    return rectToClientRect({
      width,
      height,
      x,
      y: y2
    });
  }
  function getWindowScrollBarX(element, rect) {
    const leftScroll = getNodeScroll(element).scrollLeft;
    if (!rect) {
      return getBoundingClientRect(getDocumentElement(element)).left + leftScroll;
    }
    return rect.left + leftScroll;
  }
  function getHTMLOffset(documentElement, scroll, ignoreScrollbarX) {
    if (ignoreScrollbarX === void 0) {
      ignoreScrollbarX = false;
    }
    const htmlRect = documentElement.getBoundingClientRect();
    const x = htmlRect.left + scroll.scrollLeft - (ignoreScrollbarX ? 0 : (
      // RTL <body> scrollbar.
      getWindowScrollBarX(documentElement, htmlRect)
    ));
    const y2 = htmlRect.top + scroll.scrollTop;
    return {
      x,
      y: y2
    };
  }
  function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
    let {
      elements,
      rect,
      offsetParent,
      strategy
    } = _ref;
    const isFixed = strategy === "fixed";
    const documentElement = getDocumentElement(offsetParent);
    const topLayer = elements ? isTopLayer(elements.floating) : false;
    if (offsetParent === documentElement || topLayer && isFixed) {
      return rect;
    }
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    let scale = createCoords(1);
    const offsets = createCoords(0);
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isHTMLElement(offsetParent)) {
        const offsetRect = getBoundingClientRect(offsetParent);
        scale = getScale(offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      }
    }
    const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll, true) : createCoords(0);
    return {
      width: rect.width * scale.x,
      height: rect.height * scale.y,
      x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x + htmlOffset.x,
      y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y + htmlOffset.y
    };
  }
  function getClientRects(element) {
    return Array.from(element.getClientRects());
  }
  function getDocumentRect(element) {
    const html = getDocumentElement(element);
    const scroll = getNodeScroll(element);
    const body = element.ownerDocument.body;
    const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
    const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
    let x = -scroll.scrollLeft + getWindowScrollBarX(element);
    const y2 = -scroll.scrollTop;
    if (getComputedStyle(body).direction === "rtl") {
      x += max(html.clientWidth, body.clientWidth) - width;
    }
    return {
      width,
      height,
      x,
      y: y2
    };
  }
  function getViewportRect(element, strategy) {
    const win = getWindow(element);
    const html = getDocumentElement(element);
    const visualViewport = win.visualViewport;
    let width = html.clientWidth;
    let height = html.clientHeight;
    let x = 0;
    let y2 = 0;
    if (visualViewport) {
      width = visualViewport.width;
      height = visualViewport.height;
      const visualViewportBased = isWebKit();
      if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
        x = visualViewport.offsetLeft;
        y2 = visualViewport.offsetTop;
      }
    }
    return {
      width,
      height,
      x,
      y: y2
    };
  }
  var absoluteOrFixed = /* @__PURE__ */ new Set(["absolute", "fixed"]);
  function getInnerBoundingClientRect(element, strategy) {
    const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
    const top = clientRect.top + element.clientTop;
    const left = clientRect.left + element.clientLeft;
    const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
    const width = element.clientWidth * scale.x;
    const height = element.clientHeight * scale.y;
    const x = left * scale.x;
    const y2 = top * scale.y;
    return {
      width,
      height,
      x,
      y: y2
    };
  }
  function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
    let rect;
    if (clippingAncestor === "viewport") {
      rect = getViewportRect(element, strategy);
    } else if (clippingAncestor === "document") {
      rect = getDocumentRect(getDocumentElement(element));
    } else if (isElement(clippingAncestor)) {
      rect = getInnerBoundingClientRect(clippingAncestor, strategy);
    } else {
      const visualOffsets = getVisualOffsets(element);
      rect = {
        x: clippingAncestor.x - visualOffsets.x,
        y: clippingAncestor.y - visualOffsets.y,
        width: clippingAncestor.width,
        height: clippingAncestor.height
      };
    }
    return rectToClientRect(rect);
  }
  function hasFixedPositionAncestor(element, stopNode) {
    const parentNode = getParentNode(element);
    if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
      return false;
    }
    return getComputedStyle(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
  }
  function getClippingElementAncestors(element, cache) {
    const cachedResult = cache.get(element);
    if (cachedResult) {
      return cachedResult;
    }
    let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
    let currentContainingBlockComputedStyle = null;
    const elementIsFixed = getComputedStyle(element).position === "fixed";
    let currentNode = elementIsFixed ? getParentNode(element) : element;
    while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
      const computedStyle = getComputedStyle(currentNode);
      const currentNodeIsContaining = isContainingBlock(currentNode);
      if (!currentNodeIsContaining && computedStyle.position === "fixed") {
        currentContainingBlockComputedStyle = null;
      }
      const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && absoluteOrFixed.has(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
      if (shouldDropCurrentNode) {
        result = result.filter((ancestor) => ancestor !== currentNode);
      } else {
        currentContainingBlockComputedStyle = computedStyle;
      }
      currentNode = getParentNode(currentNode);
    }
    cache.set(element, result);
    return result;
  }
  function getClippingRect(_ref) {
    let {
      element,
      boundary,
      rootBoundary,
      strategy
    } = _ref;
    const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
    const clippingAncestors = [...elementClippingAncestors, rootBoundary];
    const firstClippingAncestor = clippingAncestors[0];
    const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
      const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
      accRect.top = max(rect.top, accRect.top);
      accRect.right = min(rect.right, accRect.right);
      accRect.bottom = min(rect.bottom, accRect.bottom);
      accRect.left = max(rect.left, accRect.left);
      return accRect;
    }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
    return {
      width: clippingRect.right - clippingRect.left,
      height: clippingRect.bottom - clippingRect.top,
      x: clippingRect.left,
      y: clippingRect.top
    };
  }
  function getDimensions(element) {
    const {
      width,
      height
    } = getCssDimensions(element);
    return {
      width,
      height
    };
  }
  function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
    const isOffsetParentAnElement = isHTMLElement(offsetParent);
    const documentElement = getDocumentElement(offsetParent);
    const isFixed = strategy === "fixed";
    const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
    let scroll = {
      scrollLeft: 0,
      scrollTop: 0
    };
    const offsets = createCoords(0);
    function setLeftRTLScrollbarOffset() {
      offsets.x = getWindowScrollBarX(documentElement);
    }
    if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
      if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
        scroll = getNodeScroll(offsetParent);
      }
      if (isOffsetParentAnElement) {
        const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
        offsets.x = offsetRect.x + offsetParent.clientLeft;
        offsets.y = offsetRect.y + offsetParent.clientTop;
      } else if (documentElement) {
        setLeftRTLScrollbarOffset();
      }
    }
    if (isFixed && !isOffsetParentAnElement && documentElement) {
      setLeftRTLScrollbarOffset();
    }
    const htmlOffset = documentElement && !isOffsetParentAnElement && !isFixed ? getHTMLOffset(documentElement, scroll) : createCoords(0);
    const x = rect.left + scroll.scrollLeft - offsets.x - htmlOffset.x;
    const y2 = rect.top + scroll.scrollTop - offsets.y - htmlOffset.y;
    return {
      x,
      y: y2,
      width: rect.width,
      height: rect.height
    };
  }
  function isStaticPositioned(element) {
    return getComputedStyle(element).position === "static";
  }
  function getTrueOffsetParent(element, polyfill) {
    if (!isHTMLElement(element) || getComputedStyle(element).position === "fixed") {
      return null;
    }
    if (polyfill) {
      return polyfill(element);
    }
    let rawOffsetParent = element.offsetParent;
    if (getDocumentElement(element) === rawOffsetParent) {
      rawOffsetParent = rawOffsetParent.ownerDocument.body;
    }
    return rawOffsetParent;
  }
  function getOffsetParent(element, polyfill) {
    const win = getWindow(element);
    if (isTopLayer(element)) {
      return win;
    }
    if (!isHTMLElement(element)) {
      let svgOffsetParent = getParentNode(element);
      while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
        if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
          return svgOffsetParent;
        }
        svgOffsetParent = getParentNode(svgOffsetParent);
      }
      return win;
    }
    let offsetParent = getTrueOffsetParent(element, polyfill);
    while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
      offsetParent = getTrueOffsetParent(offsetParent, polyfill);
    }
    if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
      return win;
    }
    return offsetParent || getContainingBlock(element) || win;
  }
  var getElementRects = async function(data) {
    const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
    const getDimensionsFn = this.getDimensions;
    const floatingDimensions = await getDimensionsFn(data.floating);
    return {
      reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
      floating: {
        x: 0,
        y: 0,
        width: floatingDimensions.width,
        height: floatingDimensions.height
      }
    };
  };
  function isRTL6(element) {
    return getComputedStyle(element).direction === "rtl";
  }
  var platform = {
    convertOffsetParentRelativeRectToViewportRelativeRect,
    getDocumentElement,
    getClippingRect,
    getOffsetParent,
    getElementRects,
    getClientRects,
    getDimensions,
    getScale,
    isElement,
    isRTL: isRTL6
  };
  function rectsAreEqual(a2, b2) {
    return a2.x === b2.x && a2.y === b2.y && a2.width === b2.width && a2.height === b2.height;
  }
  function observeMove(element, onMove) {
    let io = null;
    let timeoutId;
    const root = getDocumentElement(element);
    function cleanup() {
      var _io;
      clearTimeout(timeoutId);
      (_io = io) == null || _io.disconnect();
      io = null;
    }
    function refresh(skip, threshold) {
      if (skip === void 0) {
        skip = false;
      }
      if (threshold === void 0) {
        threshold = 1;
      }
      cleanup();
      const elementRectForRootMargin = element.getBoundingClientRect();
      const {
        left,
        top,
        width,
        height
      } = elementRectForRootMargin;
      if (!skip) {
        onMove();
      }
      if (!width || !height) {
        return;
      }
      const insetTop = floor(top);
      const insetRight = floor(root.clientWidth - (left + width));
      const insetBottom = floor(root.clientHeight - (top + height));
      const insetLeft = floor(left);
      const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
      const options = {
        rootMargin,
        threshold: max(0, min(1, threshold)) || 1
      };
      let isFirstUpdate = true;
      function handleObserve(entries) {
        const ratio = entries[0].intersectionRatio;
        if (ratio !== threshold) {
          if (!isFirstUpdate) {
            return refresh();
          }
          if (!ratio) {
            timeoutId = setTimeout(() => {
              refresh(false, 1e-7);
            }, 1e3);
          } else {
            refresh(false, ratio);
          }
        }
        if (ratio === 1 && !rectsAreEqual(elementRectForRootMargin, element.getBoundingClientRect())) {
          refresh();
        }
        isFirstUpdate = false;
      }
      try {
        io = new IntersectionObserver(handleObserve, {
          ...options,
          // Handle <iframe>s
          root: root.ownerDocument
        });
      } catch (_e) {
        io = new IntersectionObserver(handleObserve, options);
      }
      io.observe(element);
    }
    refresh(true);
    return cleanup;
  }
  function autoUpdate(reference, floating, update, options) {
    if (options === void 0) {
      options = {};
    }
    const {
      ancestorScroll = true,
      ancestorResize = true,
      elementResize = typeof ResizeObserver === "function",
      layoutShift = typeof IntersectionObserver === "function",
      animationFrame = false
    } = options;
    const referenceEl = unwrapElement(reference);
    const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.addEventListener("scroll", update, {
        passive: true
      });
      ancestorResize && ancestor.addEventListener("resize", update);
    });
    const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
    let reobserveFrame = -1;
    let resizeObserver = null;
    if (elementResize) {
      resizeObserver = new ResizeObserver((_ref) => {
        let [firstEntry] = _ref;
        if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
          resizeObserver.unobserve(floating);
          cancelAnimationFrame(reobserveFrame);
          reobserveFrame = requestAnimationFrame(() => {
            var _resizeObserver;
            (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
          });
        }
        update();
      });
      if (referenceEl && !animationFrame) {
        resizeObserver.observe(referenceEl);
      }
      resizeObserver.observe(floating);
    }
    let frameId;
    let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
    if (animationFrame) {
      frameLoop();
    }
    function frameLoop() {
      const nextRefRect = getBoundingClientRect(reference);
      if (prevRefRect && !rectsAreEqual(prevRefRect, nextRefRect)) {
        update();
      }
      prevRefRect = nextRefRect;
      frameId = requestAnimationFrame(frameLoop);
    }
    update();
    return () => {
      var _resizeObserver2;
      ancestors.forEach((ancestor) => {
        ancestorScroll && ancestor.removeEventListener("scroll", update);
        ancestorResize && ancestor.removeEventListener("resize", update);
      });
      cleanupIo == null || cleanupIo();
      (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
      resizeObserver = null;
      if (animationFrame) {
        cancelAnimationFrame(frameId);
      }
    };
  }
  var offset2 = offset;
  var computePosition2 = (reference, floating, options) => {
    const cache = /* @__PURE__ */ new Map();
    const mergedOptions = {
      platform,
      ...options
    };
    const platformWithCache = {
      ...mergedOptions.platform,
      _c: cache
    };
    return computePosition(reference, floating, {
      ...mergedOptions,
      platform: platformWithCache
    });
  };

  // node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.mjs
  var React = __toESM(require_react(), 1);
  var import_react = __toESM(require_react(), 1);
  var ReactDOM = __toESM(require_react_dom(), 1);
  var index = typeof document !== "undefined" ? import_react.useLayoutEffect : import_react.useEffect;
  function deepEqual(a2, b2) {
    if (a2 === b2) {
      return true;
    }
    if (typeof a2 !== typeof b2) {
      return false;
    }
    if (typeof a2 === "function" && a2.toString() === b2.toString()) {
      return true;
    }
    let length;
    let i2;
    let keys;
    if (a2 && b2 && typeof a2 === "object") {
      if (Array.isArray(a2)) {
        length = a2.length;
        if (length !== b2.length) return false;
        for (i2 = length; i2-- !== 0; ) {
          if (!deepEqual(a2[i2], b2[i2])) {
            return false;
          }
        }
        return true;
      }
      keys = Object.keys(a2);
      length = keys.length;
      if (length !== Object.keys(b2).length) {
        return false;
      }
      for (i2 = length; i2-- !== 0; ) {
        if (!{}.hasOwnProperty.call(b2, keys[i2])) {
          return false;
        }
      }
      for (i2 = length; i2-- !== 0; ) {
        const key = keys[i2];
        if (key === "_owner" && a2.$$typeof) {
          continue;
        }
        if (!deepEqual(a2[key], b2[key])) {
          return false;
        }
      }
      return true;
    }
    return a2 !== a2 && b2 !== b2;
  }
  function getDPR(element) {
    if (typeof window === "undefined") {
      return 1;
    }
    const win = element.ownerDocument.defaultView || window;
    return win.devicePixelRatio || 1;
  }
  function roundByDPR(element, value) {
    const dpr = getDPR(element);
    return Math.round(value * dpr) / dpr;
  }
  function useLatestRef(value) {
    const ref = React.useRef(value);
    index(() => {
      ref.current = value;
    });
    return ref;
  }
  function useFloating(options) {
    if (options === void 0) {
      options = {};
    }
    const {
      placement = "bottom",
      strategy = "absolute",
      middleware = [],
      platform: platform2,
      elements: {
        reference: externalReference,
        floating: externalFloating
      } = {},
      transform = true,
      whileElementsMounted,
      open
    } = options;
    const [data, setData] = React.useState({
      x: 0,
      y: 0,
      strategy,
      placement,
      middlewareData: {},
      isPositioned: false
    });
    const [latestMiddleware, setLatestMiddleware] = React.useState(middleware);
    if (!deepEqual(latestMiddleware, middleware)) {
      setLatestMiddleware(middleware);
    }
    const [_reference, _setReference] = React.useState(null);
    const [_floating, _setFloating] = React.useState(null);
    const setReference = React.useCallback((node) => {
      if (node !== referenceRef.current) {
        referenceRef.current = node;
        _setReference(node);
      }
    }, []);
    const setFloating = React.useCallback((node) => {
      if (node !== floatingRef.current) {
        floatingRef.current = node;
        _setFloating(node);
      }
    }, []);
    const referenceEl = externalReference || _reference;
    const floatingEl = externalFloating || _floating;
    const referenceRef = React.useRef(null);
    const floatingRef = React.useRef(null);
    const dataRef = React.useRef(data);
    const hasWhileElementsMounted = whileElementsMounted != null;
    const whileElementsMountedRef = useLatestRef(whileElementsMounted);
    const platformRef = useLatestRef(platform2);
    const update = React.useCallback(() => {
      if (!referenceRef.current || !floatingRef.current) {
        return;
      }
      const config = {
        placement,
        strategy,
        middleware: latestMiddleware
      };
      if (platformRef.current) {
        config.platform = platformRef.current;
      }
      computePosition2(referenceRef.current, floatingRef.current, config).then((data2) => {
        const fullData = {
          ...data2,
          isPositioned: true
        };
        if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
          dataRef.current = fullData;
          ReactDOM.flushSync(() => {
            setData(fullData);
          });
        }
      });
    }, [latestMiddleware, placement, strategy, platformRef]);
    index(() => {
      if (open === false && dataRef.current.isPositioned) {
        dataRef.current.isPositioned = false;
        setData((data2) => ({
          ...data2,
          isPositioned: false
        }));
      }
    }, [open]);
    const isMountedRef = React.useRef(false);
    index(() => {
      isMountedRef.current = true;
      return () => {
        isMountedRef.current = false;
      };
    }, []);
    index(() => {
      if (referenceEl) referenceRef.current = referenceEl;
      if (floatingEl) floatingRef.current = floatingEl;
      if (referenceEl && floatingEl) {
        if (whileElementsMountedRef.current) {
          return whileElementsMountedRef.current(referenceEl, floatingEl, update);
        }
        update();
      }
    }, [referenceEl, floatingEl, update, whileElementsMountedRef, hasWhileElementsMounted]);
    const refs = React.useMemo(() => ({
      reference: referenceRef,
      floating: floatingRef,
      setReference,
      setFloating
    }), [setReference, setFloating]);
    const elements = React.useMemo(() => ({
      reference: referenceEl,
      floating: floatingEl
    }), [referenceEl, floatingEl]);
    const floatingStyles = React.useMemo(() => {
      const initialStyles = {
        position: strategy,
        left: 0,
        top: 0
      };
      if (!elements.floating) {
        return initialStyles;
      }
      const x = roundByDPR(elements.floating, data.x);
      const y2 = roundByDPR(elements.floating, data.y);
      if (transform) {
        return {
          ...initialStyles,
          transform: "translate(" + x + "px, " + y2 + "px)",
          ...getDPR(elements.floating) >= 1.5 && {
            willChange: "transform"
          }
        };
      }
      return {
        position: strategy,
        left: x,
        top: y2
      };
    }, [strategy, transform, elements.floating, data.x, data.y]);
    return React.useMemo(() => ({
      ...data,
      update,
      refs,
      elements,
      floatingStyles
    }), [data, update, refs, elements, floatingStyles]);
  }

  // packages/editor/build-module/components/collab-sidebar/hooks.js
  var import_i18n135 = __toESM(require_i18n());
  var import_element99 = __toESM(require_element());
  var import_core_data86 = __toESM(require_core_data());
  var import_data156 = __toESM(require_data());
  var import_block_editor51 = __toESM(require_block_editor());
  var import_notices25 = __toESM(require_notices());
  var import_html_entities25 = __toESM(require_html_entities());
  var { useBlockElementRef, cleanEmptyObject: cleanEmptyObject2 } = unlock(
    import_block_editor51.privateApis
  );
  function useBlockComments(postId2) {
    const [commentLastUpdated, reflowComments] = (0, import_element99.useReducer)(
      () => Date.now(),
      0
    );
    const queryArgs = {
      post: postId2,
      type: "note",
      status: "all",
      per_page: 100
    };
    const { records: threads, totalPages } = (0, import_core_data86.useEntityRecords)(
      "root",
      "comment",
      queryArgs,
      { enabled: !!postId2 && typeof postId2 === "number" }
    );
    const { getBlockAttributes: getBlockAttributes2 } = (0, import_data156.useSelect)(import_block_editor51.store);
    const { clientIds } = (0, import_data156.useSelect)((select4) => {
      const { getClientIdsWithDescendants: getClientIdsWithDescendants2 } = select4(import_block_editor51.store);
      return {
        clientIds: getClientIdsWithDescendants2()
      };
    }, []);
    const { resultComments, unresolvedSortedThreads } = (0, import_element99.useMemo)(() => {
      const blocksWithComments = clientIds.reduce((results, clientId) => {
        const commentId = getBlockAttributes2(clientId)?.metadata?.noteId;
        if (commentId) {
          results[clientId] = commentId;
        }
        return results;
      }, {});
      const compare = {};
      const result = [];
      const allComments = threads ?? [];
      allComments.forEach((item) => {
        const itemBlock = Object.keys(blocksWithComments).find(
          (key) => blocksWithComments[key] === item.id
        );
        compare[item.id] = {
          ...item,
          reply: [],
          blockClientId: item.parent === 0 ? itemBlock : null
        };
      });
      allComments.forEach((item) => {
        if (item.parent === 0) {
          result.push(compare[item.id]);
        } else if (compare[item.parent]) {
          compare[item.parent].reply.push(compare[item.id]);
        }
      });
      if (0 === result?.length) {
        return { resultComments: [], unresolvedSortedThreads: [] };
      }
      const updatedResult = result.map((item) => ({
        ...item,
        reply: [...item.reply].reverse()
      }));
      const threadIdMap = new Map(
        updatedResult.map((thread) => [String(thread.id), thread])
      );
      const mappedIds = new Set(
        Object.values(blocksWithComments).map((id) => String(id))
      );
      const unresolvedSortedComments = Object.values(blocksWithComments).map((commentId) => threadIdMap.get(String(commentId))).filter(
        (thread) => thread !== void 0 && thread.status === "hold"
      );
      const resolvedSortedComments = Object.values(blocksWithComments).map((commentId) => threadIdMap.get(String(commentId))).filter(
        (thread) => thread !== void 0 && thread.status === "approved"
      );
      const orphanedComments = updatedResult.filter(
        (thread) => !mappedIds.has(String(thread.id))
      );
      const allSortedComments = [
        ...unresolvedSortedComments,
        ...resolvedSortedComments,
        ...orphanedComments
      ];
      return {
        resultComments: allSortedComments,
        unresolvedSortedThreads: unresolvedSortedComments
      };
    }, [clientIds, threads, getBlockAttributes2]);
    return {
      resultComments,
      unresolvedSortedThreads,
      totalPages,
      reflowComments,
      commentLastUpdated
    };
  }
  function useBlockCommentsActions(reflowComments = noop5) {
    const { createNotice } = (0, import_data156.useDispatch)(import_notices25.store);
    const { saveEntityRecord, deleteEntityRecord } = (0, import_data156.useDispatch)(import_core_data86.store);
    const { getCurrentPostId: getCurrentPostId2 } = (0, import_data156.useSelect)(store);
    const { getBlockAttributes: getBlockAttributes2, getSelectedBlockClientId: getSelectedBlockClientId2 } = (0, import_data156.useSelect)(import_block_editor51.store);
    const { updateBlockAttributes: updateBlockAttributes2 } = (0, import_data156.useDispatch)(import_block_editor51.store);
    const onError = (error) => {
      const errorMessage = error.message && error.code !== "unknown_error" ? (0, import_html_entities25.decodeEntities)(error.message) : (0, import_i18n135.__)("An error occurred while performing an update.");
      createNotice("error", errorMessage, {
        type: "snackbar",
        isDismissible: true
      });
    };
    const onCreate = async ({ content, parent }) => {
      try {
        const savedRecord = await saveEntityRecord(
          "root",
          "comment",
          {
            post: getCurrentPostId2(),
            content,
            status: "hold",
            type: "note",
            parent: parent || 0
          },
          { throwOnError: true }
        );
        if (!parent && savedRecord?.id) {
          const clientId = getSelectedBlockClientId2();
          const metadata = getBlockAttributes2(clientId)?.metadata;
          updateBlockAttributes2(clientId, {
            metadata: {
              ...metadata,
              noteId: savedRecord.id
            }
          });
        }
        createNotice(
          "snackbar",
          parent ? (0, import_i18n135.__)("Reply added.") : (0, import_i18n135.__)("Note added."),
          {
            type: "snackbar",
            isDismissible: true
          }
        );
        setTimeout(reflowComments, 300);
        return savedRecord;
      } catch (error) {
        reflowComments();
        onError(error);
      }
    };
    const onEdit = async ({ id, content, status }) => {
      const messageType = status ? status : "updated";
      const messages = {
        approved: (0, import_i18n135.__)("Note marked as resolved."),
        hold: (0, import_i18n135.__)("Note reopened."),
        updated: (0, import_i18n135.__)("Note updated.")
      };
      try {
        if (status === "approved" || status === "hold") {
          await saveEntityRecord(
            "root",
            "comment",
            {
              id,
              status
            },
            {
              throwOnError: true
            }
          );
          const newCommentData = {
            post: getCurrentPostId2(),
            content: content || "",
            // Empty content for resolve, content for reopen.
            type: "note",
            status,
            parent: id,
            meta: {
              _wp_note_status: status === "approved" ? "resolved" : "reopen"
            }
          };
          await saveEntityRecord("root", "comment", newCommentData, {
            throwOnError: true
          });
        } else {
          const updateData = {
            id,
            content,
            status
          };
          await saveEntityRecord("root", "comment", updateData, {
            throwOnError: true
          });
        }
        createNotice(
          "snackbar",
          messages[messageType] ?? (0, import_i18n135.__)("Note updated."),
          {
            type: "snackbar",
            isDismissible: true
          }
        );
        reflowComments();
      } catch (error) {
        reflowComments();
        onError(error);
      }
    };
    const onDelete = async (comment) => {
      try {
        await deleteEntityRecord(
          "root",
          "comment",
          comment.id,
          void 0,
          {
            throwOnError: true
          }
        );
        if (!comment.parent) {
          const clientId = getSelectedBlockClientId2();
          const metadata = getBlockAttributes2(clientId)?.metadata;
          updateBlockAttributes2(clientId, {
            metadata: cleanEmptyObject2({
              ...metadata,
              noteId: void 0
            })
          });
        }
        createNotice("snackbar", (0, import_i18n135.__)("Note deleted."), {
          type: "snackbar",
          isDismissible: true
        });
        reflowComments();
      } catch (error) {
        reflowComments();
        onError(error);
      }
    };
    return { onCreate, onEdit, onDelete };
  }
  function useEnableFloatingSidebar(enabled = false) {
    const registry = (0, import_data156.useRegistry)();
    (0, import_element99.useEffect)(() => {
      if (!enabled) {
        return;
      }
      return registry.subscribe(() => {
        const activeSidebar = registry.select(store2).getActiveComplementaryArea("core");
        if (!activeSidebar) {
          registry.dispatch(store2).enableComplementaryArea("core", collabSidebarName);
        }
      });
    }, [enabled, registry]);
  }
  function useFloatingThread({
    thread,
    calculatedOffset,
    setHeights,
    selectedThread,
    setBlockRef,
    commentLastUpdated
  }) {
    const blockRef = (0, import_element99.useRef)();
    useBlockElementRef(thread.blockClientId, blockRef);
    const updateHeight = (0, import_element99.useCallback)(
      (id, newHeight) => {
        setHeights((prev) => {
          if (prev[id] !== newHeight) {
            return { ...prev, [id]: newHeight };
          }
          return prev;
        });
      },
      [setHeights]
    );
    const { y: y2, refs } = useFloating({
      placement: "right-start",
      middleware: [
        offset2({
          crossAxis: calculatedOffset || -16
        })
      ],
      whileElementsMounted: autoUpdate
    });
    (0, import_element99.useEffect)(() => {
      if (blockRef.current) {
        refs.setReference(blockRef.current);
      }
    }, [blockRef, refs]);
    (0, import_element99.useEffect)(() => {
      if (refs.floating?.current) {
        setBlockRef(thread.id, blockRef.current);
      }
    }, [thread.id, refs.floating, setBlockRef]);
    (0, import_element99.useEffect)(() => {
      if (refs.floating?.current) {
        const newHeight = refs.floating.current.scrollHeight;
        updateHeight(thread.id, newHeight);
      }
    }, [
      thread.id,
      updateHeight,
      refs.floating,
      selectedThread,
      commentLastUpdated
    ]);
    return {
      blockRef,
      y: y2,
      refs
    };
  }

  // packages/editor/build-module/components/collab-sidebar/comments.js
  var { useBlockElement } = unlock(import_block_editor52.privateApis);
  var { Menu } = unlock(import_components108.privateApis);
  function Comments({
    threads,
    onEditComment,
    onAddReply,
    onCommentDelete,
    setShowCommentBoard,
    commentSidebarRef,
    reflowComments,
    isFloating = false,
    commentLastUpdated
  }) {
    const [heights, setHeights] = (0, import_element100.useState)({});
    const [selectedThread, setSelectedThread] = (0, import_element100.useState)(null);
    const [boardOffsets, setBoardOffsets] = (0, import_element100.useState)({});
    const [blockRefs, setBlockRefs] = (0, import_element100.useState)({});
    const { blockCommentId, selectedBlockClientId } = (0, import_data157.useSelect)((select4) => {
      const { getBlockAttributes: getBlockAttributes2, getSelectedBlockClientId: getSelectedBlockClientId2 } = select4(import_block_editor52.store);
      const clientId = getSelectedBlockClientId2();
      return {
        blockCommentId: clientId ? getBlockAttributes2(clientId)?.metadata?.noteId : null,
        selectedBlockClientId: clientId
      };
    }, []);
    const relatedBlockElement = useBlockElement(selectedBlockClientId);
    const handleDelete = async (comment) => {
      const currentIndex = threads.findIndex((t2) => t2.id === comment.id);
      const nextThread = threads[currentIndex + 1];
      const prevThread = threads[currentIndex - 1];
      await onCommentDelete(comment);
      if (comment.parent !== 0) {
        setSelectedThread(comment.parent);
        focusCommentThread(comment.parent, commentSidebarRef.current);
        return;
      }
      if (nextThread) {
        setSelectedThread(nextThread.id);
        focusCommentThread(nextThread.id, commentSidebarRef.current);
      } else if (prevThread) {
        setSelectedThread(prevThread.id);
        focusCommentThread(prevThread.id, commentSidebarRef.current);
      } else {
        setSelectedThread(null);
        setShowCommentBoard(false);
        relatedBlockElement?.focus();
      }
    };
    (0, import_element100.useEffect)(() => {
      setSelectedThread(blockCommentId ?? void 0);
    }, [blockCommentId]);
    const setBlockRef = (0, import_element100.useCallback)((id, blockRef) => {
      setBlockRefs((prev) => ({ ...prev, [id]: blockRef }));
    }, []);
    (0, import_element100.useEffect)(() => {
      const calculateAllOffsets = () => {
        const offsets = {};
        if (!isFloating) {
          return offsets;
        }
        const selectedThreadIndex = threads.findIndex(
          (t2) => t2.id === selectedThread
        );
        const breakIndex = selectedThreadIndex === -1 ? 0 : selectedThreadIndex;
        const selectedThreadData = threads[breakIndex];
        if (!selectedThreadData || !blockRefs[selectedThreadData.id]) {
          return offsets;
        }
        let blockElement = blockRefs[selectedThreadData.id];
        let blockRect = blockElement?.getBoundingClientRect();
        const selectedThreadTop = blockRect?.top || 0;
        const selectedThreadHeight = heights[selectedThreadData.id] || 0;
        offsets[selectedThreadData.id] = -16;
        let previousThreadData = {
          threadTop: selectedThreadTop - 16,
          threadHeight: selectedThreadHeight
        };
        for (let i2 = breakIndex + 1; i2 < threads.length; i2++) {
          const thread = threads[i2];
          if (!blockRefs[thread.id]) {
            continue;
          }
          blockElement = blockRefs[thread.id];
          blockRect = blockElement?.getBoundingClientRect();
          const threadTop = blockRect?.top || 0;
          const threadHeight = heights[thread.id] || 0;
          let additionalOffset = -16;
          const previousBottom = previousThreadData.threadTop + previousThreadData.threadHeight;
          if (threadTop < previousBottom + 16) {
            additionalOffset = previousBottom - threadTop + 20;
          }
          offsets[thread.id] = additionalOffset;
          previousThreadData = {
            threadTop: threadTop + additionalOffset,
            threadHeight
          };
        }
        let nextThreadData = {
          threadTop: selectedThreadTop - 16
        };
        for (let i2 = selectedThreadIndex - 1; i2 >= 0; i2--) {
          const thread = threads[i2];
          if (!blockRefs[thread.id]) {
            continue;
          }
          blockElement = blockRefs[thread.id];
          blockRect = blockElement?.getBoundingClientRect();
          const threadTop = blockRect?.top || 0;
          const threadHeight = heights[thread.id] || 0;
          let additionalOffset = -16;
          const threadBottom = threadTop + threadHeight;
          if (threadBottom > nextThreadData.threadTop) {
            additionalOffset = nextThreadData.threadTop - threadTop - threadHeight - 20;
          }
          offsets[thread.id] = additionalOffset;
          nextThreadData = {
            threadTop: threadTop + additionalOffset
          };
        }
        return offsets;
      };
      const newOffsets = calculateAllOffsets();
      if (Object.keys(newOffsets).length > 0) {
        setBoardOffsets(newOffsets);
      }
    }, [heights, blockRefs, isFloating, threads, selectedThread]);
    const hasThreads = Array.isArray(threads) && threads.length > 0;
    if (!hasThreads && !isFloating) {
      return /* @__PURE__ */ (0, import_jsx_runtime202.jsxs)(import_components108.__experimentalVStack, { alignment: "left", justify: "flex-start", spacing: "2", children: [
        /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(import_components108.__experimentalText, { as: "p", children: (0, import_i18n136.__)("No notes available.") }),
        /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(import_components108.__experimentalText, { as: "p", variant: "muted", children: (0, import_i18n136.__)("Only logged in users can see Notes.") })
      ] });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(import_components108.__experimentalVStack, { spacing: "3", children: threads.map((thread) => /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(
      Thread,
      {
        thread,
        onAddReply,
        onCommentDelete: handleDelete,
        onEditComment,
        isSelected: selectedThread === thread.id,
        setSelectedThread,
        setShowCommentBoard,
        commentSidebarRef,
        reflowComments,
        isFloating,
        calculatedOffset: boardOffsets[thread.id] ?? 0,
        setHeights,
        setBlockRef,
        selectedThread,
        commentLastUpdated
      },
      thread.id
    )) });
  }
  function Thread({
    thread,
    onEditComment,
    onAddReply,
    onCommentDelete,
    isSelected,
    setShowCommentBoard,
    commentSidebarRef,
    reflowComments,
    isFloating,
    calculatedOffset,
    setHeights,
    setBlockRef,
    setSelectedThread,
    selectedThread,
    commentLastUpdated
  }) {
    const { toggleBlockHighlight, selectBlock: selectBlock2, toggleBlockSpotlight } = unlock(
      (0, import_data157.useDispatch)(import_block_editor52.store)
    );
    const relatedBlockElement = useBlockElement(thread.blockClientId);
    const debouncedToggleBlockHighlight = (0, import_compose37.useDebounce)(
      toggleBlockHighlight,
      50
    );
    const { y: y2, refs } = useFloatingThread({
      thread,
      calculatedOffset,
      setHeights,
      setBlockRef,
      selectedThread,
      commentLastUpdated
    });
    const onMouseEnter = () => {
      debouncedToggleBlockHighlight(thread.blockClientId, true);
    };
    const onMouseLeave = () => {
      debouncedToggleBlockHighlight(thread.blockClientId, false);
    };
    const handleCommentSelect = () => {
      setShowCommentBoard(false);
      setSelectedThread(thread.id);
      selectBlock2(thread.blockClientId, null);
      toggleBlockSpotlight(thread.blockClientId, true);
    };
    const unselectThread = () => {
      setSelectedThread(null);
      setShowCommentBoard(false);
      toggleBlockSpotlight(thread.blockClientId, false);
    };
    const allReplies = thread?.reply || [];
    const lastReply = allReplies.length > 0 ? allReplies[allReplies.length - 1] : void 0;
    const restReplies = allReplies.length > 0 ? allReplies.slice(0, -1) : [];
    const commentExcerpt = getCommentExcerpt(
      (0, import_dom6.__unstableStripHTML)(thread.content.rendered),
      10
    );
    const ariaLabel = relatedBlockElement ? (0, import_i18n136.sprintf)(
      // translators: %s: note excerpt
      (0, import_i18n136.__)("Note: %s"),
      commentExcerpt
    ) : (0, import_i18n136.sprintf)(
      // translators: %s: note excerpt
      (0, import_i18n136.__)("Original block deleted. Note: %s"),
      commentExcerpt
    );
    return (
      // Disable reason: role="listitem" does in fact support aria-expanded.
      // eslint-disable-next-line jsx-a11y/role-supports-aria-props
      /* @__PURE__ */ (0, import_jsx_runtime202.jsxs)(
        import_components108.__experimentalVStack,
        {
          className: clsx_default("editor-collab-sidebar-panel__thread", {
            "is-selected": isSelected,
            "is-floating": isFloating
          }),
          id: `comment-thread-${thread.id}`,
          spacing: "3",
          onClick: handleCommentSelect,
          onMouseEnter,
          onMouseLeave,
          onFocus: onMouseEnter,
          onBlur: onMouseLeave,
          onKeyDown: (event) => {
            if (event.key === "Enter" && event.currentTarget === event.target) {
              if (isSelected) {
                unselectThread();
              } else {
                handleCommentSelect();
              }
            }
            if (event.key === "Escape") {
              unselectThread();
              focusCommentThread(thread.id, commentSidebarRef.current);
            }
          },
          tabIndex: 0,
          role: "listitem",
          "aria-label": ariaLabel,
          "aria-expanded": isSelected,
          ref: isFloating ? refs.setFloating : void 0,
          style: isFloating ? { top: y2 } : void 0,
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(
              import_components108.Button,
              {
                className: "editor-collab-sidebar-panel__skip-to-comment",
                variant: "secondary",
                size: "compact",
                onClick: () => {
                  focusCommentThread(
                    thread.id,
                    commentSidebarRef.current,
                    "textarea"
                  );
                },
                children: (0, import_i18n136.__)("Add new note")
              }
            ),
            !relatedBlockElement && /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(import_components108.__experimentalText, { as: "p", weight: 500, variant: "muted", children: (0, import_i18n136.__)("Original block deleted.") }),
            /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(
              CommentBoard,
              {
                thread,
                isExpanded: isSelected,
                onEdit: (params = {}) => {
                  const { status } = params;
                  onEditComment(params);
                  if (status === "approved") {
                    unselectThread();
                    focusCommentThread(
                      thread.id,
                      commentSidebarRef.current
                    );
                  }
                },
                onDelete: onCommentDelete,
                reflowComments
              }
            ),
            isSelected && allReplies.map((reply) => /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(
              CommentBoard,
              {
                thread: reply,
                parent: thread,
                isExpanded: isSelected,
                onEdit: onEditComment,
                onDelete: onCommentDelete,
                reflowComments
              },
              reply.id
            )),
            !isSelected && restReplies.length > 0 && /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(import_components108.__experimentalHStack, { className: "editor-collab-sidebar-panel__more-reply-separator", children: /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(
              import_components108.Button,
              {
                size: "compact",
                variant: "tertiary",
                className: "editor-collab-sidebar-panel__more-reply-button",
                onClick: () => {
                  setSelectedThread(thread.id);
                  focusCommentThread(
                    thread.id,
                    commentSidebarRef.current
                  );
                },
                children: (0, import_i18n136.sprintf)(
                  // translators: %s: number of replies.
                  (0, import_i18n136._n)(
                    "%s more reply",
                    "%s more replies",
                    restReplies.length
                  ),
                  restReplies.length
                )
              }
            ) }),
            !isSelected && lastReply && /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(
              CommentBoard,
              {
                thread: lastReply,
                parent: thread,
                isExpanded: isSelected,
                onEdit: onEditComment,
                onDelete: onCommentDelete,
                reflowComments
              }
            ),
            isSelected && /* @__PURE__ */ (0, import_jsx_runtime202.jsxs)(import_components108.__experimentalVStack, { spacing: "2", children: [
              /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(import_components108.__experimentalHStack, { alignment: "left", spacing: "3", justify: "flex-start", children: /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(comment_author_info_default, {}) }),
              /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(import_components108.__experimentalVStack, { spacing: "2", children: /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(
                comment_form_default,
                {
                  onSubmit: (inputComment) => {
                    if ("approved" === thread.status) {
                      onEditComment({
                        id: thread.id,
                        status: "hold",
                        content: inputComment
                      });
                    } else {
                      onAddReply({
                        content: inputComment,
                        parent: thread.id
                      });
                    }
                  },
                  onCancel: (event) => {
                    event.stopPropagation();
                    unselectThread();
                    focusCommentThread(
                      thread.id,
                      commentSidebarRef.current
                    );
                  },
                  submitButtonText: "approved" === thread.status ? (0, import_i18n136.__)("Reopen & Reply") : (0, import_i18n136.__)("Reply"),
                  rows: "approved" === thread.status ? 2 : 4,
                  labelText: (0, import_i18n136.sprintf)(
                    // translators: %1$s: note identifier, %2$s: author name
                    (0, import_i18n136.__)("Reply to note %1$s by %2$s"),
                    thread.id,
                    thread.author_name
                  ),
                  reflowComments
                }
              ) })
            ] }),
            /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(
              import_components108.Button,
              {
                className: "editor-collab-sidebar-panel__skip-to-block",
                variant: "secondary",
                size: "compact",
                onClick: (event) => {
                  event.stopPropagation();
                  relatedBlockElement?.focus();
                },
                children: (0, import_i18n136.__)("Back to block")
              }
            )
          ]
        }
      )
    );
  }
  var CommentBoard = ({
    thread,
    parent,
    isExpanded,
    onEdit,
    onDelete,
    reflowComments
  }) => {
    const [actionState, setActionState] = (0, import_element100.useState)(false);
    const [showConfirmDialog, setShowConfirmDialog] = (0, import_element100.useState)(false);
    const handleConfirmDelete = () => {
      onDelete(thread);
      setActionState(false);
      setShowConfirmDialog(false);
    };
    const handleCancel = () => {
      setActionState(false);
      setShowConfirmDialog(false);
    };
    const isResolutionComment = thread.type === "note" && thread.meta && (thread.meta._wp_note_status === "resolved" || thread.meta._wp_note_status === "reopen");
    const actions2 = [
      {
        id: "edit",
        title: (0, import_i18n136.__)("Edit"),
        isEligible: ({ status }) => status !== "approved",
        onClick: () => {
          setActionState("edit");
        }
      },
      {
        id: "reopen",
        title: (0, import_i18n136._x)("Reopen", "Reopen note"),
        isEligible: ({ status }) => status === "approved",
        onClick: () => {
          onEdit({ id: thread.id, status: "hold" });
        }
      },
      {
        id: "delete",
        title: (0, import_i18n136.__)("Delete"),
        isEligible: () => true,
        onClick: () => {
          setActionState("delete");
          setShowConfirmDialog(true);
        }
      }
    ];
    const canResolve = thread.parent === 0;
    const moreActions = parent?.status !== "approved" ? actions2.filter((item) => item.isEligible(thread)) : [];
    return /* @__PURE__ */ (0, import_jsx_runtime202.jsxs)(import_components108.__experimentalVStack, { spacing: "2", children: [
      /* @__PURE__ */ (0, import_jsx_runtime202.jsxs)(import_components108.__experimentalHStack, { alignment: "left", spacing: "3", justify: "flex-start", children: [
        /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(
          comment_author_info_default,
          {
            avatar: thread?.author_avatar_urls?.[48],
            name: thread?.author_name,
            date: thread?.date,
            userId: thread?.author
          }
        ),
        isExpanded && /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(
          import_components108.FlexItem,
          {
            className: "editor-collab-sidebar-panel__comment-status",
            onClick: (event) => {
              event.stopPropagation();
            },
            children: /* @__PURE__ */ (0, import_jsx_runtime202.jsxs)(import_components108.__experimentalHStack, { spacing: "0", children: [
              canResolve && /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(
                import_components108.Button,
                {
                  label: (0, import_i18n136._x)(
                    "Resolve",
                    "Mark note as resolved"
                  ),
                  size: "small",
                  icon: published_default,
                  disabled: thread.status === "approved",
                  accessibleWhenDisabled: thread.status === "approved",
                  onClick: () => {
                    onEdit({
                      id: thread.id,
                      status: "approved"
                    });
                  }
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime202.jsxs)(Menu, { placement: "bottom-end", children: [
                /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(
                  Menu.TriggerButton,
                  {
                    render: /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(
                      import_components108.Button,
                      {
                        size: "small",
                        icon: more_vertical_default,
                        label: (0, import_i18n136.__)("Actions"),
                        disabled: !moreActions.length,
                        accessibleWhenDisabled: true
                      }
                    )
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(Menu.Popover, { children: moreActions.map((action) => /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(
                  Menu.Item,
                  {
                    onClick: () => action.onClick(),
                    children: /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(Menu.ItemLabel, { children: action.title })
                  },
                  action.id
                )) })
              ] })
            ] })
          }
        )
      ] }),
      "edit" === actionState ? /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(
        comment_form_default,
        {
          onSubmit: (value) => {
            onEdit({
              id: thread.id,
              content: value
            });
            setActionState(false);
          },
          onCancel: () => handleCancel(),
          thread,
          submitButtonText: (0, import_i18n136._x)("Update", "verb"),
          labelText: (0, import_i18n136.sprintf)(
            // translators: %1$s: note identifier, %2$s: author name.
            (0, import_i18n136.__)("Edit note %1$s by %2$s"),
            thread.id,
            thread.author_name
          ),
          reflowComments
        }
      ) : /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(
        import_element100.RawHTML,
        {
          className: clsx_default(
            "editor-collab-sidebar-panel__user-comment",
            {
              "editor-collab-sidebar-panel__resolution-text": isResolutionComment
            }
          ),
          children: isResolutionComment ? (() => {
            const actionText = thread.meta._wp_note_status === "resolved" ? (0, import_i18n136.__)("Marked as resolved") : (0, import_i18n136.__)("Reopened");
            const content = thread?.content?.raw;
            if (content && typeof content === "string" && content.trim() !== "") {
              return (0, import_i18n136.sprintf)(
                // translators: %1$s: action label ("Marked as resolved" or "Reopened"); %2$s: note text.
                (0, import_i18n136.__)("%1$s: %2$s"),
                actionText,
                content
              );
            }
            return actionText;
          })() : thread?.content?.rendered
        }
      ),
      "delete" === actionState && /* @__PURE__ */ (0, import_jsx_runtime202.jsx)(
        import_components108.__experimentalConfirmDialog,
        {
          isOpen: showConfirmDialog,
          onConfirm: handleConfirmDelete,
          onCancel: handleCancel,
          confirmButtonText: (0, import_i18n136.__)("Delete"),
          children: (0, import_i18n136.__)("Are you sure you want to delete this note?")
        }
      )
    ] });
  };

  // packages/editor/build-module/components/collab-sidebar/add-comment.js
  var import_jsx_runtime203 = __toESM(require_jsx_runtime());
  var import_i18n137 = __toESM(require_i18n());
  var import_data158 = __toESM(require_data());
  var import_components109 = __toESM(require_components());
  var import_block_editor53 = __toESM(require_block_editor());
  var { useBlockElement: useBlockElement2 } = unlock(import_block_editor53.privateApis);
  function AddComment({
    onSubmit,
    showCommentBoard,
    setShowCommentBoard,
    commentSidebarRef
  }) {
    const { clientId, blockCommentId } = (0, import_data158.useSelect)((select4) => {
      const { getSelectedBlock: getSelectedBlock2 } = select4(import_block_editor53.store);
      const selectedBlock = getSelectedBlock2();
      return {
        clientId: selectedBlock?.clientId,
        blockCommentId: selectedBlock?.attributes?.metadata?.noteId
      };
    }, []);
    const blockElement = useBlockElement2(clientId);
    if (!showCommentBoard || !clientId || void 0 !== blockCommentId) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime203.jsxs)(
      import_components109.__experimentalVStack,
      {
        className: "editor-collab-sidebar-panel__thread is-selected",
        spacing: "3",
        tabIndex: 0,
        role: "listitem",
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(import_components109.__experimentalHStack, { alignment: "left", spacing: "3", children: /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(comment_author_info_default, {}) }),
          /* @__PURE__ */ (0, import_jsx_runtime203.jsx)(
            comment_form_default,
            {
              onSubmit: async (inputComment) => {
                const { id } = await onSubmit({ content: inputComment });
                focusCommentThread(id, commentSidebarRef.current);
                setShowCommentBoard(false);
              },
              onCancel: () => {
                setShowCommentBoard(false);
                blockElement?.focus();
              },
              submitButtonText: (0, import_i18n137.__)("Add note"),
              labelText: (0, import_i18n137.__)("New Note")
            }
          )
        ]
      }
    );
  }

  // packages/editor/build-module/components/collab-sidebar/comment-menu-item.js
  var import_jsx_runtime204 = __toESM(require_jsx_runtime());
  var import_components110 = __toESM(require_components());
  var import_i18n138 = __toESM(require_i18n());
  var import_block_editor54 = __toESM(require_block_editor());
  var { CommentIconSlotFill } = unlock(import_block_editor54.privateApis);
  var AddCommentMenuItem = ({ onClick }) => {
    return /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(CommentIconSlotFill.Fill, { children: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime204.jsx)(
      import_components110.MenuItem,
      {
        icon: comment_default,
        onClick: () => {
          onClick();
          onClose();
        },
        "aria-haspopup": "dialog",
        children: (0, import_i18n138.__)("Add note")
      }
    ) });
  };
  var comment_menu_item_default = AddCommentMenuItem;

  // packages/editor/build-module/components/collab-sidebar/comment-indicator-toolbar.js
  var import_jsx_runtime205 = __toESM(require_jsx_runtime());
  var import_components111 = __toESM(require_components());
  var import_i18n139 = __toESM(require_i18n());
  var import_element101 = __toESM(require_element());
  var import_block_editor55 = __toESM(require_block_editor());
  var { CommentIconToolbarSlotFill } = unlock(import_block_editor55.privateApis);
  var CommentAvatarIndicator = ({ onClick, thread, hasMoreComments }) => {
    const threadParticipants = (0, import_element101.useMemo)(() => {
      if (!thread) {
        return [];
      }
      const participantsMap = /* @__PURE__ */ new Map();
      const allComments = [thread, ...thread.reply];
      allComments.sort((a2, b2) => new Date(a2.date) - new Date(b2.date));
      allComments.forEach((comment) => {
        if (comment.author_name && comment.author_avatar_urls) {
          const authorKey = `${comment.author}-${comment.author_name}`;
          if (!participantsMap.has(authorKey)) {
            participantsMap.set(authorKey, {
              name: comment.author_name,
              avatar: comment.author_avatar_urls?.["48"] || comment.author_avatar_urls?.["96"],
              id: comment.author,
              isOriginalCommenter: comment.id === thread.id,
              date: comment.date
            });
          }
        }
      });
      return Array.from(participantsMap.values());
    }, [thread]);
    const hasUnresolved = thread?.status !== "approved";
    const threadHasMoreParticipants = hasMoreComments && thread?.reply && 1 + thread.reply.length >= 100;
    if (!threadParticipants.length) {
      return null;
    }
    const maxAvatars = 3;
    const visibleParticipants = threadParticipants.slice(0, maxAvatars);
    const overflowCount = Math.max(0, threadParticipants.length - maxAvatars);
    const overflowText = threadHasMoreParticipants && overflowCount > 0 ? (0, import_i18n139.__)("100+") : (0, import_i18n139.sprintf)(
      // translators: %s: Number of participants.
      (0, import_i18n139.__)("+%s"),
      overflowCount
    );
    const overflowTitle = threadHasMoreParticipants && overflowCount > 0 ? (0, import_i18n139.__)("100+ participants") : (0, import_i18n139.sprintf)(
      // translators: %s: Number of participants.
      (0, import_i18n139._n)(
        "+%s more participant",
        "+%s more participants",
        overflowCount
      ),
      overflowCount
    );
    return /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(CommentIconToolbarSlotFill.Fill, { children: /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(
      import_components111.ToolbarButton,
      {
        className: clsx_default("comment-avatar-indicator", {
          "has-unresolved": hasUnresolved
        }),
        label: (0, import_i18n139.__)("View notes"),
        onClick,
        showTooltip: true,
        children: /* @__PURE__ */ (0, import_jsx_runtime205.jsxs)("div", { className: "comment-avatar-stack", children: [
          visibleParticipants.map((participant, index2) => /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(
            "img",
            {
              src: participant.avatar,
              alt: participant.name,
              className: "comment-avatar",
              style: {
                zIndex: maxAvatars - index2,
                borderColor: getAvatarBorderColor(
                  participant.id
                )
              }
            },
            participant.name + index2
          )),
          overflowCount > 0 && /* @__PURE__ */ (0, import_jsx_runtime205.jsx)(
            "div",
            {
              className: "comment-avatar-overflow",
              style: { zIndex: 0 },
              title: overflowTitle,
              children: overflowText
            }
          )
        ] })
      }
    ) });
  };
  var comment_indicator_toolbar_default = CommentAvatarIndicator;

  // packages/editor/build-module/components/collab-sidebar/index.js
  function CollabSidebarContent({
    showCommentBoard,
    setShowCommentBoard,
    styles,
    comments,
    commentSidebarRef,
    reflowComments,
    commentLastUpdated,
    isFloating = false
  }) {
    const { onCreate, onEdit, onDelete } = useBlockCommentsActions(reflowComments);
    return /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)(
      import_components112.__experimentalVStack,
      {
        className: "editor-collab-sidebar-panel",
        style: styles,
        role: "list",
        spacing: "3",
        justify: "flex-start",
        ref: (node) => {
          commentSidebarRef.current = node;
        },
        children: [
          /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(
            AddComment,
            {
              onSubmit: onCreate,
              showCommentBoard,
              setShowCommentBoard,
              commentSidebarRef
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(
            Comments,
            {
              threads: comments,
              onEditComment: onEdit,
              onAddReply: onCreate,
              onCommentDelete: onDelete,
              showCommentBoard,
              setShowCommentBoard,
              commentSidebarRef,
              reflowComments,
              commentLastUpdated,
              isFloating
            }
          )
        ]
      }
    );
  }
  function CollabSidebar() {
    const [showCommentBoard, setShowCommentBoard] = (0, import_element102.useState)(false);
    const { getActiveComplementaryArea: getActiveComplementaryArea2 } = (0, import_data159.useSelect)(store2);
    const { enableComplementaryArea: enableComplementaryArea2 } = (0, import_data159.useDispatch)(store2);
    const isLargeViewport = (0, import_compose38.useViewportMatch)("medium");
    const commentSidebarRef = (0, import_element102.useRef)(null);
    const { postId: postId2 } = (0, import_data159.useSelect)((select4) => {
      const { getCurrentPostId: getCurrentPostId2 } = select4(store);
      return {
        postId: getCurrentPostId2()
      };
    }, []);
    const blockCommentId = (0, import_data159.useSelect)((select4) => {
      const { getBlockAttributes: getBlockAttributes2, getSelectedBlockClientId: getSelectedBlockClientId2 } = select4(import_block_editor56.store);
      const clientId = getSelectedBlockClientId2();
      return clientId ? getBlockAttributes2(clientId)?.metadata?.noteId : null;
    }, []);
    const {
      resultComments,
      unresolvedSortedThreads,
      totalPages,
      reflowComments,
      commentLastUpdated
    } = useBlockComments(postId2);
    useEnableFloatingSidebar(resultComments.length > 0);
    const hasMoreComments = totalPages && totalPages > 1;
    const { merged: GlobalStyles } = useGlobalStylesContext();
    const backgroundColor = GlobalStyles?.styles?.color?.background;
    const currentThread = blockCommentId ? resultComments.find((thread) => thread.id === blockCommentId) : null;
    if (!(!!postId2 && typeof postId2 === "number")) {
      return null;
    }
    async function openTheSidebar() {
      const prevArea = await getActiveComplementaryArea2("core");
      const activeNotesArea = SIDEBARS.find((name) => name === prevArea);
      if (!activeNotesArea) {
        enableComplementaryArea2("core", collabSidebarName);
      }
      const currentArea = await getActiveComplementaryArea2("core");
      if (!SIDEBARS.includes(currentArea)) {
        return;
      }
      setShowCommentBoard(!blockCommentId);
      focusCommentThread(
        blockCommentId,
        commentSidebarRef.current,
        // Focus a comment thread when there's a selected block with a comment.
        !blockCommentId ? "textarea" : void 0
      );
    }
    return /* @__PURE__ */ (0, import_jsx_runtime206.jsxs)(import_jsx_runtime206.Fragment, { children: [
      blockCommentId && /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(
        comment_indicator_toolbar_default,
        {
          thread: currentThread,
          hasMoreComments,
          onClick: openTheSidebar
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(comment_menu_item_default, { onClick: openTheSidebar }),
      /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(
        PluginSidebar,
        {
          identifier: collabHistorySidebarName,
          title: (0, import_i18n140.__)("Notes"),
          icon: comment_default,
          closeLabel: (0, import_i18n140.__)("Close Notes"),
          children: /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(
            CollabSidebarContent,
            {
              comments: resultComments,
              showCommentBoard,
              setShowCommentBoard,
              commentSidebarRef,
              reflowComments,
              commentLastUpdated
            }
          )
        }
      ),
      isLargeViewport && (unresolvedSortedThreads.length > 0 || showCommentBoard) && /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(
        PluginSidebar,
        {
          isPinnable: false,
          header: false,
          identifier: collabSidebarName,
          className: "editor-collab-sidebar",
          headerClassName: "editor-collab-sidebar__header",
          backgroundColor,
          children: /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(
            CollabSidebarContent,
            {
              comments: unresolvedSortedThreads,
              showCommentBoard,
              setShowCommentBoard,
              commentSidebarRef,
              reflowComments,
              commentLastUpdated,
              styles: {
                backgroundColor
              },
              isFloating: true
            }
          )
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime206.jsx)(
        PluginMoreMenuItem,
        {
          icon: comment_default,
          onClick: () => enableComplementaryArea2("core", collabHistorySidebarName),
          children: (0, import_i18n140.__)("Notes")
        }
      )
    ] });
  }

  // packages/editor/build-module/components/collapsible-block-toolbar/index.js
  var import_jsx_runtime207 = __toESM(require_jsx_runtime());
  var import_block_editor57 = __toESM(require_block_editor());
  var import_element103 = __toESM(require_element());
  var import_components113 = __toESM(require_components());
  var import_i18n141 = __toESM(require_i18n());
  var import_data160 = __toESM(require_data());
  var { useHasBlockToolbar } = unlock(import_block_editor57.privateApis);
  function CollapsibleBlockToolbar({ isCollapsed, onToggle }) {
    const { blockSelectionStart } = (0, import_data160.useSelect)((select4) => {
      return {
        blockSelectionStart: select4(import_block_editor57.store).getBlockSelectionStart()
      };
    }, []);
    const hasBlockToolbar = useHasBlockToolbar();
    const hasBlockSelection = !!blockSelectionStart;
    (0, import_element103.useEffect)(() => {
      if (blockSelectionStart) {
        onToggle(false);
      }
    }, [blockSelectionStart, onToggle]);
    if (!hasBlockToolbar) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime207.jsxs)(import_jsx_runtime207.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime207.jsx)(
        "div",
        {
          className: clsx_default("editor-collapsible-block-toolbar", {
            "is-collapsed": isCollapsed || !hasBlockSelection
          }),
          children: /* @__PURE__ */ (0, import_jsx_runtime207.jsx)(import_block_editor57.BlockToolbar, { hideDragHandle: true })
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime207.jsx)(import_components113.Popover.Slot, { name: "block-toolbar" }),
      /* @__PURE__ */ (0, import_jsx_runtime207.jsx)(
        import_components113.Button,
        {
          className: "editor-collapsible-block-toolbar__toggle",
          icon: isCollapsed ? next_default : previous_default,
          onClick: () => {
            onToggle(!isCollapsed);
          },
          label: isCollapsed ? (0, import_i18n141.__)("Show block tools") : (0, import_i18n141.__)("Hide block tools"),
          size: "compact"
        }
      )
    ] });
  }

  // packages/editor/build-module/components/document-tools/index.js
  var import_jsx_runtime208 = __toESM(require_jsx_runtime());
  var import_compose39 = __toESM(require_compose());
  var import_data161 = __toESM(require_data());
  var import_i18n142 = __toESM(require_i18n());
  var import_block_editor58 = __toESM(require_block_editor());
  var import_components114 = __toESM(require_components());
  var import_element104 = __toESM(require_element());
  var import_keyboard_shortcuts5 = __toESM(require_keyboard_shortcuts());
  var import_preferences14 = __toESM(require_preferences());
  function DocumentTools({ className, disableBlockTools = false }) {
    const { setIsInserterOpened: setIsInserterOpened2, setIsListViewOpened: setIsListViewOpened2 } = (0, import_data161.useDispatch)(store);
    const {
      isDistractionFree,
      isInserterOpened: isInserterOpened2,
      isListViewOpen,
      listViewShortcut,
      inserterSidebarToggleRef: inserterSidebarToggleRef2,
      listViewToggleRef: listViewToggleRef2,
      showIconLabels
    } = (0, import_data161.useSelect)((select4) => {
      const { get } = select4(import_preferences14.store);
      const {
        isListViewOpened: isListViewOpened2,
        getEditorMode: getEditorMode2,
        getInserterSidebarToggleRef: getInserterSidebarToggleRef2,
        getListViewToggleRef: getListViewToggleRef2
      } = unlock(select4(store));
      const { getShortcutRepresentation } = select4(import_keyboard_shortcuts5.store);
      return {
        isInserterOpened: select4(store).isInserterOpened(),
        isListViewOpen: isListViewOpened2(),
        listViewShortcut: getShortcutRepresentation(
          "core/editor/toggle-list-view"
        ),
        inserterSidebarToggleRef: getInserterSidebarToggleRef2(),
        listViewToggleRef: getListViewToggleRef2(),
        showIconLabels: get("core", "showIconLabels"),
        isDistractionFree: get("core", "distractionFree"),
        isVisualMode: getEditorMode2() === "visual"
      };
    }, []);
    const preventDefault = (event) => {
      if (isInserterOpened2) {
        event.preventDefault();
      }
    };
    const isWideViewport = (0, import_compose39.useViewportMatch)("wide");
    const toolbarAriaLabel = (0, import_i18n142.__)("Document tools");
    const toggleListView = (0, import_element104.useCallback)(
      () => setIsListViewOpened2(!isListViewOpen),
      [setIsListViewOpened2, isListViewOpen]
    );
    const toggleInserter = (0, import_element104.useCallback)(
      () => setIsInserterOpened2(!isInserterOpened2),
      [isInserterOpened2, setIsInserterOpened2]
    );
    const longLabel = (0, import_i18n142._x)(
      "Block Inserter",
      "Generic label for block inserter button"
    );
    const shortLabel = !isInserterOpened2 ? (0, import_i18n142.__)("Add") : (0, import_i18n142.__)("Close");
    return (
      // Some plugins expect and use the `edit-post-header-toolbar` CSS class to
      // find the toolbar and inject UI elements into it. This is not officially
      // supported, but we're keeping it in the list of class names for backwards
      // compatibility.
      /* @__PURE__ */ (0, import_jsx_runtime208.jsx)(
        import_block_editor58.NavigableToolbar,
        {
          className: clsx_default(
            "editor-document-tools",
            "edit-post-header-toolbar",
            className
          ),
          "aria-label": toolbarAriaLabel,
          variant: "unstyled",
          children: /* @__PURE__ */ (0, import_jsx_runtime208.jsxs)("div", { className: "editor-document-tools__left", children: [
            !isDistractionFree && /* @__PURE__ */ (0, import_jsx_runtime208.jsx)(
              import_components114.ToolbarButton,
              {
                ref: inserterSidebarToggleRef2,
                className: "editor-document-tools__inserter-toggle",
                variant: "primary",
                isPressed: isInserterOpened2,
                onMouseDown: preventDefault,
                onClick: toggleInserter,
                disabled: disableBlockTools,
                icon: plus_default,
                label: showIconLabels ? shortLabel : longLabel,
                showTooltip: !showIconLabels,
                "aria-expanded": isInserterOpened2
              }
            ),
            (isWideViewport || !showIconLabels) && /* @__PURE__ */ (0, import_jsx_runtime208.jsxs)(import_jsx_runtime208.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime208.jsx)(
                import_components114.ToolbarItem,
                {
                  as: undo_default2,
                  showTooltip: !showIconLabels,
                  variant: showIconLabels ? "tertiary" : void 0,
                  size: "compact"
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime208.jsx)(
                import_components114.ToolbarItem,
                {
                  as: redo_default2,
                  showTooltip: !showIconLabels,
                  variant: showIconLabels ? "tertiary" : void 0,
                  size: "compact"
                }
              ),
              !isDistractionFree && /* @__PURE__ */ (0, import_jsx_runtime208.jsx)(
                import_components114.ToolbarButton,
                {
                  className: "editor-document-tools__document-overview-toggle",
                  icon: list_view_default,
                  disabled: disableBlockTools,
                  isPressed: isListViewOpen,
                  label: (0, import_i18n142.__)("Document Overview"),
                  onClick: toggleListView,
                  shortcut: listViewShortcut,
                  showTooltip: !showIconLabels,
                  variant: showIconLabels ? "tertiary" : void 0,
                  "aria-expanded": isListViewOpen,
                  ref: listViewToggleRef2
                }
              )
            ] })
          ] })
        }
      )
    );
  }
  var document_tools_default = DocumentTools;

  // packages/editor/build-module/components/more-menu/index.js
  var import_jsx_runtime213 = __toESM(require_jsx_runtime());
  var import_i18n145 = __toESM(require_i18n());
  var import_data164 = __toESM(require_data());
  var import_keycodes8 = __toESM(require_keycodes());
  var import_components119 = __toESM(require_components());
  var import_preferences15 = __toESM(require_preferences());

  // packages/editor/build-module/components/more-menu/copy-content-menu-item.js
  var import_jsx_runtime209 = __toESM(require_jsx_runtime());
  var import_components115 = __toESM(require_components());
  var import_data162 = __toESM(require_data());
  var import_i18n143 = __toESM(require_i18n());
  var import_compose40 = __toESM(require_compose());
  var import_notices26 = __toESM(require_notices());
  var import_core_data87 = __toESM(require_core_data());
  var import_blocks19 = __toESM(require_blocks());
  function CopyContentMenuItem() {
    const { createNotice } = (0, import_data162.useDispatch)(import_notices26.store);
    const { getCurrentPostId: getCurrentPostId2, getCurrentPostType: getCurrentPostType2 } = (0, import_data162.useSelect)(store);
    const { getEditedEntityRecord } = (0, import_data162.useSelect)(import_core_data87.store);
    function getText() {
      const record = getEditedEntityRecord(
        "postType",
        getCurrentPostType2(),
        getCurrentPostId2()
      );
      if (!record) {
        return "";
      }
      if (typeof record.content === "function") {
        return record.content(record);
      } else if (record.blocks) {
        return (0, import_blocks19.__unstableSerializeAndClean)(record.blocks);
      } else if (record.content) {
        return record.content;
      }
    }
    function onSuccess() {
      createNotice("info", (0, import_i18n143.__)("All content copied."), {
        isDismissible: true,
        type: "snackbar"
      });
    }
    const ref = (0, import_compose40.useCopyToClipboard)(getText, onSuccess);
    return /* @__PURE__ */ (0, import_jsx_runtime209.jsx)(import_components115.MenuItem, { ref, children: (0, import_i18n143.__)("Copy all blocks") });
  }

  // packages/editor/build-module/components/mode-switcher/index.js
  var import_jsx_runtime210 = __toESM(require_jsx_runtime());
  var import_i18n144 = __toESM(require_i18n());
  var import_components116 = __toESM(require_components());
  var import_data163 = __toESM(require_data());
  var import_keyboard_shortcuts6 = __toESM(require_keyboard_shortcuts());
  var MODES = [
    {
      value: "visual",
      label: (0, import_i18n144.__)("Visual editor")
    },
    {
      value: "text",
      label: (0, import_i18n144.__)("Code editor")
    }
  ];
  function ModeSwitcher() {
    const { shortcut, isRichEditingEnabled, isCodeEditingEnabled, mode } = (0, import_data163.useSelect)(
      (select4) => ({
        shortcut: select4(
          import_keyboard_shortcuts6.store
        ).getShortcutRepresentation("core/editor/toggle-mode"),
        isRichEditingEnabled: select4(store).getEditorSettings().richEditingEnabled,
        isCodeEditingEnabled: select4(store).getEditorSettings().codeEditingEnabled,
        mode: select4(store).getEditorMode()
      }),
      []
    );
    const { switchEditorMode: switchEditorMode2 } = (0, import_data163.useDispatch)(store);
    let selectedMode = mode;
    if (!isRichEditingEnabled && mode === "visual") {
      selectedMode = "text";
    }
    if (!isCodeEditingEnabled && mode === "text") {
      selectedMode = "visual";
    }
    const choices = MODES.map((choice) => {
      if (!isCodeEditingEnabled && choice.value === "text") {
        choice = {
          ...choice,
          disabled: true
        };
      }
      if (!isRichEditingEnabled && choice.value === "visual") {
        choice = {
          ...choice,
          disabled: true,
          info: (0, import_i18n144.__)(
            "You can enable the visual editor in your profile settings."
          )
        };
      }
      if (choice.value !== selectedMode && !choice.disabled) {
        return { ...choice, shortcut };
      }
      return choice;
    });
    return /* @__PURE__ */ (0, import_jsx_runtime210.jsx)(import_components116.MenuGroup, { label: (0, import_i18n144.__)("Editor"), children: /* @__PURE__ */ (0, import_jsx_runtime210.jsx)(
      import_components116.MenuItemsChoice,
      {
        choices,
        value: selectedMode,
        onSelect: switchEditorMode2
      }
    ) });
  }
  var mode_switcher_default = ModeSwitcher;

  // packages/editor/build-module/components/more-menu/tools-more-menu-group.js
  var import_jsx_runtime211 = __toESM(require_jsx_runtime());
  var import_components117 = __toESM(require_components());
  var { Fill: ToolsMoreMenuGroup, Slot: Slot11 } = (0, import_components117.createSlotFill)("ToolsMoreMenuGroup");
  ToolsMoreMenuGroup.Slot = ({ fillProps }) => /* @__PURE__ */ (0, import_jsx_runtime211.jsx)(Slot11, { fillProps });
  var tools_more_menu_group_default = ToolsMoreMenuGroup;

  // packages/editor/build-module/components/more-menu/view-more-menu-group.js
  var import_jsx_runtime212 = __toESM(require_jsx_runtime());
  var import_components118 = __toESM(require_components());
  var import_element105 = __toESM(require_element());
  var { Fill: ViewMoreMenuGroup, Slot: Slot12 } = (0, import_components118.createSlotFill)(
    import_element105.Platform.OS === "web" ? Symbol("ViewMoreMenuGroup") : "ViewMoreMenuGroup"
  );
  ViewMoreMenuGroup.Slot = ({ fillProps }) => /* @__PURE__ */ (0, import_jsx_runtime212.jsx)(Slot12, { fillProps });
  var view_more_menu_group_default = ViewMoreMenuGroup;

  // packages/editor/build-module/components/more-menu/index.js
  function MoreMenu() {
    const { openModal: openModal2 } = (0, import_data164.useDispatch)(store2);
    const { set: setPreference } = (0, import_data164.useDispatch)(import_preferences15.store);
    const { toggleDistractionFree: toggleDistractionFree2 } = (0, import_data164.useDispatch)(store);
    const showIconLabels = (0, import_data164.useSelect)(
      (select4) => select4(import_preferences15.store).get("core", "showIconLabels"),
      []
    );
    const turnOffDistractionFree = () => {
      setPreference("core", "distractionFree", false);
    };
    return /* @__PURE__ */ (0, import_jsx_runtime213.jsx)(import_jsx_runtime213.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime213.jsx)(
      import_components119.DropdownMenu,
      {
        icon: more_vertical_default,
        label: (0, import_i18n145.__)("Options"),
        popoverProps: {
          placement: "bottom-end",
          className: "more-menu-dropdown__content"
        },
        toggleProps: {
          showTooltip: !showIconLabels,
          ...showIconLabels && { variant: "tertiary" },
          tooltipPosition: "bottom",
          size: "compact"
        },
        children: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime213.jsxs)(import_jsx_runtime213.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime213.jsxs)(import_components119.MenuGroup, { label: (0, import_i18n145._x)("View", "noun"), children: [
            /* @__PURE__ */ (0, import_jsx_runtime213.jsx)(
              import_preferences15.PreferenceToggleMenuItem,
              {
                scope: "core",
                name: "fixedToolbar",
                onToggle: turnOffDistractionFree,
                label: (0, import_i18n145.__)("Top toolbar"),
                info: (0, import_i18n145.__)(
                  "Access all block and document tools in a single place"
                ),
                messageActivated: (0, import_i18n145.__)(
                  "Top toolbar activated."
                ),
                messageDeactivated: (0, import_i18n145.__)(
                  "Top toolbar deactivated."
                )
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime213.jsx)(
              import_preferences15.PreferenceToggleMenuItem,
              {
                scope: "core",
                name: "distractionFree",
                label: (0, import_i18n145.__)("Distraction free"),
                info: (0, import_i18n145.__)("Write with calmness"),
                handleToggling: false,
                onToggle: () => toggleDistractionFree2({
                  createNotice: false
                }),
                messageActivated: (0, import_i18n145.__)(
                  "Distraction free mode activated."
                ),
                messageDeactivated: (0, import_i18n145.__)(
                  "Distraction free mode deactivated."
                ),
                shortcut: import_keycodes8.displayShortcut.primaryShift(
                  "\\"
                )
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime213.jsx)(
              import_preferences15.PreferenceToggleMenuItem,
              {
                scope: "core",
                name: "focusMode",
                label: (0, import_i18n145.__)("Spotlight mode"),
                info: (0, import_i18n145.__)("Focus on one block at a time"),
                messageActivated: (0, import_i18n145.__)(
                  "Spotlight mode activated."
                ),
                messageDeactivated: (0, import_i18n145.__)(
                  "Spotlight mode deactivated."
                )
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime213.jsx)(view_more_menu_group_default.Slot, { fillProps: { onClose } })
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime213.jsx)(mode_switcher_default, {}),
          /* @__PURE__ */ (0, import_jsx_runtime213.jsx)(
            action_item_default.Slot,
            {
              name: "core/plugin-more-menu",
              label: (0, import_i18n145.__)("Plugins"),
              fillProps: { onClick: onClose }
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime213.jsxs)(import_components119.MenuGroup, { label: (0, import_i18n145.__)("Tools"), children: [
            /* @__PURE__ */ (0, import_jsx_runtime213.jsx)(
              import_components119.MenuItem,
              {
                onClick: () => openModal2("editor/keyboard-shortcut-help"),
                shortcut: import_keycodes8.displayShortcut.access("h"),
                children: (0, import_i18n145.__)("Keyboard shortcuts")
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime213.jsx)(CopyContentMenuItem, {}),
            /* @__PURE__ */ (0, import_jsx_runtime213.jsxs)(
              import_components119.MenuItem,
              {
                icon: external_default,
                href: (0, import_i18n145.__)(
                  "https://wordpress.org/documentation/article/wordpress-block-editor/"
                ),
                target: "_blank",
                rel: "noopener noreferrer",
                children: [
                  (0, import_i18n145.__)("Help"),
                  /* @__PURE__ */ (0, import_jsx_runtime213.jsx)(import_components119.VisuallyHidden, {
                    as: "span",
                    /* translators: accessibility text */
                    children: (0, import_i18n145.__)("(opens in a new tab)")
                  })
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime213.jsx)(
              tools_more_menu_group_default.Slot,
              {
                fillProps: { onClose }
              }
            )
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime213.jsx)(import_components119.MenuGroup, { children: /* @__PURE__ */ (0, import_jsx_runtime213.jsx)(
            import_components119.MenuItem,
            {
              onClick: () => openModal2("editor/preferences"),
              children: (0, import_i18n145.__)("Preferences")
            }
          ) })
        ] })
      }
    ) });
  }

  // packages/editor/build-module/components/post-publish-button/post-publish-button-or-toggle.js
  var import_jsx_runtime214 = __toESM(require_jsx_runtime());
  var import_compose41 = __toESM(require_compose());
  var import_data165 = __toESM(require_data());
  var IS_TOGGLE = "toggle";
  var IS_BUTTON = "button";
  function PostPublishButtonOrToggle({
    forceIsDirty,
    setEntitiesSavedStatesCallback
  }) {
    let component;
    const isSmallerThanMediumViewport = (0, import_compose41.useViewportMatch)("medium", "<");
    const { togglePublishSidebar: togglePublishSidebar2 } = (0, import_data165.useDispatch)(store);
    const {
      hasPublishAction,
      isBeingScheduled,
      isPending,
      isPublished,
      isPublishSidebarEnabled: isPublishSidebarEnabled2,
      isPublishSidebarOpened: isPublishSidebarOpened2,
      isScheduled,
      postStatus,
      postStatusHasChanged
    } = (0, import_data165.useSelect)((select4) => {
      return {
        hasPublishAction: !!select4(store).getCurrentPost()?._links?.["wp:action-publish"],
        isBeingScheduled: select4(store).isEditedPostBeingScheduled(),
        isPending: select4(store).isCurrentPostPending(),
        isPublished: select4(store).isCurrentPostPublished(),
        isPublishSidebarEnabled: select4(store).isPublishSidebarEnabled(),
        isPublishSidebarOpened: select4(store).isPublishSidebarOpened(),
        isScheduled: select4(store).isCurrentPostScheduled(),
        postStatus: select4(store).getEditedPostAttribute("status"),
        postStatusHasChanged: select4(store).getPostEdits()?.status
      };
    }, []);
    if (isPublished || postStatusHasChanged && !["future", "publish"].includes(postStatus) || isScheduled && isBeingScheduled || isPending && !hasPublishAction && !isSmallerThanMediumViewport) {
      component = IS_BUTTON;
    } else if (isSmallerThanMediumViewport || isPublishSidebarEnabled2) {
      component = IS_TOGGLE;
    } else {
      component = IS_BUTTON;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime214.jsx)(
      post_publish_button_default,
      {
        forceIsDirty,
        isOpen: isPublishSidebarOpened2,
        isToggle: component === IS_TOGGLE,
        onToggle: togglePublishSidebar2,
        setEntitiesSavedStatesCallback
      }
    );
  }

  // packages/editor/build-module/components/post-view-link/index.js
  var import_jsx_runtime215 = __toESM(require_jsx_runtime());
  var import_i18n146 = __toESM(require_i18n());
  var import_components120 = __toESM(require_components());
  var import_core_data88 = __toESM(require_core_data());
  var import_data166 = __toESM(require_data());
  var import_preferences16 = __toESM(require_preferences());
  function PostViewLink() {
    const { hasLoaded, permalink, isPublished, label, showIconLabels } = (0, import_data166.useSelect)((select4) => {
      const postTypeSlug = select4(store).getCurrentPostType();
      const postType2 = select4(import_core_data88.store).getPostType(postTypeSlug);
      const { get } = select4(import_preferences16.store);
      return {
        permalink: select4(store).getPermalink(),
        isPublished: select4(store).isCurrentPostPublished(),
        label: postType2?.labels.view_item,
        hasLoaded: !!postType2,
        showIconLabels: get("core", "showIconLabels")
      };
    }, []);
    if (!isPublished || !permalink || !hasLoaded) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime215.jsx)(
      import_components120.Button,
      {
        icon: external_default,
        label: label || (0, import_i18n146.__)("View post"),
        href: permalink,
        target: "_blank",
        showTooltip: !showIconLabels,
        size: "compact"
      }
    );
  }

  // packages/editor/build-module/components/preview-dropdown/index.js
  var import_jsx_runtime216 = __toESM(require_jsx_runtime());
  var import_compose42 = __toESM(require_compose());
  var import_components121 = __toESM(require_components());
  var import_i18n147 = __toESM(require_i18n());
  var import_data167 = __toESM(require_data());
  var import_core_data89 = __toESM(require_core_data());
  var import_preferences17 = __toESM(require_preferences());
  var import_block_editor59 = __toESM(require_block_editor());
  function PreviewDropdown({ forceIsAutosaveable, disabled }) {
    const {
      deviceType: deviceType2,
      homeUrl,
      isTemplate,
      isViewable,
      showIconLabels,
      isTemplateHidden,
      templateId: templateId2
    } = (0, import_data167.useSelect)((select4) => {
      const {
        getDeviceType: getDeviceType2,
        getCurrentPostType: getCurrentPostType2,
        getCurrentTemplateId: getCurrentTemplateId2,
        getRenderingMode: getRenderingMode2
      } = select4(store);
      const { getEntityRecord, getPostType } = select4(import_core_data89.store);
      const { get } = select4(import_preferences17.store);
      const _currentPostType = getCurrentPostType2();
      return {
        deviceType: getDeviceType2(),
        homeUrl: getEntityRecord("root", "__unstableBase")?.home,
        isTemplate: _currentPostType === "wp_template",
        isViewable: getPostType(_currentPostType)?.viewable ?? false,
        showIconLabels: get("core", "showIconLabels"),
        isTemplateHidden: getRenderingMode2() === "post-only",
        templateId: getCurrentTemplateId2()
      };
    }, []);
    const { setDeviceType: setDeviceType2, setRenderingMode: setRenderingMode2, setDefaultRenderingMode: setDefaultRenderingMode2 } = unlock(
      (0, import_data167.useDispatch)(store)
    );
    const { resetZoomLevel } = unlock((0, import_data167.useDispatch)(import_block_editor59.store));
    const handleDevicePreviewChange = (newDeviceType) => {
      setDeviceType2(newDeviceType);
      resetZoomLevel();
    };
    const isMobile = (0, import_compose42.useViewportMatch)("medium", "<");
    if (isMobile) {
      return null;
    }
    const popoverProps = {
      placement: "bottom-end"
    };
    const toggleProps = {
      className: "editor-preview-dropdown__toggle",
      iconPosition: "right",
      size: "compact",
      showTooltip: !showIconLabels,
      disabled,
      accessibleWhenDisabled: disabled
    };
    const menuProps = {
      "aria-label": (0, import_i18n147.__)("View options")
    };
    const deviceIcons = {
      desktop: desktop_default,
      mobile: mobile_default,
      tablet: tablet_default
    };
    const choices = [
      {
        value: "Desktop",
        label: (0, import_i18n147.__)("Desktop"),
        icon: desktop_default
      },
      {
        value: "Tablet",
        label: (0, import_i18n147.__)("Tablet"),
        icon: tablet_default
      },
      {
        value: "Mobile",
        label: (0, import_i18n147.__)("Mobile"),
        icon: mobile_default
      }
    ];
    return /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(
      import_components121.DropdownMenu,
      {
        className: clsx_default(
          "editor-preview-dropdown",
          `editor-preview-dropdown--${deviceType2.toLowerCase()}`
        ),
        popoverProps,
        toggleProps,
        menuProps,
        icon: deviceIcons[deviceType2.toLowerCase()],
        label: (0, import_i18n147.__)("View"),
        disableOpenOnArrowDown: disabled,
        children: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)(import_jsx_runtime216.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(import_components121.MenuGroup, { children: /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(
            import_components121.MenuItemsChoice,
            {
              choices,
              value: deviceType2,
              onSelect: handleDevicePreviewChange
            }
          ) }),
          isTemplate && /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(import_components121.MenuGroup, { children: /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)(
            import_components121.MenuItem,
            {
              href: homeUrl,
              target: "_blank",
              icon: external_default,
              onClick: onClose,
              children: [
                (0, import_i18n147.__)("View site"),
                /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(import_components121.VisuallyHidden, {
                  as: "span",
                  /* translators: accessibility text */
                  children: (0, import_i18n147.__)("(opens in a new tab)")
                })
              ]
            }
          ) }),
          !isTemplate && !!templateId2 && /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(import_components121.MenuGroup, { children: /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(
            import_components121.MenuItem,
            {
              icon: !isTemplateHidden ? check_default : void 0,
              isSelected: !isTemplateHidden,
              role: "menuitemcheckbox",
              onClick: () => {
                const newRenderingMode = isTemplateHidden ? "template-locked" : "post-only";
                setRenderingMode2(newRenderingMode);
                setDefaultRenderingMode2(newRenderingMode);
                resetZoomLevel();
              },
              children: (0, import_i18n147.__)("Show template")
            }
          ) }),
          isViewable && /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(import_components121.MenuGroup, { children: /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(
            PostPreviewButton,
            {
              className: "editor-preview-dropdown__button-external",
              role: "menuitem",
              forceIsAutosaveable,
              "aria-label": (0, import_i18n147.__)("Preview in new tab"),
              textContent: /* @__PURE__ */ (0, import_jsx_runtime216.jsxs)(import_jsx_runtime216.Fragment, { children: [
                (0, import_i18n147.__)("Preview in new tab"),
                /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(import_components121.Icon, { icon: external_default })
              ] }),
              onPreview: onClose
            }
          ) }),
          /* @__PURE__ */ (0, import_jsx_runtime216.jsx)(
            action_item_default.Slot,
            {
              name: "core/plugin-preview-menu",
              fillProps: { onClick: onClose }
            }
          )
        ] })
      }
    );
  }

  // packages/editor/build-module/components/zoom-out-toggle/index.js
  var import_jsx_runtime217 = __toESM(require_jsx_runtime());
  var import_components122 = __toESM(require_components());
  var import_i18n148 = __toESM(require_i18n());
  var import_element106 = __toESM(require_element());
  var import_data168 = __toESM(require_data());
  var import_block_editor60 = __toESM(require_block_editor());
  var import_preferences18 = __toESM(require_preferences());
  var import_keyboard_shortcuts7 = __toESM(require_keyboard_shortcuts());
  var import_keycodes9 = __toESM(require_keycodes());
  var ZoomOutToggle = ({ disabled }) => {
    const { isZoomOut, showIconLabels, isDistractionFree } = (0, import_data168.useSelect)(
      (select4) => ({
        isZoomOut: unlock(select4(import_block_editor60.store)).isZoomOut(),
        showIconLabels: select4(import_preferences18.store).get(
          "core",
          "showIconLabels"
        ),
        isDistractionFree: select4(import_preferences18.store).get(
          "core",
          "distractionFree"
        )
      })
    );
    const { resetZoomLevel, setZoomLevel } = unlock(
      (0, import_data168.useDispatch)(import_block_editor60.store)
    );
    const { registerShortcut, unregisterShortcut } = (0, import_data168.useDispatch)(
      import_keyboard_shortcuts7.store
    );
    (0, import_element106.useEffect)(() => {
      registerShortcut({
        name: "core/editor/zoom",
        category: "global",
        description: (0, import_i18n148.__)("Enter or exit zoom out."),
        keyCombination: {
          // `primaryShift+0` (`ctrl+shift+0`) is the shortcut for switching
          // to input mode in Windows, so apply a different key combination.
          modifier: (0, import_keycodes9.isAppleOS)() ? "primaryShift" : "secondary",
          character: "0"
        }
      });
      return () => {
        unregisterShortcut("core/editor/zoom");
      };
    }, [registerShortcut, unregisterShortcut]);
    (0, import_keyboard_shortcuts7.useShortcut)(
      "core/editor/zoom",
      () => {
        if (isZoomOut) {
          resetZoomLevel();
        } else {
          setZoomLevel("auto-scaled");
        }
      },
      {
        isDisabled: isDistractionFree
      }
    );
    const handleZoomOut = () => {
      if (isZoomOut) {
        resetZoomLevel();
      } else {
        setZoomLevel("auto-scaled");
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime217.jsx)(
      import_components122.Button,
      {
        accessibleWhenDisabled: true,
        disabled,
        onClick: handleZoomOut,
        icon: square_default,
        label: (0, import_i18n148.__)("Zoom Out"),
        isPressed: isZoomOut,
        size: "compact",
        showTooltip: !showIconLabels,
        className: "editor-zoom-out-toggle"
      }
    );
  };
  var zoom_out_toggle_default = ZoomOutToggle;

  // packages/editor/build-module/components/header/index.js
  var toolbarVariations = {
    distractionFreeDisabled: { y: "-50px" },
    distractionFreeHover: { y: 0 },
    distractionFreeHidden: { y: "-50px" },
    visible: { y: 0 },
    hidden: { y: 0 }
  };
  var backButtonVariations = {
    distractionFreeDisabled: { x: "-100%" },
    distractionFreeHover: { x: 0 },
    distractionFreeHidden: { x: "-100%" },
    visible: { x: 0 },
    hidden: { x: 0 }
  };
  function Header({
    customSaveButton,
    forceIsDirty,
    forceDisableBlockTools,
    setEntitiesSavedStatesCallback,
    title
  }) {
    const isWideViewport = (0, import_compose43.useViewportMatch)("large");
    const isLargeViewport = (0, import_compose43.useViewportMatch)("medium");
    const isTooNarrowForDocumentBar = (0, import_compose43.useMediaQuery)("(max-width: 403px)");
    const {
      postType: postType2,
      isTextEditor,
      isPublishSidebarOpened: isPublishSidebarOpened2,
      showIconLabels,
      hasFixedToolbar,
      hasBlockSelection,
      hasSectionRootClientId
    } = (0, import_data169.useSelect)((select4) => {
      const { get: getPreference } = select4(import_preferences19.store);
      const {
        getEditorMode: getEditorMode2,
        getCurrentPostType: getCurrentPostType2,
        isPublishSidebarOpened: _isPublishSidebarOpened
      } = select4(store);
      const { getBlockSelectionStart: getBlockSelectionStart2, getSectionRootClientId } = unlock(
        select4(import_block_editor61.store)
      );
      return {
        postType: getCurrentPostType2(),
        isTextEditor: getEditorMode2() === "text",
        isPublishSidebarOpened: _isPublishSidebarOpened(),
        showIconLabels: getPreference("core", "showIconLabels"),
        hasFixedToolbar: getPreference("core", "fixedToolbar"),
        hasBlockSelection: !!getBlockSelectionStart2(),
        hasSectionRootClientId: !!getSectionRootClientId()
      };
    }, []);
    const canBeZoomedOut = ["post", "page", "wp_template"].includes(postType2) && hasSectionRootClientId;
    const disablePreviewOption = [
      NAVIGATION_POST_TYPE,
      TEMPLATE_PART_POST_TYPE,
      PATTERN_POST_TYPE
    ].includes(postType2) || forceDisableBlockTools;
    const [isBlockToolsCollapsed, setIsBlockToolsCollapsed] = (0, import_element107.useState)(true);
    const hasCenter = !isTooNarrowForDocumentBar && (!hasFixedToolbar || hasFixedToolbar && (!hasBlockSelection || isBlockToolsCollapsed));
    const hasBackButton = useHasBackButton();
    return /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)("div", { className: "editor-header edit-post-header", children: [
      hasBackButton && /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(
        import_components123.__unstableMotion.div,
        {
          className: "editor-header__back-button",
          variants: backButtonVariations,
          transition: { type: "tween" },
          children: /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(back_button_default.Slot, {})
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)(
        import_components123.__unstableMotion.div,
        {
          variants: toolbarVariations,
          className: "editor-header__toolbar",
          transition: { type: "tween" },
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(
              document_tools_default,
              {
                disableBlockTools: forceDisableBlockTools || isTextEditor
              }
            ),
            hasFixedToolbar && isLargeViewport && /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(
              CollapsibleBlockToolbar,
              {
                isCollapsed: isBlockToolsCollapsed,
                onToggle: setIsBlockToolsCollapsed
              }
            )
          ]
        }
      ),
      hasCenter && /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(
        import_components123.__unstableMotion.div,
        {
          className: "editor-header__center",
          variants: toolbarVariations,
          transition: { type: "tween" },
          children: /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(DocumentBar, { title })
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime218.jsxs)(
        import_components123.__unstableMotion.div,
        {
          variants: toolbarVariations,
          transition: { type: "tween" },
          className: "editor-header__settings",
          children: [
            !customSaveButton && !isPublishSidebarOpened2 && /*
            * This button isn't completely hidden by the publish sidebar.
            * We can't hide the whole toolbar when the publish sidebar is open because
            * we want to prevent mounting/unmounting the PostPublishButtonOrToggle DOM node.
            * We track that DOM node to return focus to the PostPublishButtonOrToggle
            * when the publish sidebar has been closed.
            */
            /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(PostSavedState, { forceIsDirty }),
            /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(PostViewLink, {}),
            /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(
              PreviewDropdown,
              {
                forceIsAutosaveable: forceIsDirty,
                disabled: disablePreviewOption
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(
              PostPreviewButton,
              {
                className: "editor-header__post-preview-button",
                forceIsAutosaveable: forceIsDirty
              }
            ),
            isWideViewport && canBeZoomedOut && /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(zoom_out_toggle_default, { disabled: forceDisableBlockTools }),
            (isWideViewport || !showIconLabels) && /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(pinned_items_default.Slot, { scope: "core" }),
            !customSaveButton && /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(
              PostPublishButtonOrToggle,
              {
                forceIsDirty,
                setEntitiesSavedStatesCallback
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(post_type_support_check_default, { supportKeys: "editor.notes", children: /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(CollabSidebar, {}) }),
            customSaveButton,
            /* @__PURE__ */ (0, import_jsx_runtime218.jsx)(MoreMenu, {})
          ]
        }
      )
    ] });
  }
  var header_default2 = Header;

  // packages/editor/build-module/components/inserter-sidebar/index.js
  var import_jsx_runtime219 = __toESM(require_jsx_runtime());
  var import_data170 = __toESM(require_data());
  var import_block_editor62 = __toESM(require_block_editor());
  var import_compose44 = __toESM(require_compose());
  var import_element108 = __toESM(require_element());
  var import_preferences20 = __toESM(require_preferences());
  var import_keycodes10 = __toESM(require_keycodes());
  var { PrivateInserterLibrary } = unlock(import_block_editor62.privateApis);
  function InserterSidebar() {
    const {
      blockSectionRootClientId,
      inserterSidebarToggleRef: inserterSidebarToggleRef2,
      inserter,
      showMostUsedBlocks,
      sidebarIsOpened
    } = (0, import_data170.useSelect)((select4) => {
      const {
        getInserterSidebarToggleRef: getInserterSidebarToggleRef2,
        getInserter: getInserter2,
        isPublishSidebarOpened: isPublishSidebarOpened2
      } = unlock(select4(store));
      const { getBlockRootClientId: getBlockRootClientId2, isZoomOut, getSectionRootClientId } = unlock(select4(import_block_editor62.store));
      const { get } = select4(import_preferences20.store);
      const { getActiveComplementaryArea: getActiveComplementaryArea2 } = select4(store2);
      const getBlockSectionRootClientId = () => {
        if (isZoomOut()) {
          const sectionRootClientId = getSectionRootClientId();
          if (sectionRootClientId) {
            return sectionRootClientId;
          }
        }
        return getBlockRootClientId2();
      };
      return {
        inserterSidebarToggleRef: getInserterSidebarToggleRef2(),
        inserter: getInserter2(),
        showMostUsedBlocks: get("core", "mostUsedBlocks"),
        blockSectionRootClientId: getBlockSectionRootClientId(),
        sidebarIsOpened: !!(getActiveComplementaryArea2("core") || isPublishSidebarOpened2())
      };
    }, []);
    const { setIsInserterOpened: setIsInserterOpened2 } = (0, import_data170.useDispatch)(store);
    const { disableComplementaryArea: disableComplementaryArea2 } = (0, import_data170.useDispatch)(store2);
    const isMobileViewport = (0, import_compose44.useViewportMatch)("medium", "<");
    const libraryRef = (0, import_element108.useRef)();
    const closeInserterSidebar = (0, import_element108.useCallback)(() => {
      setIsInserterOpened2(false);
      inserterSidebarToggleRef2.current?.focus();
    }, [inserterSidebarToggleRef2, setIsInserterOpened2]);
    const closeOnEscape = (0, import_element108.useCallback)(
      (event) => {
        if (event.keyCode === import_keycodes10.ESCAPE && !event.defaultPrevented) {
          event.preventDefault();
          closeInserterSidebar();
        }
      },
      [closeInserterSidebar]
    );
    const inserterContents = /* @__PURE__ */ (0, import_jsx_runtime219.jsx)("div", { className: "editor-inserter-sidebar__content", children: /* @__PURE__ */ (0, import_jsx_runtime219.jsx)(
      PrivateInserterLibrary,
      {
        showMostUsedBlocks,
        showInserterHelpPanel: true,
        shouldFocusBlock: isMobileViewport,
        rootClientId: blockSectionRootClientId,
        onSelect: inserter.onSelect,
        __experimentalInitialTab: inserter.tab,
        __experimentalInitialCategory: inserter.category,
        __experimentalFilterValue: inserter.filterValue,
        onPatternCategorySelection: sidebarIsOpened ? () => disableComplementaryArea2("core") : void 0,
        ref: libraryRef,
        onClose: closeInserterSidebar
      }
    ) });
    return (
      // eslint-disable-next-line jsx-a11y/no-static-element-interactions
      /* @__PURE__ */ (0, import_jsx_runtime219.jsx)("div", { onKeyDown: closeOnEscape, className: "editor-inserter-sidebar", children: inserterContents })
    );
  }

  // packages/editor/build-module/components/list-view-sidebar/index.js
  var import_jsx_runtime221 = __toESM(require_jsx_runtime());
  var import_block_editor63 = __toESM(require_block_editor());
  var import_compose45 = __toESM(require_compose());
  var import_data171 = __toESM(require_data());
  var import_dom7 = __toESM(require_dom());
  var import_element109 = __toESM(require_element());
  var import_i18n150 = __toESM(require_i18n());
  var import_keyboard_shortcuts8 = __toESM(require_keyboard_shortcuts());
  var import_keycodes11 = __toESM(require_keycodes());

  // packages/editor/build-module/components/list-view-sidebar/list-view-outline.js
  var import_jsx_runtime220 = __toESM(require_jsx_runtime());
  var import_components124 = __toESM(require_components());
  var import_i18n149 = __toESM(require_i18n());
  function ListViewOutline() {
    return /* @__PURE__ */ (0, import_jsx_runtime220.jsxs)(import_jsx_runtime220.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime220.jsxs)("div", { className: "editor-list-view-sidebar__outline", children: [
        /* @__PURE__ */ (0, import_jsx_runtime220.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(import_components124.__experimentalText, { children: (0, import_i18n149.__)("Characters:") }),
          /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(import_components124.__experimentalText, { children: /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(CharacterCount, {}) })
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime220.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(import_components124.__experimentalText, { children: (0, import_i18n149.__)("Words:") }),
          /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(WordCount, {})
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime220.jsxs)("div", { children: [
          /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(import_components124.__experimentalText, { children: (0, import_i18n149.__)("Time to read:") }),
          /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(TimeToRead, {})
        ] })
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime220.jsx)(DocumentOutline, {})
    ] });
  }

  // packages/editor/build-module/components/list-view-sidebar/index.js
  var { TabbedSidebar } = unlock(import_block_editor63.privateApis);
  function ListViewSidebar() {
    const { setIsListViewOpened: setIsListViewOpened2 } = (0, import_data171.useDispatch)(store);
    const { getListViewToggleRef: getListViewToggleRef2 } = unlock((0, import_data171.useSelect)(store));
    const focusOnMountRef = (0, import_compose45.useFocusOnMount)("firstElement");
    const closeListView = (0, import_element109.useCallback)(() => {
      setIsListViewOpened2(false);
      getListViewToggleRef2().current?.focus();
    }, [getListViewToggleRef2, setIsListViewOpened2]);
    const closeOnEscape = (0, import_element109.useCallback)(
      (event) => {
        if (event.keyCode === import_keycodes11.ESCAPE && !event.defaultPrevented) {
          event.preventDefault();
          closeListView();
        }
      },
      [closeListView]
    );
    const [dropZoneElement, setDropZoneElement] = (0, import_element109.useState)(null);
    const [tab, setTab] = (0, import_element109.useState)("list-view");
    const sidebarRef = (0, import_element109.useRef)();
    const tabsRef = (0, import_element109.useRef)();
    const listViewRef = (0, import_element109.useRef)();
    const listViewContainerRef = (0, import_compose45.useMergeRefs)([
      focusOnMountRef,
      listViewRef,
      setDropZoneElement
    ]);
    function handleSidebarFocus(currentTab) {
      const tabPanelFocus = import_dom7.focus.tabbable.find(tabsRef.current)[0];
      if (currentTab === "list-view") {
        const listViewApplicationFocus = import_dom7.focus.tabbable.find(
          listViewRef.current
        )[0];
        const listViewFocusArea = sidebarRef.current.contains(
          listViewApplicationFocus
        ) ? listViewApplicationFocus : tabPanelFocus;
        listViewFocusArea.focus();
      } else {
        tabPanelFocus.focus();
      }
    }
    const handleToggleListViewShortcut = (0, import_element109.useCallback)(() => {
      if (sidebarRef.current.contains(
        sidebarRef.current.ownerDocument.activeElement
      )) {
        closeListView();
      } else {
        handleSidebarFocus(tab);
      }
    }, [closeListView, tab]);
    (0, import_keyboard_shortcuts8.useShortcut)("core/editor/toggle-list-view", handleToggleListViewShortcut);
    return (
      // eslint-disable-next-line jsx-a11y/no-static-element-interactions
      /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(
        "div",
        {
          className: "editor-list-view-sidebar",
          onKeyDown: closeOnEscape,
          ref: sidebarRef,
          children: /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(
            TabbedSidebar,
            {
              tabs: [
                {
                  name: "list-view",
                  title: (0, import_i18n150._x)("List View", "Post overview"),
                  panel: /* @__PURE__ */ (0, import_jsx_runtime221.jsx)("div", { className: "editor-list-view-sidebar__list-view-container", children: /* @__PURE__ */ (0, import_jsx_runtime221.jsx)("div", { className: "editor-list-view-sidebar__list-view-panel-content", children: /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(
                    import_block_editor63.__experimentalListView,
                    {
                      dropZoneElement
                    }
                  ) }) }),
                  panelRef: listViewContainerRef
                },
                {
                  name: "outline",
                  title: (0, import_i18n150._x)("Outline", "Post overview"),
                  panel: /* @__PURE__ */ (0, import_jsx_runtime221.jsx)("div", { className: "editor-list-view-sidebar__list-view-container", children: /* @__PURE__ */ (0, import_jsx_runtime221.jsx)(ListViewOutline, {}) })
                }
              ],
              onClose: closeListView,
              onSelect: (tabName) => setTab(tabName),
              defaultTabId: "list-view",
              ref: tabsRef,
              closeButtonLabel: (0, import_i18n150.__)("Close")
            }
          )
        }
      )
    );
  }

  // packages/editor/build-module/components/save-publish-panels/index.js
  var import_jsx_runtime222 = __toESM(require_jsx_runtime());
  var import_data172 = __toESM(require_data());
  var import_components125 = __toESM(require_components());
  var import_i18n151 = __toESM(require_i18n());
  var import_element110 = __toESM(require_element());
  var { Fill: Fill11, Slot: Slot13 } = (0, import_components125.createSlotFill)("ActionsPanel");
  function SavePublishPanels({
    setEntitiesSavedStatesCallback,
    closeEntitiesSavedStates,
    isEntitiesSavedStatesOpen,
    forceIsDirtyPublishPanel
  }) {
    const { closePublishSidebar: closePublishSidebar2, togglePublishSidebar: togglePublishSidebar2 } = (0, import_data172.useDispatch)(store);
    const {
      publishSidebarOpened,
      isPublishable,
      isDirty,
      hasOtherEntitiesChanges
    } = (0, import_data172.useSelect)((select4) => {
      const {
        isPublishSidebarOpened: isPublishSidebarOpened2,
        isEditedPostPublishable: isEditedPostPublishable2,
        isCurrentPostPublished: isCurrentPostPublished2,
        isEditedPostDirty: isEditedPostDirty2,
        hasNonPostEntityChanges: hasNonPostEntityChanges2
      } = select4(store);
      const _hasOtherEntitiesChanges = hasNonPostEntityChanges2();
      return {
        publishSidebarOpened: isPublishSidebarOpened2(),
        isPublishable: !isCurrentPostPublished2() && isEditedPostPublishable2(),
        isDirty: _hasOtherEntitiesChanges || isEditedPostDirty2(),
        hasOtherEntitiesChanges: _hasOtherEntitiesChanges
      };
    }, []);
    const openEntitiesSavedStates = (0, import_element110.useCallback)(
      () => setEntitiesSavedStatesCallback(true),
      []
    );
    let unmountableContent;
    if (publishSidebarOpened) {
      unmountableContent = /* @__PURE__ */ (0, import_jsx_runtime222.jsx)(
        post_publish_panel_default,
        {
          onClose: closePublishSidebar2,
          forceIsDirty: forceIsDirtyPublishPanel,
          PrePublishExtension: plugin_pre_publish_panel_default.Slot,
          PostPublishExtension: plugin_post_publish_panel_default.Slot
        }
      );
    } else if (isPublishable && !hasOtherEntitiesChanges) {
      unmountableContent = /* @__PURE__ */ (0, import_jsx_runtime222.jsx)("div", { className: "editor-layout__toggle-publish-panel", children: /* @__PURE__ */ (0, import_jsx_runtime222.jsx)(
        import_components125.Button,
        {
          __next40pxDefaultSize: true,
          variant: "secondary",
          onClick: togglePublishSidebar2,
          "aria-expanded": false,
          children: (0, import_i18n151.__)("Open publish panel")
        }
      ) });
    } else {
      unmountableContent = /* @__PURE__ */ (0, import_jsx_runtime222.jsx)("div", { className: "editor-layout__toggle-entities-saved-states-panel", children: /* @__PURE__ */ (0, import_jsx_runtime222.jsx)(
        import_components125.Button,
        {
          __next40pxDefaultSize: true,
          variant: "secondary",
          onClick: openEntitiesSavedStates,
          "aria-expanded": false,
          "aria-haspopup": "dialog",
          disabled: !isDirty,
          accessibleWhenDisabled: true,
          children: (0, import_i18n151.__)("Open save panel")
        }
      ) });
    }
    return /* @__PURE__ */ (0, import_jsx_runtime222.jsxs)(import_jsx_runtime222.Fragment, { children: [
      isEntitiesSavedStatesOpen && /* @__PURE__ */ (0, import_jsx_runtime222.jsx)(
        EntitiesSavedStates,
        {
          close: closeEntitiesSavedStates,
          renderDialog: true
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime222.jsx)(Slot13, { bubblesVirtually: true }),
      !isEntitiesSavedStatesOpen && unmountableContent
    ] });
  }

  // packages/editor/build-module/components/text-editor/index.js
  var import_jsx_runtime223 = __toESM(require_jsx_runtime());
  var import_components126 = __toESM(require_components());
  var import_data173 = __toESM(require_data());
  var import_i18n152 = __toESM(require_i18n());
  var import_keyboard_shortcuts9 = __toESM(require_keyboard_shortcuts());
  var import_element111 = __toESM(require_element());
  function TextEditor({ autoFocus = false }) {
    const { switchEditorMode: switchEditorMode2 } = (0, import_data173.useDispatch)(store);
    const { shortcut, isRichEditingEnabled } = (0, import_data173.useSelect)((select4) => {
      const { getEditorSettings: getEditorSettings2 } = select4(store);
      const { getShortcutRepresentation } = select4(import_keyboard_shortcuts9.store);
      return {
        shortcut: getShortcutRepresentation("core/editor/toggle-mode"),
        isRichEditingEnabled: getEditorSettings2().richEditingEnabled
      };
    }, []);
    const titleRef = (0, import_element111.useRef)();
    (0, import_element111.useEffect)(() => {
      if (autoFocus) {
        return;
      }
      titleRef?.current?.focus();
    }, [autoFocus]);
    return /* @__PURE__ */ (0, import_jsx_runtime223.jsxs)("div", { className: "editor-text-editor", children: [
      isRichEditingEnabled && /* @__PURE__ */ (0, import_jsx_runtime223.jsxs)("div", { className: "editor-text-editor__toolbar", children: [
        /* @__PURE__ */ (0, import_jsx_runtime223.jsx)("h2", { children: (0, import_i18n152.__)("Editing code") }),
        /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(
          import_components126.Button,
          {
            __next40pxDefaultSize: true,
            variant: "tertiary",
            onClick: () => switchEditorMode2("visual"),
            shortcut,
            children: (0, import_i18n152.__)("Exit code editor")
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime223.jsxs)("div", { className: "editor-text-editor__body", children: [
        /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(post_title_raw_default, { ref: titleRef }),
        /* @__PURE__ */ (0, import_jsx_runtime223.jsx)(PostTextEditor, {})
      ] })
    ] });
  }

  // packages/editor/build-module/components/visual-editor/index.js
  var import_jsx_runtime227 = __toESM(require_jsx_runtime());
  var import_block_editor66 = __toESM(require_block_editor());
  var import_element114 = __toESM(require_element());
  var import_data177 = __toESM(require_data());
  var import_blocks20 = __toESM(require_blocks());
  var import_core_data91 = __toESM(require_core_data());
  var import_compose48 = __toESM(require_compose());

  // packages/editor/build-module/components/visual-editor/edit-template-blocks-notification.js
  var import_jsx_runtime224 = __toESM(require_jsx_runtime());
  var import_data174 = __toESM(require_data());
  var import_core_data90 = __toESM(require_core_data());
  var import_element112 = __toESM(require_element());
  var import_i18n153 = __toESM(require_i18n());
  var import_components127 = __toESM(require_components());
  function EditTemplateBlocksNotification({ contentRef }) {
    const { onNavigateToEntityRecord, templateId: templateId2 } = (0, import_data174.useSelect)((select4) => {
      const { getEditorSettings: getEditorSettings2, getCurrentTemplateId: getCurrentTemplateId2 } = select4(store);
      return {
        onNavigateToEntityRecord: getEditorSettings2().onNavigateToEntityRecord,
        templateId: getCurrentTemplateId2()
      };
    }, []);
    const canEditTemplate = (0, import_data174.useSelect)(
      (select4) => !!select4(import_core_data90.store).canUser("create", {
        kind: "postType",
        name: "wp_template"
      }),
      []
    );
    const [isDialogOpen, setIsDialogOpen] = (0, import_element112.useState)(false);
    (0, import_element112.useEffect)(() => {
      const handleDblClick = (event) => {
        if (!canEditTemplate) {
          return;
        }
        if (!event.target.classList.contains("is-root-container") || event.target.dataset?.type === "core/template-part") {
          return;
        }
        if (!event.defaultPrevented) {
          event.preventDefault();
          setIsDialogOpen(true);
        }
      };
      const canvas = contentRef.current;
      canvas?.addEventListener("dblclick", handleDblClick);
      return () => {
        canvas?.removeEventListener("dblclick", handleDblClick);
      };
    }, [contentRef, canEditTemplate]);
    if (!canEditTemplate) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime224.jsx)(
      import_components127.__experimentalConfirmDialog,
      {
        isOpen: isDialogOpen,
        confirmButtonText: (0, import_i18n153.__)("Edit template"),
        onConfirm: () => {
          setIsDialogOpen(false);
          onNavigateToEntityRecord({
            postId: templateId2,
            postType: "wp_template"
          });
        },
        onCancel: () => setIsDialogOpen(false),
        size: "medium",
        children: (0, import_i18n153.__)(
          "You\u2019ve tried to select a block that is part of a template that may be used elsewhere on your site. Would you like to edit the template?"
        )
      }
    );
  }

  // packages/editor/build-module/components/resizable-editor/index.js
  var import_jsx_runtime226 = __toESM(require_jsx_runtime());
  var import_element113 = __toESM(require_element());
  var import_components129 = __toESM(require_components());

  // packages/editor/build-module/components/resizable-editor/resize-handle.js
  var import_jsx_runtime225 = __toESM(require_jsx_runtime());
  var import_i18n154 = __toESM(require_i18n());
  var import_keycodes12 = __toESM(require_keycodes());
  var import_components128 = __toESM(require_components());
  var DELTA_DISTANCE = 20;
  function ResizeHandle({ direction, resizeWidthBy }) {
    function handleKeyDown(event) {
      const { keyCode } = event;
      if (keyCode !== import_keycodes12.LEFT && keyCode !== import_keycodes12.RIGHT) {
        return;
      }
      event.preventDefault();
      if (direction === "left" && keyCode === import_keycodes12.LEFT || direction === "right" && keyCode === import_keycodes12.RIGHT) {
        resizeWidthBy(DELTA_DISTANCE);
      } else if (direction === "left" && keyCode === import_keycodes12.RIGHT || direction === "right" && keyCode === import_keycodes12.LEFT) {
        resizeWidthBy(-DELTA_DISTANCE);
      }
    }
    const resizeHandleVariants = {
      active: {
        opacity: 1,
        scaleY: 1.3
      }
    };
    const resizableHandleHelpId = `resizable-editor__resize-help-${direction}`;
    return /* @__PURE__ */ (0, import_jsx_runtime225.jsxs)(import_jsx_runtime225.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime225.jsx)(import_components128.Tooltip, { text: (0, import_i18n154.__)("Drag to resize"), children: /* @__PURE__ */ (0, import_jsx_runtime225.jsx)(
        import_components128.__unstableMotion.button,
        {
          className: `editor-resizable-editor__resize-handle is-${direction}`,
          "aria-label": (0, import_i18n154.__)("Drag to resize"),
          "aria-describedby": resizableHandleHelpId,
          onKeyDown: handleKeyDown,
          variants: resizeHandleVariants,
          whileFocus: "active",
          whileHover: "active",
          whileTap: "active",
          role: "separator",
          "aria-orientation": "vertical"
        },
        "handle"
      ) }),
      /* @__PURE__ */ (0, import_jsx_runtime225.jsx)(import_components128.VisuallyHidden, { id: resizableHandleHelpId, children: (0, import_i18n154.__)("Use left and right arrow keys to resize the canvas.") })
    ] });
  }

  // packages/editor/build-module/components/resizable-editor/index.js
  var HANDLE_STYLES_OVERRIDE = {
    position: void 0,
    userSelect: void 0,
    cursor: void 0,
    width: void 0,
    height: void 0,
    top: void 0,
    right: void 0,
    bottom: void 0,
    left: void 0
  };
  function ResizableEditor({ className, enableResizing, height, children }) {
    const [width, setWidth] = (0, import_element113.useState)("100%");
    const resizableRef = (0, import_element113.useRef)();
    const resizeWidthBy = (0, import_element113.useCallback)((deltaPixels) => {
      if (resizableRef.current) {
        setWidth(resizableRef.current.offsetWidth + deltaPixels);
      }
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime226.jsx)(
      import_components129.ResizableBox,
      {
        className: clsx_default("editor-resizable-editor", className, {
          "is-resizable": enableResizing
        }),
        ref: (api) => {
          resizableRef.current = api?.resizable;
        },
        size: {
          width: enableResizing ? width : "100%",
          height: enableResizing && height ? height : "100%"
        },
        onResizeStop: (event, direction, element) => {
          setWidth(element.style.width);
        },
        minWidth: 300,
        maxWidth: "100%",
        maxHeight: "100%",
        enable: {
          left: enableResizing,
          right: enableResizing
        },
        showHandle: enableResizing,
        resizeRatio: 2,
        handleComponent: {
          left: /* @__PURE__ */ (0, import_jsx_runtime226.jsx)(
            ResizeHandle,
            {
              direction: "left",
              resizeWidthBy
            }
          ),
          right: /* @__PURE__ */ (0, import_jsx_runtime226.jsx)(
            ResizeHandle,
            {
              direction: "right",
              resizeWidthBy
            }
          )
        },
        handleClasses: void 0,
        handleStyles: {
          left: HANDLE_STYLES_OVERRIDE,
          right: HANDLE_STYLES_OVERRIDE
        },
        children
      }
    );
  }
  var resizable_editor_default = ResizableEditor;

  // packages/editor/build-module/components/visual-editor/use-select-nearest-editable-block.js
  var import_compose46 = __toESM(require_compose());
  var import_data175 = __toESM(require_data());
  var import_block_editor64 = __toESM(require_block_editor());
  var DISTANCE_THRESHOLD = 500;
  function clamp2(value, min2, max2) {
    return Math.min(Math.max(value, min2), max2);
  }
  function distanceFromRect(x, y2, rect) {
    const dx = x - clamp2(x, rect.left, rect.right);
    const dy = y2 - clamp2(y2, rect.top, rect.bottom);
    return Math.sqrt(dx * dx + dy * dy);
  }
  function useSelectNearestEditableBlock({
    isEnabled = true
  } = {}) {
    const { getEnabledClientIdsTree, getBlockName: getBlockName2, getBlockOrder: getBlockOrder2 } = unlock(
      (0, import_data175.useSelect)(import_block_editor64.store)
    );
    const { selectBlock: selectBlock2 } = (0, import_data175.useDispatch)(import_block_editor64.store);
    return (0, import_compose46.useRefEffect)(
      (element) => {
        if (!isEnabled) {
          return;
        }
        const selectNearestEditableBlock = (x, y2) => {
          const editableBlockClientIds = getEnabledClientIdsTree().flatMap(({ clientId }) => {
            const blockName = getBlockName2(clientId);
            if (blockName === "core/template-part") {
              return [];
            }
            if (blockName === "core/post-content") {
              const innerBlocks = getBlockOrder2(clientId);
              if (innerBlocks.length) {
                return innerBlocks;
              }
            }
            return [clientId];
          });
          let nearestDistance = Infinity, nearestClientId = null;
          for (const clientId of editableBlockClientIds) {
            const block = element.querySelector(
              `[data-block="${clientId}"]`
            );
            if (!block) {
              continue;
            }
            const rect = block.getBoundingClientRect();
            const distance = distanceFromRect(x, y2, rect);
            if (distance < nearestDistance && distance < DISTANCE_THRESHOLD) {
              nearestDistance = distance;
              nearestClientId = clientId;
            }
          }
          if (nearestClientId) {
            selectBlock2(nearestClientId);
          }
        };
        const handleClick = (event) => {
          const shouldSelect = event.target === element || event.target.classList.contains("is-root-container");
          if (shouldSelect) {
            selectNearestEditableBlock(event.clientX, event.clientY);
          }
        };
        element.addEventListener("click", handleClick);
        return () => element.removeEventListener("click", handleClick);
      },
      [isEnabled]
    );
  }

  // packages/editor/build-module/components/visual-editor/use-zoom-out-mode-exit.js
  var import_data176 = __toESM(require_data());
  var import_compose47 = __toESM(require_compose());
  var import_block_editor65 = __toESM(require_block_editor());
  function useZoomOutModeExit() {
    const { getSettings: getSettings4, isZoomOut } = unlock((0, import_data176.useSelect)(import_block_editor65.store));
    const { resetZoomLevel } = unlock((0, import_data176.useDispatch)(import_block_editor65.store));
    return (0, import_compose47.useRefEffect)(
      (node) => {
        function onDoubleClick(event) {
          if (!isZoomOut()) {
            return;
          }
          if (!event.defaultPrevented) {
            event.preventDefault();
            const { __experimentalSetIsInserterOpened } = getSettings4();
            if (typeof __experimentalSetIsInserterOpened === "function") {
              __experimentalSetIsInserterOpened(false);
            }
            resetZoomLevel();
          }
        }
        node.addEventListener("dblclick", onDoubleClick);
        return () => {
          node.removeEventListener("dblclick", onDoubleClick);
        };
      },
      [getSettings4, isZoomOut, resetZoomLevel]
    );
  }

  // packages/editor/build-module/components/visual-editor/index.js
  var {
    LayoutStyle,
    useLayoutClasses,
    useLayoutStyles,
    ExperimentalBlockCanvas: BlockCanvas,
    useFlashEditableBlocks
  } = unlock(import_block_editor66.privateApis);
  var DESIGN_POST_TYPES3 = [
    PATTERN_POST_TYPE,
    TEMPLATE_POST_TYPE,
    NAVIGATION_POST_TYPE,
    TEMPLATE_PART_POST_TYPE
  ];
  function getPostContentAttributes(blocks) {
    for (let i2 = 0; i2 < blocks.length; i2++) {
      if (blocks[i2].name === "core/post-content") {
        return blocks[i2].attributes;
      }
      if (blocks[i2].innerBlocks.length) {
        const nestedPostContent = getPostContentAttributes(
          blocks[i2].innerBlocks
        );
        if (nestedPostContent) {
          return nestedPostContent;
        }
      }
    }
  }
  function checkForPostContentAtRootLevel(blocks) {
    for (let i2 = 0; i2 < blocks.length; i2++) {
      if (blocks[i2].name === "core/post-content") {
        return true;
      }
    }
    return false;
  }
  function VisualEditor({
    // Ideally as we unify post and site editors, we won't need these props.
    autoFocus,
    styles,
    disableIframe = false,
    iframeProps,
    contentRef,
    className
  }) {
    const isMobileViewport = (0, import_compose48.useViewportMatch)("small", "<");
    const {
      renderingMode: renderingMode2,
      postContentAttributes,
      editedPostTemplate = {},
      wrapperBlockName,
      wrapperUniqueId,
      deviceType: deviceType2,
      isFocusedEntity,
      isDesignPostType,
      postType: postType2,
      isPreview
    } = (0, import_data177.useSelect)((select4) => {
      const {
        getCurrentPostId: getCurrentPostId2,
        getCurrentPostType: getCurrentPostType2,
        getCurrentTemplateId: getCurrentTemplateId2,
        getEditorSettings: getEditorSettings2,
        getRenderingMode: getRenderingMode2,
        getDeviceType: getDeviceType2
      } = select4(store);
      const { getPostType, getEditedEntityRecord } = select4(import_core_data91.store);
      const postTypeSlug = getCurrentPostType2();
      const _renderingMode = getRenderingMode2();
      let _wrapperBlockName;
      if (postTypeSlug === PATTERN_POST_TYPE) {
        _wrapperBlockName = "core/block";
      } else if (_renderingMode === "post-only") {
        _wrapperBlockName = "core/post-content";
      }
      const editorSettings2 = getEditorSettings2();
      const supportsTemplateMode = editorSettings2.supportsTemplateMode;
      const postTypeObject = getPostType(postTypeSlug);
      const currentTemplateId = getCurrentTemplateId2();
      const template2 = currentTemplateId ? getEditedEntityRecord(
        "postType",
        TEMPLATE_POST_TYPE,
        currentTemplateId
      ) : void 0;
      return {
        renderingMode: _renderingMode,
        postContentAttributes: editorSettings2.postContentAttributes,
        isDesignPostType: DESIGN_POST_TYPES3.includes(postTypeSlug),
        // Post template fetch returns a 404 on classic themes, which
        // messes with e2e tests, so check it's a block theme first.
        editedPostTemplate: postTypeObject?.viewable && supportsTemplateMode ? template2 : void 0,
        wrapperBlockName: _wrapperBlockName,
        wrapperUniqueId: getCurrentPostId2(),
        deviceType: getDeviceType2(),
        isFocusedEntity: !!editorSettings2.onNavigateToPreviousEntityRecord,
        postType: postTypeSlug,
        isPreview: editorSettings2.isPreviewMode
      };
    }, []);
    const { isCleanNewPost: isCleanNewPost2 } = (0, import_data177.useSelect)(store);
    const {
      hasRootPaddingAwareAlignments,
      themeHasDisabledLayoutStyles,
      themeSupportsLayout,
      isZoomedOut
    } = (0, import_data177.useSelect)((select4) => {
      const { getSettings: getSettings4, isZoomOut: _isZoomOut } = unlock(
        select4(import_block_editor66.store)
      );
      const _settings = getSettings4();
      return {
        themeHasDisabledLayoutStyles: _settings.disableLayoutStyles,
        themeSupportsLayout: _settings.supportsLayout,
        hasRootPaddingAwareAlignments: _settings.__experimentalFeatures?.useRootPaddingAwareAlignments,
        isZoomedOut: _isZoomOut()
      };
    }, []);
    const deviceStyles = (0, import_block_editor66.__experimentalUseResizeCanvas)(deviceType2);
    const [globalLayoutSettings] = (0, import_block_editor66.useSettings)("layout");
    const fallbackLayout = (0, import_element114.useMemo)(() => {
      if (renderingMode2 !== "post-only" || isDesignPostType) {
        return { type: "default" };
      }
      if (themeSupportsLayout) {
        return { ...globalLayoutSettings, type: "constrained" };
      }
      return { type: "default" };
    }, [
      renderingMode2,
      themeSupportsLayout,
      globalLayoutSettings,
      isDesignPostType
    ]);
    const newestPostContentAttributes = (0, import_element114.useMemo)(() => {
      if (!editedPostTemplate?.content && !editedPostTemplate?.blocks && postContentAttributes) {
        return postContentAttributes;
      }
      if (editedPostTemplate?.blocks) {
        return getPostContentAttributes(editedPostTemplate?.blocks);
      }
      const parseableContent = typeof editedPostTemplate?.content === "string" ? editedPostTemplate?.content : "";
      return getPostContentAttributes((0, import_blocks20.parse)(parseableContent)) || {};
    }, [
      editedPostTemplate?.content,
      editedPostTemplate?.blocks,
      postContentAttributes
    ]);
    const hasPostContentAtRootLevel = (0, import_element114.useMemo)(() => {
      if (!editedPostTemplate?.content && !editedPostTemplate?.blocks) {
        return false;
      }
      if (editedPostTemplate?.blocks) {
        return checkForPostContentAtRootLevel(editedPostTemplate?.blocks);
      }
      const parseableContent = typeof editedPostTemplate?.content === "string" ? editedPostTemplate?.content : "";
      return checkForPostContentAtRootLevel((0, import_blocks20.parse)(parseableContent)) || false;
    }, [editedPostTemplate?.content, editedPostTemplate?.blocks]);
    const { layout = {}, align = "" } = newestPostContentAttributes || {};
    const postContentLayoutClasses = useLayoutClasses(
      newestPostContentAttributes,
      "core/post-content"
    );
    const blockListLayoutClass = clsx_default(
      {
        "is-layout-flow": !themeSupportsLayout
      },
      themeSupportsLayout && postContentLayoutClasses,
      align && `align${align}`
    );
    const postContentLayoutStyles = useLayoutStyles(
      newestPostContentAttributes,
      "core/post-content",
      ".block-editor-block-list__layout.is-root-container"
    );
    const postContentLayout = (0, import_element114.useMemo)(() => {
      return layout && (layout?.type === "constrained" || layout?.inherit || layout?.contentSize || layout?.wideSize) ? { ...globalLayoutSettings, ...layout, type: "constrained" } : { ...globalLayoutSettings, ...layout, type: "default" };
    }, [
      layout?.type,
      layout?.inherit,
      layout?.contentSize,
      layout?.wideSize,
      globalLayoutSettings
    ]);
    const blockListLayout = postContentAttributes ? postContentLayout : fallbackLayout;
    const postEditorLayout = blockListLayout?.type === "default" && !hasPostContentAtRootLevel ? fallbackLayout : blockListLayout;
    const observeTypingRef = (0, import_block_editor66.__unstableUseTypingObserver)();
    const titleRef = (0, import_element114.useRef)();
    (0, import_element114.useEffect)(() => {
      if (!autoFocus || !isCleanNewPost2()) {
        return;
      }
      titleRef?.current?.focus();
    }, [autoFocus, isCleanNewPost2]);
    const alignCSS = `.is-root-container.alignwide { max-width: var(--wp--style--global--wide-size); margin-left: auto; margin-right: auto;}
		.is-root-container.alignwide:where(.is-layout-flow) > :not(.alignleft):not(.alignright) { max-width: var(--wp--style--global--wide-size);}
		.is-root-container.alignfull { max-width: none; margin-left: auto; margin-right: auto;}
		.is-root-container.alignfull:where(.is-layout-flow) > :not(.alignleft):not(.alignright) { max-width: none;}`;
    const enableResizing = [
      NAVIGATION_POST_TYPE,
      TEMPLATE_PART_POST_TYPE,
      PATTERN_POST_TYPE
    ].includes(postType2) && // Disable in previews / view mode.
    !isPreview && // Disable resizing in mobile viewport.
    !isMobileViewport && // Disable resizing in zoomed-out mode.
    !isZoomedOut;
    const iframeStyles = (0, import_element114.useMemo)(() => {
      return [
        ...styles ?? [],
        {
          // Ensures margins of children are contained so that the body background paints behind them.
          // Otherwise, the background of html (when zoomed out) would show there and appear broken. It’s
          // important mostly for post-only views yet conceivably an issue in templated views too.
          css: `:where(.block-editor-iframe__body){display:flow-root;}.is-root-container{display:flow-root;${// Some themes will have `min-height: 100vh` for the root container,
          // which isn't a requirement in auto resize mode.
          enableResizing ? "min-height:0!important;" : ""}}
				${enableResizing ? ".block-editor-iframe__html{background:var(--wp-editor-canvas-background);display:flex;align-items:center;justify-content:center;min-height:100vh;}.block-editor-iframe__body{width:100%;}" : ""}`
          // The CSS above centers the body content vertically when resizing is enabled and applies a background
          // color to the iframe HTML element to match the background color of the editor canvas.
        }
      ];
    }, [styles, enableResizing]);
    const localRef = (0, import_element114.useRef)();
    const typewriterRef = (0, import_block_editor66.__unstableUseTypewriter)();
    contentRef = (0, import_compose48.useMergeRefs)([
      localRef,
      contentRef,
      renderingMode2 === "post-only" ? typewriterRef : null,
      useFlashEditableBlocks({
        isEnabled: renderingMode2 === "template-locked"
      }),
      useSelectNearestEditableBlock({
        isEnabled: renderingMode2 === "template-locked"
      }),
      useZoomOutModeExit()
    ]);
    return /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(
      "div",
      {
        className: clsx_default(
          "editor-visual-editor",
          // this class is here for backward compatibility reasons.
          "edit-post-visual-editor",
          className,
          {
            "has-padding": isFocusedEntity || enableResizing,
            "is-resizable": enableResizing,
            "is-iframed": !disableIframe
          }
        ),
        children: /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(resizable_editor_default, { enableResizing, height: "100%", children: /* @__PURE__ */ (0, import_jsx_runtime227.jsxs)(
          BlockCanvas,
          {
            shouldIframe: !disableIframe,
            contentRef,
            styles: iframeStyles,
            height: "100%",
            iframeProps: {
              ...iframeProps,
              style: {
                ...iframeProps?.style,
                ...deviceStyles
              }
            },
            children: [
              themeSupportsLayout && !themeHasDisabledLayoutStyles && renderingMode2 === "post-only" && !isDesignPostType && /* @__PURE__ */ (0, import_jsx_runtime227.jsxs)(import_jsx_runtime227.Fragment, { children: [
                /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(
                  LayoutStyle,
                  {
                    selector: ".editor-visual-editor__post-title-wrapper",
                    layout: fallbackLayout
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(
                  LayoutStyle,
                  {
                    selector: ".block-editor-block-list__layout.is-root-container",
                    layout: postEditorLayout
                  }
                ),
                align && /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(LayoutStyle, { css: alignCSS }),
                postContentLayoutStyles && /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(
                  LayoutStyle,
                  {
                    layout: postContentLayout,
                    css: postContentLayoutStyles
                  }
                )
              ] }),
              renderingMode2 === "post-only" && !isDesignPostType && /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(
                "div",
                {
                  className: clsx_default(
                    "editor-visual-editor__post-title-wrapper",
                    // The following class is only here for backward compatibility
                    // some themes might be using it to style the post title.
                    "edit-post-visual-editor__post-title-wrapper",
                    {
                      "has-global-padding": hasRootPaddingAwareAlignments
                    }
                  ),
                  contentEditable: false,
                  ref: observeTypingRef,
                  style: {
                    // This is using inline styles
                    // so it's applied for both iframed and non iframed editors.
                    marginTop: "4rem"
                  },
                  children: /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(post_title_default, { ref: titleRef })
                }
              ),
              /* @__PURE__ */ (0, import_jsx_runtime227.jsxs)(
                import_block_editor66.RecursionProvider,
                {
                  blockName: wrapperBlockName,
                  uniqueId: wrapperUniqueId,
                  children: [
                    /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(
                      import_block_editor66.BlockList,
                      {
                        className: clsx_default(
                          "is-" + deviceType2.toLowerCase() + "-preview",
                          renderingMode2 !== "post-only" || isDesignPostType ? "wp-site-blocks" : `${blockListLayoutClass} wp-block-post-content`,
                          // Ensure root level blocks receive default/flow blockGap styling rules.
                          {
                            "has-global-padding": renderingMode2 === "post-only" && !isDesignPostType && hasRootPaddingAwareAlignments
                          }
                        ),
                        layout: blockListLayout,
                        dropZoneElement: (
                          // When iframed, pass in the html element of the iframe to
                          // ensure the drop zone extends to the edges of the iframe.
                          disableIframe ? localRef.current : localRef.current?.parentNode
                        ),
                        __unstableDisableDropZone: (
                          // In template preview mode, disable drop zones at the root of the template.
                          renderingMode2 === "template-locked" ? true : false
                        )
                      }
                    ),
                    renderingMode2 === "template-locked" && /* @__PURE__ */ (0, import_jsx_runtime227.jsx)(
                      EditTemplateBlocksNotification,
                      {
                        contentRef: localRef
                      }
                    )
                  ]
                }
              )
            ]
          }
        ) })
      }
    );
  }
  var visual_editor_default = VisualEditor;

  // packages/editor/build-module/components/editor-interface/index.js
  var interfaceLabels = {
    /* translators: accessibility text for the editor top bar landmark region. */
    header: (0, import_i18n155.__)("Editor top bar"),
    /* translators: accessibility text for the editor content landmark region. */
    body: (0, import_i18n155.__)("Editor content"),
    /* translators: accessibility text for the editor settings landmark region. */
    sidebar: (0, import_i18n155.__)("Editor settings"),
    /* translators: accessibility text for the editor publish landmark region. */
    actions: (0, import_i18n155.__)("Editor publish"),
    /* translators: accessibility text for the editor footer landmark region. */
    footer: (0, import_i18n155.__)("Editor footer")
  };
  function EditorInterface({
    className,
    styles,
    children,
    forceIsDirty,
    contentRef,
    disableIframe,
    autoFocus,
    customSaveButton,
    customSavePanel,
    forceDisableBlockTools,
    title,
    iframeProps
  }) {
    const {
      mode,
      isInserterOpened: isInserterOpened2,
      isListViewOpened: isListViewOpened2,
      isDistractionFree,
      isPreviewMode,
      showBlockBreadcrumbs,
      documentLabel
    } = (0, import_data178.useSelect)((select4) => {
      const { get } = select4(import_preferences21.store);
      const { getEditorSettings: getEditorSettings2, getPostTypeLabel: getPostTypeLabel2 } = select4(store);
      const editorSettings2 = getEditorSettings2();
      const postTypeLabel = getPostTypeLabel2();
      let _mode = select4(store).getEditorMode();
      if (!editorSettings2.richEditingEnabled && _mode === "visual") {
        _mode = "text";
      }
      if (!editorSettings2.codeEditingEnabled && _mode === "text") {
        _mode = "visual";
      }
      return {
        mode: _mode,
        isInserterOpened: select4(store).isInserterOpened(),
        isListViewOpened: select4(store).isListViewOpened(),
        isDistractionFree: get("core", "distractionFree"),
        isPreviewMode: editorSettings2.isPreviewMode,
        showBlockBreadcrumbs: get("core", "showBlockBreadcrumbs"),
        documentLabel: (
          // translators: Default label for the Document in the Block Breadcrumb.
          postTypeLabel || (0, import_i18n155._x)("Document", "noun, breadcrumb")
        )
      };
    }, []);
    const isLargeViewport = (0, import_compose49.useViewportMatch)("medium");
    const secondarySidebarLabel = isListViewOpened2 ? (0, import_i18n155.__)("Document Overview") : (0, import_i18n155.__)("Block Library");
    const [entitiesSavedStatesCallback, setEntitiesSavedStatesCallback] = (0, import_element115.useState)(false);
    const closeEntitiesSavedStates = (0, import_element115.useCallback)(
      (arg) => {
        if (typeof entitiesSavedStatesCallback === "function") {
          entitiesSavedStatesCallback(arg);
        }
        setEntitiesSavedStatesCallback(false);
      },
      [entitiesSavedStatesCallback]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime228.jsx)(
      interface_skeleton_default,
      {
        isDistractionFree,
        className: clsx_default("editor-editor-interface", className, {
          "is-entity-save-view-open": !!entitiesSavedStatesCallback,
          "is-distraction-free": isDistractionFree && !isPreviewMode
        }),
        labels: {
          ...interfaceLabels,
          secondarySidebar: secondarySidebarLabel
        },
        header: !isPreviewMode && /* @__PURE__ */ (0, import_jsx_runtime228.jsx)(
          header_default2,
          {
            forceIsDirty,
            setEntitiesSavedStatesCallback,
            customSaveButton,
            forceDisableBlockTools,
            title
          }
        ),
        editorNotices: /* @__PURE__ */ (0, import_jsx_runtime228.jsx)(editor_notices_default, {}),
        secondarySidebar: !isPreviewMode && mode === "visual" && (isInserterOpened2 && /* @__PURE__ */ (0, import_jsx_runtime228.jsx)(InserterSidebar, {}) || isListViewOpened2 && /* @__PURE__ */ (0, import_jsx_runtime228.jsx)(ListViewSidebar, {})),
        sidebar: !isPreviewMode && !isDistractionFree && /* @__PURE__ */ (0, import_jsx_runtime228.jsx)(complementary_area_default.Slot, { scope: "core" }),
        content: /* @__PURE__ */ (0, import_jsx_runtime228.jsxs)(import_jsx_runtime228.Fragment, { children: [
          !isDistractionFree && !isPreviewMode && /* @__PURE__ */ (0, import_jsx_runtime228.jsx)(editor_notices_default, {}),
          /* @__PURE__ */ (0, import_jsx_runtime228.jsx)(content_slot_fill_default.Slot, { children: ([editorCanvasView]) => editorCanvasView ? editorCanvasView : /* @__PURE__ */ (0, import_jsx_runtime228.jsxs)(import_jsx_runtime228.Fragment, { children: [
            !isPreviewMode && mode === "text" && /* @__PURE__ */ (0, import_jsx_runtime228.jsx)(
              TextEditor,
              {
                autoFocus
              }
            ),
            !isPreviewMode && !isLargeViewport && mode === "visual" && /* @__PURE__ */ (0, import_jsx_runtime228.jsx)(import_block_editor67.BlockToolbar, { hideDragHandle: true }),
            (isPreviewMode || mode === "visual") && /* @__PURE__ */ (0, import_jsx_runtime228.jsx)(
              visual_editor_default,
              {
                styles,
                contentRef,
                disableIframe,
                autoFocus,
                iframeProps
              }
            ),
            children
          ] }) })
        ] }),
        footer: !isPreviewMode && !isDistractionFree && isLargeViewport && showBlockBreadcrumbs && mode === "visual" && /* @__PURE__ */ (0, import_jsx_runtime228.jsx)(import_block_editor67.BlockBreadcrumb, { rootLabelText: documentLabel }),
        actions: !isPreviewMode ? customSavePanel || /* @__PURE__ */ (0, import_jsx_runtime228.jsx)(
          SavePublishPanels,
          {
            closeEntitiesSavedStates,
            isEntitiesSavedStatesOpen: entitiesSavedStatesCallback,
            setEntitiesSavedStatesCallback,
            forceIsDirtyPublishPanel: forceIsDirty
          }
        ) : void 0
      }
    );
  }

  // packages/editor/build-module/components/sidebar/index.js
  var import_jsx_runtime247 = __toESM(require_jsx_runtime());
  var import_block_editor76 = __toESM(require_block_editor());
  var import_data198 = __toESM(require_data());
  var import_element131 = __toESM(require_element());
  var import_i18n170 = __toESM(require_i18n());
  var import_keyboard_shortcuts10 = __toESM(require_keyboard_shortcuts());
  var import_components146 = __toESM(require_components());

  // packages/editor/build-module/components/pattern-overrides-panel/index.js
  var import_jsx_runtime229 = __toESM(require_jsx_runtime());
  var import_data179 = __toESM(require_data());
  var import_patterns9 = __toESM(require_patterns());
  var { OverridesPanel } = unlock(import_patterns9.privateApis);
  function PatternOverridesPanel() {
    const supportsPatternOverridesPanel = (0, import_data179.useSelect)(
      (select4) => select4(store).getCurrentPostType() === "wp_block",
      []
    );
    if (!supportsPatternOverridesPanel) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime229.jsx)(OverridesPanel, {});
  }

  // packages/editor/build-module/components/sidebar/post-summary.js
  var import_jsx_runtime242 = __toESM(require_jsx_runtime());
  var import_components141 = __toESM(require_components());
  var import_data191 = __toESM(require_data());

  // packages/editor/build-module/components/post-card-panel/index.js
  var import_jsx_runtime234 = __toESM(require_jsx_runtime());
  var import_components133 = __toESM(require_components());
  var import_core_data96 = __toESM(require_core_data());
  var import_data184 = __toESM(require_data());
  var import_element120 = __toESM(require_element());
  var import_i18n159 = __toESM(require_i18n());
  var import_dom8 = __toESM(require_dom());

  // packages/editor/build-module/components/post-actions/index.js
  var import_jsx_runtime233 = __toESM(require_jsx_runtime());
  var import_data183 = __toESM(require_data());
  var import_element119 = __toESM(require_element());
  var import_i18n158 = __toESM(require_i18n());
  var import_components132 = __toESM(require_components());
  var import_core_data95 = __toESM(require_core_data());

  // packages/editor/build-module/components/post-actions/actions.js
  var import_jsx_runtime232 = __toESM(require_jsx_runtime());
  var import_data182 = __toESM(require_data());
  var import_element118 = __toESM(require_element());
  var import_core_data94 = __toESM(require_core_data());

  // packages/editor/build-module/components/post-actions/set-as-homepage.js
  var import_jsx_runtime230 = __toESM(require_jsx_runtime());
  var import_i18n156 = __toESM(require_i18n());
  var import_element116 = __toESM(require_element());
  var import_components130 = __toESM(require_components());
  var import_data180 = __toESM(require_data());
  var import_core_data92 = __toESM(require_core_data());
  var import_notices27 = __toESM(require_notices());

  // packages/editor/build-module/utils/get-item-title.js
  var import_html_entities26 = __toESM(require_html_entities());
  function getItemTitle2(item) {
    if (typeof item.title === "string") {
      return (0, import_html_entities26.decodeEntities)(item.title);
    }
    if (item.title && "rendered" in item.title) {
      return (0, import_html_entities26.decodeEntities)(item.title.rendered);
    }
    if (item.title && "raw" in item.title) {
      return (0, import_html_entities26.decodeEntities)(item.title.raw);
    }
    return "";
  }

  // packages/editor/build-module/components/post-actions/set-as-homepage.js
  var SetAsHomepageModal = ({ items, closeModal: closeModal2 }) => {
    const [item] = items;
    const pageTitle = getItemTitle2(item);
    const { showOnFront, currentHomePage, isSaving } = (0, import_data180.useSelect)(
      (select4) => {
        const { getEntityRecord, isSavingEntityRecord } = select4(import_core_data92.store);
        const siteSettings = getEntityRecord("root", "site");
        const currentHomePageItem = getEntityRecord(
          "postType",
          "page",
          siteSettings?.page_on_front
        );
        return {
          showOnFront: siteSettings?.show_on_front,
          currentHomePage: currentHomePageItem,
          isSaving: isSavingEntityRecord("root", "site")
        };
      }
    );
    const { saveEntityRecord } = (0, import_data180.useDispatch)(import_core_data92.store);
    const { createSuccessNotice, createErrorNotice } = (0, import_data180.useDispatch)(import_notices27.store);
    async function onSetPageAsHomepage(event) {
      event.preventDefault();
      try {
        await saveEntityRecord("root", "site", {
          page_on_front: item.id,
          show_on_front: "page"
        });
        createSuccessNotice((0, import_i18n156.__)("Homepage updated."), {
          type: "snackbar"
        });
      } catch (error) {
        const errorMessage = error.message && error.code !== "unknown_error" ? error.message : (0, import_i18n156.__)("An error occurred while setting the homepage.");
        createErrorNotice(errorMessage, { type: "snackbar" });
      } finally {
        closeModal2?.();
      }
    }
    let modalWarning = "";
    if ("posts" === showOnFront) {
      modalWarning = (0, import_i18n156.__)(
        "This will replace the current homepage which is set to display latest posts."
      );
    } else if (currentHomePage) {
      modalWarning = (0, import_i18n156.sprintf)(
        // translators: %s: title of the current home page.
        (0, import_i18n156.__)('This will replace the current homepage: "%s"'),
        getItemTitle2(currentHomePage)
      );
    }
    const modalText = (0, import_i18n156.sprintf)(
      // translators: %1$s: title of the page to be set as the homepage, %2$s: homepage replacement warning message.
      (0, import_i18n156.__)('Set "%1$s" as the site homepage? %2$s'),
      pageTitle,
      modalWarning
    ).trim();
    const modalButtonLabel = (0, import_i18n156.__)("Set homepage");
    return /* @__PURE__ */ (0, import_jsx_runtime230.jsx)("form", { onSubmit: onSetPageAsHomepage, children: /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)(import_components130.__experimentalVStack, { spacing: "5", children: [
      /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(import_components130.__experimentalText, { children: modalText }),
      /* @__PURE__ */ (0, import_jsx_runtime230.jsxs)(import_components130.__experimentalHStack, { justify: "right", children: [
        /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
          import_components130.Button,
          {
            __next40pxDefaultSize: true,
            variant: "tertiary",
            onClick: () => {
              closeModal2?.();
            },
            disabled: isSaving,
            accessibleWhenDisabled: true,
            children: (0, import_i18n156.__)("Cancel")
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime230.jsx)(
          import_components130.Button,
          {
            __next40pxDefaultSize: true,
            variant: "primary",
            type: "submit",
            disabled: isSaving,
            accessibleWhenDisabled: true,
            children: modalButtonLabel
          }
        )
      ] })
    ] }) });
  };
  var useSetAsHomepageAction = () => {
    const { pageOnFront, pageForPosts } = (0, import_data180.useSelect)((select4) => {
      const { getEntityRecord, canUser } = select4(import_core_data92.store);
      const siteSettings = canUser("read", {
        kind: "root",
        name: "site"
      }) ? getEntityRecord("root", "site") : void 0;
      return {
        pageOnFront: siteSettings?.page_on_front,
        pageForPosts: siteSettings?.page_for_posts
      };
    });
    return (0, import_element116.useMemo)(
      () => ({
        id: "set-as-homepage",
        label: (0, import_i18n156.__)("Set as homepage"),
        isEligible(post) {
          if (post.status !== "publish") {
            return false;
          }
          if (post.type !== "page") {
            return false;
          }
          if (pageOnFront === post.id) {
            return false;
          }
          if (pageForPosts === post.id) {
            return false;
          }
          return true;
        },
        modalFocusOnMount: "firstContentElement",
        RenderModal: SetAsHomepageModal
      }),
      [pageForPosts, pageOnFront]
    );
  };

  // packages/editor/build-module/components/post-actions/set-as-posts-page.js
  var import_jsx_runtime231 = __toESM(require_jsx_runtime());
  var import_i18n157 = __toESM(require_i18n());
  var import_element117 = __toESM(require_element());
  var import_components131 = __toESM(require_components());
  var import_data181 = __toESM(require_data());
  var import_core_data93 = __toESM(require_core_data());
  var import_notices28 = __toESM(require_notices());
  var SetAsPostsPageModal = ({ items, closeModal: closeModal2 }) => {
    const [item] = items;
    const pageTitle = getItemTitle2(item);
    const { currentPostsPage, isPageForPostsSet, isSaving } = (0, import_data181.useSelect)(
      (select4) => {
        const { getEntityRecord, isSavingEntityRecord } = select4(import_core_data93.store);
        const siteSettings = getEntityRecord("root", "site");
        const currentPostsPageItem = getEntityRecord(
          "postType",
          "page",
          siteSettings?.page_for_posts
        );
        return {
          currentPostsPage: currentPostsPageItem,
          isPageForPostsSet: siteSettings?.page_for_posts !== 0,
          isSaving: isSavingEntityRecord("root", "site")
        };
      }
    );
    const { saveEntityRecord } = (0, import_data181.useDispatch)(import_core_data93.store);
    const { createSuccessNotice, createErrorNotice } = (0, import_data181.useDispatch)(import_notices28.store);
    async function onSetPageAsPostsPage(event) {
      event.preventDefault();
      try {
        await saveEntityRecord("root", "site", {
          page_for_posts: item.id,
          show_on_front: "page"
        });
        createSuccessNotice((0, import_i18n157.__)("Posts page updated."), {
          type: "snackbar"
        });
      } catch (error) {
        const errorMessage = error.message && error.code !== "unknown_error" ? error.message : (0, import_i18n157.__)("An error occurred while setting the posts page.");
        createErrorNotice(errorMessage, { type: "snackbar" });
      } finally {
        closeModal2?.();
      }
    }
    const modalWarning = isPageForPostsSet && currentPostsPage ? (0, import_i18n157.sprintf)(
      // translators: %s: title of the current posts page.
      (0, import_i18n157.__)('This will replace the current posts page: "%s"'),
      getItemTitle2(currentPostsPage)
    ) : (0, import_i18n157.__)("This page will show the latest posts.");
    const modalText = (0, import_i18n157.sprintf)(
      // translators: %1$s: title of the page to be set as the posts page, %2$s: posts page replacement warning message.
      (0, import_i18n157.__)('Set "%1$s" as the posts page? %2$s'),
      pageTitle,
      modalWarning
    );
    const modalButtonLabel = (0, import_i18n157.__)("Set posts page");
    return /* @__PURE__ */ (0, import_jsx_runtime231.jsx)("form", { onSubmit: onSetPageAsPostsPage, children: /* @__PURE__ */ (0, import_jsx_runtime231.jsxs)(import_components131.__experimentalVStack, { spacing: "5", children: [
      /* @__PURE__ */ (0, import_jsx_runtime231.jsx)(import_components131.__experimentalText, { children: modalText }),
      /* @__PURE__ */ (0, import_jsx_runtime231.jsxs)(import_components131.__experimentalHStack, { justify: "right", children: [
        /* @__PURE__ */ (0, import_jsx_runtime231.jsx)(
          import_components131.Button,
          {
            __next40pxDefaultSize: true,
            variant: "tertiary",
            onClick: () => {
              closeModal2?.();
            },
            disabled: isSaving,
            accessibleWhenDisabled: true,
            children: (0, import_i18n157.__)("Cancel")
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime231.jsx)(
          import_components131.Button,
          {
            __next40pxDefaultSize: true,
            variant: "primary",
            type: "submit",
            disabled: isSaving,
            accessibleWhenDisabled: true,
            children: modalButtonLabel
          }
        )
      ] })
    ] }) });
  };
  var useSetAsPostsPageAction = () => {
    const { pageOnFront, pageForPosts } = (0, import_data181.useSelect)((select4) => {
      const { getEntityRecord, canUser } = select4(import_core_data93.store);
      const siteSettings = canUser("read", {
        kind: "root",
        name: "site"
      }) ? getEntityRecord("root", "site") : void 0;
      return {
        pageOnFront: siteSettings?.page_on_front,
        pageForPosts: siteSettings?.page_for_posts
      };
    });
    return (0, import_element117.useMemo)(
      () => ({
        id: "set-as-posts-page",
        label: (0, import_i18n157.__)("Set as posts page"),
        isEligible(post) {
          if (post.status !== "publish") {
            return false;
          }
          if (post.type !== "page") {
            return false;
          }
          if (pageOnFront === post.id) {
            return false;
          }
          if (pageForPosts === post.id) {
            return false;
          }
          return true;
        },
        modalFocusOnMount: "firstContentElement",
        RenderModal: SetAsPostsPageModal
      }),
      [pageForPosts, pageOnFront]
    );
  };

  // packages/editor/build-module/components/post-actions/actions.js
  function usePostActions({ postType: postType2, onActionPerformed, context }) {
    const { defaultActions } = (0, import_data182.useSelect)(
      (select4) => {
        const { getEntityActions: getEntityActions3 } = unlock(select4(store));
        return {
          defaultActions: getEntityActions3("postType", postType2)
        };
      },
      [postType2]
    );
    const shouldShowHomepageActions = (0, import_data182.useSelect)(
      (select4) => {
        if (postType2 !== "page") {
          return false;
        }
        const { getDefaultTemplateId, getEntityRecord, canUser } = select4(import_core_data94.store);
        const canUpdateSettings = canUser("update", {
          kind: "root",
          name: "site"
        });
        if (!canUpdateSettings) {
          return false;
        }
        const frontPageTemplateId = getDefaultTemplateId({
          slug: "front-page"
        });
        if (!frontPageTemplateId) {
          return true;
        }
        const frontPageTemplate = getEntityRecord(
          "postType",
          "wp_template",
          frontPageTemplateId
        );
        if (!frontPageTemplate) {
          return true;
        }
        return frontPageTemplate.slug !== "front-page";
      },
      [postType2]
    );
    const setAsHomepageAction = useSetAsHomepageAction();
    const setAsPostsPageAction = useSetAsPostsPageAction();
    const { registerPostTypeSchema: registerPostTypeSchema2 } = unlock((0, import_data182.useDispatch)(store));
    (0, import_element118.useEffect)(() => {
      registerPostTypeSchema2(postType2);
    }, [registerPostTypeSchema2, postType2]);
    return (0, import_element118.useMemo)(() => {
      let actions2 = [...defaultActions];
      if (shouldShowHomepageActions) {
        actions2.push(setAsHomepageAction, setAsPostsPageAction);
      }
      actions2 = actions2.sort(
        (a2, b2) => b2.id === "move-to-trash" ? -1 : 0
      );
      actions2 = actions2.filter((action) => {
        if (!action.context) {
          return true;
        }
        return action.context === context;
      });
      if (onActionPerformed) {
        for (let i2 = 0; i2 < actions2.length; ++i2) {
          if (actions2[i2].callback) {
            const existingCallback = actions2[i2].callback;
            actions2[i2] = {
              ...actions2[i2],
              callback: (items, argsObject) => {
                existingCallback(items, {
                  ...argsObject,
                  onActionPerformed: (_items) => {
                    if (argsObject?.onActionPerformed) {
                      argsObject.onActionPerformed(_items);
                    }
                    onActionPerformed(
                      actions2[i2].id,
                      _items
                    );
                  }
                });
              }
            };
          }
          if (actions2[i2].RenderModal) {
            const ExistingRenderModal = actions2[i2].RenderModal;
            actions2[i2] = {
              ...actions2[i2],
              RenderModal: (props) => {
                return /* @__PURE__ */ (0, import_jsx_runtime232.jsx)(
                  ExistingRenderModal,
                  {
                    ...props,
                    onActionPerformed: (_items) => {
                      if (props.onActionPerformed) {
                        props.onActionPerformed(_items);
                      }
                      onActionPerformed(
                        actions2[i2].id,
                        _items
                      );
                    }
                  }
                );
              }
            };
          }
        }
      }
      return actions2;
    }, [
      context,
      defaultActions,
      onActionPerformed,
      setAsHomepageAction,
      setAsPostsPageAction,
      shouldShowHomepageActions
    ]);
  }

  // packages/editor/build-module/components/post-actions/index.js
  var { Menu: Menu2, kebabCase } = unlock(import_components132.privateApis);
  function PostActions({ postType: postType2, postId: postId2, onActionPerformed }) {
    const [activeModalAction, setActiveModalAction] = (0, import_element119.useState)(null);
    const { item, permissions } = (0, import_data183.useSelect)(
      (select4) => {
        const { getEditedEntityRecord, getEntityRecordPermissions } = unlock(select4(import_core_data95.store));
        return {
          item: getEditedEntityRecord("postType", postType2, postId2),
          permissions: getEntityRecordPermissions(
            "postType",
            postType2,
            postId2
          )
        };
      },
      [postId2, postType2]
    );
    const itemWithPermissions = (0, import_element119.useMemo)(() => {
      return {
        ...item,
        permissions
      };
    }, [item, permissions]);
    const allActions = usePostActions({ postType: postType2, onActionPerformed });
    const actions2 = (0, import_element119.useMemo)(() => {
      return allActions.filter((action) => {
        return !action.isEligible || action.isEligible(itemWithPermissions);
      });
    }, [allActions, itemWithPermissions]);
    return /* @__PURE__ */ (0, import_jsx_runtime233.jsxs)(import_jsx_runtime233.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime233.jsxs)(Menu2, { placement: "bottom-end", children: [
        /* @__PURE__ */ (0, import_jsx_runtime233.jsx)(
          Menu2.TriggerButton,
          {
            render: /* @__PURE__ */ (0, import_jsx_runtime233.jsx)(
              import_components132.Button,
              {
                size: "small",
                icon: more_vertical_default,
                label: (0, import_i18n158.__)("Actions"),
                disabled: !actions2.length,
                accessibleWhenDisabled: true,
                className: "editor-all-actions-button"
              }
            )
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime233.jsx)(Menu2.Popover, { children: /* @__PURE__ */ (0, import_jsx_runtime233.jsx)(
          ActionsDropdownMenuGroup,
          {
            actions: actions2,
            items: [itemWithPermissions],
            setActiveModalAction
          }
        ) })
      ] }),
      !!activeModalAction && /* @__PURE__ */ (0, import_jsx_runtime233.jsx)(
        ActionModal,
        {
          action: activeModalAction,
          items: [itemWithPermissions],
          closeModal: () => setActiveModalAction(null)
        }
      )
    ] });
  }
  function DropdownMenuItemTrigger({ action, onClick, items }) {
    const label = typeof action.label === "string" ? action.label : action.label(items);
    return /* @__PURE__ */ (0, import_jsx_runtime233.jsx)(Menu2.Item, { onClick, children: /* @__PURE__ */ (0, import_jsx_runtime233.jsx)(Menu2.ItemLabel, { children: label }) });
  }
  function ActionModal({ action, items, closeModal: closeModal2 }) {
    const label = typeof action.label === "string" ? action.label : action.label(items);
    return /* @__PURE__ */ (0, import_jsx_runtime233.jsx)(
      import_components132.Modal,
      {
        title: action.modalHeader || label,
        __experimentalHideHeader: !!action.hideModalHeader,
        onRequestClose: closeModal2 ?? (() => {
        }),
        focusOnMount: "firstContentElement",
        size: "medium",
        overlayClassName: `editor-action-modal editor-action-modal__${kebabCase(
          action.id
        )}`,
        children: /* @__PURE__ */ (0, import_jsx_runtime233.jsx)(action.RenderModal, { items, closeModal: closeModal2 })
      }
    );
  }
  function ActionsDropdownMenuGroup({ actions: actions2, items, setActiveModalAction }) {
    const registry = (0, import_data183.useRegistry)();
    return /* @__PURE__ */ (0, import_jsx_runtime233.jsx)(Menu2.Group, { children: actions2.map((action) => {
      return /* @__PURE__ */ (0, import_jsx_runtime233.jsx)(
        DropdownMenuItemTrigger,
        {
          action,
          onClick: () => {
            if ("RenderModal" in action) {
              setActiveModalAction(action);
              return;
            }
            action.callback(items, { registry });
          },
          items
        },
        action.id
      );
    }) });
  }

  // packages/editor/build-module/components/post-card-panel/index.js
  var { Badge: Badge2 } = unlock(import_components133.privateApis);
  function PostCardPanel({
    postType: postType2,
    postId: postId2,
    onActionPerformed
  }) {
    const postIds = (0, import_element120.useMemo)(
      () => Array.isArray(postId2) ? postId2 : [postId2],
      [postId2]
    );
    const { postTitle, icon, labels } = (0, import_data184.useSelect)(
      (select4) => {
        const { getEditedEntityRecord, getCurrentTheme, getPostType } = select4(import_core_data96.store);
        const { getPostIcon: getPostIcon2 } = unlock(select4(store));
        let _title = "";
        const _record = getEditedEntityRecord(
          "postType",
          postType2,
          postIds[0]
        );
        if (postIds.length === 1) {
          const { default_template_types: templateTypes = [] } = getCurrentTheme() ?? {};
          const _templateInfo = [
            TEMPLATE_POST_TYPE,
            TEMPLATE_PART_POST_TYPE
          ].includes(postType2) ? getTemplateInfo({
            template: _record,
            templateTypes
          }) : {};
          _title = _templateInfo?.title || _record?.title;
        }
        return {
          postTitle: _title,
          icon: getPostIcon2(postType2, {
            area: _record?.area
          }),
          labels: getPostType(postType2)?.labels
        };
      },
      [postIds, postType2]
    );
    const pageTypeBadge = usePageTypeBadge(postId2);
    let title = (0, import_i18n159.__)("No title");
    if (labels?.name && postIds.length > 1) {
      title = (0, import_i18n159.sprintf)(
        // translators: %1$d number of selected items %2$s: Name of the plural post type e.g: "Posts".
        (0, import_i18n159.__)("%1$d %2$s"),
        postIds.length,
        labels?.name
      );
    } else if (postTitle) {
      title = (0, import_dom8.__unstableStripHTML)(postTitle);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime234.jsxs)(import_components133.__experimentalVStack, { spacing: 1, className: "editor-post-card-panel", children: [
      /* @__PURE__ */ (0, import_jsx_runtime234.jsxs)(
        import_components133.__experimentalHStack,
        {
          spacing: 2,
          className: "editor-post-card-panel__header",
          align: "flex-start",
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(import_components133.Icon, { className: "editor-post-card-panel__icon", icon }),
            /* @__PURE__ */ (0, import_jsx_runtime234.jsxs)(
              import_components133.__experimentalText,
              {
                numberOfLines: 2,
                truncate: true,
                className: "editor-post-card-panel__title",
                as: "h2",
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime234.jsx)("span", { className: "editor-post-card-panel__title-name", children: title }),
                  pageTypeBadge && postIds.length === 1 && /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(Badge2, { children: pageTypeBadge })
                ]
              }
            ),
            postIds.length === 1 && /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(
              PostActions,
              {
                postType: postType2,
                postId: postIds[0],
                onActionPerformed
              }
            )
          ]
        }
      ),
      postIds.length > 1 && /* @__PURE__ */ (0, import_jsx_runtime234.jsx)(import_components133.__experimentalText, { className: "editor-post-card-panel__description", children: (0, import_i18n159.sprintf)(
        // translators: %s: Name of the plural post type e.g: "Posts".
        (0, import_i18n159.__)("Changes will be applied to all selected %s."),
        labels?.name.toLowerCase()
      ) })
    ] });
  }

  // packages/editor/build-module/components/post-content-information/index.js
  var import_jsx_runtime235 = __toESM(require_jsx_runtime());
  var import_components134 = __toESM(require_components());
  var import_data185 = __toESM(require_data());
  var import_i18n160 = __toESM(require_i18n());
  var import_wordcount4 = __toESM(require_wordcount());
  var import_element121 = __toESM(require_element());
  var import_core_data97 = __toESM(require_core_data());
  var AVERAGE_READING_RATE2 = 189;
  function PostContentInformation() {
    const { postContent } = (0, import_data185.useSelect)((select4) => {
      const { getEditedPostAttribute: getEditedPostAttribute2, getCurrentPostType: getCurrentPostType2, getCurrentPostId: getCurrentPostId2 } = select4(store);
      const { canUser } = select4(import_core_data97.store);
      const { getEntityRecord } = select4(import_core_data97.store);
      const siteSettings = canUser("read", {
        kind: "root",
        name: "site"
      }) ? getEntityRecord("root", "site") : void 0;
      const postType2 = getCurrentPostType2();
      const _id = getCurrentPostId2();
      const isPostsPage = +_id === siteSettings?.page_for_posts;
      const showPostContentInfo = !isPostsPage && ![TEMPLATE_POST_TYPE, TEMPLATE_PART_POST_TYPE].includes(
        postType2
      );
      return {
        postContent: showPostContentInfo && getEditedPostAttribute2("content")
      };
    }, []);
    const wordCountType = (0, import_i18n160._x)("words", "Word count type. Do not translate!");
    const wordsCounted = (0, import_element121.useMemo)(
      () => postContent ? (0, import_wordcount4.count)(postContent, wordCountType) : 0,
      [postContent, wordCountType]
    );
    if (!wordsCounted) {
      return null;
    }
    const readingTime = Math.round(wordsCounted / AVERAGE_READING_RATE2);
    const wordsCountText = (0, import_i18n160.sprintf)(
      // translators: %s: the number of words in the post.
      (0, import_i18n160._n)("%s word", "%s words", wordsCounted),
      wordsCounted.toLocaleString()
    );
    const minutesText = readingTime <= 1 ? (0, import_i18n160.__)("1 minute") : (0, import_i18n160.sprintf)(
      /* translators: %s: the number of minutes to read the post. */
      (0, import_i18n160._n)("%s minute", "%s minutes", readingTime),
      readingTime.toLocaleString()
    );
    return /* @__PURE__ */ (0, import_jsx_runtime235.jsx)("div", { className: "editor-post-content-information", children: /* @__PURE__ */ (0, import_jsx_runtime235.jsx)(import_components134.__experimentalText, { children: (0, import_i18n160.sprintf)(
      /* translators: 1: How many words a post has. 2: the number of minutes to read the post (e.g. 130 words, 2 minutes read time.) */
      (0, import_i18n160.__)("%1$s, %2$s read time."),
      wordsCountText,
      minutesText
    ) }) });
  }

  // packages/editor/build-module/components/post-format/panel.js
  var import_jsx_runtime236 = __toESM(require_jsx_runtime());
  var import_components135 = __toESM(require_components());
  var import_i18n161 = __toESM(require_i18n());
  var import_data186 = __toESM(require_data());
  var import_element122 = __toESM(require_element());
  var import_block_editor68 = __toESM(require_block_editor());
  function PostFormat2() {
    const { postFormat } = (0, import_data186.useSelect)((select4) => {
      const { getEditedPostAttribute: getEditedPostAttribute2 } = select4(store);
      const _postFormat = getEditedPostAttribute2("format");
      return {
        postFormat: _postFormat ?? "standard"
      };
    }, []);
    const activeFormat = POST_FORMATS.find(
      (format) => format.id === postFormat
    );
    const [popoverAnchor, setPopoverAnchor] = (0, import_element122.useState)(null);
    const popoverProps = (0, import_element122.useMemo)(
      () => ({
        // Anchor the popover to the middle of the entire row so that it doesn't
        // move around when the label changes.
        anchor: popoverAnchor,
        placement: "left-start",
        offset: 36,
        shift: true
      }),
      [popoverAnchor]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime236.jsx)(PostFormatCheck, { children: /* @__PURE__ */ (0, import_jsx_runtime236.jsx)(post_panel_row_default, { label: (0, import_i18n161.__)("Format"), ref: setPopoverAnchor, children: /* @__PURE__ */ (0, import_jsx_runtime236.jsx)(
      import_components135.Dropdown,
      {
        popoverProps,
        contentClassName: "editor-post-format__dialog",
        focusOnMount: true,
        renderToggle: ({ isOpen, onToggle }) => /* @__PURE__ */ (0, import_jsx_runtime236.jsx)(
          import_components135.Button,
          {
            size: "compact",
            variant: "tertiary",
            "aria-expanded": isOpen,
            "aria-label": (0, import_i18n161.sprintf)(
              // translators: %s: Current post format.
              (0, import_i18n161.__)("Change format: %s"),
              activeFormat?.caption
            ),
            onClick: onToggle,
            children: activeFormat?.caption
          }
        ),
        renderContent: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime236.jsxs)("div", { className: "editor-post-format__dialog-content", children: [
          /* @__PURE__ */ (0, import_jsx_runtime236.jsx)(
            import_block_editor68.__experimentalInspectorPopoverHeader,
            {
              title: (0, import_i18n161.__)("Format"),
              onClose
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime236.jsx)(PostFormat, {})
        ] })
      }
    ) }) });
  }
  var panel_default4 = PostFormat2;

  // packages/editor/build-module/components/post-last-edited-panel/index.js
  var import_jsx_runtime237 = __toESM(require_jsx_runtime());
  var import_components136 = __toESM(require_components());
  var import_data187 = __toESM(require_data());
  var import_i18n162 = __toESM(require_i18n());
  var import_date7 = __toESM(require_date());
  function PostLastEditedPanel() {
    const modified = (0, import_data187.useSelect)(
      (select4) => select4(store).getEditedPostAttribute("modified"),
      []
    );
    const lastEditedText = modified && (0, import_i18n162.sprintf)(
      // translators: %s: Human-readable time difference, e.g. "2 days ago".
      (0, import_i18n162.__)("Last edited %s."),
      (0, import_date7.humanTimeDiff)(modified)
    );
    if (!lastEditedText) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime237.jsx)("div", { className: "editor-post-last-edited-panel", children: /* @__PURE__ */ (0, import_jsx_runtime237.jsx)(import_components136.__experimentalText, { children: lastEditedText }) });
  }

  // packages/editor/build-module/components/post-panel-section/index.js
  var import_jsx_runtime238 = __toESM(require_jsx_runtime());
  var import_components137 = __toESM(require_components());
  function PostPanelSection({ className, children }) {
    return /* @__PURE__ */ (0, import_jsx_runtime238.jsx)(import_components137.__experimentalVStack, { className: clsx_default("editor-post-panel__section", className), children });
  }
  var post_panel_section_default = PostPanelSection;

  // packages/editor/build-module/components/blog-title/index.js
  var import_jsx_runtime239 = __toESM(require_jsx_runtime());
  var import_i18n163 = __toESM(require_i18n());
  var import_compose50 = __toESM(require_compose());
  var import_data188 = __toESM(require_data());
  var import_core_data98 = __toESM(require_core_data());
  var import_html_entities27 = __toESM(require_html_entities());
  var import_components138 = __toESM(require_components());
  var import_element123 = __toESM(require_element());
  var import_block_editor69 = __toESM(require_block_editor());
  var EMPTY_OBJECT4 = {};
  function BlogTitle() {
    const { editEntityRecord } = (0, import_data188.useDispatch)(import_core_data98.store);
    const { postsPageTitle, postsPageId, isTemplate, postSlug } = (0, import_data188.useSelect)(
      (select4) => {
        const { getEntityRecord, getEditedEntityRecord, canUser } = select4(import_core_data98.store);
        const siteSettings = canUser("read", {
          kind: "root",
          name: "site"
        }) ? getEntityRecord("root", "site") : void 0;
        const _postsPageRecord = siteSettings?.page_for_posts ? getEditedEntityRecord(
          "postType",
          "page",
          siteSettings?.page_for_posts
        ) : EMPTY_OBJECT4;
        const { getEditedPostAttribute: getEditedPostAttribute2, getCurrentPostType: getCurrentPostType2 } = select4(store);
        return {
          postsPageId: _postsPageRecord?.id,
          postsPageTitle: _postsPageRecord?.title,
          isTemplate: getCurrentPostType2() === TEMPLATE_POST_TYPE,
          postSlug: getEditedPostAttribute2("slug")
        };
      },
      []
    );
    const [popoverAnchor, setPopoverAnchor] = (0, import_element123.useState)(null);
    const popoverProps = (0, import_element123.useMemo)(
      () => ({
        // Anchor the popover to the middle of the entire row so that it doesn't
        // move around when the label changes.
        anchor: popoverAnchor,
        placement: "left-start",
        offset: 36,
        shift: true
      }),
      [popoverAnchor]
    );
    if (!isTemplate || !["home", "index"].includes(postSlug) || !postsPageId) {
      return null;
    }
    const setPostsPageTitle = (newValue) => {
      editEntityRecord("postType", "page", postsPageId, {
        title: newValue
      });
    };
    const decodedTitle = (0, import_html_entities27.decodeEntities)(postsPageTitle);
    return /* @__PURE__ */ (0, import_jsx_runtime239.jsx)(post_panel_row_default, { label: (0, import_i18n163.__)("Blog title"), ref: setPopoverAnchor, children: /* @__PURE__ */ (0, import_jsx_runtime239.jsx)(
      import_components138.Dropdown,
      {
        popoverProps,
        contentClassName: "editor-blog-title-dropdown__content",
        focusOnMount: true,
        renderToggle: ({ isOpen, onToggle }) => /* @__PURE__ */ (0, import_jsx_runtime239.jsx)(
          import_components138.Button,
          {
            size: "compact",
            variant: "tertiary",
            "aria-expanded": isOpen,
            "aria-label": (0, import_i18n163.sprintf)(
              // translators: %s: Current post link.
              (0, import_i18n163.__)("Change blog title: %s"),
              decodedTitle
            ),
            onClick: onToggle,
            children: decodedTitle
          }
        ),
        renderContent: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime239.jsxs)(import_jsx_runtime239.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime239.jsx)(
            import_block_editor69.__experimentalInspectorPopoverHeader,
            {
              title: (0, import_i18n163.__)("Blog title"),
              onClose
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime239.jsx)(
            import_components138.__experimentalInputControl,
            {
              placeholder: (0, import_i18n163.__)("No title"),
              size: "__unstable-large",
              value: postsPageTitle,
              onChange: (0, import_compose50.debounce)(setPostsPageTitle, 300),
              label: (0, import_i18n163.__)("Blog title"),
              help: (0, import_i18n163.__)(
                "Set the Posts Page title. Appears in search results, and when the page is shared on social media."
              ),
              hideLabelFromVision: true
            }
          )
        ] })
      }
    ) });
  }

  // packages/editor/build-module/components/posts-per-page/index.js
  var import_jsx_runtime240 = __toESM(require_jsx_runtime());
  var import_i18n164 = __toESM(require_i18n());
  var import_data189 = __toESM(require_data());
  var import_core_data99 = __toESM(require_core_data());
  var import_components139 = __toESM(require_components());
  var import_element124 = __toESM(require_element());
  var import_block_editor70 = __toESM(require_block_editor());
  function PostsPerPage() {
    const { editEntityRecord } = (0, import_data189.useDispatch)(import_core_data99.store);
    const { postsPerPage, isTemplate, postSlug } = (0, import_data189.useSelect)((select4) => {
      const { getEditedPostAttribute: getEditedPostAttribute2, getCurrentPostType: getCurrentPostType2 } = select4(store);
      const { getEditedEntityRecord, canUser } = select4(import_core_data99.store);
      const siteSettings = canUser("read", {
        kind: "root",
        name: "site"
      }) ? getEditedEntityRecord("root", "site") : void 0;
      return {
        isTemplate: getCurrentPostType2() === TEMPLATE_POST_TYPE,
        postSlug: getEditedPostAttribute2("slug"),
        postsPerPage: siteSettings?.posts_per_page || 1
      };
    }, []);
    const [popoverAnchor, setPopoverAnchor] = (0, import_element124.useState)(null);
    const popoverProps = (0, import_element124.useMemo)(
      () => ({
        // Anchor the popover to the middle of the entire row so that it doesn't
        // move around when the label changes.
        anchor: popoverAnchor,
        placement: "left-start",
        offset: 36,
        shift: true
      }),
      [popoverAnchor]
    );
    if (!isTemplate || !["home", "index"].includes(postSlug)) {
      return null;
    }
    const setPostsPerPage = (newValue) => {
      editEntityRecord("root", "site", void 0, {
        posts_per_page: newValue
      });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime240.jsx)(post_panel_row_default, { label: (0, import_i18n164.__)("Posts per page"), ref: setPopoverAnchor, children: /* @__PURE__ */ (0, import_jsx_runtime240.jsx)(
      import_components139.Dropdown,
      {
        popoverProps,
        contentClassName: "editor-posts-per-page-dropdown__content",
        focusOnMount: true,
        renderToggle: ({ isOpen, onToggle }) => /* @__PURE__ */ (0, import_jsx_runtime240.jsx)(
          import_components139.Button,
          {
            size: "compact",
            variant: "tertiary",
            "aria-expanded": isOpen,
            "aria-label": (0, import_i18n164.__)("Change posts per page"),
            onClick: onToggle,
            children: postsPerPage
          }
        ),
        renderContent: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime240.jsxs)(import_jsx_runtime240.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime240.jsx)(
            import_block_editor70.__experimentalInspectorPopoverHeader,
            {
              title: (0, import_i18n164.__)("Posts per page"),
              onClose
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime240.jsx)(
            import_components139.__experimentalNumberControl,
            {
              placeholder: 0,
              value: postsPerPage,
              size: "__unstable-large",
              spinControls: "custom",
              step: "1",
              min: "1",
              onChange: setPostsPerPage,
              label: (0, import_i18n164.__)("Posts per page"),
              help: (0, import_i18n164.__)(
                "Set the default number of posts to display on blog pages, including categories and tags. Some templates may override this setting."
              ),
              hideLabelFromVision: true
            }
          )
        ] })
      }
    ) });
  }

  // packages/editor/build-module/components/site-discussion/index.js
  var import_jsx_runtime241 = __toESM(require_jsx_runtime());
  var import_i18n165 = __toESM(require_i18n());
  var import_data190 = __toESM(require_data());
  var import_core_data100 = __toESM(require_core_data());
  var import_components140 = __toESM(require_components());
  var import_element125 = __toESM(require_element());
  var import_block_editor71 = __toESM(require_block_editor());
  var COMMENT_OPTIONS2 = [
    {
      label: (0, import_i18n165._x)("Open", 'Adjective: e.g. "Comments are open"'),
      value: "open",
      description: (0, import_i18n165.__)("Visitors can add new comments and replies.")
    },
    {
      label: (0, import_i18n165.__)("Closed"),
      value: "",
      description: [
        (0, import_i18n165.__)("Visitors cannot add new comments or replies."),
        (0, import_i18n165.__)("Existing comments remain visible.")
      ].join(" ")
    }
  ];
  function SiteDiscussion() {
    const { editEntityRecord } = (0, import_data190.useDispatch)(import_core_data100.store);
    const { allowCommentsOnNewPosts, isTemplate, postSlug } = (0, import_data190.useSelect)(
      (select4) => {
        const { getEditedPostAttribute: getEditedPostAttribute2, getCurrentPostType: getCurrentPostType2 } = select4(store);
        const { getEditedEntityRecord, canUser } = select4(import_core_data100.store);
        const siteSettings = canUser("read", {
          kind: "root",
          name: "site"
        }) ? getEditedEntityRecord("root", "site") : void 0;
        return {
          isTemplate: getCurrentPostType2() === TEMPLATE_POST_TYPE,
          postSlug: getEditedPostAttribute2("slug"),
          allowCommentsOnNewPosts: siteSettings?.default_comment_status || ""
        };
      },
      []
    );
    const [popoverAnchor, setPopoverAnchor] = (0, import_element125.useState)(null);
    const popoverProps = (0, import_element125.useMemo)(
      () => ({
        // Anchor the popover to the middle of the entire row so that it doesn't
        // move around when the label changes.
        anchor: popoverAnchor,
        placement: "left-start",
        offset: 36,
        shift: true
      }),
      [popoverAnchor]
    );
    if (!isTemplate || !["home", "index"].includes(postSlug)) {
      return null;
    }
    const setAllowCommentsOnNewPosts = (newValue) => {
      editEntityRecord("root", "site", void 0, {
        default_comment_status: newValue ? "open" : null
      });
    };
    return /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(post_panel_row_default, { label: (0, import_i18n165.__)("Discussion"), ref: setPopoverAnchor, children: /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(
      import_components140.Dropdown,
      {
        popoverProps,
        contentClassName: "editor-site-discussion-dropdown__content",
        focusOnMount: true,
        renderToggle: ({ isOpen, onToggle }) => /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(
          import_components140.Button,
          {
            size: "compact",
            variant: "tertiary",
            "aria-expanded": isOpen,
            "aria-label": (0, import_i18n165.__)("Change discussion settings"),
            onClick: onToggle,
            children: allowCommentsOnNewPosts ? (0, import_i18n165.__)("Comments open") : (0, import_i18n165.__)("Comments closed")
          }
        ),
        renderContent: ({ onClose }) => /* @__PURE__ */ (0, import_jsx_runtime241.jsxs)(import_jsx_runtime241.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(
            import_block_editor71.__experimentalInspectorPopoverHeader,
            {
              title: (0, import_i18n165.__)("Discussion"),
              onClose
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime241.jsxs)(import_components140.__experimentalVStack, { spacing: 3, children: [
            /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(import_components140.__experimentalText, { children: (0, import_i18n165.__)(
              "Changes will apply to new posts only. Individual posts may override these settings."
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime241.jsx)(
              import_components140.RadioControl,
              {
                className: "editor-site-discussion__options",
                hideLabelFromVision: true,
                label: (0, import_i18n165.__)("Comment status"),
                options: COMMENT_OPTIONS2,
                onChange: setAllowCommentsOnNewPosts,
                selected: allowCommentsOnNewPosts
              }
            )
          ] })
        ] })
      }
    ) });
  }

  // packages/editor/build-module/components/sidebar/post-summary.js
  var PANEL_NAME5 = "post-status";
  function PostSummary({ onActionPerformed }) {
    const { isRemovedPostStatusPanel, postType: postType2, postId: postId2 } = (0, import_data191.useSelect)(
      (select4) => {
        const {
          isEditorPanelRemoved: isEditorPanelRemoved2,
          getCurrentPostType: getCurrentPostType2,
          getCurrentPostId: getCurrentPostId2
        } = select4(store);
        return {
          isRemovedPostStatusPanel: isEditorPanelRemoved2(PANEL_NAME5),
          postType: getCurrentPostType2(),
          postId: getCurrentPostId2()
        };
      },
      []
    );
    return /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(post_panel_section_default, { className: "editor-post-summary", children: /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(plugin_post_status_info_default.Slot, { children: (fills) => /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(import_jsx_runtime242.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime242.jsxs)(import_components141.__experimentalVStack, { spacing: 4, children: [
      /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(
        PostCardPanel,
        {
          postType: postType2,
          postId: postId2,
          onActionPerformed
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(PostFeaturedImagePanel, { withPanelBody: false }),
      /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(PrivatePostExcerptPanel, {}),
      /* @__PURE__ */ (0, import_jsx_runtime242.jsxs)(import_components141.__experimentalVStack, { spacing: 1, children: [
        /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(PostContentInformation, {}),
        /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(PostLastEditedPanel, {})
      ] }),
      !isRemovedPostStatusPanel && /* @__PURE__ */ (0, import_jsx_runtime242.jsxs)(import_components141.__experimentalVStack, { spacing: 4, children: [
        /* @__PURE__ */ (0, import_jsx_runtime242.jsxs)(import_components141.__experimentalVStack, { spacing: 1, children: [
          /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(PostStatus, {}),
          /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(PostSchedulePanel, {}),
          /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(PostURLPanel, {}),
          /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(panel_default, {}),
          /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(PostTemplatePanel, {}),
          /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(PostDiscussionPanel, {}),
          /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(PrivatePostLastRevision, {}),
          /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(PageAttributesPanel, {}),
          /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(PostSyncStatus, {}),
          /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(BlogTitle, {}),
          /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(PostsPerPage, {}),
          /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(SiteDiscussion, {}),
          /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(panel_default4, {}),
          fills
        ] }),
        /* @__PURE__ */ (0, import_jsx_runtime242.jsx)(
          PostTrash,
          {
            onActionPerformed
          }
        )
      ] })
    ] }) }) }) });
  }

  // packages/editor/build-module/components/post-transform-panel/index.js
  var import_jsx_runtime243 = __toESM(require_jsx_runtime());
  var import_data193 = __toESM(require_data());
  var import_core_data102 = __toESM(require_core_data());
  var import_components142 = __toESM(require_components());
  var import_i18n166 = __toESM(require_i18n());
  var import_block_editor72 = __toESM(require_block_editor());
  var import_blocks22 = __toESM(require_blocks());

  // packages/editor/build-module/components/post-transform-panel/hooks.js
  var import_data192 = __toESM(require_data());
  var import_element126 = __toESM(require_element());
  var import_core_data101 = __toESM(require_core_data());
  var import_blocks21 = __toESM(require_blocks());
  var import_patterns10 = __toESM(require_patterns());
  var { EXCLUDED_PATTERN_SOURCES, PATTERN_TYPES: PATTERN_TYPES5 } = unlock(import_patterns10.privateApis);
  function injectThemeAttributeInBlockTemplateContent(block, currentThemeStylesheet) {
    block.innerBlocks = block.innerBlocks.map((innerBlock) => {
      return injectThemeAttributeInBlockTemplateContent(
        innerBlock,
        currentThemeStylesheet
      );
    });
    if (block.name === "core/template-part" && block.attributes.theme === void 0) {
      block.attributes.theme = currentThemeStylesheet;
    }
    return block;
  }
  function filterPatterns(patterns2, template2) {
    const filterOutDuplicatesByName = (currentItem, index2, items) => index2 === items.findIndex((item) => currentItem.name === item.name);
    const filterOutExcludedPatternSources = (pattern) => !EXCLUDED_PATTERN_SOURCES.includes(pattern.source);
    const filterCompatiblePatterns = (pattern) => pattern.templateTypes?.includes(template2.slug) || pattern.blockTypes?.includes("core/template-part/" + template2.area);
    return patterns2.filter((pattern, index2, items) => {
      return filterOutDuplicatesByName(pattern, index2, items) && filterOutExcludedPatternSources(pattern) && filterCompatiblePatterns(pattern);
    });
  }
  function preparePatterns(patterns2, currentThemeStylesheet) {
    return patterns2.map((pattern) => ({
      ...pattern,
      keywords: pattern.keywords || [],
      type: PATTERN_TYPES5.theme,
      blocks: (0, import_blocks21.parse)(pattern.content, {
        __unstableSkipMigrationLogs: true
      }).map(
        (block) => injectThemeAttributeInBlockTemplateContent(
          block,
          currentThemeStylesheet
        )
      )
    }));
  }
  function useAvailablePatterns({ area, name, slug }) {
    const { blockPatterns, restBlockPatterns, currentThemeStylesheet } = (0, import_data192.useSelect)((select4) => {
      const { getEditorSettings: getEditorSettings2 } = select4(store);
      const settings = getEditorSettings2();
      return {
        blockPatterns: settings.__experimentalAdditionalBlockPatterns ?? settings.__experimentalBlockPatterns,
        restBlockPatterns: select4(import_core_data101.store).getBlockPatterns(),
        currentThemeStylesheet: select4(import_core_data101.store).getCurrentTheme().stylesheet
      };
    }, []);
    return (0, import_element126.useMemo)(() => {
      const mergedPatterns = [
        ...blockPatterns || [],
        ...restBlockPatterns || []
      ];
      const filteredPatterns = filterPatterns(mergedPatterns, {
        area,
        name,
        slug
      });
      return preparePatterns(filteredPatterns, currentThemeStylesheet);
    }, [
      area,
      name,
      slug,
      blockPatterns,
      restBlockPatterns,
      currentThemeStylesheet
    ]);
  }

  // packages/editor/build-module/components/post-transform-panel/index.js
  function TemplatesList2({ availableTemplates, onSelect }) {
    if (!availableTemplates || availableTemplates?.length === 0) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
      import_block_editor72.__experimentalBlockPatternsList,
      {
        label: (0, import_i18n166.__)("Templates"),
        blockPatterns: availableTemplates,
        onClickPattern: onSelect,
        showTitlesAsTooltip: true
      }
    );
  }
  function PostTransform() {
    const { area, name, slug, postType: postType2, postId: postId2 } = (0, import_data193.useSelect)((select4) => {
      const { getCurrentPostType: getCurrentPostType2, getCurrentPostId: getCurrentPostId2 } = select4(store);
      const { getEditedEntityRecord } = select4(import_core_data102.store);
      const type = getCurrentPostType2();
      const id = getCurrentPostId2();
      const record = getEditedEntityRecord("postType", type, id);
      return {
        area: record?.area,
        name: record?.name,
        slug: record?.slug,
        postType: type,
        postId: id
      };
    }, []);
    const { editEntityRecord } = (0, import_data193.useDispatch)(import_core_data102.store);
    const availablePatterns = useAvailablePatterns({ area, name, slug });
    const onTemplateSelect = async (selectedTemplate) => {
      await editEntityRecord("postType", postType2, postId2, {
        blocks: selectedTemplate.blocks,
        content: (0, import_blocks22.serialize)(selectedTemplate.blocks)
      });
    };
    if (!availablePatterns?.length) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
      import_components142.PanelBody,
      {
        title: (0, import_i18n166.__)("Design"),
        initialOpen: postType2 === TEMPLATE_PART_POST_TYPE,
        children: /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(
          TemplatesList2,
          {
            availableTemplates: availablePatterns,
            onSelect: onTemplateSelect
          }
        )
      }
    );
  }
  function PostTransformPanel() {
    const { postType: postType2 } = (0, import_data193.useSelect)((select4) => {
      const { getCurrentPostType: getCurrentPostType2 } = select4(store);
      return {
        postType: getCurrentPostType2()
      };
    }, []);
    if (![TEMPLATE_PART_POST_TYPE, TEMPLATE_POST_TYPE].includes(postType2)) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime243.jsx)(PostTransform, {});
  }

  // packages/editor/build-module/components/sidebar/header.js
  var import_jsx_runtime244 = __toESM(require_jsx_runtime());
  var import_components143 = __toESM(require_components());
  var import_i18n167 = __toESM(require_i18n());
  var import_data194 = __toESM(require_data());
  var import_element127 = __toESM(require_element());

  // packages/editor/build-module/components/sidebar/constants.js
  var sidebars = {
    document: "edit-post/document",
    block: "edit-post/block"
  };

  // packages/editor/build-module/components/sidebar/header.js
  var { Tabs } = unlock(import_components143.privateApis);
  var SidebarHeader = (_, ref) => {
    const { documentLabel } = (0, import_data194.useSelect)((select4) => {
      const { getPostTypeLabel: getPostTypeLabel2 } = select4(store);
      return {
        documentLabel: (
          // translators: Default label for the Document sidebar tab, not selected.
          getPostTypeLabel2() || (0, import_i18n167._x)("Document", "noun, panel")
        )
      };
    }, []);
    return /* @__PURE__ */ (0, import_jsx_runtime244.jsxs)(Tabs.TabList, { ref, children: [
      /* @__PURE__ */ (0, import_jsx_runtime244.jsx)(
        Tabs.Tab,
        {
          tabId: sidebars.document,
          "data-tab-id": sidebars.document,
          children: documentLabel
        }
      ),
      /* @__PURE__ */ (0, import_jsx_runtime244.jsx)(
        Tabs.Tab,
        {
          tabId: sidebars.block,
          "data-tab-id": sidebars.block,
          children: (0, import_i18n167.__)("Block")
        }
      )
    ] });
  };
  var header_default3 = (0, import_element127.forwardRef)(SidebarHeader);

  // packages/editor/build-module/components/template-content-panel/index.js
  var import_jsx_runtime245 = __toESM(require_jsx_runtime());
  var import_data195 = __toESM(require_data());
  var import_block_editor73 = __toESM(require_block_editor());
  var import_components144 = __toESM(require_components());
  var import_i18n168 = __toESM(require_i18n());
  var import_hooks22 = __toESM(require_hooks());
  var import_element128 = __toESM(require_element());
  var { BlockQuickNavigation } = unlock(import_block_editor73.privateApis);
  var POST_CONTENT_BLOCK_TYPES2 = [
    "core/post-title",
    "core/post-featured-image",
    "core/post-content"
  ];
  var TEMPLATE_PART_BLOCK = "core/template-part";
  function TemplateContentPanel() {
    const postContentBlockTypes = (0, import_element128.useMemo)(
      () => (0, import_hooks22.applyFilters)(
        "editor.postContentBlockTypes",
        POST_CONTENT_BLOCK_TYPES2
      ),
      []
    );
    const { clientIds, postType: postType2, renderingMode: renderingMode2 } = (0, import_data195.useSelect)(
      (select4) => {
        const {
          getCurrentPostType: getCurrentPostType2,
          getPostBlocksByName: getPostBlocksByName2,
          getRenderingMode: getRenderingMode2
        } = unlock(select4(store));
        const _postType = getCurrentPostType2();
        return {
          postType: _postType,
          clientIds: getPostBlocksByName2(
            TEMPLATE_POST_TYPE === _postType ? TEMPLATE_PART_BLOCK : postContentBlockTypes
          ),
          renderingMode: getRenderingMode2()
        };
      },
      [postContentBlockTypes]
    );
    const { enableComplementaryArea: enableComplementaryArea2 } = (0, import_data195.useDispatch)(store2);
    if (renderingMode2 === "post-only" && postType2 !== TEMPLATE_POST_TYPE || clientIds.length === 0) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime245.jsx)(import_components144.PanelBody, { title: (0, import_i18n168.__)("Content"), children: /* @__PURE__ */ (0, import_jsx_runtime245.jsx)(
      BlockQuickNavigation,
      {
        clientIds,
        onSelect: () => {
          enableComplementaryArea2("core", "edit-post/document");
        }
      }
    ) });
  }

  // packages/editor/build-module/components/template-part-content-panel/index.js
  var import_jsx_runtime246 = __toESM(require_jsx_runtime());
  var import_data196 = __toESM(require_data());
  var import_element129 = __toESM(require_element());
  var import_blocks23 = __toESM(require_blocks());
  var import_block_editor74 = __toESM(require_block_editor());
  var import_components145 = __toESM(require_components());
  var import_i18n169 = __toESM(require_i18n());
  var { BlockQuickNavigation: BlockQuickNavigation2 } = unlock(import_block_editor74.privateApis);
  function TemplatePartContentPanelInner() {
    const blockTypes = (0, import_data196.useSelect)((select4) => {
      const { getBlockTypes } = select4(import_blocks23.store);
      return getBlockTypes();
    }, []);
    const themeBlockNames = (0, import_element129.useMemo)(() => {
      return blockTypes.filter((blockType) => {
        return blockType.category === "theme";
      }).map(({ name }) => name);
    }, [blockTypes]);
    const themeBlocks = (0, import_data196.useSelect)(
      (select4) => {
        const { getBlocksByName } = select4(import_block_editor74.store);
        return getBlocksByName(themeBlockNames);
      },
      [themeBlockNames]
    );
    if (themeBlocks.length === 0) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime246.jsx)(import_components145.PanelBody, { title: (0, import_i18n169.__)("Content"), children: /* @__PURE__ */ (0, import_jsx_runtime246.jsx)(BlockQuickNavigation2, { clientIds: themeBlocks }) });
  }
  function TemplatePartContentPanel() {
    const postType2 = (0, import_data196.useSelect)((select4) => {
      const { getCurrentPostType: getCurrentPostType2 } = select4(store);
      return getCurrentPostType2();
    }, []);
    if (postType2 !== TEMPLATE_PART_POST_TYPE) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime246.jsx)(TemplatePartContentPanelInner, {});
  }

  // packages/editor/build-module/components/provider/use-auto-switch-editor-sidebars.js
  var import_data197 = __toESM(require_data());
  var import_element130 = __toESM(require_element());
  var import_block_editor75 = __toESM(require_block_editor());
  var import_preferences22 = __toESM(require_preferences());
  function useAutoSwitchEditorSidebars() {
    const { hasBlockSelection } = (0, import_data197.useSelect)((select4) => {
      return {
        hasBlockSelection: !!select4(import_block_editor75.store).getBlockSelectionStart()
      };
    }, []);
    const { getActiveComplementaryArea: getActiveComplementaryArea2 } = (0, import_data197.useSelect)(store2);
    const { enableComplementaryArea: enableComplementaryArea2 } = (0, import_data197.useDispatch)(store2);
    const { get: getPreference } = (0, import_data197.useSelect)(import_preferences22.store);
    (0, import_element130.useEffect)(() => {
      const activeGeneralSidebar = getActiveComplementaryArea2("core");
      const isEditorSidebarOpened = [
        "edit-post/document",
        "edit-post/block"
      ].includes(activeGeneralSidebar);
      const isDistractionFree = getPreference("core", "distractionFree");
      if (!isEditorSidebarOpened || isDistractionFree) {
        return;
      }
      if (hasBlockSelection) {
        enableComplementaryArea2("core", "edit-post/block");
      } else {
        enableComplementaryArea2("core", "edit-post/document");
      }
    }, [
      hasBlockSelection,
      getActiveComplementaryArea2,
      enableComplementaryArea2,
      getPreference
    ]);
  }
  var use_auto_switch_editor_sidebars_default = useAutoSwitchEditorSidebars;

  // packages/editor/build-module/components/sidebar/index.js
  var { Tabs: Tabs2 } = unlock(import_components146.privateApis);
  var SIDEBAR_ACTIVE_BY_DEFAULT = import_element131.Platform.select({
    web: true,
    native: false
  });
  var SidebarContent = ({
    tabName,
    keyboardShortcut,
    onActionPerformed,
    extraPanels
  }) => {
    const tabListRef = (0, import_element131.useRef)(null);
    const tabsContextValue = (0, import_element131.useContext)(Tabs2.Context);
    (0, import_element131.useEffect)(() => {
      const tabsElements = Array.from(
        tabListRef.current?.querySelectorAll('[role="tab"]') || []
      );
      const selectedTabElement = tabsElements.find(
        // We are purposefully using a custom `data-tab-id` attribute here
        // because we don't want rely on any assumptions about `Tabs`
        // component internals.
        (element) => element.getAttribute("data-tab-id") === tabName
      );
      const activeElement = selectedTabElement?.ownerDocument.activeElement;
      const tabsHasFocus = tabsElements.some((element) => {
        return activeElement && activeElement.id === element.id;
      });
      if (tabsHasFocus && selectedTabElement && selectedTabElement.id !== activeElement?.id) {
        selectedTabElement?.focus();
      }
    }, [tabName]);
    return /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(
      PluginSidebar,
      {
        identifier: tabName,
        header: /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(Tabs2.Context.Provider, { value: tabsContextValue, children: /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(header_default3, { ref: tabListRef }) }),
        closeLabel: (0, import_i18n170.__)("Close Settings"),
        className: "editor-sidebar__panel",
        headerClassName: "editor-sidebar__panel-tabs",
        title: (
          /* translators: button label text should, if possible, be under 16 characters. */
          (0, import_i18n170._x)("Settings", "panel button label")
        ),
        toggleShortcut: keyboardShortcut,
        icon: (0, import_i18n170.isRTL)() ? drawer_left_default : drawer_right_default,
        isActiveByDefault: SIDEBAR_ACTIVE_BY_DEFAULT,
        children: /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)(Tabs2.Context.Provider, { value: tabsContextValue, children: [
          /* @__PURE__ */ (0, import_jsx_runtime247.jsxs)(Tabs2.TabPanel, { tabId: sidebars.document, focusable: false, children: [
            /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(PostSummary, { onActionPerformed }),
            /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(plugin_document_setting_panel_default.Slot, {}),
            /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(TemplateContentPanel, {}),
            /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(TemplatePartContentPanel, {}),
            /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(PostTransformPanel, {}),
            /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(PostTaxonomies2, {}),
            /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(PatternOverridesPanel, {}),
            extraPanels
          ] }),
          /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(Tabs2.TabPanel, { tabId: sidebars.block, focusable: false, children: /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(import_block_editor76.BlockInspector, {}) })
        ] })
      }
    );
  };
  var Sidebar = ({ extraPanels, onActionPerformed }) => {
    use_auto_switch_editor_sidebars_default();
    const { tabName, keyboardShortcut, showSummary } = (0, import_data198.useSelect)(
      (select4) => {
        const shortcut = select4(
          import_keyboard_shortcuts10.store
        ).getShortcutRepresentation("core/editor/toggle-sidebar");
        const sidebar = select4(store2).getActiveComplementaryArea("core");
        const _isEditorSidebarOpened = [
          sidebars.block,
          sidebars.document
        ].includes(sidebar);
        let _tabName = sidebar;
        if (!_isEditorSidebarOpened) {
          _tabName = !!select4(
            import_block_editor76.store
          ).getBlockSelectionStart() ? sidebars.block : sidebars.document;
        }
        return {
          tabName: _tabName,
          keyboardShortcut: shortcut,
          showSummary: ![
            TEMPLATE_POST_TYPE,
            TEMPLATE_PART_POST_TYPE,
            NAVIGATION_POST_TYPE
          ].includes(select4(store).getCurrentPostType())
        };
      },
      []
    );
    const { enableComplementaryArea: enableComplementaryArea2 } = (0, import_data198.useDispatch)(store2);
    const onTabSelect = (0, import_element131.useCallback)(
      (newSelectedTabId) => {
        if (!!newSelectedTabId) {
          enableComplementaryArea2("core", newSelectedTabId);
        }
      },
      [enableComplementaryArea2]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(
      Tabs2,
      {
        selectedTabId: tabName,
        onSelect: onTabSelect,
        selectOnMove: false,
        children: /* @__PURE__ */ (0, import_jsx_runtime247.jsx)(
          SidebarContent,
          {
            tabName,
            keyboardShortcut,
            showSummary,
            onActionPerformed,
            extraPanels
          }
        )
      }
    );
  };
  var sidebar_default2 = Sidebar;

  // packages/editor/build-module/components/editor/index.js
  function Editor({
    postType: postType2,
    postId: postId2,
    templateId: templateId2,
    settings,
    children,
    initialEdits,
    // This could be part of the settings.
    onActionPerformed,
    // The following abstractions are not ideal but necessary
    // to account for site editor and post editor differences for now.
    extraContent,
    extraSidebarPanels,
    ...props
  }) {
    const { post, template: template2, hasLoadedPost, error } = (0, import_data199.useSelect)(
      (select4) => {
        const {
          getEntityRecord,
          getResolutionError,
          hasFinishedResolution
        } = select4(import_core_data103.store);
        const postArgs = ["postType", postType2, postId2];
        return {
          post: getEntityRecord(...postArgs),
          template: templateId2 ? getEntityRecord(
            "postType",
            TEMPLATE_POST_TYPE,
            templateId2
          ) : void 0,
          hasLoadedPost: hasFinishedResolution(
            "getEntityRecord",
            postArgs
          ),
          error: getResolutionError("getEntityRecord", postArgs)?.message
        };
      },
      [postType2, postId2, templateId2]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime248.jsxs)(import_jsx_runtime248.Fragment, { children: [
      hasLoadedPost && !post && /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(
        import_components147.Notice,
        {
          status: !!error ? "error" : "warning",
          isDismissible: false,
          children: !error ? (0, import_i18n171.__)(
            "You attempted to edit an item that doesn't exist. Perhaps it was deleted?"
          ) : error
        }
      ),
      !!post && /* @__PURE__ */ (0, import_jsx_runtime248.jsxs)(
        ExperimentalEditorProvider,
        {
          post,
          __unstableTemplate: template2,
          settings,
          initialEdits,
          useSubRegistry: false,
          children: [
            /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(EditorInterface, { ...props, children: extraContent }),
            children,
            /* @__PURE__ */ (0, import_jsx_runtime248.jsx)(
              sidebar_default2,
              {
                onActionPerformed,
                extraPanels: extraSidebarPanels
              }
            )
          ]
        }
      )
    ] });
  }
  var editor_default = Editor;

  // packages/editor/build-module/components/preferences-modal/index.js
  var import_jsx_runtime251 = __toESM(require_jsx_runtime());
  var import_i18n173 = __toESM(require_i18n());
  var import_compose51 = __toESM(require_compose());
  var import_data202 = __toESM(require_data());
  var import_element133 = __toESM(require_element());
  var import_preferences25 = __toESM(require_preferences());

  // packages/editor/build-module/components/preferences-modal/enable-publish-sidebar.js
  var import_jsx_runtime249 = __toESM(require_jsx_runtime());
  var import_data200 = __toESM(require_data());
  var import_preferences23 = __toESM(require_preferences());
  var { PreferenceBaseOption: PreferenceBaseOption2 } = unlock(import_preferences23.privateApis);
  function EnablePublishSidebarOption(props) {
    const isChecked = (0, import_data200.useSelect)((select4) => {
      return select4(store).isPublishSidebarEnabled();
    }, []);
    const { enablePublishSidebar: enablePublishSidebar2, disablePublishSidebar: disablePublishSidebar2 } = (0, import_data200.useDispatch)(store);
    return /* @__PURE__ */ (0, import_jsx_runtime249.jsx)(
      PreferenceBaseOption2,
      {
        isChecked,
        onChange: (isEnabled) => isEnabled ? enablePublishSidebar2() : disablePublishSidebar2(),
        ...props
      }
    );
  }

  // packages/editor/build-module/components/block-visibility/index.js
  var import_jsx_runtime250 = __toESM(require_jsx_runtime());
  var import_data201 = __toESM(require_data());
  var import_preferences24 = __toESM(require_preferences());
  var import_blocks24 = __toESM(require_blocks());
  var import_element132 = __toESM(require_element());
  var import_components148 = __toESM(require_components());
  var import_i18n172 = __toESM(require_i18n());
  var import_block_editor77 = __toESM(require_block_editor());
  var { BlockManager } = unlock(import_block_editor77.privateApis);
  var EMPTY_ARRAY5 = [];
  function BlockVisibility() {
    const { showBlockTypes: showBlockTypes2, hideBlockTypes: hideBlockTypes2 } = unlock(
      (0, import_data201.useDispatch)(store)
    );
    const {
      blockTypes,
      allowedBlockTypes: _allowedBlockTypes,
      hiddenBlockTypes: _hiddenBlockTypes
    } = (0, import_data201.useSelect)((select4) => {
      return {
        blockTypes: select4(import_blocks24.store).getBlockTypes(),
        allowedBlockTypes: select4(store).getEditorSettings().allowedBlockTypes,
        hiddenBlockTypes: select4(import_preferences24.store).get("core", "hiddenBlockTypes") ?? EMPTY_ARRAY5
      };
    }, []);
    const allowedBlockTypes = (0, import_element132.useMemo)(() => {
      if (_allowedBlockTypes === true) {
        return blockTypes;
      }
      return blockTypes.filter(({ name }) => {
        return _allowedBlockTypes?.includes(name);
      });
    }, [_allowedBlockTypes, blockTypes]);
    const filteredBlockTypes = allowedBlockTypes.filter(
      (blockType) => (0, import_blocks24.hasBlockSupport)(blockType, "inserter", true) && (!blockType.parent || blockType.parent.includes("core/post-content"))
    );
    const hiddenBlockTypes = _hiddenBlockTypes.filter((hiddenBlock) => {
      return filteredBlockTypes.some(
        (registeredBlock) => registeredBlock.name === hiddenBlock
      );
    });
    const selectedBlockTypes = filteredBlockTypes.filter(
      (blockType) => !hiddenBlockTypes.includes(blockType.name)
    );
    const numberOfHiddenBlocks = filteredBlockTypes.length - selectedBlockTypes.length;
    function enableAllBlockTypes() {
      onChangeSelectedBlockTypes(filteredBlockTypes);
    }
    const onChangeSelectedBlockTypes = (newSelectedBlockTypes) => {
      if (selectedBlockTypes.length > newSelectedBlockTypes.length) {
        const blockTypesToHide = selectedBlockTypes.filter(
          (blockType) => !newSelectedBlockTypes.find(
            ({ name }) => name === blockType.name
          )
        );
        hideBlockTypes2(blockTypesToHide.map(({ name }) => name));
      } else if (selectedBlockTypes.length < newSelectedBlockTypes.length) {
        const blockTypesToShow = newSelectedBlockTypes.filter(
          (blockType) => !selectedBlockTypes.find(
            ({ name }) => name === blockType.name
          )
        );
        showBlockTypes2(blockTypesToShow.map(({ name }) => name));
      }
    };
    return /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)("div", { className: "editor-block-visibility", children: [
      !!numberOfHiddenBlocks && /* @__PURE__ */ (0, import_jsx_runtime250.jsxs)("div", { className: "editor-block-visibility__disabled-blocks-count", children: [
        (0, import_i18n172.sprintf)(
          /* translators: %d: number of blocks. */
          (0, import_i18n172._n)(
            "%d block is hidden.",
            "%d blocks are hidden.",
            numberOfHiddenBlocks
          ),
          numberOfHiddenBlocks
        ),
        /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
          import_components148.Button,
          {
            __next40pxDefaultSize: true,
            variant: "link",
            onClick: enableAllBlockTypes,
            children: (0, import_i18n172.__)("Reset")
          }
        )
      ] }),
      /* @__PURE__ */ (0, import_jsx_runtime250.jsx)(
        BlockManager,
        {
          blockTypes: filteredBlockTypes,
          selectedBlockTypes,
          onChange: onChangeSelectedBlockTypes,
          showSelectAll: false
        }
      )
    ] });
  }

  // packages/editor/build-module/components/preferences-modal/index.js
  var {
    PreferencesModal,
    PreferencesModalTabs,
    PreferencesModalSection,
    PreferenceToggleControl
  } = unlock(import_preferences25.privateApis);
  function EditorPreferencesModal({ extraSections = {} }) {
    const isActive = (0, import_data202.useSelect)((select4) => {
      return select4(store2).isModalActive("editor/preferences");
    }, []);
    const { closeModal: closeModal2 } = (0, import_data202.useDispatch)(store2);
    if (!isActive) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(PreferencesModal, { closeModal: closeModal2, children: /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(PreferencesModalContents, { extraSections }) });
  }
  function PreferencesModalContents({ extraSections = {} }) {
    const isLargeViewport = (0, import_compose51.useViewportMatch)("medium");
    const showBlockBreadcrumbsOption = (0, import_data202.useSelect)(
      (select4) => {
        const { getEditorSettings: getEditorSettings2 } = select4(store);
        const { get } = select4(import_preferences25.store);
        const isRichEditingEnabled = getEditorSettings2().richEditingEnabled;
        const isDistractionFreeEnabled = get("core", "distractionFree");
        return !isDistractionFreeEnabled && isLargeViewport && isRichEditingEnabled;
      },
      [isLargeViewport]
    );
    const { setIsListViewOpened: setIsListViewOpened2, setIsInserterOpened: setIsInserterOpened2 } = (0, import_data202.useDispatch)(store);
    const { set: setPreference } = (0, import_data202.useDispatch)(import_preferences25.store);
    const sections = (0, import_element133.useMemo)(
      () => [
        {
          name: "general",
          tabLabel: (0, import_i18n173.__)("General"),
          content: /* @__PURE__ */ (0, import_jsx_runtime251.jsxs)(import_jsx_runtime251.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime251.jsxs)(
              PreferencesModalSection,
              {
                title: (0, import_i18n173.__)("Interface"),
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
                    PreferenceToggleControl,
                    {
                      scope: "core",
                      featureName: "showListViewByDefault",
                      help: (0, import_i18n173.__)(
                        "Opens the List View panel by default."
                      ),
                      label: (0, import_i18n173.__)("Always open List View")
                    }
                  ),
                  showBlockBreadcrumbsOption && /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
                    PreferenceToggleControl,
                    {
                      scope: "core",
                      featureName: "showBlockBreadcrumbs",
                      help: (0, import_i18n173.__)(
                        "Display the block hierarchy trail at the bottom of the editor."
                      ),
                      label: (0, import_i18n173.__)("Show block breadcrumbs")
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
                    PreferenceToggleControl,
                    {
                      scope: "core",
                      featureName: "allowRightClickOverrides",
                      help: (0, import_i18n173.__)(
                        "Allows contextual List View menus via right-click, overriding browser defaults."
                      ),
                      label: (0, import_i18n173.__)(
                        "Allow right-click contextual menus"
                      )
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
                    PreferenceToggleControl,
                    {
                      scope: "core",
                      featureName: "enableChoosePatternModal",
                      help: (0, import_i18n173.__)(
                        "Shows starter patterns when creating a new page."
                      ),
                      label: (0, import_i18n173.__)("Show starter patterns")
                    }
                  )
                ]
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime251.jsxs)(
              PreferencesModalSection,
              {
                title: (0, import_i18n173.__)("Document settings"),
                description: (0, import_i18n173.__)(
                  "Select what settings are shown in the document panel."
                ),
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(enable_plugin_document_setting_panel_default.Slot, {}),
                  /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
                    post_taxonomies_default,
                    {
                      taxonomyWrapper: (content, taxonomy) => /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
                        EnablePanelOption,
                        {
                          label: taxonomy.labels.menu_name,
                          panelName: `taxonomy-panel-${taxonomy.slug}`
                        }
                      )
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(check_default4, { children: /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
                    EnablePanelOption,
                    {
                      label: (0, import_i18n173.__)("Featured image"),
                      panelName: "featured-image"
                    }
                  ) }),
                  /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(check_default3, { children: /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
                    EnablePanelOption,
                    {
                      label: (0, import_i18n173.__)("Excerpt"),
                      panelName: "post-excerpt"
                    }
                  ) }),
                  /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
                    post_type_support_check_default,
                    {
                      supportKeys: ["comments", "trackbacks"],
                      children: /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
                        EnablePanelOption,
                        {
                          label: (0, import_i18n173.__)("Discussion"),
                          panelName: "discussion-panel"
                        }
                      )
                    }
                  ),
                  /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(check_default2, { children: /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
                    EnablePanelOption,
                    {
                      label: (0, import_i18n173.__)("Page attributes"),
                      panelName: "page-attributes"
                    }
                  ) })
                ]
              }
            ),
            isLargeViewport && /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
              PreferencesModalSection,
              {
                title: (0, import_i18n173.__)("Publishing"),
                children: /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
                  EnablePublishSidebarOption,
                  {
                    help: (0, import_i18n173.__)(
                      "Review settings, such as visibility and tags."
                    ),
                    label: (0, import_i18n173.__)(
                      "Enable pre-publish checks"
                    )
                  }
                )
              }
            ),
            extraSections?.general
          ] })
        },
        {
          name: "appearance",
          tabLabel: (0, import_i18n173.__)("Appearance"),
          content: /* @__PURE__ */ (0, import_jsx_runtime251.jsxs)(
            PreferencesModalSection,
            {
              title: (0, import_i18n173.__)("Appearance"),
              description: (0, import_i18n173.__)(
                "Customize the editor interface to suit your needs."
              ),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
                  PreferenceToggleControl,
                  {
                    scope: "core",
                    featureName: "fixedToolbar",
                    onToggle: () => setPreference(
                      "core",
                      "distractionFree",
                      false
                    ),
                    help: (0, import_i18n173.__)(
                      "Access all block and document tools in a single place."
                    ),
                    label: (0, import_i18n173.__)("Top toolbar")
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
                  PreferenceToggleControl,
                  {
                    scope: "core",
                    featureName: "distractionFree",
                    onToggle: () => {
                      setPreference(
                        "core",
                        "fixedToolbar",
                        true
                      );
                      setIsInserterOpened2(false);
                      setIsListViewOpened2(false);
                    },
                    help: (0, import_i18n173.__)(
                      "Reduce visual distractions by hiding the toolbar and other elements to focus on writing."
                    ),
                    label: (0, import_i18n173.__)("Distraction free")
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
                  PreferenceToggleControl,
                  {
                    scope: "core",
                    featureName: "focusMode",
                    help: (0, import_i18n173.__)(
                      "Highlights the current block and fades other content."
                    ),
                    label: (0, import_i18n173.__)("Spotlight mode")
                  }
                ),
                extraSections?.appearance
              ]
            }
          )
        },
        {
          name: "accessibility",
          tabLabel: (0, import_i18n173.__)("Accessibility"),
          content: /* @__PURE__ */ (0, import_jsx_runtime251.jsxs)(import_jsx_runtime251.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
              PreferencesModalSection,
              {
                title: (0, import_i18n173.__)("Navigation"),
                description: (0, import_i18n173.__)(
                  "Optimize the editing experience for enhanced control."
                ),
                children: /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
                  PreferenceToggleControl,
                  {
                    scope: "core",
                    featureName: "keepCaretInsideBlock",
                    help: (0, import_i18n173.__)(
                      "Keeps the text cursor within blocks while navigating with arrow keys, preventing it from moving to other blocks and enhancing accessibility for keyboard users."
                    ),
                    label: (0, import_i18n173.__)(
                      "Contain text cursor inside block"
                    )
                  }
                )
              }
            ),
            /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
              PreferencesModalSection,
              {
                title: (0, import_i18n173.__)("Interface"),
                children: /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
                  PreferenceToggleControl,
                  {
                    scope: "core",
                    featureName: "showIconLabels",
                    label: (0, import_i18n173.__)("Show button text labels"),
                    help: (0, import_i18n173.__)(
                      "Show text instead of icons on buttons across the interface."
                    )
                  }
                )
              }
            )
          ] })
        },
        {
          name: "blocks",
          tabLabel: (0, import_i18n173.__)("Blocks"),
          content: /* @__PURE__ */ (0, import_jsx_runtime251.jsxs)(import_jsx_runtime251.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(PreferencesModalSection, { title: (0, import_i18n173.__)("Inserter"), children: /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
              PreferenceToggleControl,
              {
                scope: "core",
                featureName: "mostUsedBlocks",
                help: (0, import_i18n173.__)(
                  "Adds a category with the most frequently used blocks in the inserter."
                ),
                label: (0, import_i18n173.__)("Show most used blocks")
              }
            ) }),
            /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
              PreferencesModalSection,
              {
                title: (0, import_i18n173.__)("Manage block visibility"),
                description: (0, import_i18n173.__)(
                  "Disable blocks that you don't want to appear in the inserter. They can always be toggled back on later."
                ),
                children: /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(BlockVisibility, {})
              }
            )
          ] })
        },
        window.__experimentalMediaProcessing && {
          name: "media",
          tabLabel: (0, import_i18n173.__)("Media"),
          content: /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(import_jsx_runtime251.Fragment, { children: /* @__PURE__ */ (0, import_jsx_runtime251.jsxs)(
            PreferencesModalSection,
            {
              title: (0, import_i18n173.__)("General"),
              description: (0, import_i18n173.__)(
                "Customize options related to the media upload flow."
              ),
              children: [
                /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
                  PreferenceToggleControl,
                  {
                    scope: "core/media",
                    featureName: "optimizeOnUpload",
                    help: (0, import_i18n173.__)(
                      "Compress media items before uploading to the server."
                    ),
                    label: (0, import_i18n173.__)("Pre-upload compression")
                  }
                ),
                /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(
                  PreferenceToggleControl,
                  {
                    scope: "core/media",
                    featureName: "requireApproval",
                    help: (0, import_i18n173.__)(
                      "Require approval step when optimizing existing media."
                    ),
                    label: (0, import_i18n173.__)("Approval step")
                  }
                )
              ]
            }
          ) })
        }
      ].filter(Boolean),
      [
        showBlockBreadcrumbsOption,
        extraSections,
        setIsInserterOpened2,
        setIsListViewOpened2,
        setPreference,
        isLargeViewport
      ]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime251.jsx)(PreferencesModalTabs, { sections });
  }

  // packages/editor/build-module/components/post-fields/index.js
  var import_element134 = __toESM(require_element());
  var import_data203 = __toESM(require_data());
  function usePostFields({
    postType: postType2
  }) {
    const { registerPostTypeSchema: registerPostTypeSchema2 } = unlock((0, import_data203.useDispatch)(store));
    (0, import_element134.useEffect)(() => {
      registerPostTypeSchema2(postType2);
    }, [registerPostTypeSchema2, postType2]);
    const { fields: fields2 } = (0, import_data203.useSelect)(
      (select4) => {
        const { getEntityFields: getEntityFields3 } = unlock(select4(store));
        return {
          fields: getEntityFields3("postType", postType2)
        };
      },
      [postType2]
    );
    return fields2;
  }
  var post_fields_default = usePostFields;

  // packages/editor/build-module/bindings/api.js
  var import_blocks25 = __toESM(require_blocks());

  // packages/editor/build-module/bindings/pattern-overrides.js
  var import_block_editor78 = __toESM(require_block_editor());
  var CONTENT = "content";
  var pattern_overrides_default = {
    name: "core/pattern-overrides",
    getValues({ select: select4, clientId, context, bindings }) {
      const patternOverridesContent = context["pattern/overrides"];
      const { getBlockAttributes: getBlockAttributes2 } = select4(import_block_editor78.store);
      const currentBlockAttributes = getBlockAttributes2(clientId);
      const overridesValues = {};
      for (const attributeName of Object.keys(bindings)) {
        const overridableValue = patternOverridesContent?.[currentBlockAttributes?.metadata?.name]?.[attributeName];
        if (overridableValue === void 0) {
          overridesValues[attributeName] = currentBlockAttributes[attributeName];
          continue;
        } else {
          overridesValues[attributeName] = overridableValue === "" ? void 0 : overridableValue;
        }
      }
      return overridesValues;
    },
    setValues({ select: select4, dispatch: dispatch5, clientId, bindings }) {
      const { getBlockAttributes: getBlockAttributes2, getBlockParentsByBlockName, getBlocks: getBlocks2 } = select4(import_block_editor78.store);
      const currentBlockAttributes = getBlockAttributes2(clientId);
      const blockName = currentBlockAttributes?.metadata?.name;
      if (!blockName) {
        return;
      }
      const [patternClientId] = getBlockParentsByBlockName(
        clientId,
        "core/block",
        true
      );
      const attributes = Object.entries(bindings).reduce(
        (attrs, [key, { newValue }]) => {
          attrs[key] = newValue;
          return attrs;
        },
        {}
      );
      if (!patternClientId) {
        const syncBlocksWithSameName = (blocks) => {
          for (const block of blocks) {
            if (block.attributes?.metadata?.name === blockName) {
              dispatch5(import_block_editor78.store).updateBlockAttributes(
                block.clientId,
                attributes
              );
            }
            syncBlocksWithSameName(block.innerBlocks);
          }
        };
        syncBlocksWithSameName(getBlocks2());
        return;
      }
      const currentBindingValue = getBlockAttributes2(patternClientId)?.[CONTENT];
      dispatch5(import_block_editor78.store).updateBlockAttributes(patternClientId, {
        [CONTENT]: {
          ...currentBindingValue,
          [blockName]: {
            ...currentBindingValue?.[blockName],
            ...Object.entries(attributes).reduce(
              (acc, [key, value]) => {
                acc[key] = value === void 0 ? "" : value;
                return acc;
              },
              {}
            )
          }
        }
      });
    },
    canUserEditValue: () => true
  };

  // packages/editor/build-module/bindings/post-data.js
  var import_i18n174 = __toESM(require_i18n());
  var import_core_data104 = __toESM(require_core_data());
  var import_block_editor79 = __toESM(require_block_editor());
  var NAVIGATION_BLOCK_TYPES = [
    "core/navigation-link",
    "core/navigation-submenu"
  ];
  function getPostDataFields(select4, context, clientId) {
    const { getEditedEntityRecord } = select4(import_core_data104.store);
    const { getBlockAttributes: getBlockAttributes2, getBlockName: getBlockName2 } = select4(import_block_editor79.store);
    let entityDataValues, dataFields;
    const blockName = getBlockName2?.(clientId);
    const isNavigationBlock = NAVIGATION_BLOCK_TYPES.includes(blockName);
    let postId2, postType2;
    if (isNavigationBlock) {
      const blockAttributes = getBlockAttributes2?.(clientId);
      postId2 = blockAttributes?.id;
      postType2 = blockAttributes?.type;
    } else {
      postId2 = context?.postId;
      postType2 = context?.postType;
    }
    if (postType2 && postId2) {
      entityDataValues = getEditedEntityRecord(
        "postType",
        postType2,
        postId2
      );
      dataFields = {
        date: {
          label: (0, import_i18n174.__)("Post Date"),
          value: entityDataValues?.date,
          type: "string"
        },
        modified: {
          label: (0, import_i18n174.__)("Post Modified Date"),
          value: entityDataValues?.modified,
          type: "string"
        },
        link: {
          label: (0, import_i18n174.__)("Post Link"),
          value: entityDataValues?.link,
          type: "string"
        }
      };
    }
    if (!Object.keys(dataFields || {}).length) {
      return null;
    }
    return dataFields;
  }
  var post_data_default = {
    name: "core/post-data",
    getValues({ select: select4, context, bindings, clientId }) {
      const dataFields = getPostDataFields(select4, context, clientId);
      const newValues = {};
      for (const [attributeName, source] of Object.entries(bindings)) {
        const fieldKey = source.args.field;
        const { value: fieldValue, label: fieldLabel } = dataFields?.[fieldKey] || {};
        newValues[attributeName] = fieldValue ?? fieldLabel ?? fieldKey;
      }
      return newValues;
    },
    setValues({ dispatch: dispatch5, context, bindings, clientId, select: select4 }) {
      const { getBlockName: getBlockName2 } = select4(import_block_editor79.store);
      const blockName = getBlockName2?.(clientId);
      if (NAVIGATION_BLOCK_TYPES.includes(blockName)) {
        return false;
      }
      const newData = {};
      Object.values(bindings).forEach(({ args, newValue }) => {
        newData[args.field] = newValue;
      });
      dispatch5(import_core_data104.store).editEntityRecord(
        "postType",
        context?.postType,
        context?.postId,
        newData
      );
    },
    canUserEditValue({ select: select4, context, args }) {
      const { getBlockName: getBlockName2, getSelectedBlockClientId: getSelectedBlockClientId2 } = select4(import_block_editor79.store);
      const clientId = getSelectedBlockClientId2();
      const blockName = getBlockName2?.(clientId);
      if (NAVIGATION_BLOCK_TYPES.includes(blockName)) {
        return false;
      }
      if (context?.query || context?.queryId) {
        return false;
      }
      if (!context?.postType) {
        return false;
      }
      const fieldValue = getPostDataFields(select4, context, void 0)?.[args.field]?.value;
      if (fieldValue === void 0) {
        return false;
      }
      const canUserEdit = select4(import_core_data104.store).canUser("update", {
        kind: "postType",
        name: context?.postType,
        id: context?.postId
      });
      if (!canUserEdit) {
        return false;
      }
      return true;
    },
    getFieldsList({ select: select4, context }) {
      const clientId = select4(import_block_editor79.store).getSelectedBlockClientId();
      return getPostDataFields(select4, context, clientId);
    },
    editorUI({ select: select4, context }) {
      const selectedBlock = select4(import_block_editor79.store).getSelectedBlock();
      if (selectedBlock?.name !== "core/post-date") {
        return {};
      }
      if (NAVIGATION_BLOCK_TYPES.includes(selectedBlock?.name)) {
        return {};
      }
      const postDataFields = Object.entries(
        getPostDataFields(select4, context) || {}
      ).map(([key, field]) => ({
        label: field.label,
        args: {
          field: key
        },
        type: field.type
      }));
      return {
        mode: "dropdown",
        data: postDataFields
      };
    }
  };

  // packages/editor/build-module/bindings/post-meta.js
  var import_core_data105 = __toESM(require_core_data());
  function getPostMetaFields(select4, context) {
    const { getEditedEntityRecord } = select4(import_core_data105.store);
    const { getRegisteredPostMeta } = unlock(select4(import_core_data105.store));
    let entityMetaValues;
    if (context?.postType && context?.postId) {
      entityMetaValues = getEditedEntityRecord(
        "postType",
        context?.postType,
        context?.postId
      ).meta;
    }
    const registeredFields = getRegisteredPostMeta(context?.postType);
    const metaFields = {};
    Object.entries(registeredFields || {}).forEach(([key, props]) => {
      if (key !== "footnotes" && key.charAt(0) !== "_") {
        metaFields[key] = {
          label: props.title || key,
          value: (
            // When using the entity value, an empty string IS a valid value.
            entityMetaValues?.[key] ?? // When using the default, an empty string IS NOT a valid value.
            (props.default || void 0)
          ),
          type: props.type
        };
      }
    });
    if (!Object.keys(metaFields || {}).length) {
      return null;
    }
    return metaFields;
  }
  var post_meta_default = {
    name: "core/post-meta",
    getValues({ select: select4, context, bindings }) {
      const metaFields = getPostMetaFields(select4, context);
      const newValues = {};
      for (const [attributeName, source] of Object.entries(bindings)) {
        const fieldKey = source.args.key;
        const { value: fieldValue, label: fieldLabel } = metaFields?.[fieldKey] || {};
        newValues[attributeName] = fieldValue ?? fieldLabel ?? fieldKey;
      }
      return newValues;
    },
    setValues({ dispatch: dispatch5, context, bindings }) {
      const newMeta = {};
      Object.values(bindings).forEach(({ args, newValue }) => {
        newMeta[args.key] = newValue;
      });
      dispatch5(import_core_data105.store).editEntityRecord(
        "postType",
        context?.postType,
        context?.postId,
        {
          meta: newMeta
        }
      );
    },
    canUserEditValue({ select: select4, context, args }) {
      if (context?.query || context?.queryId) {
        return false;
      }
      if (!context?.postType) {
        return false;
      }
      const fieldValue = getPostMetaFields(select4, context)?.[args.key]?.value;
      if (fieldValue === void 0) {
        return false;
      }
      const areCustomFieldsEnabled = select4(store).getEditorSettings().enableCustomFields;
      if (areCustomFieldsEnabled) {
        return false;
      }
      const canUserEdit = select4(import_core_data105.store).canUser("update", {
        kind: "postType",
        name: context?.postType,
        id: context?.postId
      });
      if (!canUserEdit) {
        return false;
      }
      return true;
    },
    getFieldsList({ select: select4, context }) {
      return getPostMetaFields(select4, context);
    },
    editorUI({ select: select4, context }) {
      const metaFields = Object.entries(
        getPostMetaFields(select4, context) || {}
      ).map(([key, field]) => ({
        label: field.label,
        args: {
          key
        },
        type: field.type
      }));
      return {
        mode: "dropdown",
        data: metaFields
      };
    }
  };

  // packages/editor/build-module/bindings/term-data.js
  var import_i18n175 = __toESM(require_i18n());
  var import_core_data106 = __toESM(require_core_data());
  var import_block_editor80 = __toESM(require_block_editor());
  var NAVIGATION_BLOCK_TYPES2 = [
    "core/navigation-link",
    "core/navigation-submenu"
  ];
  function createDataFields(termDataValues, idValue) {
    return {
      id: {
        label: (0, import_i18n175.__)("Term ID"),
        value: idValue,
        type: "string"
      },
      name: {
        label: (0, import_i18n175.__)("Name"),
        value: termDataValues?.name,
        type: "string"
      },
      slug: {
        label: (0, import_i18n175.__)("Slug"),
        value: termDataValues?.slug,
        type: "string"
      },
      link: {
        label: (0, import_i18n175.__)("Link"),
        value: termDataValues?.link,
        type: "string"
      },
      description: {
        label: (0, import_i18n175.__)("Description"),
        value: termDataValues?.description,
        type: "string"
      },
      parent: {
        label: (0, import_i18n175.__)("Parent ID"),
        value: termDataValues?.parent,
        type: "string"
      },
      count: {
        label: (0, import_i18n175.__)("Count"),
        value: `(${termDataValues?.count ?? 0})`,
        type: "string"
      }
    };
  }
  function getTermDataFields(select4, context, clientId) {
    const { getEntityRecord } = select4(import_core_data106.store);
    const { getBlockAttributes: getBlockAttributes2, getBlockName: getBlockName2 } = select4(import_block_editor80.store);
    let termDataValues, dataFields;
    const blockName = getBlockName2?.(clientId);
    const isNavigationBlock = NAVIGATION_BLOCK_TYPES2.includes(blockName);
    let termId, taxonomy;
    if (isNavigationBlock) {
      const blockAttributes = getBlockAttributes2?.(clientId);
      termId = blockAttributes?.id;
      const typeFromAttributes = blockAttributes?.type;
      taxonomy = typeFromAttributes === "tag" ? "post_tag" : typeFromAttributes;
    } else {
      termId = context?.termId;
      taxonomy = context?.taxonomy;
    }
    if (taxonomy && termId) {
      termDataValues = getEntityRecord("taxonomy", taxonomy, termId);
      if (!termDataValues && context?.termData) {
        termDataValues = context.termData;
      }
      if (termDataValues) {
        dataFields = createDataFields(termDataValues, termId);
      }
    } else if (context?.termData) {
      termDataValues = context.termData;
      dataFields = createDataFields(
        termDataValues,
        termDataValues?.term_id
      );
    }
    if (!dataFields || !Object.keys(dataFields).length) {
      return null;
    }
    return dataFields;
  }
  var term_data_default = {
    name: "core/term-data",
    usesContext: ["taxonomy", "termId", "termData"],
    getValues({ select: select4, context, bindings, clientId }) {
      const dataFields = getTermDataFields(select4, context, clientId);
      const newValues = {};
      for (const [attributeName, source] of Object.entries(bindings)) {
        const fieldKey = source.args.field;
        const { value: fieldValue, label: fieldLabel } = dataFields?.[fieldKey] || {};
        newValues[attributeName] = fieldValue ?? fieldLabel ?? fieldKey;
      }
      return newValues;
    },
    // eslint-disable-next-line no-unused-vars
    setValues({ dispatch: dispatch5, context, bindings }) {
      return false;
    },
    canUserEditValue({ select: select4, context, args }) {
      const { getBlockName: getBlockName2, getSelectedBlockClientId: getSelectedBlockClientId2 } = select4(import_block_editor80.store);
      const clientId = getSelectedBlockClientId2();
      const blockName = getBlockName2?.(clientId);
      if (NAVIGATION_BLOCK_TYPES2.includes(blockName)) {
        return false;
      }
      if (context?.termQuery) {
        return false;
      }
      if (!context?.taxonomy || !context?.termId) {
        return false;
      }
      const fieldValue = getTermDataFields(select4, context, void 0)?.[args.field]?.value;
      if (fieldValue === void 0) {
        return false;
      }
      return false;
    },
    getFieldsList({ select: select4, context }) {
      return getTermDataFields(select4, context);
    },
    editorUI({ select: select4, context }) {
      const selectedBlock = select4(import_block_editor80.store).getSelectedBlock();
      if (NAVIGATION_BLOCK_TYPES2.includes(selectedBlock?.name)) {
        return {};
      }
      const termDataFields = Object.entries(
        getTermDataFields(select4, context) || {}
      ).map(([key, field]) => ({
        label: field.label,
        type: field.type,
        args: {
          field: key
        }
      }));
      return {
        mode: "dropdown",
        data: termDataFields
      };
    }
  };

  // packages/editor/build-module/bindings/api.js
  function registerCoreBlockBindingsSources() {
    (0, import_blocks25.registerBlockBindingsSource)(pattern_overrides_default);
    (0, import_blocks25.registerBlockBindingsSource)(post_data_default);
    (0, import_blocks25.registerBlockBindingsSource)(post_meta_default);
    (0, import_blocks25.registerBlockBindingsSource)(term_data_default);
  }

  // packages/editor/build-module/private-apis.js
  var { store: interfaceStore, ...remainingInterfaceApis } = build_module_exports;
  var privateApis3 = {};
  lock(privateApis3, {
    CreateTemplatePartModal,
    patternTitleField: pattern_title_default,
    templateTitleField: template_title_default,
    BackButton: back_button_default,
    EntitiesSavedStatesExtensible,
    Editor: editor_default,
    EditorContentSlotFill: content_slot_fill_default,
    GlobalStylesProvider,
    mergeBaseAndUserConfigs,
    PluginPostExcerpt: plugin_default,
    PostCardPanel,
    PreferencesModal: EditorPreferencesModal,
    usePostActions,
    usePostFields: post_fields_default,
    ToolsMoreMenuGroup: tools_more_menu_group_default,
    ViewMoreMenuGroup: view_more_menu_group_default,
    ResizableEditor: resizable_editor_default,
    registerCoreBlockBindingsSources,
    getTemplateInfo,
    // This is a temporary private API while we're updating the site editor to use EditorProvider.
    interfaceStore,
    ...remainingInterfaceApis
  });

  // packages/editor/build-module/dataviews/api.js
  var import_data204 = __toESM(require_data());
  function registerEntityAction2(kind, name, config) {
    const { registerEntityAction: _registerEntityAction } = unlock(
      (0, import_data204.dispatch)(store)
    );
    if (true) {
      _registerEntityAction(kind, name, config);
    }
  }
  function unregisterEntityAction2(kind, name, actionId) {
    const { unregisterEntityAction: _unregisterEntityAction } = unlock(
      (0, import_data204.dispatch)(store)
    );
    if (true) {
      _unregisterEntityAction(kind, name, actionId);
    }
  }
  function registerEntityField2(kind, name, config) {
    const { registerEntityField: _registerEntityField } = unlock(
      (0, import_data204.dispatch)(store)
    );
    if (true) {
      _registerEntityField(kind, name, config);
    }
  }
  function unregisterEntityField2(kind, name, fieldId) {
    const { unregisterEntityField: _unregisterEntityField } = unlock(
      (0, import_data204.dispatch)(store)
    );
    if (true) {
      _unregisterEntityField(kind, name, fieldId);
    }
  }

  // packages/editor/build-module/index.js
  var import_block_editor81 = __toESM(require_block_editor());
  return __toCommonJS(index_exports);
})();
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

autosize/dist/autosize.js:
  (*!
  	autosize 4.0.2
  	license: MIT
  	http://www.jacklmoore.com/autosize
  *)

is-plain-object/dist/is-plain-object.mjs:
  (*!
   * is-plain-object <https://github.com/jonschlinkert/is-plain-object>
   *
   * Copyright (c) 2014-2017, Jon Schlinkert.
   * Released under the MIT License.
   *)
*/
//# sourceMappingURL=index.js.map
