{
  "version": 3,
  "sources": ["wordpress-external:@wordpress/data", "wordpress-external:@wordpress/keycodes", "wordpress-external:@wordpress/element", "vendor-external:react/jsx-runtime", "../../packages/keyboard-shortcuts/src/index.js", "../../packages/keyboard-shortcuts/src/store/index.js", "../../packages/keyboard-shortcuts/src/store/reducer.js", "../../packages/keyboard-shortcuts/src/store/actions.js", "../../packages/keyboard-shortcuts/src/store/selectors.js", "../../packages/keyboard-shortcuts/src/hooks/use-shortcut.js", "../../packages/keyboard-shortcuts/src/hooks/use-shortcut-event-match.js", "../../packages/keyboard-shortcuts/src/context.js", "../../packages/keyboard-shortcuts/src/components/shortcut-provider.js"],
  "sourcesContent": ["module.exports = window.wp.data;", "module.exports = window.wp.keycodes;", "module.exports = window.wp.element;", "module.exports = window.ReactJSXRuntime;", "export { store } from './store';\nexport { default as useShortcut } from './hooks/use-shortcut';\nexport { ShortcutProvider } from './components/shortcut-provider';\nexport { default as __unstableUseShortcutEventMatch } from './hooks/use-shortcut-event-match';\n", "/**\n * WordPress dependencies\n */\nimport { createReduxStore, register } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport reducer from './reducer';\nimport * as actions from './actions';\nimport * as selectors from './selectors';\n\nconst STORE_NAME = 'core/keyboard-shortcuts';\n\n/**\n * Store definition for the keyboard shortcuts namespace.\n *\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore\n *\n * @type {Object}\n */\nexport const store = createReduxStore( STORE_NAME, {\n\treducer,\n\tactions,\n\tselectors,\n} );\n\nregister( store );\n", "/**\n * Reducer returning the registered shortcuts\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nfunction reducer( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'REGISTER_SHORTCUT':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ action.name ]: {\n\t\t\t\t\tcategory: action.category,\n\t\t\t\t\tkeyCombination: action.keyCombination,\n\t\t\t\t\taliases: action.aliases,\n\t\t\t\t\tdescription: action.description,\n\t\t\t\t},\n\t\t\t};\n\t\tcase 'UNREGISTER_SHORTCUT':\n\t\t\tconst { [ action.name ]: actionName, ...remainingState } = state;\n\t\t\treturn remainingState;\n\t}\n\n\treturn state;\n}\n\nexport default reducer;\n", "/** @typedef {import('@wordpress/keycodes').WPKeycodeModifier} WPKeycodeModifier */\n\n/**\n * Keyboard key combination.\n *\n * @typedef {Object} WPShortcutKeyCombination\n *\n * @property {string}                      character Character.\n * @property {WPKeycodeModifier|undefined} modifier  Modifier.\n */\n\n/**\n * Configuration of a registered keyboard shortcut.\n *\n * @typedef {Object} WPShortcutConfig\n *\n * @property {string}                     name           Shortcut name.\n * @property {string}                     category       Shortcut category.\n * @property {string}                     description    Shortcut description.\n * @property {WPShortcutKeyCombination}   keyCombination Shortcut key combination.\n * @property {WPShortcutKeyCombination[]} [aliases]      Shortcut aliases.\n */\n\n/**\n * Returns an action object used to register a new keyboard shortcut.\n *\n * @param {WPShortcutConfig} config Shortcut config.\n *\n * @example\n *\n *```js\n * import { useEffect } from 'react';\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\n * import { useSelect, useDispatch } from '@wordpress/data';\n * import { __ } from '@wordpress/i18n';\n *\n * const ExampleComponent = () => {\n *     const { registerShortcut } = useDispatch( keyboardShortcutsStore );\n *\n *     useEffect( () => {\n *         registerShortcut( {\n *             name: 'custom/my-custom-shortcut',\n *             category: 'my-category',\n *             description: __( 'My custom shortcut' ),\n *             keyCombination: {\n *                 modifier: 'primary',\n *                 character: 'j',\n *             },\n *         } );\n *     }, [] );\n *\n *     const shortcut = useSelect(\n *         ( select ) =>\n *             select( keyboardShortcutsStore ).getShortcutKeyCombination(\n *                 'custom/my-custom-shortcut'\n *             ),\n *         []\n *     );\n *\n *     return shortcut ? (\n *         <p>{ __( 'Shortcut is registered.' ) }</p>\n *     ) : (\n *         <p>{ __( 'Shortcut is not registered.' ) }</p>\n *     );\n * };\n *```\n * @return {Object} action.\n */\nexport function registerShortcut( {\n\tname,\n\tcategory,\n\tdescription,\n\tkeyCombination,\n\taliases,\n} ) {\n\treturn {\n\t\ttype: 'REGISTER_SHORTCUT',\n\t\tname,\n\t\tcategory,\n\t\tkeyCombination,\n\t\taliases,\n\t\tdescription,\n\t};\n}\n\n/**\n * Returns an action object used to unregister a keyboard shortcut.\n *\n * @param {string} name Shortcut name.\n *\n * @example\n *\n *```js\n * import { useEffect } from 'react';\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\n * import { useSelect, useDispatch } from '@wordpress/data';\n * import { __ } from '@wordpress/i18n';\n *\n * const ExampleComponent = () => {\n *     const { unregisterShortcut } = useDispatch( keyboardShortcutsStore );\n *\n *     useEffect( () => {\n *         unregisterShortcut( 'core/editor/next-region' );\n *     }, [] );\n *\n *     const shortcut = useSelect(\n *         ( select ) =>\n *             select( keyboardShortcutsStore ).getShortcutKeyCombination(\n *                 'core/editor/next-region'\n *             ),\n *         []\n *     );\n *\n *     return shortcut ? (\n *         <p>{ __( 'Shortcut is not unregistered.' ) }</p>\n *     ) : (\n *         <p>{ __( 'Shortcut is unregistered.' ) }</p>\n *     );\n * };\n *```\n * @return {Object} action.\n */\nexport function unregisterShortcut( name ) {\n\treturn {\n\t\ttype: 'UNREGISTER_SHORTCUT',\n\t\tname,\n\t};\n}\n", "/**\n * WordPress dependencies\n */\nimport { createSelector } from '@wordpress/data';\nimport {\n\tdisplayShortcut,\n\tshortcutAriaLabel,\n\trawShortcut,\n} from '@wordpress/keycodes';\n\n/** @typedef {import('./actions').WPShortcutKeyCombination} WPShortcutKeyCombination */\n\n/** @typedef {import('@wordpress/keycodes').WPKeycodeHandlerByModifier} WPKeycodeHandlerByModifier */\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation.\n *\n * @type {Array<any>}\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Shortcut formatting methods.\n *\n * @property {WPKeycodeHandlerByModifier} display     Display formatting.\n * @property {WPKeycodeHandlerByModifier} rawShortcut Raw shortcut formatting.\n * @property {WPKeycodeHandlerByModifier} ariaLabel   ARIA label formatting.\n */\nconst FORMATTING_METHODS = {\n\tdisplay: displayShortcut,\n\traw: rawShortcut,\n\tariaLabel: shortcutAriaLabel,\n};\n\n/**\n * Returns a string representing the key combination.\n *\n * @param {?WPShortcutKeyCombination} shortcut       Key combination.\n * @param {keyof FORMATTING_METHODS}  representation Type of representation\n *                                                   (display, raw, ariaLabel).\n *\n * @return {?string} Shortcut representation.\n */\nfunction getKeyCombinationRepresentation( shortcut, representation ) {\n\tif ( ! shortcut ) {\n\t\treturn null;\n\t}\n\n\treturn shortcut.modifier\n\t\t? FORMATTING_METHODS[ representation ][ shortcut.modifier ](\n\t\t\t\tshortcut.character\n\t\t  )\n\t\t: shortcut.character;\n}\n\n/**\n * Returns the main key combination for a given shortcut name.\n *\n * @param {Object} state Global state.\n * @param {string} name  Shortcut name.\n *\n * @example\n *\n *```js\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\n * import { useSelect } from '@wordpress/data';\n * import { createInterpolateElement } from '@wordpress/element';\n * import { sprintf } from '@wordpress/i18n';\n * const ExampleComponent = () => {\n *     const {character, modifier} = useSelect(\n *         ( select ) =>\n *             select( keyboardShortcutsStore ).getShortcutKeyCombination(\n *                 'core/editor/next-region'\n *             ),\n *         []\n *     );\n *\n *     return (\n *         <div>\n *             { createInterpolateElement(\n *                 sprintf(\n *                     'Character: <code>%s</code> / Modifier: <code>%s</code>',\n *                     character,\n *                     modifier\n *                 ),\n *                 {\n *                     code: <code />,\n *                 }\n *             ) }\n *         </div>\n *     );\n * };\n *```\n *\n * @return {WPShortcutKeyCombination?} Key combination.\n */\nexport function getShortcutKeyCombination( state, name ) {\n\treturn state[ name ] ? state[ name ].keyCombination : null;\n}\n\n/**\n * Returns a string representing the main key combination for a given shortcut name.\n *\n * @param {Object}                   state          Global state.\n * @param {string}                   name           Shortcut name.\n * @param {keyof FORMATTING_METHODS} representation Type of representation\n *                                                  (display, raw, ariaLabel).\n * @example\n *\n *```js\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\n * import { useSelect } from '@wordpress/data';\n * import { sprintf } from '@wordpress/i18n';\n *\n * const ExampleComponent = () => {\n *     const {display, raw, ariaLabel} = useSelect(\n *         ( select ) =>{\n *             return {\n *                 display: select( keyboardShortcutsStore ).getShortcutRepresentation('core/editor/next-region' ),\n *                 raw: select( keyboardShortcutsStore ).getShortcutRepresentation('core/editor/next-region','raw' ),\n *                 ariaLabel: select( keyboardShortcutsStore ).getShortcutRepresentation('core/editor/next-region', 'ariaLabel')\n *             }\n *         },\n *         []\n *     );\n *\n *     return (\n *         <ul>\n *             <li>{ sprintf( 'display string: %s', display ) }</li>\n *             <li>{ sprintf( 'raw string: %s', raw ) }</li>\n *             <li>{ sprintf( 'ariaLabel string: %s', ariaLabel ) }</li>\n *         </ul>\n *     );\n * };\n *```\n *\n * @return {?string} Shortcut representation.\n */\nexport function getShortcutRepresentation(\n\tstate,\n\tname,\n\trepresentation = 'display'\n) {\n\tconst shortcut = getShortcutKeyCombination( state, name );\n\treturn getKeyCombinationRepresentation( shortcut, representation );\n}\n\n/**\n * Returns the shortcut description given its name.\n *\n * @param {Object} state Global state.\n * @param {string} name  Shortcut name.\n *\n * @example\n *\n *```js\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\n * import { useSelect } from '@wordpress/data';\n * import { __ } from '@wordpress/i18n';\n * const ExampleComponent = () => {\n *     const shortcutDescription = useSelect(\n *         ( select ) =>\n *             select( keyboardShortcutsStore ).getShortcutDescription( 'core/editor/next-region' ),\n *         []\n *     );\n *\n *     return shortcutDescription ? (\n *         <div>{ shortcutDescription }</div>\n *     ) : (\n *         <div>{ __( 'No description.' ) }</div>\n *     );\n * };\n *```\n * @return {?string} Shortcut description.\n */\nexport function getShortcutDescription( state, name ) {\n\treturn state[ name ] ? state[ name ].description : null;\n}\n\n/**\n * Returns the aliases for a given shortcut name.\n *\n * @param {Object} state Global state.\n * @param {string} name  Shortcut name.\n * @example\n *\n *```js\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\n * import { useSelect } from '@wordpress/data';\n * import { createInterpolateElement } from '@wordpress/element';\n * import { sprintf } from '@wordpress/i18n';\n * const ExampleComponent = () => {\n *     const shortcutAliases = useSelect(\n *         ( select ) =>\n *             select( keyboardShortcutsStore ).getShortcutAliases(\n *                 'core/editor/next-region'\n *             ),\n *         []\n *     );\n *\n *     return (\n *         shortcutAliases.length > 0 && (\n *             <ul>\n *                 { shortcutAliases.map( ( { character, modifier }, index ) => (\n *                     <li key={ index }>\n *                         { createInterpolateElement(\n *                             sprintf(\n *                                 'Character: <code>%s</code> / Modifier: <code>%s</code>',\n *                                 character,\n *                                 modifier\n *                             ),\n *                             {\n *                                 code: <code />,\n *                             }\n *                         ) }\n *                     </li>\n *                 ) ) }\n *             </ul>\n *         )\n *     );\n * };\n *```\n *\n * @return {WPShortcutKeyCombination[]} Key combinations.\n */\nexport function getShortcutAliases( state, name ) {\n\treturn state[ name ] && state[ name ].aliases\n\t\t? state[ name ].aliases\n\t\t: EMPTY_ARRAY;\n}\n\n/**\n * Returns the shortcuts that include aliases for a given shortcut name.\n *\n * @param {Object} state Global state.\n * @param {string} name  Shortcut name.\n * @example\n *\n *```js\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\n * import { useSelect } from '@wordpress/data';\n * import { createInterpolateElement } from '@wordpress/element';\n * import { sprintf } from '@wordpress/i18n';\n *\n * const ExampleComponent = () => {\n *     const allShortcutKeyCombinations = useSelect(\n *         ( select ) =>\n *             select( keyboardShortcutsStore ).getAllShortcutKeyCombinations(\n *                 'core/editor/next-region'\n *             ),\n *         []\n *     );\n *\n *     return (\n *         allShortcutKeyCombinations.length > 0 && (\n *             <ul>\n *                 { allShortcutKeyCombinations.map(\n *                     ( { character, modifier }, index ) => (\n *                         <li key={ index }>\n *                             { createInterpolateElement(\n *                                 sprintf(\n *                                     'Character: <code>%s</code> / Modifier: <code>%s</code>',\n *                                     character,\n *                                     modifier\n *                                 ),\n *                                 {\n *                                     code: <code />,\n *                                 }\n *                             ) }\n *                         </li>\n *                     )\n *                 ) }\n *             </ul>\n *         )\n *     );\n * };\n *```\n *\n * @return {WPShortcutKeyCombination[]} Key combinations.\n */\nexport const getAllShortcutKeyCombinations = createSelector(\n\t( state, name ) => {\n\t\treturn [\n\t\t\tgetShortcutKeyCombination( state, name ),\n\t\t\t...getShortcutAliases( state, name ),\n\t\t].filter( Boolean );\n\t},\n\t( state, name ) => [ state[ name ] ]\n);\n\n/**\n * Returns the raw representation of all the keyboard combinations of a given shortcut name.\n *\n * @param {Object} state Global state.\n * @param {string} name  Shortcut name.\n *\n * @example\n *\n *```js\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\n * import { useSelect } from '@wordpress/data';\n * import { createInterpolateElement } from '@wordpress/element';\n * import { sprintf } from '@wordpress/i18n';\n *\n * const ExampleComponent = () => {\n *     const allShortcutRawKeyCombinations = useSelect(\n *         ( select ) =>\n *             select( keyboardShortcutsStore ).getAllShortcutRawKeyCombinations(\n *                 'core/editor/next-region'\n *             ),\n *         []\n *     );\n *\n *     return (\n *         allShortcutRawKeyCombinations.length > 0 && (\n *             <ul>\n *                 { allShortcutRawKeyCombinations.map(\n *                     ( shortcutRawKeyCombination, index ) => (\n *                         <li key={ index }>\n *                             { createInterpolateElement(\n *                                 sprintf(\n *                                     ' <code>%s</code>',\n *                                     shortcutRawKeyCombination\n *                                 ),\n *                                 {\n *                                     code: <code />,\n *                                 }\n *                             ) }\n *                         </li>\n *                     )\n *                 ) }\n *             </ul>\n *         )\n *     );\n * };\n *```\n *\n * @return {string[]} Shortcuts.\n */\nexport const getAllShortcutRawKeyCombinations = createSelector(\n\t( state, name ) => {\n\t\treturn getAllShortcutKeyCombinations( state, name ).map(\n\t\t\t( combination ) =>\n\t\t\t\tgetKeyCombinationRepresentation( combination, 'raw' )\n\t\t);\n\t},\n\t( state, name ) => [ state[ name ] ]\n);\n\n/**\n * Returns the shortcut names list for a given category name.\n *\n * @param {Object} state Global state.\n * @param {string} name  Category name.\n * @example\n *\n *```js\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const categoryShortcuts = useSelect(\n *         ( select ) =>\n *             select( keyboardShortcutsStore ).getCategoryShortcuts(\n *                 'block'\n *             ),\n *         []\n *     );\n *\n *     return (\n *         categoryShortcuts.length > 0 && (\n *             <ul>\n *                 { categoryShortcuts.map( ( categoryShortcut ) => (\n *                     <li key={ categoryShortcut }>{ categoryShortcut }</li>\n *                 ) ) }\n *             </ul>\n *         )\n *     );\n * };\n *```\n * @return {string[]} Shortcut names.\n */\nexport const getCategoryShortcuts = createSelector(\n\t( state, categoryName ) => {\n\t\treturn Object.entries( state )\n\t\t\t.filter( ( [ , shortcut ] ) => shortcut.category === categoryName )\n\t\t\t.map( ( [ name ] ) => name );\n\t},\n\t( state ) => [ state ]\n);\n", "/**\n * WordPress dependencies\n */\nimport { useContext, useEffect, useRef } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport useShortcutEventMatch from './use-shortcut-event-match';\nimport { context } from '../context';\n\n/**\n * Attach a keyboard shortcut handler.\n *\n * @param {string}   name               Shortcut name.\n * @param {Function} callback           Shortcut callback.\n * @param {Object}   options            Shortcut options.\n * @param {boolean}  options.isDisabled Whether to disable to shortut.\n */\nexport default function useShortcut(\n\tname,\n\tcallback,\n\t{ isDisabled = false } = {}\n) {\n\tconst shortcuts = useContext( context );\n\tconst isMatch = useShortcutEventMatch();\n\tconst callbackRef = useRef();\n\n\tuseEffect( () => {\n\t\tcallbackRef.current = callback;\n\t}, [ callback ] );\n\n\tuseEffect( () => {\n\t\tif ( isDisabled ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction _callback( event ) {\n\t\t\tif ( isMatch( name, event ) ) {\n\t\t\t\tcallbackRef.current( event );\n\t\t\t}\n\t\t}\n\n\t\tshortcuts.add( _callback );\n\t\treturn () => {\n\t\t\tshortcuts.delete( _callback );\n\t\t};\n\t}, [ name, isDisabled, shortcuts ] );\n}\n", "/**\n * WordPress dependencies\n */\nimport { useSelect } from '@wordpress/data';\nimport { isKeyboardEvent } from '@wordpress/keycodes';\n\n/**\n * Internal dependencies\n */\nimport { store as keyboardShortcutsStore } from '../store';\n\n/**\n * Returns a function to check if a keyboard event matches a shortcut name.\n *\n * @return {Function} A function to check if a keyboard event matches a\n *                    predefined shortcut combination.\n */\nexport default function useShortcutEventMatch() {\n\tconst { getAllShortcutKeyCombinations } = useSelect(\n\t\tkeyboardShortcutsStore\n\t);\n\n\t/**\n\t * A function to check if a keyboard event matches a predefined shortcut\n\t * combination.\n\t *\n\t * @param {string}        name  Shortcut name.\n\t * @param {KeyboardEvent} event Event to check.\n\t *\n\t * @return {boolean} True if the event matches any shortcuts, false if not.\n\t */\n\tfunction isMatch( name, event ) {\n\t\treturn getAllShortcutKeyCombinations( name ).some(\n\t\t\t( { modifier, character } ) => {\n\t\t\t\treturn isKeyboardEvent[ modifier ]( event, character );\n\t\t\t}\n\t\t);\n\t}\n\n\treturn isMatch;\n}\n", "/**\n * WordPress dependencies\n */\nimport { createContext } from '@wordpress/element';\n\nconst globalShortcuts = new Set();\nconst globalListener = ( event ) => {\n\tfor ( const keyboardShortcut of globalShortcuts ) {\n\t\tkeyboardShortcut( event );\n\t}\n};\n\nexport const context = createContext( {\n\tadd: ( shortcut ) => {\n\t\tif ( globalShortcuts.size === 0 ) {\n\t\t\tdocument.addEventListener( 'keydown', globalListener );\n\t\t}\n\t\tglobalShortcuts.add( shortcut );\n\t},\n\tdelete: ( shortcut ) => {\n\t\tglobalShortcuts.delete( shortcut );\n\t\tif ( globalShortcuts.size === 0 ) {\n\t\t\tdocument.removeEventListener( 'keydown', globalListener );\n\t\t}\n\t},\n} );\n\ncontext.displayName = 'KeyboardShortcutsContext';\n", "/**\n * WordPress dependencies\n */\nimport { useState } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { context } from '../context';\n\nconst { Provider } = context;\n\n/**\n * Handles callbacks added to context by `useShortcut`.\n * Adding a provider allows to register contextual shortcuts\n * that are only active when a certain part of the UI is focused.\n *\n * @param {Object} props Props to pass to `div`.\n *\n * @return {Element} Component.\n */\nexport function ShortcutProvider( props ) {\n\tconst [ keyboardShortcuts ] = useState( () => new Set() );\n\n\tfunction onKeyDown( event ) {\n\t\tif ( props.onKeyDown ) {\n\t\t\tprops.onKeyDown( event );\n\t\t}\n\n\t\tfor ( const keyboardShortcut of keyboardShortcuts ) {\n\t\t\tkeyboardShortcut( event );\n\t\t}\n\t}\n\n\t/* eslint-disable jsx-a11y/no-static-element-interactions */\n\treturn (\n\t\t<Provider value={ keyboardShortcuts }>\n\t\t\t<div { ...props } onKeyDown={ onKeyDown } />\n\t\t</Provider>\n\t);\n\t/* eslint-enable jsx-a11y/no-static-element-interactions */\n}\n"],
  "mappings": "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",
  "names": ["import_data", "import_element", "import_data", "import_keycodes", "getAllShortcutKeyCombinations", "import_element"]
}
