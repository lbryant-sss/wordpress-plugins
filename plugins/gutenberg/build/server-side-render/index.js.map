{
  "version": 3,
  "sources": ["vendor-external:react/jsx-runtime", "wordpress-external:@wordpress/element", "wordpress-external:@wordpress/i18n", "wordpress-external:@wordpress/components", "wordpress-external:@wordpress/data", "wordpress-external:@wordpress/compose", "wordpress-external:@wordpress/api-fetch", "wordpress-external:@wordpress/url", "wordpress-external:@wordpress/blocks", "../../packages/server-side-render/src/index.js", "../../packages/server-side-render/src/server-side-render.js", "../../packages/server-side-render/src/hook.js"],
  "sourcesContent": ["module.exports = window.ReactJSXRuntime;", "module.exports = window.wp.element;", "module.exports = window.wp.i18n;", "module.exports = window.wp.components;", "module.exports = window.wp.data;", "module.exports = window.wp.compose;", "module.exports = window.wp.apiFetch;", "module.exports = window.wp.url;", "module.exports = window.wp.blocks;", "/**\n * Internal dependencies\n */\nimport { ServerSideRenderWithPostId } from './server-side-render';\nimport { useServerSideRender } from './hook';\n\n/**\n * A compatibility layer for the `ServerSideRender` component when used with `wp` global namespace.\n *\n * @deprecated Use `ServerSideRender` non-default export instead.\n *\n * @example\n * ```js\n * import ServerSideRender from '@wordpress/server-side-render';\n * ```\n */\nconst ServerSideRenderCompat = ServerSideRenderWithPostId;\nServerSideRenderCompat.ServerSideRender = ServerSideRenderWithPostId;\nServerSideRenderCompat.useServerSideRender = useServerSideRender;\n\nexport { ServerSideRenderWithPostId as ServerSideRender };\nexport { useServerSideRender };\nexport default ServerSideRenderCompat;\n", "/**\n * WordPress dependencies\n */\nimport {\n\tRawHTML,\n\tuseEffect,\n\tuseState,\n\tuseRef,\n\tuseMemo,\n} from '@wordpress/element';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { Placeholder, Spinner } from '@wordpress/components';\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { useServerSideRender } from './hook';\n\nconst EMPTY_OBJECT = {};\n\nfunction DefaultEmptyResponsePlaceholder( { className } ) {\n\treturn (\n\t\t<Placeholder className={ className }>\n\t\t\t{ __( 'Block rendered as empty.' ) }\n\t\t</Placeholder>\n\t);\n}\n\nfunction DefaultErrorResponsePlaceholder( { message, className } ) {\n\tconst errorMessage = sprintf(\n\t\t// translators: %s: error message describing the problem\n\t\t__( 'Error loading block: %s' ),\n\t\tmessage\n\t);\n\treturn <Placeholder className={ className }>{ errorMessage }</Placeholder>;\n}\n\nfunction DefaultLoadingResponsePlaceholder( { children } ) {\n\tconst [ showLoader, setShowLoader ] = useState( false );\n\n\tuseEffect( () => {\n\t\t// Schedule showing the Spinner after 1 second.\n\t\tconst timeout = setTimeout( () => {\n\t\t\tsetShowLoader( true );\n\t\t}, 1000 );\n\t\treturn () => clearTimeout( timeout );\n\t}, [] );\n\n\treturn (\n\t\t<div style={ { position: 'relative' } }>\n\t\t\t{ showLoader && (\n\t\t\t\t<div\n\t\t\t\t\tstyle={ {\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\ttop: '50%',\n\t\t\t\t\t\tleft: '50%',\n\t\t\t\t\t\tmarginTop: '-9px',\n\t\t\t\t\t\tmarginLeft: '-9px',\n\t\t\t\t\t} }\n\t\t\t\t>\n\t\t\t\t\t<Spinner />\n\t\t\t\t</div>\n\t\t\t) }\n\t\t\t<div style={ { opacity: showLoader ? '0.3' : 1 } }>\n\t\t\t\t{ children }\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport function ServerSideRender( props ) {\n\tconst prevContentRef = useRef( '' );\n\tconst {\n\t\tclassName,\n\t\tEmptyResponsePlaceholder = DefaultEmptyResponsePlaceholder,\n\t\tErrorResponsePlaceholder = DefaultErrorResponsePlaceholder,\n\t\tLoadingResponsePlaceholder = DefaultLoadingResponsePlaceholder,\n\t\t...restProps\n\t} = props;\n\n\tconst { content, status, error } = useServerSideRender( restProps );\n\n\t// Store the previous successful HTML response to show while loading.\n\tuseEffect( () => {\n\t\tif ( content ) {\n\t\t\tprevContentRef.current = content;\n\t\t}\n\t}, [ content ] );\n\n\tif ( status === 'loading' ) {\n\t\treturn (\n\t\t\t<LoadingResponsePlaceholder { ...props }>\n\t\t\t\t{ !! prevContentRef.current && (\n\t\t\t\t\t<RawHTML className={ className }>\n\t\t\t\t\t\t{ prevContentRef.current }\n\t\t\t\t\t</RawHTML>\n\t\t\t\t) }\n\t\t\t</LoadingResponsePlaceholder>\n\t\t);\n\t}\n\n\tif ( status === 'success' && ! content ) {\n\t\treturn <EmptyResponsePlaceholder { ...props } />;\n\t}\n\n\tif ( status === 'error' ) {\n\t\treturn <ErrorResponsePlaceholder message={ error } { ...props } />;\n\t}\n\n\treturn <RawHTML className={ className }>{ content }</RawHTML>;\n}\n\n/**\n * A component that renders server-side content for blocks.\n *\n * Note: URL query will include the current post ID when applicable.\n * This is useful for blocks that depend on the context of the current post for rendering.\n *\n * @example\n * ```jsx\n * import { ServerSideRender } from '@wordpress/server-side-render';\n * // Legacy import for WordPress 6.8 and earlier\n * // import { default as ServerSideRender } from '@wordpress/server-side-render';\n *\n * function Example() {\n *   return (\n *     <ServerSideRender\n *       block=\"core/archives\"\n *       attributes={ { showPostCounts: true } }\n *       urlQueryArgs={ { customArg: 'value' } }\n *       className=\"custom-class\"\n *     />\n *   );\n * }\n * ```\n *\n * @param {Object}   props                                    Component props.\n * @param {string}   props.block                              The identifier of the block to be serverside rendered.\n * @param {Object}   props.attributes                         The block attributes to be sent to the server for rendering.\n * @param {string}   [props.className]                        Additional classes to apply to the wrapper element.\n * @param {string}   [props.httpMethod='GET']                 The HTTP method to use ('GET' or 'POST'). Default is 'GET'\n * @param {Object}   [props.urlQueryArgs]                     Additional query arguments to append to the request URL.\n * @param {boolean}  [props.skipBlockSupportAttributes=false] Whether to remove block support attributes before sending.\n * @param {Function} [props.EmptyResponsePlaceholder]         Component rendered when the API response is empty.\n * @param {Function} [props.ErrorResponsePlaceholder]         Component rendered when the API response is an error.\n * @param {Function} [props.LoadingResponsePlaceholder]       Component rendered while the API request is loading.\n *\n * @return {JSX.Element} The rendered server-side content.\n */\nexport function ServerSideRenderWithPostId( {\n\turlQueryArgs = EMPTY_OBJECT,\n\t...props\n} ) {\n\tconst currentPostId = useSelect( ( select ) => {\n\t\t// FIXME: @wordpress/server-side-render should not depend on @wordpress/editor.\n\t\t// It is used by blocks that can be loaded into a *non-post* block editor.\n\t\t// eslint-disable-next-line @wordpress/data-no-store-string-literals\n\t\tconst postId = select( 'core/editor' )?.getCurrentPostId();\n\n\t\t// For templates and template parts we use a custom ID format.\n\t\t// Since they aren't real posts, we don't want to use their ID\n\t\t// for server-side rendering. Since they use a string based ID,\n\t\t// we can assume real post IDs are numbers.\n\t\treturn postId && typeof postId === 'number' ? postId : null;\n\t}, [] );\n\n\tconst newUrlQueryArgs = useMemo( () => {\n\t\tif ( ! currentPostId ) {\n\t\t\treturn urlQueryArgs;\n\t\t}\n\t\treturn {\n\t\t\tpost_id: currentPostId,\n\t\t\t...urlQueryArgs,\n\t\t};\n\t}, [ currentPostId, urlQueryArgs ] );\n\n\treturn <ServerSideRender urlQueryArgs={ newUrlQueryArgs } { ...props } />;\n}\n", "/**\n * WordPress dependencies\n */\nimport { debounce } from '@wordpress/compose';\nimport { useEffect, useState, useRef } from '@wordpress/element';\nimport apiFetch from '@wordpress/api-fetch';\nimport { addQueryArgs } from '@wordpress/url';\nimport { __experimentalSanitizeBlockAttributes } from '@wordpress/blocks';\n\nexport function rendererPath( block, attributes = null, urlQueryArgs = {} ) {\n\treturn addQueryArgs( `/wp/v2/block-renderer/${ block }`, {\n\t\tcontext: 'edit',\n\t\t...( null !== attributes ? { attributes } : {} ),\n\t\t...urlQueryArgs,\n\t} );\n}\n\nexport function removeBlockSupportAttributes( attributes ) {\n\tconst {\n\t\tbackgroundColor,\n\t\tborderColor,\n\t\tfontFamily,\n\t\tfontSize,\n\t\tgradient,\n\t\ttextColor,\n\t\tclassName,\n\t\t...restAttributes\n\t} = attributes;\n\n\tconst {\n\t\tborder,\n\t\tcolor,\n\t\telements,\n\t\tshadow,\n\t\tspacing,\n\t\ttypography,\n\t\t...restStyles\n\t} = attributes?.style || {};\n\n\treturn {\n\t\t...restAttributes,\n\t\tstyle: restStyles,\n\t};\n}\n\n/**\n * @typedef {Object} ServerSideRenderResponse\n * @property {string} status    - The current request status: 'idle', 'loading', 'success', or 'error'.\n * @property {string} [content] - The rendered block content (available when status is 'success').\n * @property {string} [error]   - The error message (available when status is 'error').\n */\n\n/**\n * A hook for server-side rendering a preview of dynamic blocks to display in the editor.\n *\n * Handles fetching server-rendered previews for blocks, managing loading states,\n * and automatically debouncing requests to prevent excessive API calls. It supports both\n * GET and POST requests, with POST requests used for larger attribute payloads.\n *\n * @example\n * Basic usage:\n *\n * ```jsx\n * import { RawHTML } from '@wordpress/element';\n * import { useServerSideRender } from '@wordpress/server-side-render';\n *\n * function MyServerSideRender( { attributes, block } ) {\n *   const { content, status, error } = useServerSideRender( {\n *     attributes,\n *     block,\n *   } );\n *\n *   if ( status === 'loading' ) {\n *     return <div>Loading...</div>;\n *   }\n *\n *   if ( status === 'error' ) {\n *     return <div>Error: { error }</div>;\n *   }\n *\n *   return <RawHTML>{ content }</RawHTML>;\n * }\n * ```\n *\n * @param {Object}  args                                    The hook configuration object.\n * @param {Object}  args.attributes                         The block attributes to be sent to the server for rendering.\n * @param {string}  args.block                              The identifier of the block to be serverside rendered. Example: 'core/archives'.\n * @param {boolean} [args.skipBlockSupportAttributes=false] Whether to remove block support attributes before sending.\n * @param {string}  [args.httpMethod='GET']                 The HTTP method to use ('GET' or 'POST'). Default is 'GET'.\n * @param {Object}  [args.urlQueryArgs]                     Additional query arguments to append to the request URL.\n *\n * @return {ServerSideRenderResponse} The server-side render response object.\n */\nexport function useServerSideRender( args ) {\n\tconst [ response, setResponse ] = useState( { status: 'idle' } );\n\tconst shouldDebounceRef = useRef( false );\n\n\tconst {\n\t\tattributes,\n\t\tblock,\n\t\tskipBlockSupportAttributes = false,\n\t\thttpMethod = 'GET',\n\t\turlQueryArgs,\n\t} = args;\n\n\tlet sanitizedAttributes =\n\t\tattributes &&\n\t\t__experimentalSanitizeBlockAttributes( block, attributes );\n\n\tif ( skipBlockSupportAttributes ) {\n\t\tsanitizedAttributes =\n\t\t\tremoveBlockSupportAttributes( sanitizedAttributes );\n\t}\n\n\t// If httpMethod is 'POST', send the attributes in the request body instead of the URL.\n\t// This allows sending a larger attributes object than in a GET request, where the attributes are in the URL.\n\tconst isPostRequest = 'POST' === httpMethod;\n\tconst urlAttributes = isPostRequest ? null : sanitizedAttributes;\n\tconst path = rendererPath( block, urlAttributes, urlQueryArgs );\n\tconst body = isPostRequest\n\t\t? JSON.stringify( { attributes: sanitizedAttributes ?? null } )\n\t\t: undefined;\n\n\tuseEffect( () => {\n\t\tconst controller = new AbortController();\n\t\tconst debouncedFetch = debounce(\n\t\t\tfunction () {\n\t\t\t\t{\n\t\t\t\t\tsetResponse( { status: 'loading' } );\n\n\t\t\t\t\tapiFetch( {\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\tmethod: isPostRequest ? 'POST' : 'GET',\n\t\t\t\t\t\tbody,\n\t\t\t\t\t\theaders: isPostRequest\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: {},\n\t\t\t\t\t\tsignal: controller.signal,\n\t\t\t\t\t} )\n\t\t\t\t\t\t.then( ( res ) => {\n\t\t\t\t\t\t\tsetResponse( {\n\t\t\t\t\t\t\t\tstatus: 'success',\n\t\t\t\t\t\t\t\tcontent: res ? res.rendered : '',\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} )\n\t\t\t\t\t\t.catch( ( error ) => {\n\t\t\t\t\t\t\t// The request was aborted, do not update the response.\n\t\t\t\t\t\t\tif ( error.name === 'AbortError' ) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tsetResponse( {\n\t\t\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} )\n\t\t\t\t\t\t.finally( () => {\n\t\t\t\t\t\t\t// Debounce requests after first fetch.\n\t\t\t\t\t\t\tshouldDebounceRef.current = true;\n\t\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t},\n\t\t\tshouldDebounceRef.current ? 500 : 0\n\t\t);\n\n\t\tdebouncedFetch();\n\n\t\treturn () => {\n\t\t\tcontroller.abort();\n\t\t\tdebouncedFetch.cancel();\n\t\t};\n\t}, [ path, isPostRequest, body ] );\n\n\treturn response;\n}\n"],
  "mappings": "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",
  "names": ["import_element", "apiFetch"]
}
