{
  "version": 3,
  "sources": ["wordpress-external:@wordpress/i18n", "wordpress-external:@wordpress/url", "../../packages/api-fetch/src/index.ts", "../../packages/api-fetch/src/middlewares/nonce.ts", "../../packages/api-fetch/src/middlewares/namespace-endpoint.ts", "../../packages/api-fetch/src/middlewares/root-url.ts", "../../packages/api-fetch/src/middlewares/preloading.ts", "../../packages/api-fetch/src/middlewares/fetch-all-middleware.ts", "../../packages/api-fetch/src/middlewares/http-v1.ts", "../../packages/api-fetch/src/middlewares/user-locale.ts", "../../packages/api-fetch/src/middlewares/media-upload.ts", "../../packages/api-fetch/src/utils/response.ts", "../../packages/api-fetch/src/middlewares/theme-preview.ts"],
  "sourcesContent": ["module.exports = window.wp.i18n;", "module.exports = window.wp.url;", "/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport createNonceMiddleware from './middlewares/nonce';\nimport createRootURLMiddleware from './middlewares/root-url';\nimport createPreloadingMiddleware from './middlewares/preloading';\nimport fetchAllMiddleware from './middlewares/fetch-all-middleware';\nimport namespaceEndpointMiddleware from './middlewares/namespace-endpoint';\nimport httpV1Middleware from './middlewares/http-v1';\nimport userLocaleMiddleware from './middlewares/user-locale';\nimport mediaUploadMiddleware from './middlewares/media-upload';\nimport createThemePreviewMiddleware from './middlewares/theme-preview';\nimport {\n\tparseResponseAndNormalizeError,\n\tparseAndThrowError,\n} from './utils/response';\nimport type {\n\tAPIFetchMiddleware,\n\tAPIFetchOptions,\n\tFetchHandler,\n} from './types';\n\n/**\n * Default set of header values which should be sent with every request unless\n * explicitly provided through apiFetch options.\n */\nconst DEFAULT_HEADERS: APIFetchOptions[ 'headers' ] = {\n\t// The backend uses the Accept header as a condition for considering an\n\t// incoming request as a REST request.\n\t//\n\t// See: https://core.trac.wordpress.org/ticket/44534\n\tAccept: 'application/json, */*;q=0.1',\n};\n\n/**\n * Default set of fetch option values which should be sent with every request\n * unless explicitly provided through apiFetch options.\n */\nconst DEFAULT_OPTIONS: APIFetchOptions = {\n\tcredentials: 'include',\n};\n\nconst middlewares: Array< APIFetchMiddleware > = [\n\tuserLocaleMiddleware,\n\tnamespaceEndpointMiddleware,\n\thttpV1Middleware,\n\tfetchAllMiddleware,\n];\n\n/**\n * Register a middleware\n *\n * @param middleware\n */\nfunction registerMiddleware( middleware: APIFetchMiddleware ) {\n\tmiddlewares.unshift( middleware );\n}\n\nconst defaultFetchHandler: FetchHandler = ( nextOptions ) => {\n\tconst { url, path, data, parse = true, ...remainingOptions } = nextOptions;\n\tlet { body, headers } = nextOptions;\n\n\t// Merge explicitly-provided headers with default values.\n\theaders = { ...DEFAULT_HEADERS, ...headers };\n\n\t// The `data` property is a shorthand for sending a JSON body.\n\tif ( data ) {\n\t\tbody = JSON.stringify( data );\n\t\theaders[ 'Content-Type' ] = 'application/json';\n\t}\n\n\tconst responsePromise = globalThis.fetch(\n\t\t// Fall back to explicitly passing `window.location` which is the behavior if `undefined` is passed.\n\t\turl || path || window.location.href,\n\t\t{\n\t\t\t...DEFAULT_OPTIONS,\n\t\t\t...remainingOptions,\n\t\t\tbody,\n\t\t\theaders,\n\t\t}\n\t);\n\n\treturn responsePromise.then(\n\t\t( response ) => {\n\t\t\t// If the response is not 2xx, still parse the response body as JSON\n\t\t\t// but throw the JSON as error.\n\t\t\tif ( ! response.ok ) {\n\t\t\t\treturn parseAndThrowError( response, parse );\n\t\t\t}\n\n\t\t\treturn parseResponseAndNormalizeError( response, parse );\n\t\t},\n\t\t( err ) => {\n\t\t\t// Re-throw AbortError for the users to handle it themselves.\n\t\t\tif ( err && err.name === 'AbortError' ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\n\t\t\t// If the browser reports being offline, we'll just assume that\n\t\t\t// this is why the request failed.\n\t\t\tif ( ! globalThis.navigator.onLine ) {\n\t\t\t\tthrow {\n\t\t\t\t\tcode: 'offline_error',\n\t\t\t\t\tmessage: __(\n\t\t\t\t\t\t'Unable to connect. Please check your Internet connection.'\n\t\t\t\t\t),\n\t\t\t\t};\n\t\t\t}\n\n\t\t\t// Hard to diagnose further due to how Window.fetch reports errors.\n\t\t\tthrow {\n\t\t\t\tcode: 'fetch_error',\n\t\t\t\tmessage: __(\n\t\t\t\t\t'Could not get a valid response from the server.'\n\t\t\t\t),\n\t\t\t};\n\t\t}\n\t);\n};\n\nlet fetchHandler = defaultFetchHandler;\n\n/**\n * Defines a custom fetch handler for making the requests that will override\n * the default one using window.fetch\n *\n * @param newFetchHandler The new fetch handler\n */\nfunction setFetchHandler( newFetchHandler: FetchHandler ) {\n\tfetchHandler = newFetchHandler;\n}\n\ninterface apiFetch {\n\t< T, Parse extends boolean = true >(\n\t\toptions: APIFetchOptions< Parse >\n\t): Promise< Parse extends true ? T : Response >;\n\tnonceEndpoint?: string;\n\tnonceMiddleware?: ReturnType< typeof createNonceMiddleware >;\n\tuse: ( middleware: APIFetchMiddleware ) => void;\n\tsetFetchHandler: ( newFetchHandler: FetchHandler ) => void;\n\tcreateNonceMiddleware: typeof createNonceMiddleware;\n\tcreatePreloadingMiddleware: typeof createPreloadingMiddleware;\n\tcreateRootURLMiddleware: typeof createRootURLMiddleware;\n\tfetchAllMiddleware: typeof fetchAllMiddleware;\n\tmediaUploadMiddleware: typeof mediaUploadMiddleware;\n\tcreateThemePreviewMiddleware: typeof createThemePreviewMiddleware;\n}\n\n/**\n * Fetch\n *\n * @param options The options for the fetch.\n * @return A promise representing the request processed via the registered middlewares.\n */\nconst apiFetch: apiFetch = ( options ) => {\n\t// creates a nested function chain that calls all middlewares and finally the `fetchHandler`,\n\t// converting `middlewares = [ m1, m2, m3 ]` into:\n\t// ```\n\t// opts1 => m1( opts1, opts2 => m2( opts2, opts3 => m3( opts3, fetchHandler ) ) );\n\t// ```\n\tconst enhancedHandler = middlewares.reduceRight< FetchHandler >(\n\t\t( next, middleware ) => {\n\t\t\treturn ( workingOptions ) => middleware( workingOptions, next );\n\t\t},\n\t\tfetchHandler\n\t);\n\n\treturn enhancedHandler( options ).catch( ( error ) => {\n\t\tif ( error.code !== 'rest_cookie_invalid_nonce' ) {\n\t\t\treturn Promise.reject( error );\n\t\t}\n\n\t\t// If the nonce is invalid, refresh it and try again.\n\t\treturn globalThis\n\t\t\t.fetch( apiFetch.nonceEndpoint! )\n\t\t\t.then( ( response ) => {\n\t\t\t\t// If the nonce refresh fails, it means we failed to recover from the original\n\t\t\t\t// `rest_cookie_invalid_nonce` error and that it's time to finally re-throw it.\n\t\t\t\tif ( ! response.ok ) {\n\t\t\t\t\treturn Promise.reject( error );\n\t\t\t\t}\n\n\t\t\t\treturn response.text();\n\t\t\t} )\n\t\t\t.then( ( text ) => {\n\t\t\t\tapiFetch.nonceMiddleware!.nonce = text;\n\t\t\t\treturn apiFetch( options );\n\t\t\t} );\n\t} );\n};\n\napiFetch.use = registerMiddleware;\napiFetch.setFetchHandler = setFetchHandler;\n\napiFetch.createNonceMiddleware = createNonceMiddleware;\napiFetch.createPreloadingMiddleware = createPreloadingMiddleware;\napiFetch.createRootURLMiddleware = createRootURLMiddleware;\napiFetch.fetchAllMiddleware = fetchAllMiddleware;\napiFetch.mediaUploadMiddleware = mediaUploadMiddleware;\napiFetch.createThemePreviewMiddleware = createThemePreviewMiddleware;\n\nexport default apiFetch;\nexport * from './types';\n", "/**\n * Internal dependencies\n */\nimport type { APIFetchMiddleware } from '../types';\n\n/**\n * @param nonce\n *\n * @return  A middleware to enhance a request with a nonce.\n */\nfunction createNonceMiddleware(\n\tnonce: string\n): APIFetchMiddleware & { nonce: string } {\n\tconst middleware: APIFetchMiddleware & { nonce: string } = (\n\t\toptions,\n\t\tnext\n\t) => {\n\t\tconst { headers = {} } = options;\n\n\t\t// If an 'X-WP-Nonce' header (or any case-insensitive variation\n\t\t// thereof) was specified, no need to add a nonce header.\n\t\tfor ( const headerName in headers ) {\n\t\t\tif (\n\t\t\t\theaderName.toLowerCase() === 'x-wp-nonce' &&\n\t\t\t\theaders[ headerName ] === middleware.nonce\n\t\t\t) {\n\t\t\t\treturn next( options );\n\t\t\t}\n\t\t}\n\n\t\treturn next( {\n\t\t\t...options,\n\t\t\theaders: {\n\t\t\t\t...headers,\n\t\t\t\t'X-WP-Nonce': middleware.nonce,\n\t\t\t},\n\t\t} );\n\t};\n\n\tmiddleware.nonce = nonce;\n\n\treturn middleware;\n}\n\nexport default createNonceMiddleware;\n", "/**\n * Internal dependencies\n */\nimport type { APIFetchMiddleware } from '../types';\n\nconst namespaceAndEndpointMiddleware: APIFetchMiddleware = (\n\toptions,\n\tnext\n) => {\n\tlet path = options.path;\n\tlet namespaceTrimmed, endpointTrimmed;\n\n\tif (\n\t\ttypeof options.namespace === 'string' &&\n\t\ttypeof options.endpoint === 'string'\n\t) {\n\t\tnamespaceTrimmed = options.namespace.replace( /^\\/|\\/$/g, '' );\n\t\tendpointTrimmed = options.endpoint.replace( /^\\//, '' );\n\t\tif ( endpointTrimmed ) {\n\t\t\tpath = namespaceTrimmed + '/' + endpointTrimmed;\n\t\t} else {\n\t\t\tpath = namespaceTrimmed;\n\t\t}\n\t}\n\n\tdelete options.namespace;\n\tdelete options.endpoint;\n\n\treturn next( {\n\t\t...options,\n\t\tpath,\n\t} );\n};\n\nexport default namespaceAndEndpointMiddleware;\n", "/**\n * Internal dependencies\n */\nimport type { APIFetchMiddleware } from '../types';\nimport namespaceAndEndpointMiddleware from './namespace-endpoint';\n\n/**\n * @param rootURL\n * @return  Root URL middleware.\n */\nconst createRootURLMiddleware =\n\t( rootURL: string ): APIFetchMiddleware =>\n\t( options, next ) => {\n\t\treturn namespaceAndEndpointMiddleware( options, ( optionsWithPath ) => {\n\t\t\tlet url = optionsWithPath.url;\n\t\t\tlet path = optionsWithPath.path;\n\t\t\tlet apiRoot;\n\n\t\t\tif ( typeof path === 'string' ) {\n\t\t\t\tapiRoot = rootURL;\n\n\t\t\t\tif ( -1 !== rootURL.indexOf( '?' ) ) {\n\t\t\t\t\tpath = path.replace( '?', '&' );\n\t\t\t\t}\n\n\t\t\t\tpath = path.replace( /^\\//, '' );\n\n\t\t\t\t// API root may already include query parameter prefix if site is\n\t\t\t\t// configured to use plain permalinks.\n\t\t\t\tif (\n\t\t\t\t\t'string' === typeof apiRoot &&\n\t\t\t\t\t-1 !== apiRoot.indexOf( '?' )\n\t\t\t\t) {\n\t\t\t\t\tpath = path.replace( '?', '&' );\n\t\t\t\t}\n\n\t\t\t\turl = apiRoot + path;\n\t\t\t}\n\n\t\t\treturn next( {\n\t\t\t\t...optionsWithPath,\n\t\t\t\turl,\n\t\t\t} );\n\t\t} );\n\t};\n\nexport default createRootURLMiddleware;\n", "/**\n * WordPress dependencies\n */\nimport { addQueryArgs, getQueryArgs, normalizePath } from '@wordpress/url';\n\n/**\n * Internal dependencies\n */\nimport type { APIFetchMiddleware } from '../types';\n\n/**\n * @param preloadedData\n * @return Preloading middleware.\n */\nfunction createPreloadingMiddleware(\n\tpreloadedData: Record< string, any >\n): APIFetchMiddleware {\n\tconst cache = Object.fromEntries(\n\t\tObject.entries( preloadedData ).map( ( [ path, data ] ) => [\n\t\t\tnormalizePath( path ),\n\t\t\tdata,\n\t\t] )\n\t);\n\n\treturn ( options, next ) => {\n\t\tconst { parse = true } = options;\n\t\tlet rawPath = options.path;\n\t\tif ( ! rawPath && options.url ) {\n\t\t\tconst { rest_route: pathFromQuery, ...queryArgs } = getQueryArgs(\n\t\t\t\toptions.url\n\t\t\t);\n\n\t\t\tif ( typeof pathFromQuery === 'string' ) {\n\t\t\t\trawPath = addQueryArgs( pathFromQuery, queryArgs );\n\t\t\t}\n\t\t}\n\n\t\tif ( typeof rawPath !== 'string' ) {\n\t\t\treturn next( options );\n\t\t}\n\n\t\tconst method = options.method || 'GET';\n\t\tconst path = normalizePath( rawPath );\n\n\t\tif ( 'GET' === method && cache[ path ] ) {\n\t\t\tconst cacheData = cache[ path ];\n\n\t\t\t// Unsetting the cache key ensures that the data is only used a single time.\n\t\t\tdelete cache[ path ];\n\n\t\t\treturn prepareResponse( cacheData, !! parse );\n\t\t} else if (\n\t\t\t'OPTIONS' === method &&\n\t\t\tcache[ method ] &&\n\t\t\tcache[ method ][ path ]\n\t\t) {\n\t\t\tconst cacheData = cache[ method ][ path ];\n\n\t\t\t// Unsetting the cache key ensures that the data is only used a single time.\n\t\t\tdelete cache[ method ][ path ];\n\n\t\t\treturn prepareResponse( cacheData, !! parse );\n\t\t}\n\n\t\treturn next( options );\n\t};\n}\n\n/**\n * This is a helper function that sends a success response.\n *\n * @param responseData\n * @param parse\n * @return Promise with the response.\n */\nfunction prepareResponse(\n\tresponseData: Record< string, any >,\n\tparse: boolean\n) {\n\tif ( parse ) {\n\t\treturn Promise.resolve( responseData.body );\n\t}\n\n\ttry {\n\t\treturn Promise.resolve(\n\t\t\tnew window.Response( JSON.stringify( responseData.body ), {\n\t\t\t\tstatus: 200,\n\t\t\t\tstatusText: 'OK',\n\t\t\t\theaders: responseData.headers,\n\t\t\t} )\n\t\t);\n\t} catch {\n\t\t// See: https://github.com/WordPress/gutenberg/issues/67358#issuecomment-2621163926.\n\t\tObject.entries(\n\t\t\tresponseData.headers as Record< string, string >\n\t\t).forEach( ( [ key, value ] ) => {\n\t\t\tif ( key.toLowerCase() === 'link' ) {\n\t\t\t\tresponseData.headers[ key ] = value.replace(\n\t\t\t\t\t/<([^>]+)>/,\n\t\t\t\t\t( _, url ) => `<${ encodeURI( url ) }>`\n\t\t\t\t);\n\t\t\t}\n\t\t} );\n\n\t\treturn Promise.resolve(\n\t\t\tparse\n\t\t\t\t? responseData.body\n\t\t\t\t: new window.Response( JSON.stringify( responseData.body ), {\n\t\t\t\t\t\tstatus: 200,\n\t\t\t\t\t\tstatusText: 'OK',\n\t\t\t\t\t\theaders: responseData.headers,\n\t\t\t\t  } )\n\t\t);\n\t}\n}\n\nexport default createPreloadingMiddleware;\n", "/**\n * WordPress dependencies\n */\nimport { addQueryArgs } from '@wordpress/url';\n\n/**\n * Internal dependencies\n */\nimport apiFetch from '..';\nimport type { APIFetchMiddleware, APIFetchOptions } from '../types';\n\n/**\n * Apply query arguments to both URL and Path, whichever is present.\n *\n * @param {APIFetchOptions}                   props     The request options\n * @param {Record< string, string | number >} queryArgs\n * @return  The request with the modified query args\n */\nconst modifyQuery = (\n\t{ path, url, ...options }: APIFetchOptions,\n\tqueryArgs: Record< string, string | number >\n): APIFetchOptions => ( {\n\t...options,\n\turl: url && addQueryArgs( url, queryArgs ),\n\tpath: path && addQueryArgs( path, queryArgs ),\n} );\n\n/**\n * Duplicates parsing functionality from apiFetch.\n *\n * @param response\n * @return Parsed response json.\n */\nconst parseResponse = ( response: Response ) =>\n\tresponse.json ? response.json() : Promise.reject( response );\n\n/**\n * @param linkHeader\n * @return The parsed link header.\n */\nconst parseLinkHeader = ( linkHeader: string | null ) => {\n\tif ( ! linkHeader ) {\n\t\treturn {};\n\t}\n\tconst match = linkHeader.match( /<([^>]+)>; rel=\"next\"/ );\n\treturn match\n\t\t? {\n\t\t\t\tnext: match[ 1 ],\n\t\t  }\n\t\t: {};\n};\n\n/**\n * @param response\n * @return  The next page URL.\n */\nconst getNextPageUrl = ( response: Response ) => {\n\tconst { next } = parseLinkHeader( response.headers.get( 'link' ) );\n\treturn next;\n};\n\n/**\n * @param options\n * @return True if the request contains an unbounded query.\n */\nconst requestContainsUnboundedQuery = ( options: APIFetchOptions ) => {\n\tconst pathIsUnbounded =\n\t\t!! options.path && options.path.indexOf( 'per_page=-1' ) !== -1;\n\tconst urlIsUnbounded =\n\t\t!! options.url && options.url.indexOf( 'per_page=-1' ) !== -1;\n\treturn pathIsUnbounded || urlIsUnbounded;\n};\n\n/**\n * The REST API enforces an upper limit on the per_page option. To handle large\n * collections, apiFetch consumers can pass `per_page=-1`; this middleware will\n * then recursively assemble a full response array from all available pages.\n * @param options\n * @param next\n */\nconst fetchAllMiddleware: APIFetchMiddleware = async ( options, next ) => {\n\tif ( options.parse === false ) {\n\t\t// If a consumer has opted out of parsing, do not apply middleware.\n\t\treturn next( options );\n\t}\n\tif ( ! requestContainsUnboundedQuery( options ) ) {\n\t\t// If neither url nor path is requesting all items, do not apply middleware.\n\t\treturn next( options );\n\t}\n\n\t// Retrieve requested page of results.\n\tconst response = await apiFetch( {\n\t\t...modifyQuery( options, {\n\t\t\tper_page: 100,\n\t\t} ),\n\t\t// Ensure headers are returned for page 1.\n\t\tparse: false,\n\t} );\n\n\tconst results = await parseResponse( response );\n\n\tif ( ! Array.isArray( results ) ) {\n\t\t// We have no reliable way of merging non-array results.\n\t\treturn results;\n\t}\n\n\tlet nextPage = getNextPageUrl( response );\n\n\tif ( ! nextPage ) {\n\t\t// There are no further pages to request.\n\t\treturn results;\n\t}\n\n\t// Iteratively fetch all remaining pages until no \"next\" header is found.\n\tlet mergedResults = ( [] as Array< any > ).concat( results );\n\twhile ( nextPage ) {\n\t\tconst nextResponse = await apiFetch( {\n\t\t\t...options,\n\t\t\t// Ensure the URL for the next page is used instead of any provided path.\n\t\t\tpath: undefined,\n\t\t\turl: nextPage,\n\t\t\t// Ensure we still get headers so we can identify the next page.\n\t\t\tparse: false,\n\t\t} );\n\t\tconst nextResults = await parseResponse( nextResponse );\n\t\tmergedResults = mergedResults.concat( nextResults );\n\t\tnextPage = getNextPageUrl( nextResponse );\n\t}\n\treturn mergedResults;\n};\n\nexport default fetchAllMiddleware;\n", "/**\n * Internal dependencies\n */\nimport type { APIFetchMiddleware } from '../types';\n\n/**\n * Set of HTTP methods which are eligible to be overridden.\n */\nconst OVERRIDE_METHODS = new Set( [ 'PATCH', 'PUT', 'DELETE' ] );\n\n/**\n * Default request method.\n *\n * \"A request has an associated method (a method). Unless stated otherwise it\n * is `GET`.\"\n *\n * @see  https://fetch.spec.whatwg.org/#requests\n */\nconst DEFAULT_METHOD = 'GET';\n\n/**\n * API Fetch middleware which overrides the request method for HTTP v1\n * compatibility leveraging the REST API X-HTTP-Method-Override header.\n *\n * @param options\n * @param next\n */\nconst httpV1Middleware: APIFetchMiddleware = ( options, next ) => {\n\tconst { method = DEFAULT_METHOD } = options;\n\tif ( OVERRIDE_METHODS.has( method.toUpperCase() ) ) {\n\t\toptions = {\n\t\t\t...options,\n\t\t\theaders: {\n\t\t\t\t...options.headers,\n\t\t\t\t'X-HTTP-Method-Override': method,\n\t\t\t\t'Content-Type': 'application/json',\n\t\t\t},\n\t\t\tmethod: 'POST',\n\t\t};\n\t}\n\n\treturn next( options );\n};\n\nexport default httpV1Middleware;\n", "/**\n * WordPress dependencies\n */\nimport { addQueryArgs, hasQueryArg } from '@wordpress/url';\n\n/**\n * Internal dependencies\n */\nimport type { APIFetchMiddleware } from '../types';\n\nconst userLocaleMiddleware: APIFetchMiddleware = ( options, next ) => {\n\tif (\n\t\ttypeof options.url === 'string' &&\n\t\t! hasQueryArg( options.url, '_locale' )\n\t) {\n\t\toptions.url = addQueryArgs( options.url, { _locale: 'user' } );\n\t}\n\n\tif (\n\t\ttypeof options.path === 'string' &&\n\t\t! hasQueryArg( options.path, '_locale' )\n\t) {\n\t\toptions.path = addQueryArgs( options.path, { _locale: 'user' } );\n\t}\n\n\treturn next( options );\n};\n\nexport default userLocaleMiddleware;\n", "/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Internal dependencies\n */\nimport {\n\tparseAndThrowError,\n\tparseResponseAndNormalizeError,\n} from '../utils/response';\nimport type { APIFetchOptions, APIFetchMiddleware } from '../types';\n\n/**\n * @param options\n * @return True if the request is for media upload.\n */\nfunction isMediaUploadRequest( options: APIFetchOptions ) {\n\tconst isCreateMethod = !! options.method && options.method === 'POST';\n\tconst isMediaEndpoint =\n\t\t( !! options.path && options.path.indexOf( '/wp/v2/media' ) !== -1 ) ||\n\t\t( !! options.url && options.url.indexOf( '/wp/v2/media' ) !== -1 );\n\n\treturn isMediaEndpoint && isCreateMethod;\n}\n\n/**\n * Middleware handling media upload failures and retries.\n * @param options\n * @param next\n */\nconst mediaUploadMiddleware: APIFetchMiddleware = ( options, next ) => {\n\tif ( ! isMediaUploadRequest( options ) ) {\n\t\treturn next( options );\n\t}\n\n\tlet retries = 0;\n\tconst maxRetries = 5;\n\n\t/**\n\t * @param attachmentId\n\t * @return Processed post response.\n\t */\n\tconst postProcess = ( attachmentId: string ): Promise< any > => {\n\t\tretries++;\n\t\treturn next( {\n\t\t\tpath: `/wp/v2/media/${ attachmentId }/post-process`,\n\t\t\tmethod: 'POST',\n\t\t\tdata: { action: 'create-image-subsizes' },\n\t\t\tparse: false,\n\t\t} ).catch( () => {\n\t\t\tif ( retries < maxRetries ) {\n\t\t\t\treturn postProcess( attachmentId );\n\t\t\t}\n\t\t\tnext( {\n\t\t\t\tpath: `/wp/v2/media/${ attachmentId }?force=true`,\n\t\t\t\tmethod: 'DELETE',\n\t\t\t} );\n\n\t\t\treturn Promise.reject();\n\t\t} );\n\t};\n\n\treturn next( { ...options, parse: false } )\n\t\t.catch( ( response: Response ) => {\n\t\t\t// `response` could actually be an error thrown by `defaultFetchHandler`.\n\t\t\tif ( ! ( response instanceof globalThis.Response ) ) {\n\t\t\t\treturn Promise.reject( response );\n\t\t\t}\n\n\t\t\tconst attachmentId = response.headers.get(\n\t\t\t\t'x-wp-upload-attachment-id'\n\t\t\t);\n\t\t\tif (\n\t\t\t\tresponse.status >= 500 &&\n\t\t\t\tresponse.status < 600 &&\n\t\t\t\tattachmentId\n\t\t\t) {\n\t\t\t\treturn postProcess( attachmentId ).catch( () => {\n\t\t\t\t\tif ( options.parse !== false ) {\n\t\t\t\t\t\treturn Promise.reject( {\n\t\t\t\t\t\t\tcode: 'post_process',\n\t\t\t\t\t\t\tmessage: __(\n\t\t\t\t\t\t\t\t'Media upload failed. If this is a photo or a large image, please scale it down and try again.'\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Promise.reject( response );\n\t\t\t\t} );\n\t\t\t}\n\t\t\treturn parseAndThrowError( response, options.parse );\n\t\t} )\n\t\t.then( ( response: Response ) =>\n\t\t\tparseResponseAndNormalizeError( response, options.parse )\n\t\t);\n};\n\nexport default mediaUploadMiddleware;\n", "/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\n\n/**\n * Calls the `json` function on the Response, throwing an error if the response\n * doesn't have a json function or if parsing the json itself fails.\n *\n * @param response\n * @return Parsed response.\n */\nasync function parseJsonAndNormalizeError( response: Response ) {\n\ttry {\n\t\treturn await response.json();\n\t} catch {\n\t\tthrow {\n\t\t\tcode: 'invalid_json',\n\t\t\tmessage: __( 'The response is not a valid JSON response.' ),\n\t\t};\n\t}\n}\n\n/**\n * Parses the apiFetch response properly and normalize response errors.\n *\n * @param response\n * @param shouldParseResponse\n *\n * @return Parsed response.\n */\nexport async function parseResponseAndNormalizeError(\n\tresponse: Response,\n\tshouldParseResponse = true\n) {\n\tif ( ! shouldParseResponse ) {\n\t\treturn response;\n\t}\n\n\tif ( response.status === 204 ) {\n\t\treturn null;\n\t}\n\n\treturn await parseJsonAndNormalizeError( response );\n}\n\n/**\n * Parses a response, throwing an error if parsing the response fails.\n *\n * @param response\n * @param shouldParseResponse\n * @return Never returns, always throws.\n */\nexport async function parseAndThrowError(\n\tresponse: Response,\n\tshouldParseResponse = true\n) {\n\tif ( ! shouldParseResponse ) {\n\t\tthrow response;\n\t}\n\n\t// Parse the response JSON and throw it as an error.\n\tthrow await parseJsonAndNormalizeError( response );\n}\n", "/**\n * WordPress dependencies\n */\nimport { addQueryArgs, getQueryArg, removeQueryArgs } from '@wordpress/url';\n/**\n * Internal dependencies\n */\nimport type { APIFetchMiddleware } from '../types';\n\n/**\n * This appends a `wp_theme_preview` parameter to the REST API request URL if\n * the admin URL contains a `theme` GET parameter.\n *\n * If the REST API request URL has contained the `wp_theme_preview` parameter as `''`,\n * then bypass this middleware.\n *\n * @param themePath\n * @return  Preloading middleware.\n */\nconst createThemePreviewMiddleware =\n\t( themePath: Record< string, any > ): APIFetchMiddleware =>\n\t( options, next ) => {\n\t\tif ( typeof options.url === 'string' ) {\n\t\t\tconst wpThemePreview = getQueryArg(\n\t\t\t\toptions.url,\n\t\t\t\t'wp_theme_preview'\n\t\t\t);\n\t\t\tif ( wpThemePreview === undefined ) {\n\t\t\t\toptions.url = addQueryArgs( options.url, {\n\t\t\t\t\twp_theme_preview: themePath,\n\t\t\t\t} );\n\t\t\t} else if ( wpThemePreview === '' ) {\n\t\t\t\toptions.url = removeQueryArgs(\n\t\t\t\t\toptions.url,\n\t\t\t\t\t'wp_theme_preview'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif ( typeof options.path === 'string' ) {\n\t\t\tconst wpThemePreview = getQueryArg(\n\t\t\t\toptions.path,\n\t\t\t\t'wp_theme_preview'\n\t\t\t);\n\t\t\tif ( wpThemePreview === undefined ) {\n\t\t\t\toptions.path = addQueryArgs( options.path, {\n\t\t\t\t\twp_theme_preview: themePath,\n\t\t\t\t} );\n\t\t\t} else if ( wpThemePreview === '' ) {\n\t\t\t\toptions.path = removeQueryArgs(\n\t\t\t\t\toptions.path,\n\t\t\t\t\t'wp_theme_preview'\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\treturn next( options );\n\t};\n\nexport default createThemePreviewMiddleware;\n"],
  "mappings": "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",
  "names": ["require_i18n", "__commonJSMin", "exports", "module", "require_url", "__commonJSMin", "exports", "module", "index_exports", "__export", "index_default", "import_i18n", "createNonceMiddleware", "nonce", "middleware", "options", "next", "headers", "headerName", "nonce_default", "namespaceAndEndpointMiddleware", "options", "next", "path", "namespaceTrimmed", "endpointTrimmed", "namespace_endpoint_default", "createRootURLMiddleware", "rootURL", "options", "next", "namespace_endpoint_default", "optionsWithPath", "url", "path", "apiRoot", "root_url_default", "import_url", "createPreloadingMiddleware", "preloadedData", "cache", "path", "data", "options", "next", "parse", "rawPath", "pathFromQuery", "queryArgs", "method", "cacheData", "prepareResponse", "responseData", "key", "value", "_", "url", "preloading_default", "import_url", "modifyQuery", "path", "url", "options", "queryArgs", "parseResponse", "response", "parseLinkHeader", "linkHeader", "match", "getNextPageUrl", "next", "requestContainsUnboundedQuery", "pathIsUnbounded", "urlIsUnbounded", "fetchAllMiddleware", "index_default", "results", "nextPage", "mergedResults", "nextResponse", "nextResults", "fetch_all_middleware_default", "OVERRIDE_METHODS", "DEFAULT_METHOD", "httpV1Middleware", "options", "next", "method", "http_v1_default", "import_url", "userLocaleMiddleware", "options", "next", "user_locale_default", "import_i18n", "import_i18n", "parseJsonAndNormalizeError", "response", "parseResponseAndNormalizeError", "shouldParseResponse", "parseAndThrowError", "isMediaUploadRequest", "options", "isCreateMethod", "mediaUploadMiddleware", "next", "retries", "maxRetries", "postProcess", "attachmentId", "response", "parseAndThrowError", "parseResponseAndNormalizeError", "media_upload_default", "import_url", "createThemePreviewMiddleware", "themePath", "options", "next", "wpThemePreview", "theme_preview_default", "DEFAULT_HEADERS", "DEFAULT_OPTIONS", "middlewares", "user_locale_default", "namespace_endpoint_default", "http_v1_default", "fetch_all_middleware_default", "registerMiddleware", "middleware", "defaultFetchHandler", "nextOptions", "url", "path", "data", "parse", "remainingOptions", "body", "headers", "response", "parseResponseAndNormalizeError", "parseAndThrowError", "err", "fetchHandler", "setFetchHandler", "newFetchHandler", "apiFetch", "options", "next", "workingOptions", "error", "text", "nonce_default", "preloading_default", "root_url_default", "media_upload_default", "theme_preview_default", "index_default"]
}
